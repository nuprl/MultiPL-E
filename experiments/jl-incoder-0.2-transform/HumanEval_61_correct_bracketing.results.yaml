language: jl
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwylxdnp.jl:68\nin expression starting at\
    \ /tmp/tmpwwylxdnp.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmauzoarr.jl:68\nin expression starting at\
    \ /tmp/tmpmauzoarr.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsali41zw.jl:67\nin expression starting at\
    \ /tmp/tmpsali41zw.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsali41zw.jl:67\nin expression starting at\
    \ /tmp/tmpsali41zw.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Determine whether brackets are correctly nested.\n    \n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk6rq6fnh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk6rq6fnh.jl:1\n\
    in expression starting at /tmp/tmpk6rq6fnh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp72__t1m7.jl:68\nin expression starting at\
    \ /tmp/tmp72__t1m7.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpypaqg_o1.jl:14\nin expression starting at /tmp/tmpypaqg_o1.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"-\", \"\\\
    -\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"%\", \"\\\
    %\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    @\", \"\\@\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"\\\\\", \"\\\\\\\\\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\\\\\\\"\")\n    brackets = brackets.replace(\"'\", \"\\\\'\")\n   \
    \ brackets = brackets.replace(\"`\", \"\\`\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq77e3oy5.jl:14\nin expression starting at /tmp/tmpq77e3oy5.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zqvbcyu.jl:54\nin expression starting at\
    \ /tmp/tmp5zqvbcyu.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pi13bjd.jl:14\nin expression starting at /tmp/tmp_pi13bjd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpghi77pjm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpghi77pjm.jl:1\n\
    in expression starting at /tmp/tmpghi77pjm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    )(\", \"}(\")\n    brackets = brackets.replace(\")(\", \"}(\")\n    brackets =\
    \ brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"\
    (\")\n    brackets = brackets.replace(\")(\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\")(\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\")(\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\")(\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\")(\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\")(\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\")(\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\")(\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\")(\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"(\")\n    brackets = brackets.replace(\"{(\", \"(\")\n\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdbmj_huu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdbmj_huu.jl:1\n\
    in expression starting at /tmp/tmpdbmj_huu.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"-\", \"\\\
    -\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz5a8l3hd.jl:14\nin expression starting at /tmp/tmpz5a8l3hd.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    ,\", \"|\")\n    brackets = brackets.replace(\":\", \"|\")\n    brackets = brackets.replace(\"\
    ;\", \"|\")\n    brackets = brackets.replace(\"=\", \"|\")\n    brackets = brackets.replace(\"\
    !\", \"|\")\n    brackets = brackets.replace(\"<\", \"|\")\n    brackets = brackets.replace(\"\
    >\", \"|\")\n    brackets = brackets.replace(\"?\", \"|\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \"|\")\n    brackets = brackets.replace(\"\
    :\", \"|\")\n    brackets = brackets.replace(\";\", \"|\")\n    brackets = brackets.replace(\"\
    =\", \"|\")\n    brackets = brackets.replace(\"!\", \"|\")\n    brackets = brackets.replace(\"\
    <\", \"|\")\n    brackets = brackets.replace(\">\", \"|\")\n    brackets = brackets.replace(\"\
    ?\", \"|\")\n    brackets = brackets.replace(\"|\", \"|\")\n    brackets = brackets.replace(\"\
    ,\", \"|\")\n    brackets = brackets.replace(\":\", \"|\")\n    brackets = brackets.replace(\"\
    ;\", \"|\")\n    brackets = brackets.replace(\"=\", \"|\")\n    brackets = brackets.replace(\"\
    !\", \"|\")\n    brackets = brackets.replace(\"<\", \"|\")\n    brackets = brackets.replace(\"\
    >\", \"|\")\n    brackets = brackets.replace(\"?\", \"|\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\",\", \"|\")\n    brackets = brackets.replace(\"\
    :\", \"|\")\n    brackets = brackets.replace(\";\", \"|\")\n    brackets = brackets.replace(\"\
    =\", \"|\")\n    brackets = brackets.replace(\"!\", \"|\")\n    brackets = brackets.replace(\"\
    <\", \"|\")\n    brackets = brackets.replace(\">\", \"|\")\n    brackets = brackets.replace(\"\
    ?\", \"|\")\n    brackets = \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpusd3f7z4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpusd3f7z4.jl:1\n\
    in expression starting at /tmp/tmpusd3f7z4.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pi13bjd.jl:14\nin expression starting at /tmp/tmp_pi13bjd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"[\"\
    , \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"[\"\
    , \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz8ojdhqm.jl:14\nin expression starting at /tmp/tmpz8ojdhqm.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    bracket\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4p8525t4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4p8525t4.jl:1\n\
    in expression starting at /tmp/tmp4p8525t4.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \"}\")\n    brackets = brackets.replace(\")(\", \"}(\").replace(\"\
    )\", \"(\").replace(\"{\", \"(\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \"(\").replace(\"(\", \"{\").replace(\")\", \"(\")\n    brackets\
    \ = brackets.replace(\")(\", \"}(\").replace(\")\", \"(\").replace(\"{\", \"(\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \"(\").replace(\"\
    (\", \"{\").replace(\")\", \"(\")\n    brackets = brackets.replace(\")(\", \"\
    }(\").replace(\")\", \"(\").replace(\"{\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \"(\").replace(\"(\", \"{\").replace(\")\", \"(\")\n\
    \    brackets = brackets.replace(\")(\", \"}(\").replace(\")\", \"(\").replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \"(\"\
    ).replace(\"(\", \"{\").replace(\")\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"}(\").replace(\")\", \"(\").replace(\"{\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \"(\").replace(\"(\", \"{\").replace(\")\", \"(\")\n\
    \    brackets = brackets.replace(\")(\", \"}(\").replace(\")\", \"(\").replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \"(\"\
    ).replace(\"(\", \"{\").replace(\")\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"}(\").replace(\")\", \"(\").replace(\"{\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \"(\").replace(\"(\", \"{\").replace(\")\", \"(\")\n\
    \    brackets = brackets.replace(\")(\", \"}(\").replace(\")\", \"(\").replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \"(\"\
    ).replace(\"(\", \"{\").replace(\")\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"}(\").replace(\")\", \"(\").replace(\"{\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \"(\").replace(\"(\", \"{\").replace(\")\", \"(\")\n\
    \    brackets = brackets.replace(\")(\", \"}(\").replace(\")\", \"(\").replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \"(\"\
    ).replace(\"(\", \"{\").replace(\")\", \"(\")\n    brackets = brackets.replace(\"\
    )(\", \"}(\").replace(\")\", \"(\").replace(\"{\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovsr3xhi.jl:43\nin expression starting at\
    \ /tmp/tmpovsr3xhi.jl:43\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Determine whether brackets are correctly nested.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbxg3zus.jl:1\nin expression starting at /tmp/tmphbxg3zus.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6fdbf0ba.jl:14\nin expression starting at /tmp/tmp6fdbf0ba.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsali41zw.jl:67\nin expression starting at\
    \ /tmp/tmpsali41zw.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pi13bjd.jl:14\nin expression starting at /tmp/tmp_pi13bjd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    @\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ~\", \"\\~\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\\
    %\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg3umqyka.jl:14\nin expression starting at /tmp/tmpg3umqyka.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppp6qpu2t.jl:14\nin expression starting at /tmp/tmppp6qpu2t.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    +\", \"\\+\")\n    brackets = brackets.replace(\"-\", \"\\-\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"_\", \"\\_\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\\\\\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets\
    \ = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"-\", \"\
    \\-\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"@\", \"\\\
    @\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"_\", \"\\_\")\n    brackets =\
    \ brackets.replace(\"\\\\\", \"\\\\\")\n    brackets = brackets.replace(\"|\"\
    , \"\\|\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr937z3z1.jl:14\nin expression starting at /tmp/tmpr937z3z1.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zqvbcyu.jl:54\nin expression starting at\
    \ /tmp/tmp5zqvbcyu.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    _\", \"\\_\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"_\", \"\\_\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2tnpnaf9.jl:14\nin expression starting at /tmp/tmp2tnpnaf9.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zqvbcyu.jl:54\nin expression starting at\
    \ /tmp/tmp5zqvbcyu.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Determine whether brackets are correctly nested.\n    \n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk6rq6fnh.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk6rq6fnh.jl:1\n\
    in expression starting at /tmp/tmpk6rq6fnh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpgiplxr90.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiplxr90.jl:50\n\
    in expression starting at /tmp/tmpgiplxr90.jl:50\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsali41zw.jl:67\nin expression starting at\
    \ /tmp/tmpsali41zw.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyjoboozl.jl:14\nin expression starting at /tmp/tmpyjoboozl.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Checks whether brackets is a string of \"(\" and \")\".\n    return\
    \ True if every opening bracket has a corresponding closing bracket.\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplooid2p8.jl:1\nin expression starting at /tmp/tmplooid2p8.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsali41zw.jl:67\nin expression starting at\
    \ /tmp/tmpsali41zw.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyjoboozl.jl:14\nin expression starting at /tmp/tmpyjoboozl.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\[\")\n    brackets =\
    \ brackets.replace(\")\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    [\")\n    brackets = brackets.replace(\"}\", \"\\]\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\[\")\n    brackets = brackets.replace(\")\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\[\")\n    brackets = brackets.replace(\"\
    }\", \"\\]\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    [\")\n    brackets = brackets.replace(\")\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\[\")\n    brackets = brackets.replace(\"}\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\[\")\n    brackets = brackets.replace(\"\
    )\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\]\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\[\")\n    brackets = brackets.replace(\")\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\[\")\n    brackets = brackets.replace(\"}\", \"\\\
    ]\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\[\")\n    brackets =\
    \ brackets.replace(\")\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    [\")\n    brackets = brackets.replace(\"}\", \"\\]\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\[\")\n    brackets = brackets.replace(\")\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\[\")\n    brackets = brackets.replace(\"\
    }\", \"\\]\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptc4beswl.jl:14\nin expression starting at /tmp/tmptc4beswl.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Determine whether brackets are correctly nested.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbxg3zus.jl:1\nin expression starting at /tmp/tmphbxg3zus.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"-\", \"\\\
    -\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"@\", \"\\\
    @\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"[\"\
    , \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    -\", \"\\-\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    @\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"(\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa1jjsfxf.jl:14\nin expression starting at /tmp/tmpa1jjsfxf.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbxlkq_6l.jl:14\nin expression starting at /tmp/tmpbxlkq_6l.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Determine if brackets are correctly nested.\n    \n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcfy0hyn7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcfy0hyn7.jl:1\n\
    in expression starting at /tmp/tmpcfy0hyn7.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm3evqbly.jl:14\nin expression starting at /tmp/tmpm3evqbly.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"@\", \"\\\
    @\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\\
    %\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"{\", \"\\{\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7_jqtmww.jl:14\nin expression starting at /tmp/tmp7_jqtmww.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzuxzjxyk.jl:68\nin expression starting at\
    \ /tmp/tmpzuxzjxyk.jl:68\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaur9hobk.jl:66\nin expression starting at\
    \ /tmp/tmpaur9hobk.jl:66\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \"(\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \"(\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \"(\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \"(\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \"(\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5db961_w.jl:67\nin expression starting at\
    \ /tmp/tmp5db961_w.jl:67\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    bracket\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppsirnfmp.jl:14\nin expression starting at /tmp/tmppsirnfmp.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp543vujvb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp543vujvb.jl:1\n\
    in expression starting at /tmp/tmp543vujvb.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"{\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpui94b24f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpui94b24f.jl:1\n\
    in expression starting at /tmp/tmpui94b24f.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \"(\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"{\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpui94b24f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpui94b24f.jl:1\n\
    in expression starting at /tmp/tmpui94b24f.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppp6qpu2t.jl:14\nin expression starting at /tmp/tmppp6qpu2t.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpq0b69kjx.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq0b69kjx.jl:63\n\
    in expression starting at /tmp/tmpq0b69kjx.jl:63\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaiemrwch.jl:14\nin expression starting at /tmp/tmpaiemrwch.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaiemrwch.jl:14\nin expression starting at /tmp/tmpaiemrwch.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw1z0ok01.jl:1\nin expression starting at /tmp/tmpw1z0ok01.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6fdbf0ba.jl:14\nin expression starting at /tmp/tmp6fdbf0ba.jl:14\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"[\"\
    , \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"[\"\
    , \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkxovylbc.jl:14\nin expression starting at /tmp/tmpkxovylbc.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zqvbcyu.jl:54\nin expression starting at\
    \ /tmp/tmp5zqvbcyu.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pi13bjd.jl:14\nin expression starting at /tmp/tmp_pi13bjd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn1alrc0r.jl:14\nin expression starting at /tmp/tmpn1alrc0r.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukyxla8l.jl:68\nin expression starting at\
    \ /tmp/tmpukyxla8l.jl:68\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaiemrwch.jl:14\nin expression starting at /tmp/tmpaiemrwch.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"@\", \"\\\
    @\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\\
    %\")\n    brackets = brackets.replace(\"^\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6r2q8fe7.jl:14\nin expression starting at /tmp/tmp6r2q8fe7.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaiemrwch.jl:14\nin expression starting at /tmp/tmpaiemrwch.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwxtdahzk.jl:14\nin expression starting at /tmp/tmpwxtdahzk.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaiemrwch.jl:14\nin expression starting at /tmp/tmpaiemrwch.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing\
    \ determines if brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8plzeg3l.jl:1\nin expression starting at /tmp/tmp8plzeg3l.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zqvbcyu.jl:54\nin expression starting at\
    \ /tmp/tmp5zqvbcyu.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnno_3o_h.jl:14\nin expression starting at /tmp/tmpnno_3o_h.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbe_s3qvb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbe_s3qvb.jl:1\n\
    in expression starting at /tmp/tmpbe_s3qvb.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\"\
    ).replace(\"}\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.replace(\"(\", \"{\").replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"(\", \"{\"\
    ).replace(\")\", \"}\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"{\").replace(\")\", \"}\"\
    )\n    brackets = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets\
    \ = brackets.\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpgiplxr90.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiplxr90.jl:50\n\
    in expression starting at /tmp/tmpgiplxr90.jl:50\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pi13bjd.jl:14\nin expression starting at /tmp/tmp_pi13bjd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    \    \n    Determine whether brackets has correct pairings.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1iy2ylc.jl:1\nin expression starting at /tmp/tmps1iy2ylc.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing(brackets::String)::Bool\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw1z0ok01.jl:1\nin expression starting at /tmp/tmpw1z0ok01.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    )(\", \"}(\")\n    brackets = brackets.replace(\"()\", \"((\")\n    brackets =\
    \ brackets.replace(\")(\", \"))(\")\n    brackets = brackets.replace(\"((\", \"\
    {(\")\n    brackets = brackets.replace(\"))(\", \"}(\")\n    brackets = brackets.replace(\"\
    {(\", \"(\")\n    brackets = brackets.replace(\"}(\", \")(\")\n    brackets =\
    \ brackets.replace(\")(\", \")(\")\n    brackets = brackets.replace(\"{(\", \"\
    {(\")\n    brackets = brackets.replace(\"})\", \"}(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\", \")\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"(\", \"(\")\n    brackets = brackets.replace(\"\
    )\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ibuwidl.jl:66\nin expression starting at\
    \ /tmp/tmp6ibuwidl.jl:66\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zqvbcyu.jl:54\nin expression starting at\
    \ /tmp/tmp5zqvbcyu.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zqvbcyu.jl:54\nin expression starting at\
    \ /tmp/tmp5zqvbcyu.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyuk0y39l.jl:14\nin expression starting at /tmp/tmpyuk0y39l.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsali41zw.jl:67\nin expression starting at\
    \ /tmp/tmpsali41zw.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"-\", \"\\\
    -\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"\
    }\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfx57ykpy.jl:14\nin expression starting at /tmp/tmpfx57ykpy.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjg14vj7j.jl:14\nin expression starting at /tmp/tmpjg14vj7j.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwdrnt7zt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwdrnt7zt.jl:1\n\
    in expression starting at /tmp/tmpwdrnt7zt.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp543vujvb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp543vujvb.jl:1\n\
    in expression starting at /tmp/tmp543vujvb.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    \"\"\"\n    correct_bracketing\
    \ determines if brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8plzeg3l.jl:1\nin expression starting at /tmp/tmp8plzeg3l.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pi13bjd.jl:14\nin expression starting at /tmp/tmp_pi13bjd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pi13bjd.jl:14\nin expression starting at /tmp/tmp_pi13bjd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\"\
    )\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwdrnt7zt.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwdrnt7zt.jl:1\n\
    in expression starting at /tmp/tmpwdrnt7zt.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyjnh3gb5.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyjnh3gb5.jl:1\n\
    in expression starting at /tmp/tmpyjnh3gb5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp81edt_10.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp81edt_10.jl:1\n\
    in expression starting at /tmp/tmp81edt_10.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl0nj47il.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpl0nj47il.jl:1\n\
    in expression starting at /tmp/tmpl0nj47il.jl:1\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"@\", \"\\\
    @\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = bracket\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5hq5aiz_.jl:14\nin expression starting at /tmp/tmp5hq5aiz_.jl:14\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaiemrwch.jl:14\nin expression starting at /tmp/tmpaiemrwch.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp543vujvb.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp543vujvb.jl:1\n\
    in expression starting at /tmp/tmp543vujvb.jl:1\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdrf82ic2.jl:14\nin expression starting at /tmp/tmpdrf82ic2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaur9hobk.jl:66\nin expression starting at\
    \ /tmp/tmpaur9hobk.jl:66\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fby6yze.jl:68\nin expression starting at\
    \ /tmp/tmp3fby6yze.jl:68\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwcivdtxx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwcivdtxx.jl:1\n\
    in expression starting at /tmp/tmpwcivdtxx.jl:1\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pi13bjd.jl:14\nin expression starting at /tmp/tmp_pi13bjd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pi13bjd.jl:14\nin expression starting at /tmp/tmp_pi13bjd.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9qtyc1ak.jl:14\nin expression starting at /tmp/tmp9qtyc1ak.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ce93vw6.jl:67\nin expression starting at\
    \ /tmp/tmp1ce93vw6.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaiemrwch.jl:14\nin expression starting at /tmp/tmpaiemrwch.jl:14\n"
  stdout: ''
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyuk0y39l.jl:14\nin expression starting at /tmp/tmpyuk0y39l.jl:14\n"
  stdout: ''
  timestamp: 1659822699
