language: jl
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sk1hal2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sk1hal2.jl:1\n\
    in expression starting at /tmp/tmp0sk1hal2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sk1hal2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sk1hal2.jl:1\n\
    in expression starting at /tmp/tmp0sk1hal2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    if file_name.size < 3 || file_name.size > 10\n        return\
    \ \"No\"\n    \n    if file_name.split(\".\")[1] != \"\"\n        return \"No\"\
    \n    \n    if file_name.split(\".\")[1] == \"txt\" || file_name.split(\".\")[1]\
    \ == \"exe\" || file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n\
    \    \n    if file_name.split(\".\")[1] == \"exe\"\n        return \"Yes\"\n \
    \   \n    if file_name.split(\".\")[1] == \"dll\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"zip\"\n        return \"Yes\"\n   \
    \ \n    if file_name.split(\".\")[1] == \"tar\"\n        return \"Yes\"\n    \n\
    \    if file_name.split(\".\")[1] == \"gz\"\n        return \"Yes\"\n    \n  \
    \  if file_name.split(\".\")[1] == \"bz2\"\n        return \"Yes\"\n    \n   \
    \ if file_name.split(\".\")[1] == \"7z\"\n        return \"Yes\"\n    \n    if\
    \ file_name.split(\".\")[1] == \"rar\"\n        return \"Yes\"\n    \n    if file_name.split(\"\
    .\")[1] == \"7z\"\n        return \"Yes\"\n    \n    if file_name.split(\".\"\
    )[1] == \"tar\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1]\
    \ == \"gz\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] ==\
    \ \"bz2\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] == \"\
    7z\"\n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] == \"rar\"\
    \n        return \"Yes\"\n    \n    if file_name.split(\".\")[1] == \"7z\"\n \
    \       return \"Yes\"\n    \n    if file_name.split(\".\")[1] == \"tar\"\n  \
    \      return \"Yes\"\n    \n    if file_name.split(\".\")[1] == \"gz\"\n    \
    \    return \"Yes\"\n    \n    if file_name.split(\".\")[1] == \"bz2\"\n     \
    \   return \"Yes\"\n    \n    if file_name.split(\".\")[1] == \"7z\"\n       \
    \ return \"Yes\"\n    \n    if file_name.split(\".\")[1] == \"rar\"\n        return\
    \ \"Yes\"\n    \n    if file_name.split(\".\")[1] == \"7z\"\n        return \"\
    Yes\"\n    \n    if file_name.split(\".\")[1] == \"tar\"\n        return \"Yes\"\
    \n    \n    if file_name.split(\".\")[1] == \"gz\"\n        return \"Yes\"\n \
    \   \n    if file_name.split(\".\")[1] == \"bz2\"\n        return \"Yes\"\n  \
    \  \n    if file_name.split(\".\")[1] == \"7z\"\n        return \"Yes\"\n    \n\
    \    if file_name.split(\".\")[1] == \"rar\"\n        return \"Yes\"\n    \n \
    \   if file_name.split(\".\")[1] == \"7z\"\n        return \"Yes\"\n    \n   \
    \ if file_name.split(\".\")[1] == \"tar\"\n        return \"Yes\"\n    \n    if\
    \ file_name.split(\".\")[1] == \"gz\"\n        return \"Yes\"\n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5o8t43an.jl:1\nin expression starting at /tmp/tmp5o8t43an.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sk1hal2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sk1hal2.jl:1\n\
    in expression starting at /tmp/tmp0sk1hal2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    file_name_check = \"No\"\n    \n    if file_name.size <= 3 || file_name.size\
    \ >= 10 || file_name.contains(\".\") || \n        file_name.substring(0,1) !=\
    \ \"a\" || file_name.substring(0,1) != \"b\" || \n        file_name.substring(0,1)\
    \ != \"c\" || file_name.substring(0,1) != \"d\" || \n        file_name.substring(0,1)\
    \ != \"e\" || file_name.substring(0,1) != \"f\" || \n        file_name.substring(0,1)\
    \ != \"g\" || file_name.substring(0,1) != \"h\" || \n        file_name.substring(0,1)\
    \ != \"i\" || file_name.substring(0,1) != \"j\" || \n        file_name.substring(0,1)\
    \ != \"k\" || file_name.substring(0,1) != \"l\" || \n        file_name.substring(0,1)\
    \ != \"m\" || file_name.substring(0,1) != \"n\" || \n        file_name.substring(0,1)\
    \ != \"o\" || file_name.substring(0,1) != \"p\" || \n        file_name.substring(0,1)\
    \ != \"q\" || file_name.substring(0,1) != \"r\" || \n        file_name.substring(0,1)\
    \ != \"s\" || file_name.substring(0,1) != \"t\" || \n        file_name.substring(0,1)\
    \ != \"u\" || file_name.substring(0,1) != \"v\" || \n        file_name.substring(0,1)\
    \ != \"w\" || file_name.substring(0,1) != \"x\" || \n        file_name.substring(0,1)\
    \ != \"y\" || file_name.substring(0,1) != \"z\" || \n        file_name.substring(0,1)\
    \ != \"A\" || file_name.substring(0,1) != \"B\" || \n        file_name.substring(0,1)\
    \ != \"C\" || file_name.substring(0,1) != \"D\" || \n        file_name.substring(0,1)\
    \ != \"E\" || file_name.substring(0,1) != \"F\" || \n        file_name.substring(0,1)\
    \ != \"G\" || file_name.substring(0,1) != \"H\" || \n        file_name.substring(0,1)\
    \ != \"I\" || file_name.substring(0,1) != \"J\" || \n        file_name.substring(0,1)\
    \ != \"K\" || file_name.substring(0,1) != \"L\" || \n        file_name.substring(0,1)\
    \ != \"M\" || file_name.substring(0,1) != \"N\" || \n        file_name.substring(0,1)\
    \ != \"O\" || file_name.substring(0,1) != \"P\" || \n        file_name.substring(0,1)\
    \ != \"Q\" || file_name.substring(0,1) != \"R\" || \n        file_name.substring(0,1)\
    \ != \"S\" || file_name.substring(0,1) != \"T\" || \n        file_name.substring(0,1)\
    \ != \"U\" || file_name.substring(0,1) != \"V\" || \n        file_name.substring(0,1)\
    \ != \"W\" || file_name.substring(0,1) != \"X\" || \n        file_name.substring(0,1)\
    \ != \"Y\" || file_name.substring(0,1) != \"Z\" || \n        file_name.substring(0,1)\
    \ != \"0\" || file_name.\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0f_uamd.jl:1\nin expression starting at /tmp/tmpj0f_uamd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    file_name_check = \"No\"\n    \n    if file_name.size <= 3 || file_name.contains(\"\
    .\") || file_name.substring(0,1) != \"a\" || file_name.substring(0,1) != \"A\"\
    \ || file_name.substring(0,1) != \"b\" || file_name.substring(0,1) != \"B\" ||\
    \ file_name.substring(0,1) != \"c\" || file_name.substring(0,1) != \"C\" || file_name.substring(0,1)\
    \ != \"d\" || file_name.substring(0,1) != \"D\" || file_name.substring(0,1) !=\
    \ \"e\" || file_name.substring(0,1) != \"E\" || file_name.substring(0,1) != \"\
    f\" || file_name.substring(0,1) != \"F\" || file_name.substring(0,1) != \"g\"\
    \ || file_name.substring(0,1) != \"G\" || file_name.substring(0,1) != \"h\" ||\
    \ file_name.substring(0,1) != \"H\" || file_name.substring(0,1) != \"i\" || file_name.substring(0,1)\
    \ != \"I\" || file_name.substring(0,1) != \"j\" || file_name.substring(0,1) !=\
    \ \"J\" || file_name.substring(0,1) != \"k\" || file_name.substring(0,1) != \"\
    K\" || file_name.substring(0,1) != \"l\" || file_name.substring(0,1) != \"L\"\
    \ || file_name.substring(0,1) != \"m\" || file_name.substring(0,1) != \"M\" ||\
    \ file_name.substring(0,1) != \"n\" || file_name.substring(0,1) != \"N\" || file_name.substring(0,1)\
    \ != \"o\" || file_name.substring(0,1) != \"O\" || file_name.substring(0,1) !=\
    \ \"p\" || file_name.substring(0,1) != \"P\" || file_name.substring(0,1) != \"\
    q\" || file_name.substring(0,1) != \"Q\" || file_name.substring(0,1) != \"r\"\
    \ || file_name.substring(0,1) != \"R\" || file_name.substring(0,1) != \"s\" ||\
    \ file_name.substring(0,1) != \"S\" || file_name.substring(0,1) != \"t\" || file_name.substring(0,1)\
    \ != \"T\" || file_name.substring(0,1) != \"u\" || file_name.substring(0,1) !=\
    \ \"U\" || file_name.substring(0,1) != \"v\" || file_name.substring(0,1) != \"\
    V\" || file_name.substring(0,1) != \"w\" || file_name.substring(0,1) != \"W\"\
    \ || file_name.substring(0,1) != \"x\" || file_name.substring(0,1) != \"X\" ||\
    \ file_name.substring(0,1) != \"y\" || file_name.substring(0,1) != \"Y\" || file_name.substring(0,1)\
    \ != \"z\" || file_name.substring(0,1) != \"Z\" || file_name.substring(0,1) !=\
    \ \"0\" || file_name.substring(0,1) != \"1\" || file_name.substring(0,1) != \"\
    2\" || file_name.substring(0,1) != \"3\" || file_name.substring(0,1) != \"4\"\
    \ || file_name.substring(0,1) != \"5\" || file_name.substring(0,1) != \"6\" ||\
    \ file_name.substring(0,1) != \"7\" || file_name.substring(0,1) != \"\nusing Test\n\
    \n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3eu3vs8.jl:26\nin expression starting at\
    \ /tmp/tmpk3eu3vs8.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    if file_name.size <= 3 || file_name.contains(\".\") || file_name.substring(0,1)\
    \ != \"a\" || file_name.substring(0,1) != \"A\" || file_name.substring(0,1) !=\
    \ \"b\" || file_name.substring(0,1) != \"B\" || file_name.substring(0,1) != \"\
    c\" || file_name.substring(0,1) != \"C\" || file_name.substring(0,1) != \"d\"\
    \ || file_name.substring(0,1) != \"D\" || file_name.substring(0,1) != \"e\" ||\
    \ file_name.substring(0,1) != \"E\" || file_name.substring(0,1) != \"f\" || file_name.substring(0,1)\
    \ != \"F\" || file_name.substring(0,1) != \"g\" || file_name.substring(0,1) !=\
    \ \"G\" || file_name.substring(0,1) != \"h\" || file_name.substring(0,1) != \"\
    H\" || file_name.substring(0,1) != \"i\" || file_name.substring(0,1) != \"I\"\
    \ || file_name.substring(0,1) != \"j\" || file_name.substring(0,1) != \"J\" ||\
    \ file_name.substring(0,1) != \"k\" || file_name.substring(0,1) != \"K\" || file_name.substring(0,1)\
    \ != \"l\" || file_name.substring(0,1) != \"L\" || file_name.substring(0,1) !=\
    \ \"m\" || file_name.substring(0,1) != \"M\" || file_name.substring(0,1) != \"\
    n\" || file_name.substring(0,1) != \"N\" || file_name.substring(0,1) != \"o\"\
    \ || file_name.substring(0,1) != \"O\" || file_name.substring(0,1) != \"p\" ||\
    \ file_name.substring(0,1) != \"P\" || file_name.substring(0,1) != \"q\" || file_name.substring(0,1)\
    \ != \"Q\" || file_name.substring(0,1) != \"r\" || file_name.substring(0,1) !=\
    \ \"R\" || file_name.substring(0,1) != \"s\" || file_name.substring(0,1) != \"\
    S\" || file_name.substring(0,1) != \"t\" || file_name.substring(0,1) != \"T\"\
    \ || file_name.substring(0,1) != \"u\" || file_name.substring(0,1) != \"U\" ||\
    \ file_name.substring(0,1) != \"v\" || file_name.substring(0,1) != \"V\" || file_name.substring(0,1)\
    \ != \"w\" || file_name.substring(0,1) != \"W\" || file_name.substring(0,1) !=\
    \ \"x\" || file_name.substring(0,1) != \"X\" || file_name.substring(0,1) != \"\
    y\" || file_name.substring(0,1) != \"Y\" || file_name.substring(0,1) != \"z\"\
    \ || file_name.substring(0,1) != \"Z\"\n    \n    return \"No\"\nend\n</cell>\n\
    <code language=julia-1.3>\nfile_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.3>\n\
    file_name_check(\"1example.dll\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string representing a file's name, and returns\n    'Yes' if the\
    \ the file's name is valid, and returns \nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5y4j3xd.jl:22\nin expression starting at\
    \ /tmp/tmpj5y4j3xd.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    if file_name.lenght > 3 || file_name.lenght < 1\n        return\
    \ \"No\"\n    \n    if file_name.contains(\".\")\n        return \"No\"\n    \n\
    \    if file_name.substring(0,1) != \"a\" && file_name.substring(0,1) != \"A\"\
    \ && file_name.substring(0,1) != \"b\" && file_name.substring(0,1) != \"B\" &&\
    \ file_name.substring(0,1) != \"c\" && file_name.substring(0,1) != \"C\" && file_name.substring(0,1)\
    \ != \"d\" && file_name.substring(0,1) != \"D\" && file_name.substring(0,1) !=\
    \ \"e\" && file_name.substring(0,1) != \"E\" && file_name.substring(0,1) != \"\
    f\" && file_name.substring(0,1) != \"F\" && file_name.substring(0,1) != \"g\"\
    \ && file_name.substring(0,1) != \"G\" && file_name.substring(0,1) != \"h\" &&\
    \ file_name.substring(0,1) != \"H\" && file_name.substring(0,1) != \"i\" && file_name.substring(0,1)\
    \ != \"I\" && file_name.substring(0,1) != \"j\" && file_name.substring(0,1) !=\
    \ \"J\" && file_name.substring(0,1) != \"k\" && file_name.substring(0,1) != \"\
    K\" && file_name.substring(0,1) != \"l\" && file_name.substring(0,1) != \"L\"\
    \ && file_name.substring(0,1) != \"m\" && file_name.substring(0,1) != \"M\" &&\
    \ file_name.substring(0,1) != \"n\" && file_name.substring(0,1) != \"N\" && file_name.substring(0,1)\
    \ != \"o\" && file_name.substring(0,1) != \"O\" && file_name.substring(0,1) !=\
    \ \"p\" && file_name.substring(0,1) != \"P\" && file_name.substring(0,1) != \"\
    q\" && file_name.substring(0,1) != \"Q\" && file_name.substring(0,1) != \"r\"\
    \ && file_name.substring(0,1) != \"R\" && file_name.substring(0,1) != \"s\" &&\
    \ file_name.substring(0,1) != \"S\" && file_name.substring(0,1) != \"t\" && file_name.substring(0,1)\
    \ != \"T\" && file_name.substring(0,1) != \"u\" && file_name.substring(0,1) !=\
    \ \"U\" && file_name.substring(0,1) != \"v\" && file_name.substring(0,1) != \"\
    V\" && file_name.substring(0,1) != \"w\" && file_name.substring(0,1) != \"W\"\
    \ && file_name.substring(0,1) != \"x\" && file_name.substring(0,1) != \"X\" &&\
    \ file_name.substring(0,1) != \"y\" && file_name.substring(0,1) != \"Y\" && file_name.substring(0,1)\
    \ != \"z\" && file_name.substring(0,1) != \"Z\"\n        return \"No\"\n    \n\
    \    if file_name.substring(file_name.lenght-1,file_name.lenght) == \"txt\"\n\
    \        return \"Yes\"\n    \n    if file_name.substring(file_name.lenght-1,file_name.lenght)\
    \ == \"exe\"\n        return \"Yes\"\n    \n    if file_name.substring(file_name\n\
    using Test\n\n@testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"\
    example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t\
    @test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"\
    Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckh6d17d.jl:35\nin expression starting at\
    \ /tmp/tmpckh6d17d.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    if file_name.match(\"^[0-9]{3}$\") && file_name.match(\"^\\.$\"\
    ) && file_name.match(\"^[a-zA-Z][a-zA-Z0-9]*$\") && file_name.match(\"^[a-zA-Z][a-zA-Z0-9]*\\\
    .[a-zA-Z][a-zA-Z0-9]*$\") \n        then return \"Yes\"\n    else return \"No\"\
    \nend\n</cell>\n<code language=julia-1.5>\nfile_name_check(\"example.txt\")\n\
    </cell>\n<code language=julia-1.5>\nfile_name_check(\"1example.dll\")\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = file_name_check;\n\
    \t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"1example.dll\"\
    ) == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2707gng.jl:18\nin expression starting at\
    \ /tmp/tmpe2707gng.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sk1hal2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sk1hal2.jl:1\n\
    in expression starting at /tmp/tmp0sk1hal2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sk1hal2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sk1hal2.jl:1\n\
    in expression starting at /tmp/tmp0sk1hal2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sk1hal2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sk1hal2.jl:1\n\
    in expression starting at /tmp/tmp0sk1hal2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    if file_name.size <= 3 || file_name.contains(\".\") || file_name.substring(0,1)\
    \ != \"a\" || file_name.substring(0,1) != \"A\" || file_name.substring(0,1) !=\
    \ \"b\" || file_name.substring(0,1) != \"B\" || file_name.substring(0,1) != \"\
    c\" || file_name.substring(0,1) != \"C\" || file_name.substring(0,1) != \"d\"\
    \ || file_name.substring(0,1) != \"D\" || file_name.substring(0,1) != \"e\" ||\
    \ file_name.substring(0,1) != \"E\" || file_name.substring(0,1) != \"f\" || file_name.substring(0,1)\
    \ != \"F\" || file_name.substring(0,1) != \"g\" || file_name.substring(0,1) !=\
    \ \"G\" || file_name.substring(0,1) != \"h\" || file_name.substring(0,1) != \"\
    H\" || file_name.substring(0,1) != \"i\" || file_name.substring(0,1) != \"I\"\
    \ || file_name.substring(0,1) != \"j\" || file_name.substring(0,1) != \"J\" ||\
    \ file_name.substring(0,1) != \"k\" || file_name.substring(0,1) != \"K\" || file_name.substring(0,1)\
    \ != \"l\" || file_name.substring(0,1) != \"L\" || file_name.substring(0,1) !=\
    \ \"m\" || file_name.substring(0,1) != \"M\" || file_name.substring(0,1) != \"\
    n\" || file_name.substring(0,1) != \"N\" || file_name.substring(0,1) != \"o\"\
    \ || file_name.substring(0,1) != \"O\" || file_name.substring(0,1) != \"p\" ||\
    \ file_name.substring(0,1) != \"P\" || file_name.substring(0,1) != \"q\" || file_name.substring(0,1)\
    \ != \"Q\" || file_name.substring(0,1) != \"r\" || file_name.substring(0,1) !=\
    \ \"R\" || file_name.substring(0,1) != \"s\" || file_name.substring(0,1) != \"\
    S\" || file_name.substring(0,1) != \"t\" || file_name.substring(0,1) != \"T\"\
    \ || file_name.substring(0,1) != \"u\" || file_name.substring(0,1) != \"U\" ||\
    \ file_name.substring(0,1) != \"v\" || file_name.substring(0,1) != \"V\" || file_name.substring(0,1)\
    \ != \"w\" || file_name.substring(0,1) != \"W\" || file_name.substring(0,1) !=\
    \ \"x\" || file_name.substring(0,1) != \"X\" || file_name.substring(0,1) != \"\
    y\" || file_name.substring(0,1) != \"Y\" || file_name.substring(0,1) != \"z\"\
    \ || file_name.substring(0,1) != \"Z\"\n    \n    return \"No\"\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Create a function which takes a string representing\
    \ a file's name, and returns\n    'Yes' if the the file's name is valid, and returns\
    \ 'No' otherwise.\n    A file's name is considered to be valid if and only if\
    \ all the following conditions \n    are met:\n    - There should not be more\
    \ than three digits ('0'-'9') in the \nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06dc8wma.jl:22\nin expression starting at\
    \ /tmp/tmp06dc8wma.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    if file_name.lenght > 3 || file_name.lenght < 1 \n        return\
    \ \"No\"\n    else if file_name.lenght == 1 && file_name.substring(0,1) != \"\
    a\" && file_name.substring(0,1) != \"A\" && file_name.substring(0,1) != \"b\"\
    \ && file_name.substring(0,1) != \"B\" && file_name.substring(0,1) != \"c\" &&\
    \ file_name.substring(0,1) != \"C\" && file_name.substring(0,1) != \"d\" && file_name.substring(0,1)\
    \ != \"D\" && file_name.substring(0,1) != \"e\" && file_name.substring(0,1) !=\
    \ \"E\" && file_name.substring(0,1) != \"f\" && file_name.substring(0,1) != \"\
    F\" && file_name.substring(0,1) != \"g\" && file_name.substring(0,1) != \"G\"\
    \ && file_name.substring(0,1) != \"h\" && file_name.substring(0,1) != \"H\" &&\
    \ file_name.substring(0,1) != \"i\" && file_name.substring(0,1) != \"I\" && file_name.substring(0,1)\
    \ != \"j\" && file_name.substring(0,1) != \"J\" && file_name.substring(0,1) !=\
    \ \"k\" && file_name.substring(0,1) != \"K\" && file_name.substring(0,1) != \"\
    l\" && file_name.substring(0,1) != \"L\" && file_name.substring(0,1) != \"m\"\
    \ && file_name.substring(0,1) != \"M\" && file_name.substring(0,1) != \"n\" &&\
    \ file_name.substring(0,1) != \"N\" && file_name.substring(0,1) != \"o\" && file_name.substring(0,1)\
    \ != \"O\" && file_name.substring(0,1) != \"p\" && file_name.substring(0,1) !=\
    \ \"P\" && file_name.substring(0,1) != \"q\" && file_name.substring(0,1) != \"\
    Q\" && file_name.substring(0,1) != \"r\" && file_name.substring(0,1) != \"R\"\
    \ && file_name.substring(0,1) != \"s\" && file_name.substring(0,1) != \"S\" &&\
    \ file_name.substring(0,1) != \"t\" && file_name.substring(0,1) != \"T\" && file_name.substring(0,1)\
    \ != \"u\" && file_name.substring(0,1) != \"U\" && file_name.substring(0,1) !=\
    \ \"v\" && file_name.substring(0,1) != \"V\" && file_name.substring(0,1) != \"\
    w\" && file_name.substring(0,1) != \"W\" && file_name.substring(0,1) != \"x\"\
    \ && file_name.substring(0,1) != \"X\" && file_name.substring(0,1) != \"y\" &&\
    \ file_name.substring(0,1) != \"Y\" && file_name.substring(0,1) != \"z\" && file_name.substring(0,1)\
    \ != \"Z\"\n        return \"No\"\n    else\n        return \"Yes\"\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpsgrfo8.jl:20\nin expression starting at\
    \ /tmp/tmpkpsgrfo8.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    file_name_split = split(file_name, \".\")\n    \n    if length(file_name_split)\
    \ > 2\n        return \"No\"\n    elseif length(file_name_split) == 2 \n     \
    \   if file_name_split[1] != \"\"\n            if file_name_split[1][1] == 'a'\n\
    \                || file_name_split[1][1] == 'A'\n            elseif file_name_split[1][1]\
    \ == 'z'\n                || file_name_split[1][1] == 'Z'\n            else\n\
    \                return \"No\"\n        else\n            return \"No\"\n    else\n\
    \        return \"No\"\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"||\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22pqowcb.jl:25\nin expression starting at\
    \ /tmp/tmp22pqowcb.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sk1hal2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sk1hal2.jl:1\n\
    in expression starting at /tmp/tmp0sk1hal2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    if file_name.match('^[0-9]{3}\\.') && file_name.match('\\.[a-zA-z]')\
    \ && file_name.match('[a-zA-z]') && file_name.match('\\.[a-zA-z]{3}') \n    then\
    \ \n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfile_name_check(\"example.txt\")\n</cell>\n<code language=julia-1.5>\n\
    file_name_check(\"1example.dll\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string representing a file's name, and returns the file's extension.\n\
    Examples:\n- \"example.txt\" returns \"txt\"\n- \"1example.dll\" returns \"dll\"\
    \n- \"example\" returns \"\"\n- \"example.txt\" returns \"\"\n- \"example\" returns\
    \ \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \"\"\n- \"example\" returns \"\"\n- \"example\"\
    \ returns \"\"\n- \"example\" returns \nusing Test\n\n@testset begin\n\ncandidate\
    \ = file_name_check;\n\t@test(candidate(\"example.txt\") == \"Yes\")\n\t@test(candidate(\"\
    1example.dll\") == \"No\")\n\t@test(candidate(\"s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"\
    K.dll\") == \"Yes\")\n\t@test(candidate(\"MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"\
    His12FILE94.exe\") == \"No\")\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"\
    ?aREYA.exe\") == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\"\
    )\n\t@test(candidate(\"this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0e_q90p8.jl:18\nin expression starting at /tmp/tmp0e_q90p8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sk1hal2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sk1hal2.jl:1\n\
    in expression starting at /tmp/tmp0sk1hal2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sk1hal2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sk1hal2.jl:1\n\
    in expression starting at /tmp/tmp0sk1hal2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Create a function which takes a string representing a file's name,\
    \ and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
    \    A file's name is considered to be valid if and only if all the following\
    \ conditions \n    are met:\n    - There should not be more than three digits\
    \ ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot\
    \ '.'\n    - The substring before the dot should not be empty, and it starts with\
    \ a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring\
    \ after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n\
    \    >>> file_name_check(\"example.txt\")\n    \"Yes\"\n    >>> file_name_check(\"\
    1example.dll\")\n    \"No\"\n    \"\"\"\nfunction file_name_check(file_name::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = file_name_check;\n\t@test(candidate(\"example.txt\"\
    ) == \"Yes\")\n\t@test(candidate(\"1example.dll\") == \"No\")\n\t@test(candidate(\"\
    s1sdf3.asd\") == \"No\")\n\t@test(candidate(\"K.dll\") == \"Yes\")\n\t@test(candidate(\"\
    MY16FILE3.exe\") == \"Yes\")\n\t@test(candidate(\"His12FILE94.exe\") == \"No\"\
    )\n\t@test(candidate(\"_Y.txt\") == \"No\")\n\t@test(candidate(\"?aREYA.exe\"\
    ) == \"No\")\n\t@test(candidate(\"/this_is_valid.dll\") == \"No\")\n\t@test(candidate(\"\
    this_is_valid.wow\") == \"No\")\n\t@test(candidate(\"this_is_valid.txt\") == \"\
    Yes\")\n\t@test(candidate(\"this_is_valid.txtexe\") == \"No\")\n\t@test(candidate(\"\
    #this2_i4s_5valid.ten\") == \"No\")\n\t@test(candidate(\"@this1_is6_valid.exe\"\
    ) == \"No\")\n\t@test(candidate(\"this_is_12valid.6exe4.txt\") == \"No\")\n\t\
    @test(candidate(\"all.exe.txt\") == \"No\")\n\t@test(candidate(\"I563_No.exe\"\
    ) == \"Yes\")\n\t@test(candidate(\"Is3youfault.txt\") == \"Yes\")\n\t@test(candidate(\"\
    no_one#knows.dll\") == \"Yes\")\n\t@test(candidate(\"1I563_Yes3.exe\") == \"No\"\
    )\n\t@test(candidate(\"I563_Yes3.txtt\") == \"No\")\n\t@test(candidate(\"final..txt\"\
    ) == \"No\")\n\t@test(candidate(\"final132\") == \"No\")\n\t@test(candidate(\"\
    _f4indsartal132.\") == \"No\")\n\t@test(candidate(\".txt\") == \"No\")\n\t@test(candidate(\"\
    s.\") == \"No\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0sk1hal2.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0sk1hal2.jl:1\n\
    in expression starting at /tmp/tmp0sk1hal2.jl:1\n"
  stdout: ''
