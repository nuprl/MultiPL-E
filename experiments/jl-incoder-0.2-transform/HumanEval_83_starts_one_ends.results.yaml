language: jl
name: HumanEval_83_starts_one_ends
results:
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn9tpj2e.jl:11\nin expression starting at\
    \ /tmp/tmpfn9tpj2e.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers less than or equal to a given integer n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaem96qny.jl:11\nin expression starting at\
    \ /tmp/tmpaem96qny.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000000000\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuob08pt0.jl:7\nin expression starting at /tmp/tmpuob08pt0.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        val c = starts_one_ends(n-1) \n        if n % 10 == 1 \n \
    \           then return c + 1 \n        else return c \nend \n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3fc6gjns.jl:7\nin expression starting at /tmp/tmp3fc6gjns.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29h5b3al.jl:11\nin expression starting at\
    \ /tmp/tmp29h5b3al.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo3wfe2ur.jl:7\nin expression starting at /tmp/tmpo3wfe2ur.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp62hpwsl8.jl:11\nin expression starting at\
    \ /tmp/tmp62hpwsl8.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdld7in7x.jl:11\nin expression starting at\
    \ /tmp/tmpdld7in7x.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf_4id970.jl:7\nin expression starting at /tmp/tmpf_4id970.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn2pfnoby.jl:7\nin expression starting at /tmp/tmpn2pfnoby.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2 - 1)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcw3gl_25.jl:7\nin expression starting at /tmp/tmpcw3gl_25.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        local i::Int64 = 1\n        local count::Int64 = 0\n      \
    \  while i <= n \n            do if i%10 == 1 \n                then count = count\
    \ + 1\n                else return count\n            end\n            i = i +\
    \ 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of integers from 1 to n that are\ndivisible by 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1y75nv_r.jl:7\nin expression starting at /tmp/tmp1y75nv_r.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else if n % 10 == 1 \n            then return starts_one_ends(n / 10)\n\
    \            else return starts_one_ends(n / 10) + 1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdmrus_55.jl:7\nin expression starting at /tmp/tmpdmrus_55.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) + count_one_ends(n-3) + count_one_ends(n-4) + count_one_ends(n-5)\
    \ + count_one_ends(n-6) + count_one_ends(n-7) + count_one_ends(n-8) + count_one_ends(n-9)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdw2l0uy3.jl:7\nin expression starting at /tmp/tmpdw2l0uy3.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugoib0qq.jl:11\nin expression starting at\
    \ /tmp/tmpugoib0qq.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10)*10 + n % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprw8tr4xg.jl:7\nin expression starting at /tmp/tmprw8tr4xg.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn30sq7pe.jl:8\nin expression starting at /tmp/tmpn30sq7pe.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ / 10)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0r9awo8.jl:8\nin expression starting at /tmp/tmpc0r9awo8.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmgq8eio.jl:11\nin expression starting at\
    \ /tmp/tmpdmgq8eio.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6rp6zij.jl:11\nin expression starting at\
    \ /tmp/tmpd6rp6zij.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_end\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzp2hbvc4.jl:7\nin expression starting at /tmp/tmpzp2hbvc4.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(123)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjcwur828.jl:11\nin expression starting at\
    \ /tmp/tmpjcwur828.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9wdj4zv.jl:11\nin expression starting at\
    \ /tmp/tmpz9wdj4zv.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + 1\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_pkg5sjo.jl:7\nin expression starting at /tmp/tmp_pkg5sjo.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3wtk7pvq.jl:11\nin expression starting at\
    \ /tmp/tmp3wtk7pvq.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        while n >= 10 \n            do n = n / 10\n            count = count\
    \ + 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgcu1cr96.jl:7\nin expression starting at /tmp/tmpgcu1cr96.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8e1tlj1_.jl:11\nin expression starting at\
    \ /tmp/tmp8e1tlj1_.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9v7pieu8.jl:11\nin expression starting at\
    \ /tmp/tmp9v7pieu8.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp51j051b4.jl:7\nin expression starting at /tmp/tmp51j051b4.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfycsx_xl.jl:11\nin expression starting at\
    \ /tmp/tmpfycsx_xl.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        local count =\
    \ 1\n        while n >= 10 \n            do \n                n = n / 10 \n  \
    \              count = count + 1 \n            end \n        return count \nend\
    \ \n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789012345)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890123456787)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(12345678901234567879)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789012345678790)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678791)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456787912)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567879123)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678791234)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456787912345)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678791234567)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456787912345678)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567879123456787)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678791234567879)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptm097p9l.jl:7\nin expression starting at /tmp/tmptm097p9l.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        let\n            digits = digits(n)\n            digits_count\
    \ = length(digits)\n            digits_count = digits_count - 1\n            digits_count\
    \ = digits_count + 1\n            digits_count = digits_count - 1\n          \
    \  digits_count = digits_count + 1\n            digits_count = digits_count -\
    \ 1\n            digits_count = digits_count + 1\n            digits_count = digits_count\
    \ - 1\n            digits_count = digits_count + 1\n            digits_count =\
    \ digits_count - 1\n            digits_count = digits_count + 1\n            digits_count\
    \ = digits_count - 1\n            digits_count = digits_count + 1\n          \
    \  digits_count = digits_count - 1\n            digits_count = digits_count +\
    \ 1\n            digits_count = digits_count - 1\n            digits_count = digits_count\
    \ + 1\n            digits_count = digits_count - 1\n            digits_count =\
    \ digits_count + 1\n            digits_count = digits_count - 1\n            digits_count\
    \ = digits_count + 1\n            digits_count = digits_count - 1\n          \
    \  digits_count = digits_count + 1\n            digits_count = digits_count -\
    \ 1\n            digits_count = digits_count + 1\n            digits_count = digits_count\
    \ - 1\n            digits_count = digits_count + 1\n            digits_count =\
    \ digits_count - 1\n            digits_count = digits_count + 1\n            digits_count\
    \ = digits_count - 1\n            digits_count = digits_count + 1\n          \
    \  digits_count = digits_count - 1\n            digits_count = digits_count +\
    \ 1\n            digits_count = digits_count - 1\n            digits_count = digits_count\
    \ + 1\n            digits_count = digits_count - 1\n            digits_count =\
    \ digits_count + 1\n            digits_count = digits_count - 1\n            digits_count\
    \ = digits_count + 1\n            digits_count = digits_count - 1\n          \
    \  digits_count = digits_count + 1\n            digits_count = digits_count -\
    \ 1\n            digits_count = digits_count + 1\n            digits_count = digits_count\
    \ - 1\n            digits_count = digits_count + 1\n            digits_count =\
    \ digits_count - 1\n            digits_count = digits_count + 1\n            digits_count\
    \ = digits_count - 1\n            digits_count = digits_count + 1\n          \
    \  digits_count = digits_count - 1\n            digits_count = digits_count +\
    \ 1\n            digits_count = digits_count - 1\n            digits_count = digits_count\
    \ + 1\n            digits_count = digits_count - 1\n            digits_count =\
    \ digit\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4wvhv8rb.jl:7\nin expression starting at /tmp/tmp4wvhv8rb.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzo344qoj.jl:7\nin expression starting at /tmp/tmpzo344qoj.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <- n \n        i <- 1 \n       \
    \ count <- 0 \n        while i < n \n            do if n%i == 0 \n           \
    \     then count += 1 \n                else \n                    i <- i + 1\
    \ \n        return count \nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_end\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp75770mqe.jl:7\nin expression starting at /tmp/tmp75770mqe.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp42bybmrj.jl:11\nin expression starting at\
    \ /tmp/tmp42bybmrj.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of positive integers less than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5y86rx16.jl:8\nin expression starting at /tmp/tmp5y86rx16.jl:8\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9v7pieu8.jl:11\nin expression starting at\
    \ /tmp/tmp9v7pieu8.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9p7o0dcr.jl:11\nin expression starting at\
    \ /tmp/tmp9p7o0dcr.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwex4600.jl:8\nin expression starting at /tmp/tmpfwex4600.jl:8\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + starts_one_ends(n%10)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer\
    \ n, return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj63h67vq.jl:7\nin expression starting at /tmp/tmpj63h67vq.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) + 1 \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6fab5r0.jl:11\nin expression starting at\
    \ /tmp/tmpb6fab5r0.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers that end with 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuh1o0fov.jl:7\nin expression starting at /tmp/tmpuh1o0fov.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else \n        local count = 0\n        while n >= 10 \n            do count\
    \ = count + 1\n            n = n / 10\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm3ifi6bg.jl:7\nin expression starting at /tmp/tmpm3ifi6bg.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else if n < 100 \n        then return 1 + starts_one_ends(n//10)\n    else\
    \ if n < 1000 \n        then return 1 + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 10000 \n        then return 1 + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 100000 \n        then return 1 + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000 \n        then return 1 + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000 \n        then return 1 +\
    \ starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 100000000 \n        then return 1 + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + starts_one_ends(n//10)\n\
    \    else if n < 1000000000 \n        then return 1 + starts_one_ends(n//100000000)\
    \ + starts_one_ends(n//10000000) + starts_one_ends(n//1000000) + starts_one_ends(n//100000)\
    \ + starts_one_ends(n//10000) + starts_one_ends(n//1000) + starts_one_ends(n//100)\
    \ + starts_one_ends(n//10)\n    else if n < 10000000000 \n        then return\
    \ 1 + starts_one_ends(n//1000000000) + starts_one_ends(n//100000000) + starts_one_ends(n//10000000)\
    \ + starts_one_ends(n//1000000) + starts_one_ends(n//100000) + starts_one_ends(n//10000)\
    \ + starts_one_ends(n//1000) + starts_one_ends(n//100) + start\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnr_81p64.jl:7\nin expression starting at /tmp/tmpnr_81p64.jl:7\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fortdea.jl:11\nin expression starting at\
    \ /tmp/tmp5fortdea.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmbgwsxvf.jl:11\nin expression starting at\
    \ /tmp/tmpmbgwsxvf.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbsi94tzr.jl:11\nin expression starting at\
    \ /tmp/tmpbsi94tzr.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_glc2c6.jl:11\nin expression starting at\
    \ /tmp/tmp8_glc2c6.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    end\nend\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphs5ninyc.jl:7\nin expression starting at /tmp/tmphs5ninyc.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsws9zlj0.jl:7\nin expression starting at /tmp/tmpsws9zlj0.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        local i::Int64 = 1\n        local count::Int64 = 0\n      \
    \  while i <= n \n            do if i%10 == 1 \n                then count = count\
    \ + 1\n                else return count\n            end\n            i = i +\
    \ 1\n        end\n        return count\n    end\nend\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd407an3x.jl:7\nin expression starting at /tmp/tmpd407an3x.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>\n<code language=juli\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmper6fg53n.jl:11\nin expression starting at\
    \ /tmp/tmper6fg53n.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 10 == 1 \n       \
    \ then return starts_one_ends(n/10)\n    else \n        return starts_one_ends(n-1)\
    \ + starts_one_ends(n+1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprcphmtwp.jl:7\nin expression starting at /tmp/tmprcphmtwp.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2) + starts_one_ends(n / 2)\n    else \n        return\
    \ starts_one_ends(n / 2) + starts_one_ends(n / 2) + starts_one_ends(n / 2)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers less than or\
    \ equal to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplkk5_k_5.jl:7\nin expression starting at /tmp/tmplkk5_k_5.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + 1\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6azlvbsd.jl:7\nin expression starting at /tmp/tmp6azlvbsd.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local count = 1\n        local i = 1\n        while i\
    \ <= n \n            do if i%10 == 1 \n                then count = count + 1\n\
    \                else count = count + 1\n            end\n            i = i +\
    \ 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_end\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeo2ppwro.jl:7\nin expression starting at /tmp/tmpeo2ppwro.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvhpg3qq.jl:8\nin expression starting at /tmp/tmpdvhpg3qq.jl:8\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        count_starts_ends(n-1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @time count_starts_ends(10)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the number of positive integers that start or end with 1, and that do\
    \ not contain any leading zeros.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t\
    @test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz7x6cs7l.jl:7\nin expression starting at /tmp/tmpz7x6cs7l.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        x <- starts_one_ends(n-1) \n        if x == 0 \n         \
    \   then return 1 \n        else \n            if n % x == 0 \n              \
    \  then return x + 1 \n            else \n                return x \nend \n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4kptmt8w.jl:7\nin expression starting at /tmp/tmp4kptmt8w.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4f3wazd4.jl:11\nin expression starting at\
    \ /tmp/tmp4f3wazd4.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbsi94tzr.jl:11\nin expression starting at\
    \ /tmp/tmpbsi94tzr.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        sum((starts_one_ends(n-1) + ends_one_starts(n-1)), 0)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw4_01s1_.jl:7\nin expression starting at /tmp/tmpw4_01s1_.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\nend\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphc_tz55a.jl:11\nin expression starting at\
    \ /tmp/tmphc_tz55a.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        while n >= 10 \n            do count = count + 1\n            n = n /\
    \ 10\n        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuiibai0a.jl:7\nin expression starting at /tmp/tmpuiibai0a.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) \n    end\nend\n</cell>\n<code language=julia-1.3>\ncount_one_ends(10)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(1000)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(100000)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(1000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_one_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(100000000000000)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_one_ends(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_one_ends(100000000000000000000000000)\n</cell\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdnp0is5p.jl:7\nin expression starting at /tmp/tmpdnp0is5p.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6rp6zij.jl:11\nin expression starting at\
    \ /tmp/tmpd6rp6zij.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return starts_one_ends(-n) + 1 \n    else \n\
    \        local i::Int64 = 1\n        local count::Int64 = 0\n        while i <=\
    \ n \n            do if i%10 == 1 \n                then count = count + 1\n \
    \               else return count\n            end\n            i = i + 1\n  \
    \      end\n        return count\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp53k6rrry.jl:7\nin expression starting at /tmp/tmp53k6rrry.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6) + count_starts_ends(n-7) + count_starts_ends(n-8)\
    \ + count_starts_ends(n-9) + count_starts_ends(n-10)\nend\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgt611c3h.jl:7\nin expression starting at /tmp/tmpgt611c3h.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqaoes6x.jl:11\nin expression starting at\
    \ /tmp/tmpsqaoes6x.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0m7lgj3j.jl:8\nin expression starting at /tmp/tmp0m7lgj3j.jl:8\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            digits_length = length(digits)\n         \
    \   digits_start = digits_length - 1\n            digits_end = digits_length -\
    \ 2\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_start = digits_start - 1\n            digits_end = digits_end\
    \ - 1\n            digits_\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzkm3f8hn.jl:7\nin expression starting at /tmp/tmpzkm3f8hn.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqdjybgck.jl:11\nin expression starting at\
    \ /tmp/tmpqdjybgck.jl:11\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 0\n\
    \        local i = 1\n        while i <= n \n            do \n               \
    \ if ((n % i) == 0) \n                    then count = count + 1\n           \
    \         else break\n                end\n                i = i + 1\n       \
    \     end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpraaq52r7.jl:7\nin expression starting at /tmp/tmpraaq52r7.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + starts_one_ends(n%10)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ less than or equal to a given positive integer n.\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjns2mvk_.jl:7\nin expression starting at /tmp/tmpjns2mvk_.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpguey21ud.jl:8\nin expression starting at /tmp/tmpguey21ud.jl:8\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000013)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhsvb9kn.jl:8\nin expression starting at /tmp/tmpxhsvb9kn.jl:8\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        let\n            digits = digits(n) \n            digits_count\
    \ = length(digits) \n            digits_count_plus_one = digits_count + 1\n  \
    \          digits_count_minus_one = digits_count - 1\n            digits_count_minus_one_plus_one\
    \ = digits_count_minus_one + 1\n            digits_count_minus_one_minus_one =\
    \ digits_count_minus_one - 1\n            digits_count_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one + 1\n            digits_count_minus_one_minus_one_minus_one\
    \ = digits_count_minus_one_minus_one - 1\n            digits_count_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one +\
    \ 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_min\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9hwoz26_.jl:7\nin expression starting at /tmp/tmp9hwoz26_.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else break\n\
    \            end\n            i = i + 1\n        end\n        return count\n \
    \   end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000011)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf58zg7s_.jl:7\nin expression starting at /tmp/tmpf58zg7s_.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else if n == 1 \n        then return 1 \n    else \n        local count =\
    \ 1\n        while n >= 10 \n            do count = count + 1\n            n =\
    \ n / 10\n        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwcr4oieh.jl:7\nin expression starting at /tmp/tmpwcr4oieh.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return starts_one_ends(n-1) + ends_one_starts(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyohxh1oz.jl:7\nin expression starting at /tmp/tmpyohxh1oz.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    else \n        count_starts_ends(n-1) + 1\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiewx4xfq.jl:7\nin expression starting at /tmp/tmpiewx4xfq.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        0\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5i3q30dx.jl:8\nin expression starting at /tmp/tmp5i3q30dx.jl:8\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        let\n         \
    \   digits = digits(n::Int64)\n            digits_reversed = reverse(digits)\n\
    \            digits_reversed_reversed = reverse(digits_reversed)\n           \
    \ digits_reversed_reversed_reversed = reverse(digits_reversed_reversed)\n    \
    \        digits_reversed_reversed_reversed_reversed = reverse(digits_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed = reverse(digits_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed = reverse(digits_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed)\n  \
    \          digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = reverse(digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \            digits_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu_e5p0zp.jl:7\nin expression starting at /tmp/tmpu_e5p0zp.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6zuhs43.jl:11\nin expression starting at\
    \ /tmp/tmpp6zuhs43.jl:11\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvhpg3qq.jl:8\nin expression starting at /tmp/tmpdvhpg3qq.jl:8\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else return\
    \ count\n            end\n            i = i + 1\n        end\n        return count\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(2)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(3)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(4)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(5)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(6)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(7)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(8)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(9)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(11)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(12)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(13)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(14)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(15)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(16)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(17)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(18)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(19)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(20)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(21)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(22)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(23)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(24)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(25)\n\
    </cell>\n<code language=julia-1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t\
    @test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpos886fve.jl:7\nin expression starting at /tmp/tmpos886fve.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4e77ef6f.jl:7\nin expression starting at /tmp/tmp4e77ef6f.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3f5bmlq6.jl:7\nin expression starting at /tmp/tmp3f5bmlq6.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90k7z4ca.jl:11\nin expression starting at\
    \ /tmp/tmp90k7z4ca.jl:11\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa17o3llv.jl:7\nin expression starting at /tmp/tmpa17o3llv.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of positive integers that start or\
    \ end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_2lz8ld.jl:11\nin expression starting at\
    \ /tmp/tmp8_2lz8ld.jl:11\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        count_starts_ends(n-1) + count_starts_ends(n-2) + count_starts_ends(n-3)\
    \ + count_starts_ends(n-4) + count_starts_ends(n-5) + count_starts_ends(n-6) +\
    \ count_starts_ends(n-7) + count_starts_ends(n-8) + count_starts_ends(n-9) + count_starts_ends(n-10)\
    \ + count_starts_ends(n-11) + count_starts_ends(n-12) + count_starts_ends(n-13)\
    \ + count_starts_ends(n-14) + count_starts_ends(n-15) + count_starts_ends(n-16)\
    \ + count_starts_ends(n-17) + count_starts_ends(n-18) + count_starts_ends(n-19)\
    \ + count_starts_ends(n-20) + count_starts_ends(n-21) + count_starts_ends(n-22)\
    \ + count_starts_ends(n-23) + count_starts_ends(n-24) + count_starts_ends(n-25)\
    \ + count_starts_ends(n-26) + count_starts_ends(n-27) + count_starts_ends(n-28)\
    \ + count_starts_ends(n-29) + count_starts_ends(n-30) + count_starts_ends(n-31)\
    \ + count_starts_ends(n-32) + count_starts_ends(n-33) + count_starts_ends(n-34)\
    \ + count_starts_ends(n-35) + count_starts_ends(n-36) + count_starts_ends(n-37)\
    \ + count_starts_ends(n-38) + count_starts_ends(n-39) + count_starts_ends(n-40)\
    \ + count_starts_ends(n-41) + count_starts_ends(n-42) + count_starts_ends(n-43)\
    \ + count_starts_ends(n-44) + count_starts_ends(n-45) + count_starts_ends(n-46)\
    \ + count_starts_ends(n-47) + count_starts_ends(n-48) + count_starts_ends(n-49)\
    \ + count_starts_ends(n-50) + count_starts_ends(n-51) + count_starts_ends(n-52)\
    \ + count_starts_ends(n-53) + count_starts_ends(n-54) + count_starts_ends(n-55)\
    \ + count_starts_ends(n-56) + count_starts_ends(n-57) + count_starts_ends(n-58)\
    \ + count_starts_ends(n-59) + count_starts_ends(n-60) + count_starts_ends(n-61)\
    \ + count_starts_ends(n-62) + count_starts_\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzg94bvzo.jl:7\nin expression starting at /tmp/tmpzg94bvzo.jl:7\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of positive integers less than\
    \ or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgj8079ss.jl:11\nin expression starting at\
    \ /tmp/tmpgj8079ss.jl:11\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000000000\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpie1drtri.jl:7\nin expression starting at /tmp/tmpie1drtri.jl:7\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else if n % 2 == 1 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvgseygpe.jl:7\nin expression starting at /tmp/tmpvgseygpe.jl:7\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        count_starts_ends(n-1,\
    \ n+1)\nend\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(10_000,\
    \ 10_000_000)\n</cell>\n<code language=julia-1.5>\n@time count_starts_ends(10_000,\
    \ 10_000_000)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of positive integers less than or equal to a given number.\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8sc80rtd.jl:8\nin expression starting at /tmp/tmp8sc80rtd.jl:8\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789012345)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890123456788)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901234567889)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678899999999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999999999)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsq4pjxpk.jl:11\nin expression starting at\
    \ /tmp/tmpsq4pjxpk.jl:11\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) \nend\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(100000000000000000000000000)\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq97bo2o9.jl:7\nin expression starting at /tmp/tmpq97bo2o9.jl:7\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        then return starts_one_ends(n\
    \ / 2) + starts_one_ends(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.3>\n\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5xwovd08.jl:7\nin expression starting at /tmp/tmp5xwovd08.jl:7\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwv6_tz1j.jl:11\nin expression starting at\
    \ /tmp/tmpwv6_tz1j.jl:11\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6zuhs43.jl:11\nin expression starting at\
    \ /tmp/tmpp6zuhs43.jl:11\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 0\n\
    \        local i = 1\n        while i <= n \n            do if i%10 == 1 \n  \
    \              then count = count + 1\n                else return 0\n       \
    \     end\n            i = i + 1\n        end\n        return count\n    end\n\
    end\n\"\"\"\n    \n\"\"\"\n    Given a positive integer n, return the count of\
    \ the numbers of n-digit\n    positive integers that start or end with 0.\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdcye3q88.jl:7\nin expression starting at /tmp/tmpdcye3q88.jl:7\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(123456789)\n</cell>\n<text>\nExercise\nWrite a function that counts\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjjwqchg.jl:11\nin expression starting at\
    \ /tmp/tmpxjjwqchg.jl:11\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6)\nend\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(100000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa1ggifk_.jl:7\nin expression starting at /tmp/tmpa1ggifk_.jl:7\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    end\nend\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphs5ninyc.jl:7\nin expression starting at /tmp/tmphs5ninyc.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8lp5r7lg.jl:11\nin expression starting at\
    \ /tmp/tmp8lp5r7lg.jl:11\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4bbf3try.jl:7\nin expression starting at /tmp/tmp4bbf3try.jl:7\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3wtk7pvq.jl:11\nin expression starting at\
    \ /tmp/tmp3wtk7pvq.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp22peskwi.jl:7\nin expression starting at /tmp/tmp22peskwi.jl:7\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        count_one_ends(n-1) + count_one_ends(n-2) \nend\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnp7t9onq.jl:7\nin expression starting at /tmp/tmpnp7t9onq.jl:7\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy08eib7l.jl:11\nin expression starting at\
    \ /tmp/tmpy08eib7l.jl:11\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n) \n            digits_count = length(digits)\n         \
    \   digits_count_plus_one = digits_count + 1\n            digits_count_minus_one\
    \ = digits_count - 1\n            digits_count_minus_one_plus_one = digits_count_minus_one\
    \ + 1\n            digits_count_minus_one_minus_one = digits_count_minus_one -\
    \ 1\n            digits_count_minus_one_minus_one_plus_one = digits_count_minus_one_minus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_plus_one = digits_count_minus_one_minus_one_minus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one - 1\n     \
    \       digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ + 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ - 1\n            digits_count_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one\
    \ = digits_count_\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv135d9zy.jl:7\nin expression starting at /tmp/tmpv135d9zy.jl:7\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmaim1a27.jl:11\nin expression starting at\
    \ /tmp/tmpmaim1a27.jl:11\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo3wfe2ur.jl:7\nin expression starting at /tmp/tmpo3wfe2ur.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of integers that start or end with\
    \ 1, and that do not start or end with 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplklu3iqg.jl:11\nin expression starting at\
    \ /tmp/tmplklu3iqg.jl:11\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzl_60qfc.jl:11\nin expression starting at\
    \ /tmp/tmpzl_60qfc.jl:11\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n::Int64)\n            start = digits[1]\n            end\
    \ = digits[end]\n            digits_start = digits[start]\n            digits_end\
    \ = digits[end]\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - 1\n            digits_start = digits_start - 1\n            digits_end\
    \ = digits_end - \nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpociofjfn.jl:7\nin expression starting at /tmp/tmpociofjfn.jl:7\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        n <- n \n        i <- 0 \n       \
    \ count <- 0 \n        while i < n \n            do if n%10 == 1 \n          \
    \      then count <- count + 1 \n                else if n%10 == 0 \n        \
    \            then count <- count + 0 \n                    else count <- count\
    \ + 1 \n            i <- i + 1 \n        return count \nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 0.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2m0pc43t.jl:7\nin expression starting at /tmp/tmp2m0pc43t.jl:7\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\n@time starts_one_ends(10)\n</cell>\n<text>\nThe function\
    \ above is recursive, meaning that it calls itself over and over again until it\
    \ reaches the base case. Julia is smart enough to optimize this and turn the recursive\
    \ function into a loop.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkf02lmgp.jl:11\nin expression starting at\
    \ /tmp/tmpkf02lmgp.jl:11\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        x <- starts_one_ends(n-1) \n        if n == 1 \n         \
    \   then return 1 \n        else \n            if x == 0 \n                then\
    \ return 0 \n            else \n                y <- starts_one_ends(n-2) \n \
    \               if y == 0 \n                    then return 1 \n             \
    \   else \n                    if x == y \n                        then return\
    \ 1 \n                    else \n                        if x != y \n        \
    \                    then return 0 \n                        else \n         \
    \                   return 0 \nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of positive\
    \ integers that end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcebt336m.jl:7\nin expression starting at /tmp/tmpcebt336m.jl:7\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        local i = 1\n        while i <= n \n            do if i%10 == 1 \n  \
    \              then count = count + 1\n                else count = count + 1\n\
    \            end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp3cr5_l4.jl:7\nin expression starting at /tmp/tmpp3cr5_l4.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplcgdgwa2.jl:8\nin expression starting at /tmp/tmplcgdgwa2.jl:8\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10)\nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(123456789)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1o0fbszd.jl:11\nin expression starting at\
    \ /tmp/tmp1o0fbszd.jl:11\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        count_starts_ends(n-1) + count_starts_ends(n) \nend\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.4>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.4>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.4>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.4>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.4>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.4>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.4>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.4>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.4>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.4>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.4>\ncount_starts_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t\
    @test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz5q9jg62.jl:7\nin expression starting at /tmp/tmpz5q9jg62.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        count_starts_ends(n-1) + count_starts_ends(n-2) + count_starts_ends(n-3)\
    \ + count_starts_ends(n-4) + count_starts_ends(n-5) + count_starts_ends(n-6) +\
    \ count_starts_ends(n-7) + count_starts_ends(n-8) + count_starts_ends(n-9)\nend\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.0>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.0>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.0>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\ncount_start\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv2gvtqj7.jl:7\nin expression starting at /tmp/tmpv2gvtqj7.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n - 1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6en0vlcb.jl:8\nin expression starting at /tmp/tmp6en0vlcb.jl:8\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0_1f_sn.jl:8\nin expression starting at /tmp/tmpe0_1f_sn.jl:8\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2juyuh0.jl:8\nin expression starting at /tmp/tmpx2juyuh0.jl:8\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3aa8u2ks.jl:7\nin expression starting at /tmp/tmp3aa8u2ks.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        return 1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of positive integers that\
    \ start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2zgj38o2.jl:7\nin expression starting at /tmp/tmp2zgj38o2.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwex4600.jl:8\nin expression starting at /tmp/tmpfwex4600.jl:8\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local count = 1\n        while n > 1 \n            do\
    \ count = count + 1\n            n = n / 10\n        end\n        return count\n\
    end\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(-2)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(0)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(2)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(3)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(4)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(5)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(6)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(7)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(8)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(9)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(11)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(12)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(13)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(14)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(15)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(16)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(17)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(18)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(19)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(20)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(21)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(22)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(23)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(24)\n</cell>\n<code language=\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvgf79eze.jl:7\nin expression starting at /tmp/tmpvgf79eze.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        val ones = starts_one_ends(n-1) +\
    \ starts_one_ends(n-2) \n        val zeros = starts_one_ends(n-1) + starts_one_ends(n-3)\
    \ \n        if zeros == 1 \n            then return ones \n            else return\
    \ zeros \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive\
    \ integer n, return the count of the numbers of n-digit\n    positive integers\
    \ that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbg7dq4jk.jl:7\nin expression starting at /tmp/tmpbg7dq4jk.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_starts_one_ends(n-1)\
    \ + count_starts_one_ends(n-2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\ncount_starts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(1000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\ncount_starts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(10000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(100000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_one_ends(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\ncount_starts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_starts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwula73nh.jl:7\nin expression starting at /tmp/tmpwula73nh.jl:7\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 10 == 1 \n       \
    \ then return starts_one_ends(n / 10) + 1\n    else if n % 10 == 0 \n        then\
    \ return starts_one_ends(n / 10) + starts_one_ends(n / 10) + 1\n    else return\
    \ starts_one_ends(n / 10) + starts_one_ends(n / 10) + starts_one_ends(n / 10)\
    \ + 1\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(987654321)\n</cell>\n<code language=julia-1.5>\nstarts_one_\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_6ipkoo5.jl:7\nin expression starting at /tmp/tmp_6ipkoo5.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        count_one_ends(n-1) + count_one_ends(n-2) \nend\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(10000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\ncount_one_ends(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\ncount_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    count_one_ends(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\ncount_one_ends(100\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv2fsau3y.jl:7\nin expression starting at /tmp/tmpv2fsau3y.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo3wfe2ur.jl:7\nin expression starting at /tmp/tmpo3wfe2ur.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000013)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvclcte5k.jl:8\nin expression starting at /tmp/tmpvclcte5k.jl:8\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        local count = 1\n        local i = 1\n        while i\
    \ <= n \n            do if i mod 10 == 1 \n                then count = count\
    \ + 1\n                else count = count + 1\n            end\n            i\
    \ = i + 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt65ogblv.jl:7\nin expression starting at /tmp/tmpt65ogblv.jl:7\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n//10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2619_a3.jl:11\nin expression starting at\
    \ /tmp/tmpv2619_a3.jl:11\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return starts_one_ends(n-1) + ends_one_starts(n-1)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzhl9g1dd.jl:7\nin expression starting at /tmp/tmpzhl9g1dd.jl:7\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaddbq2jr.jl:11\nin expression starting at\
    \ /tmp/tmpaddbq2jr.jl:11\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i = 1\n \
    \       local count = 0\n        while i <= n \n            do if starts_one_ends(i)\
    \ == 1 \n                then count = count + 1\n                else return count\n\
    \            end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7ejk7ly1.jl:7\nin expression starting at /tmp/tmp7ejk7ly1.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return starts_one_ends(n-1) + 1 \n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0sw2tz7f.jl:7\nin expression starting at /tmp/tmp0sw2tz7f.jl:7\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else \n        count_one_ends(n-1) + count_one_ends(n-2) + count_one_ends(n-3)\
    \ + count_one_ends(n-4) + count_one_ends(n-5) + count_one_ends(n-6) + count_one_ends(n-7)\
    \ + count_one_ends(n-8) + count_one_ends(n-9) + count_one_ends(n-10)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp2asjlxq.jl:7\nin expression starting at /tmp/tmpp2asjlxq.jl:7\n"
  stdout: ''
  timestamp: 1659822825
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that end with 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp25mt_cwt.jl:11\nin expression starting at\
    \ /tmp/tmp25mt_cwt.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        val x = starts_one_ends(n-1) \n  \
    \      val y = starts_one_ends(n-2) \n        if x == 1 \n            then return\
    \ 1 \n            else if y == 1 \n                then return 1 \n          \
    \      else return x + y \nend\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo2c1jynk.jl:7\nin expression starting at /tmp/tmpo2c1jynk.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(123456789)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive integers that start or end with 2.\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6yvsxjax.jl:11\nin expression starting at\
    \ /tmp/tmp6yvsxjax.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        local count = 0 \n        while n > 0 \n            do \n\
    \                if n % 10 == 1 \n                    then count = count + 1 \n\
    \                else \n                    n = n / 10 \n            end \n  \
    \      end \n        return count \nend \n\"\"\"\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgtjw85ib.jl:7\nin expression starting at /tmp/tmpgtjw85ib.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n</cell>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoh81dq53.jl:8\nin expression starting at /tmp/tmpoh81dq53.jl:8\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local count = 1\n\
    \        while n >= 10 \n            do n = n / 10\n            count = count\
    \ + 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgdbd5l90.jl:7\nin expression starting at /tmp/tmpgdbd5l90.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \   else \n        local count = 1\n        while n >= 10 \n            then n\
    \ = n / 10\n            then count = count + 1\n        end\n        return count\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567891)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678910)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789010)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(123456789011)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1234567890100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890101)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901010)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901011)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789010100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789010101)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890101010)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1234567890101011)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901010100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901010101)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789010101010)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789010101011)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890101010100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1234567890101010101)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901010101010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901010101011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789010101010100)\n</cell>\n<code\
    \ language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoy212i2c.jl:7\nin expression starting at /tmp/tmpoy212i2c.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n - 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64xofnf9.jl:11\nin expression starting at\
    \ /tmp/tmp64xofnf9.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 2 \n        then return 0\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_end\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqzf41qtb.jl:7\nin expression starting at /tmp/tmpqzf41qtb.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9wdj4zv.jl:11\nin expression starting at\
    \ /tmp/tmpz9wdj4zv.jl:11\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl9zal5tc.jl:11\nin expression starting at\
    \ /tmp/tmpl9zal5tc.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ / 10)\n    end\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(123456789)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7so3ryf3.jl:8\nin expression starting at /tmp/tmp7so3ryf3.jl:8\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa57eg4jm.jl:11\nin expression starting at\
    \ /tmp/tmpa57eg4jm.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \        else if n % 10 == 1 \n            then return 1 \n            else return\
    \ starts_one_ends(n / 10) + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100_000)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to a given positive integer\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptis7sh_v.jl:7\nin expression starting at /tmp/tmptis7sh_v.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn30sq7pe.jl:8\nin expression starting at /tmp/tmpn30sq7pe.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n - 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6if3_0v3.jl:11\nin expression starting at\
    \ /tmp/tmp6if3_0v3.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else break\n\
    \            end\n            i = i + 1\n        end\n        return count\n \
    \   end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(2)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(3)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(4)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(5)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(6)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(7)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(8)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(9)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(11)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(12)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(13)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(14)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(15)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(16)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(17)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(18)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(19)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(20)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(21)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(22)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(23)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(24)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(25)\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2pbwykx6.jl:7\nin expression starting at /tmp/tmp2pbwykx6.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0\n        then return -1\n    else if n == 1\n        then return\
    \ 1\n    else \n        local i::Int64 = 1\n        local count::Int64 = 0\n \
    \       while i <= n \n            do if i %% 10 == 1 \n                then count\
    \ = count + 1\n                else return -1\n            end\n            i\
    \ = i + 1\n        end\n        return count\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7gm21ai_.jl:7\nin expression starting at /tmp/tmp7gm21ai_.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n - 1)\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6m_s8x40.jl:8\nin expression starting at /tmp/tmp6m_s8x40.jl:8\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n < 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        let\n            digits = digits(n)\n            start\
    \ = digits[1]\n            end = digits[end]\n            count = 0\n        \
    \    for i in digits[2:end]\n                count = count + starts_one_ends(i)\n\
    \            count = count + starts_one_ends(end)\n        return count\nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567891)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(12345678901234)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(123456789012345)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(123456789012345678)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1234567890123456788)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12345678901234567889)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678899)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789012345678899999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(12345678901234567889999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890123456788999999999)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1234567890\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkebr23t1.jl:7\nin expression starting at /tmp/tmpkebr23t1.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(123456789)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2y7968w8.jl:11\nin expression starting at\
    \ /tmp/tmp2y7968w8.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxzzzviv.jl:11\nin expression starting at\
    \ /tmp/tmpgxzzzviv.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.3>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.3>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphoialvic.jl:11\nin expression starting at\
    \ /tmp/tmphoialvic.jl:11\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2) + 1\n    else \n        return starts_one_ends(n\
    \ / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of positive integers\
    \ that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo3dvkltt.jl:7\nin expression starting at /tmp/tmpo3dvkltt.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i = 1\n \
    \       local count = 0\n        while i <= n \n            do if i %% 10 == 1\
    \ \n                then count = count + 1\n                else break\n     \
    \       end\n            i = i + 1\n        end\n        return count\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer n, return the\
    \ count of the numbers of n-digit\n    positive integers that start or end with\
    \ 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu1mhlua2.jl:7\nin expression starting at /tmp/tmpu1mhlua2.jl:7\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        local count = 1\n\
    \        while n >= 10 \n            do count = count + 1\n            n = n /\
    \ 10\n        end\n        return count\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpliqesiqn.jl:7\nin expression starting at /tmp/tmpliqesiqn.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0y3ekdlu.jl:11\nin expression starting at\
    \ /tmp/tmp0y3ekdlu.jl:11\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of positive integers\
    \ that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpodub306p.jl:8\nin expression starting at /tmp/tmpodub306p.jl:8\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        return starts_one_ends(n-1) + ends_one_starts(n-1)\
    \ \nend\n\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwxl2yytt.jl:7\nin expression starting at /tmp/tmpwxl2yytt.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \       else return 0\n    end\nend\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphs5ninyc.jl:7\nin expression starting at /tmp/tmphs5ninyc.jl:7\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdv1sg81c.jl:11\nin expression starting at\
    \ /tmp/tmpdv1sg81c.jl:11\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdld7in7x.jl:11\nin expression starting at\
    \ /tmp/tmpdld7in7x.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n < 0 \n        then return 0\n    else \n        count_starts_ends(n-1,\
    \ n+1) - count_starts_ends(n-1, n)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(0, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(1,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(2, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(3, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(4, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(5,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(6, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(7, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(8, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(9,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(10, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(11, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(12, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(13,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(14, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(15, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(16, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(17,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(18, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(19, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(20, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(21,\
    \ 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(22, 10)\n</cell>\n\
    <code language=julia-1.5>\ncount_starts_ends(23, 10)\n</cell>\n<code language=julia-1.5>\n\
    count_starts_ends(24, 10)\n</cell>\n<code language=julia-1.5>\ncount_starts_ends(25,\
    \ 10)\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjkak6z_l.jl:7\nin expression starting at /tmp/tmpjkak6z_l.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        local i::Int64\
    \ = 1\n        local count::Int64 = 0\n        while i <= n \n            do if\
    \ i%10 == 1 \n                then count = count + 1\n                else break\n\
    \            end\n            i = i + 1\n        end\n        return count\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a positive integer n, return\
    \ the count of the numbers of n-digit\n    positive integers that start or end\
    \ with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq0wu4zco.jl:7\nin expression starting at /tmp/tmpq0wu4zco.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            first = digits[1]\n            rest = digits[2:end]\n\
    \        in \n            if first == 1\n                then starts_one_ends(rest)\n\
    \                else starts_one_ends(rest) + starts_one_ends(first)\n       \
    \ end\nend\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(123456789)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1234567891)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(12345678901)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(123456789012)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890123)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(12345678901234)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(12345678901234567)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(123456789012345678)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890123456788)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(12345678901234567889)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(123456789012345678899)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1234567890123456788999)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(12345678901234567889999)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(123456789012345678899999)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(1234567890123456788999999)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(12345678901234567889999999)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1234567890123456788999999999)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(12345678901234567889999999999)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(12345678901234567889999999999999)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1234567890\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx8298id1.jl:7\nin expression starting at /tmp/tmpx8298id1.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(11)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(12)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(13)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(14)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(15)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(16)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(17)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(18)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(19)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(20)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(21)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(22)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(23)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(24)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(25)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(26)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(27)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(28)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(29)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(30)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(31)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(32)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(33)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(34)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(35)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(36)\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4eoo_l1r.jl:8\nin expression starting at /tmp/tmp4eoo_l1r.jl:8\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(1000000000013)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnrnp012f.jl:8\nin expression starting at /tmp/tmpnrnp012f.jl:8\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(123)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(124)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(125)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(126)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(127)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(128)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(129)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(130)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(131)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(132)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(133)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(134)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(135)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(136)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(137)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(138)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(139)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(140)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(141)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(142)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(143)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(144)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(145)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(146)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(147)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(148)\n</cell>\n<code language=julia-1.5>\nstarts_\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ub5rd4z.jl:11\nin expression starting at\
    \ /tmp/tmp5ub5rd4z.jl:11\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else if n % 10 == 1 \n            then return starts_one_ends(n / 10)\
    \ + 1\n            else return starts_one_ends(n / 10) + 1\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.0>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.0>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.0>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.0>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.0>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp3b4bd37.jl:7\nin expression starting at /tmp/tmpp3b4bd37.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n\
    \    positive integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpofq0y_qc.jl:7\nin expression starting at /tmp/tmpofq0y_qc.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        1 + starts_one_ends(n - 1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6en0vlcb.jl:8\nin expression starting at /tmp/tmp6en0vlcb.jl:8\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of positive integers less than or equal to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wd2ioln.jl:11\nin expression starting at\
    \ /tmp/tmp5wd2ioln.jl:11\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        x <- starts_one_ends(n-1) \n        if n % 10 == 1 \n    \
    \        then return x + 1 \n        else return x \nend \n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4nh0c7jp.jl:7\nin expression starting at /tmp/tmp4nh0c7jp.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n/2)\n    else \n        then return starts_one_ends(n/2)\
    \ + starts_one_ends(n-1)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers less than or equal to a given integer n.\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7hjmhknd.jl:7\nin expression starting at /tmp/tmp7hjmhknd.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo3wfe2ur.jl:7\nin expression starting at /tmp/tmpo3wfe2ur.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) \nend\n</cell>\n<code language=julia-1.4>\ncount_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5_3jibsb.jl:7\nin expression starting at /tmp/tmp5_3jibsb.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10) + starts_one_ends(n%10)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(123456789)\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the number of integers that start\
    \ or end with 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqf9ul4eh.jl:7\nin expression starting at /tmp/tmpqf9ul4eh.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return n\n    else\
    \ \n        return starts_one_ends(n/10) + n%10 == 1 ? 1 : 0\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a positive integer n, return the count\
    \ of the numbers of n-digit\n    positive integers that start or end with 1.\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) ==\
    \ 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplt87ku3_.jl:11\nin expression starting at\
    \ /tmp/tmplt87ku3_.jl:11\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000000)\n\
    </cell>\n\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqboe6s7g.jl:8\nin expression starting at /tmp/tmpqboe6s7g.jl:8\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n / 10) \nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of positive integers less than or equal to n that start or end with\
    \ 1.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8l827o0b.jl:11\nin expression starting at\
    \ /tmp/tmp8l827o0b.jl:11\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000002)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000006)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000013)\n</cell>\n<code language=juli\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmper6fg53n.jl:11\nin expression starting at\
    \ /tmp/tmper6fg53n.jl:11\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    else \n        let\n            digits = digits(n)\
    \ \n            digits_count = length(digits) \n            digits_sum = sum(digits)\
    \ \n            digits_product = prod(digits) \n            digits_quotient =\
    \ quo(digits_sum, digits_count) \n            digits_remainder = rem(n,digits_count)\
    \ \n            digits_quotient_remainder = quo(digits_quotient, digits_remainder)\
    \ \n            digits_quotient_remainder_product = quo(digits_quotient_remainder,\
    \ digits_product) \n            digits_quotient_remainder_product_sum = quo(digits_quotient_remainder_product,\
    \ digits_sum) \n            digits_quotient_remainder_product_sum_product = quo(digits_quotient_remainder_product_sum,\
    \ digits_product) \n            digits_quotient_remainder_product_sum_product_quotient\
    \ = quo(digits_quotient_remainder_product_sum_product, digits_quotient) \n   \
    \         digits_quotient_remainder_product_sum_product_quotient_remainder = quo(digits_quotient_remainder_product_sum_product_quotient,\
    \ digits_remainder) \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder, digits_product)\
    \ \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder_product,\
    \ digits_sum) \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum,\
    \ digits_product) \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product_quotient\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product,\
    \ digits_quotient) \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product_quotient_remainder\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product_quotient,\
    \ digits_remainder) \n            digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product_quotient_remainder_product\
    \ = quo(digits_quotient_remainder_product_sum_product_quotient_remainder_product_sum_product_quotient_remainder,\
    \ digits_product) \n            digits_quotient_remainder_product_sum_product_quotient_remain\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnbgbb1sa.jl:7\nin expression starting at /tmp/tmpnbgbb1sa.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn30sq7pe.jl:8\nin expression starting at /tmp/tmpn30sq7pe.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        let\n         \
    \   digits = digits(n)\n            start = digits[1]\n            end = digits[end]\n\
    \        in \n            if start == 1 \n                then starts_one_ends(end\
    \ - 1)\n            else \n                starts_one_ends(end - 1) + starts_one_ends(end\
    \ - 2)\n        end\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2o0yom8l.jl:7\nin expression starting at /tmp/tmp2o0yom8l.jl:7\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_end\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptrr5bf9z.jl:7\nin expression starting at /tmp/tmptrr5bf9z.jl:7\n"
  stdout: ''
  timestamp: 1659822829
