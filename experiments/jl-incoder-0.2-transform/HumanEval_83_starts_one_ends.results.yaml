language: jl
name: HumanEval_83_starts_one_ends
results:
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the number of positive integers that start or end with 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn9tpj2e.jl:11\nin expression starting at\
    \ /tmp/tmpfn9tpj2e.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 0 \n    else\
    \ \n        return 1 + starts_one_ends(n//10) \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of positive integers less than or equal to a given integer n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaem96qny.jl:11\nin expression starting at\
    \ /tmp/tmpaem96qny.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2)\nend\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(100000000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000000000000)\n</cell>\n\
    <code language=julia-1.1>\nstarts_one_ends(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.1>\nstarts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.1>\n\
    starts_one_ends(10000000000000000000)\n</cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.1>\nstarts_one_ends(1000000000000000000\nusing\
    \ Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuob08pt0.jl:7\nin expression starting at /tmp/tmpuob08pt0.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0 \n\
    \    else \n        val c = starts_one_ends(n-1) \n        if n % 10 == 1 \n \
    \           then return c + 1 \n        else return c \nend \n\"\"\"\n    Given\
    \ a positive integer n, return the count of the numbers of n-digit\n    positive\
    \ integers that start or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3fc6gjns.jl:7\nin expression starting at /tmp/tmp3fc6gjns.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n/10) + 1 \nend\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(10000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(100000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nstarts_one_ends(10000000000)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(100000000000)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000001)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000003)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000004)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000005)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000007)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000008)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000009)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.4>\n\
    starts_one_ends(1000000000011)\n</cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000012)\n\
    </cell>\n<code language=julia-1.4>\nstarts_one_ends(1000000000013)\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(\nusing Test\n\n@testset begin\n\n\
    candidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp29h5b3al.jl:11\nin expression starting at\
    \ /tmp/tmp29h5b3al.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1 \n\
    \        else return 0 \n    end\nend\n\"\"\"\n    Given a positive integer n,\
    \ return the count of the numbers of n-digit\n    positive integers that start\
    \ or end with 1.\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo3wfe2ur.jl:7\nin expression starting at /tmp/tmpo3wfe2ur.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers that start or end\
    \ with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp62hpwsl8.jl:11\nin expression starting at\
    \ /tmp/tmp62hpwsl8.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdld7in7x.jl:11\nin expression starting at\
    \ /tmp/tmpdld7in7x.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        then return 1\n \
    \   else if n == 0 \n        then return 0\n    else \n        count_starts_ends(n-1)\
    \ + count_starts_ends(n-2) + count_starts_ends(n-3) + count_starts_ends(n-4) +\
    \ count_starts_ends(n-5) + count_starts_ends(n-6)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(10)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(100000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(10000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.3>\ncount_starts_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\ncount_starts_ends(100000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    count_starts_ends(1000000000000000000)\n</cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\ncount_starts_ends(100000000000000000000000)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf_4id970.jl:7\nin expression starting at /tmp/tmpf_4id970.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2 + 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn2pfnoby.jl:7\nin expression starting at /tmp/tmpn2pfnoby.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return starts_one_ends(n / 2)\n    else \n        return starts_one_ends(n /\
    \ 2) + starts_one_ends(n / 2 - 1)\nend\n</cell>\n<code language=julia-1.3>\nstarts_one_ends(10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of positive\
    \ integers that start or end with 2.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\
    \t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcw3gl_25.jl:7\nin expression starting at /tmp/tmpcw3gl_25.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else \n        local i::Int64 = 1\n        local count::Int64 = 0\n      \
    \  while i <= n \n            do if i%10 == 1 \n                then count = count\
    \ + 1\n                else return count\n            end\n            i = i +\
    \ 1\n        end\n        return count\nend\n</cell>\n<code language=julia-1.3>\n\
    starts_one_ends(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of integers from 1 to n that are\ndivisible by 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t\
    @test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1y75nv_r.jl:7\nin expression starting at /tmp/tmp1y75nv_r.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else if n % 10 == 1 \n            then return starts_one_ends(n / 10)\n\
    \            else return starts_one_ends(n / 10) + 1\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100\nusing Test\n\n@testset begin\n\
    \ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdmrus_55.jl:7\nin expression starting at /tmp/tmpdmrus_55.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 0 \n        then return 0\n \
    \   else if n == 1 \n        then return 1\n    else \n        count_one_ends(n-1)\
    \ + count_one_ends(n-2) + count_one_ends(n-3) + count_one_ends(n-4) + count_one_ends(n-5)\
    \ + count_one_ends(n-6) + count_one_ends(n-7) + count_one_ends(n-8) + count_one_ends(n-9)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdw2l0uy3.jl:7\nin expression starting at /tmp/tmpdw2l0uy3.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n//10) + starts_one_ends(n%10) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers that start\
    \ or end with 2.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpugoib0qq.jl:11\nin expression starting at\
    \ /tmp/tmpugoib0qq.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        then return 1\n \
    \       else return starts_one_ends(n//10)*10 + n % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprw8tr4xg.jl:7\nin expression starting at /tmp/tmprw8tr4xg.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(100)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstarts_one_ends(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10000000000)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000002)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000006)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(1000000000010)\n</cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstarts_one_ends(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstarts_one_ends(1000000000013)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(2) == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4)\
    \ == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn30sq7pe.jl:8\nin expression starting at /tmp/tmpn30sq7pe.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 0 \n        error(\"n must be\
    \ positive\")\n    else if n == 0 \n        1\n    else \n        1 + starts_one_ends(n\
    \ / 10)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0r9awo8.jl:8\nin expression starting at /tmp/tmpc0r9awo8.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n == 1 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n-1) + ends_one_starts(n-1) \nend\n</cell>\n\
    <code language=julia-1.4>\nstarts_one_ends(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of positive integers less than or equal\
    \ to a given integer n.\nusing Test\n\n@testset begin\n\ncandidate = starts_one_ends;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(2) == 18)\n\t@test(candidate(3)\
    \ == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5) == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmgq8eio.jl:11\nin expression starting at\
    \ /tmp/tmpdmgq8eio.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a positive integer n, return the count of the numbers\
    \ of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\nfunction\
    \ starts_one_ends(n::Int64)::Int64 \n    if n < 10 \n        return 1 \n    else\
    \ \n        return starts_one_ends(n / 10) + 1 \nend\n</cell>\n<code language=julia-1.5>\n\
    starts_one_ends(10)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = starts_one_ends;\n\t@test(candidate(1) == 1)\n\t@test(candidate(2)\
    \ == 18)\n\t@test(candidate(3) == 180)\n\t@test(candidate(4) == 1800)\n\t@test(candidate(5)\
    \ == 18000)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6rp6zij.jl:11\nin expression starting at\
    \ /tmp/tmpd6rp6zij.jl:11\n"
  stdout: ''
