language: jl
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = digests.MD5()\n        md5_hash.update(text)\n        return md5_hash.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoe7xjkpt.jl:10\nin expression starting at /tmp/tmpoe7xjkpt.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncs7udbb.jl:15\nin expression starting at\
    \ /tmp/tmpncs7udbb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5_hash(string)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqa9udqqz.jl:15\nin expression starting at\
    \ /tmp/tmpqa9udqqz.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<text>\nExercise 7\nWrite a function that\
    \ takes a string and returns the md5 hash equivalent of the string if it starts\
    \ with 'http', otherwise returns None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0b2e3xdy.jl:10\nin expression starting at /tmp/tmp0b2e3xdy.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = Digest.new(\"md5\") \n        digest.update(text) \n        return digest.hexdigest\
    \ \nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibszpkfd.jl:16\nin expression starting at\
    \ /tmp/tmpibszpkfd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaur8svfk.jl:15\nin expression starting at\
    \ /tmp/tmpaur8svfk.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpekt_yxzd.jl:15\nin expression starting at\
    \ /tmp/tmpekt_yxzd.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = digest.MD5()\n        md5_hash.update(text)\n        return md5_hash.digest()\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpngdlaq4o.jl:10\nin expression starting at /tmp/tmpngdlaq4o.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjc2je95.jl:15\nin expression starting at\
    \ /tmp/tmpsjc2je95.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string\
    \ in hexadecimal format. If 'text' is an empty string, return None.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7md0xt8.jl:15\nin expression starting at\
    \ /tmp/tmpa7md0xt8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr04egt9r.jl:15\nin expression starting at\
    \ /tmp/tmpr04egt9r.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9dg8zjc.jl:15\nin expression starting at\
    \ /tmp/tmpz9dg8zjc.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent string of the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf5ivok_j.jl:15\nin expression starting at\
    \ /tmp/tmpf5ivok_j.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcazgs7l6.jl:15\nin expression starting at\
    \ /tmp/tmpcazgs7l6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ return md5(text)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnt2hptc.jl:14\nin expression starting at\
    \ /tmp/tmpsnt2hptc.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</code>\n<|/ a |>\n<| c |>\nI believe this should\
    \ be the accepted answer. Using `md5` directly is unsafe and should be avoided.\n\
    <|/ c |>\n<| a |>\nI believe this should work:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphwnrfkfq.jl:10\nin expression starting at /tmp/tmphwnrfkfq.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfgd4xf4l.jl:10\nin expression starting at /tmp/tmpfgd4xf4l.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return Nothing\n    else \n  \
    \      md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkqi0oxct.jl:10\nin expression starting at /tmp/tmpkqi0oxct.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  digest = Digest.new(\"md5\") \n        digest.update(text) \n        return\
    \ digest.hexdigest \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvjhn5uqe.jl:16\nin expression starting at\
    \ /tmp/tmpvjhn5uqe.jl:16\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        None \n    else \n        md5(text)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k013ekr.jl:14\nin expression starting at\
    \ /tmp/tmp0k013ekr.jl:14\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI believe this\
    \ should be `md5(text)` instead of `md5(string(text))`\n<|/ c |>\n<| a dscore=2\
    \ |>\nFor those who prefer to use packages, you can use the following package:\n\
    <code>\nusing MD5\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp45ff4h37.jl:10\nin expression starting at /tmp/tmp45ff4h37.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI appreciate\
    \ your answer, but this does not answer the question. Your answer does not explain\
    \ how to convert a string to md5 hash. Your answer does not explain how to convert\
    \ a md5 hash to a string. Your answer does not explain how to convert a string\
    \ to a md5 hash. Your answer does not explain how to convert a md5 hash to a string.\
    \ Your answer does not explain how to convert a string to a md5 hash. Your answer\
    \ does not explain how to convert a string to a md5 hash. Your answer does not\
    \ explain how to convert a string to a md5 hash. Your answer does not explain\
    \ how to convert a string to a md5 hash. Your answer does not explain how to convert\
    \ a string to a md5 hash. Your answer does not explain how to convert a string\
    \ to a md5 hash. Your answer does not explain how to convert a string to a md5\
    \ hash. Your answer does not explain how to convert a string to a md5 hash. Your\
    \ answer does not explain how to convert a string to a md5 hash. Your answer does\
    \ not explain how to convert a string to a md5 hash. Your answer does not explain\
    \ how to convert a string to a md5 hash. Your answer does not explain how to convert\
    \ a string to a md5 hash. Your answer does not explain how to convert a string\
    \ to a md5 hash. Your answer does not explain how to convert a string to a md5\
    \ hash. Your answer does not explain how to convert a string to a md5 hash. Your\
    \ answer does not explain how to convert a string to a md5 hash. Your answer does\
    \ not explain how to convert a string to a md5 hash. Your answer does not explain\
    \ how to convert a string to a md5 hash. Your answer does not explain how to convert\
    \ a string to a md5 hash. Your answer does not explain how to convert a string\
    \ to a md5 hash. Your answer does not explain how to convert a string to a md5\
    \ hash. Your answer does not explain how to convert a string to a md5 hash. Your\
    \ answer does not explain how to convert a string to a md5 hash. Your answer does\
    \ not explain how to convert a string to a md5 hash. Your answer does not explain\
    \ how to convert a string to a md5 hash. Your answer does not explain how to convert\
    \ a string to a md5 hash. Your answer does not explain how to convert a string\
    \ to a md5 hash. Your answer does not explain how to convert a string to a md5\
    \ hash. Your answer does not explain how to convert a string to a md5 hash. Your\
    \ answer does not explain how to convert a string to a md5 hash. Your answer does\
    \ not explain how to convert a string to a md5 hash. Your answer does not explain\
    \ how to \nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqx5jsoob.jl:10\nin expression starting at /tmp/tmpqx5jsoob.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp732n3sz7.jl:10\nin expression starting at /tmp/tmp732n3sz7.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp968cyvh.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp968cyvh.jl:1\n\
    in expression starting at /tmp/tmpp968cyvh.jl:1\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkos44ddq.jl:10\nin expression starting at /tmp/tmpkos44ddq.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfgd4xf4l.jl:10\nin expression starting at /tmp/tmpfgd4xf4l.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ digest = md5(text) \n        return digest.hexdigest() \nend\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwjsgv2pv.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwjsgv2pv.jl:1\n\
    in expression starting at /tmp/tmpwjsgv2pv.jl:1\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI believe this should be\
    \ `md5(text)`, not `md5(text::String)`.\n<|/ c |>\n<| c |>\nThanks, I fixed the\
    \ typo.\n<|/ c |>\n<| a |>\nThe accepted answer doesn't work for me in Julia 1.5.1.\
    \ I got this error:\n<code>\nERROR: LoadError: MethodError: no method matching\
    \ md5(::String)\nClosest candidates are:\n  md5(::String) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::Array{UInt8,1}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::AbstractString) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::String) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::Array{UInt8,1}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::AbstractString) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::String) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::Array{UInt8,1}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::AbstractString) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::String) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    \  md5(::Array{UInt8,1}) at /Users/julia/buildbot/worker/package_macos64/build/usr/share/julia/stdlib/v1.5/MD5.jl:9\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp041o7tmd.jl:15\nin expression starting at\
    \ /tmp/tmp041o7tmd.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = Digest(MD5()) \n        digest.update(text) \n        return digest.hexdigest()\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1ju8rqwv.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1ju8rqwv.jl:1\n\
    in expression starting at /tmp/tmp1ju8rqwv.jl:1\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncs7udbb.jl:15\nin expression starting at\
    \ /tmp/tmpncs7udbb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text.encode())\n        return\
    \ md5.digest()\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi1y739ae.jl:10\nin expression starting at /tmp/tmpi1y739ae.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0rwsrlo.jl:15\nin expression starting at\
    \ /tmp/tmpn0rwsrlo.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq_8aycgk.jl:10\nin expression starting at /tmp/tmpq_8aycgk.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjc2je95.jl:15\nin expression starting at\
    \ /tmp/tmpsjc2je95.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcazgs7l6.jl:15\nin expression starting at\
    \ /tmp/tmpcazgs7l6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text,\
    \ \"md5\")\n    end\nend\n</code>\n<|/ a tags=julia,md5 |>\n<| c |>\nThe `Digest`\
    \ function has been deprecated in favor of `Digest.md5`\n<|/ c |>\n<| a tags=julia,md5\
    \ |>\nThe accepted answer does not work for me in Julia 1.5.1. I got an error\
    \ when trying to use Digest.md5(\"Hello world\"). \nThe solution I found was to\
    \ use Digest.update(\"Hello world\") instead. \n<code>\njulia> using Digest\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8g0igdsl.jl:15\nin expression starting at\
    \ /tmp/tmp8g0igdsl.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  md5 = Digest::MD5.hexdigest(text) \n        return md5\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6b1edj6.jl:15\nin expression starting at\
    \ /tmp/tmpx6b1edj6.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the md5 hash\
    \ of that string as a hexadecimal string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5oyrkzoi.jl:10\nin expression starting at /tmp/tmp5oyrkzoi.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ return md5(text)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnyznhwnj.jl:15\nin expression starting at\
    \ /tmp/tmpnyznhwnj.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqzm_kp7d.jl:10\nin expression starting at /tmp/tmpqzm_kp7d.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_vr91h4.jl:15\nin expression starting at\
    \ /tmp/tmpj_vr91h4.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = Digest.new(\"md5\") \n        digest.update(text) \n        return digest.hexdigest\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxe3pb4b1.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxe3pb4b1.jl:1\n\
    in expression starting at /tmp/tmpxe3pb4b1.jl:1\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9mryhygx.jl:10\nin expression starting at /tmp/tmp9mryhygx.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp56ozre58.jl:15\nin expression starting at\
    \ /tmp/tmp56ozre58.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpizyik6og.jl:15\nin expression starting at\
    \ /tmp/tmpizyik6og.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfgd4xf4l.jl:10\nin expression starting at /tmp/tmpfgd4xf4l.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that converts a string to a md5\
    \ hash equivalent string and returns the md5 hash equivalent string if text is\
    \ an empty string.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuubylvyi.jl:15\nin expression starting at\
    \ /tmp/tmpuubylvyi.jl:15\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpznvz52sp.jl:10\nin expression starting at /tmp/tmpznvz52sp.jl:10\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpiz7oncze.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpiz7oncze.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n  UndefVarError: Digest not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n\
    \     @ Main /tmp/tmpiz7oncze.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpiz7oncze.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpiz7oncze.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpiz7oncze.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == nothing\n  MethodError: Cannot `convert` an object of type\
    \ Type{Nothing} to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] string_to_md5(text::String)\n   \
    \  @ Main /tmp/tmpiz7oncze.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiz7oncze.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiz7oncze.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpiz7oncze.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n  UndefVarError:\
    \ Digest not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n    \
    \ @ Main /tmp/tmpiz7oncze.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/shar"
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,md5 |>\n\
    The answer by is correct, but I wanted to add that you can also use MD5 in Julia\
    \ directly (without using any packages). \n<code>\njulia> MD5(\"Hello world\"\
    )\n\"3e25960a79dbc69b674cd4ec67a72c62\"\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    MD5 is now deprecated in Julia 1.1. Use Digest instead.\n<|/ c |>\n<| a tags=julia,md5\
    \ |>\nThe answer by is correct, but I wanted to add that you can also use MD5\
    \ in Julia directly (without using any packages). \n<code>\njulia> MD5(\"Hello\
    \ world\")\n\"3e25960a79dbc69b674cd4ec67a72c62\"\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\nusing MD5\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0o3wk3jv.jl:10\nin expression starting at /tmp/tmp0o3wk3jv.jl:10\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\"\
    ) === string_to_md5(\"Hello world\") === string_to_md5(\"Hello world\") === string_to_md5(\"\
    Hello world\") === \nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4x3f3_nw.jl:15\nin expression starting at\
    \ /tmp/tmp4x3f3_nw.jl:15\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc3cua5os.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpc3cua5os.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n  UndefVarError: md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n\
    \     @ Main /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc3cua5os.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == nothing\n  MethodError: Cannot `convert` an object of type\
    \ Type{Nothing} to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] string_to_md5(text::String)\n   \
    \  @ Main /tmp/tmpc3cua5os.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc3cua5os.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n  UndefVarError:\
    \ md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n     @ Main\
    \ /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr04egt9r.jl:15\nin expression starting at\
    \ /tmp/tmpr04egt9r.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpimql6dri.jl:15\nin expression starting at\
    \ /tmp/tmpimql6dri.jl:15\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string 'text',\
    \ return its sha1 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpws54205t.jl:10\nin expression starting at /tmp/tmpws54205t.jl:10\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string 'text',\
    \ return its sha1 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkn_ubhzs.jl:10\nin expression starting at /tmp/tmpkn_ubhzs.jl:10\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that converts a string to a md5 hash equivalent string\
    \ and returns the md5 hash equivalent string if the input string is an empty string.\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gaag77c.jl:15\nin expression starting at\
    \ /tmp/tmp9gaag77c.jl:15\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncs7udbb.jl:15\nin expression starting at\
    \ /tmp/tmpncs7udbb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr04egt9r.jl:15\nin expression starting at\
    \ /tmp/tmpr04egt9r.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  return md5(text) \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpngjbwk.jl:14\nin expression starting at\
    \ /tmp/tmpvpngjbwk.jl:14\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncs7udbb.jl:15\nin expression starting at\
    \ /tmp/tmpncs7udbb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaur8svfk.jl:15\nin expression starting at\
    \ /tmp/tmpaur8svfk.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaur8svfk.jl:15\nin expression starting at\
    \ /tmp/tmpaur8svfk.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ digest = Digest.new(\"md5\")\n        digest.update(text)\n        return digest.hexdigest()\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpytyzzj6l.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpytyzzj6l.jl:1\n\
    in expression starting at /tmp/tmpytyzzj6l.jl:1\n"
  stdout: ''
  timestamp: 1659822880
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.4>\nstring_to_md5(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of the string in hexadecimal format. For example, string_to_hexdigest(\"Hello\
    \ world\") should return \"3e25960a79dbc69b674cd4ec67a72c62\".\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4pnfij9.jl:15\nin expression starting at\
    \ /tmp/tmpa4pnfij9.jl:15\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncs7udbb.jl:15\nin expression starting at\
    \ /tmp/tmpncs7udbb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = md5(text) \n        return digest.hexdigest() \nend\n</cell>\n<code language=julia-1.5>\n\
    string_to_md5(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    \")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of its lowercase version. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of its uppercase version. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of its titlecase\
    \ version. \nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of its capitalized version. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of its lowercase and uppercase version. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of its titlecase and\
    \ capitalized version. \nWrite a function that takes a string and returns the\
    \ md5 hash equivalent of its lowercase, uppercase, titlecase and capitalized version.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ its lowercase, titlecase and capitalized version. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of its lowercase, uppercase, titlecase\
    \ and capitalized version. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of its lowercase, uppercase, titlecase and capitalized\
    \ version. \nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of its lowercase, uppercase, titlecase and capitalized version. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of its lowercase, uppercase,\
    \ titlecase and capitalized version. \nWrite a function that takes a string and\
    \ returns the md5 hash equivalent of its lowercase, uppercase, titlecase and capitalized\
    \ version. \nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of its lowercase, uppercase, titlecase and capitalized version. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of its lowercase, uppercase,\
    \ titlecase and capitalized version. \nWrite a function that takes a string and\
    \ returns the md5 hash equivalent of its lowercase, uppercase, titlecase and capitalized\
    \ version. \nWrite a function that takes a string and returns the md5 hash equivalent\
    \ of its lowercase, uppercase, titlecase and capitalized version. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of its lowercase, uppercase,\
    \ titlecase and capitalized version. \nWrite a function that takes a string and\
    \ returns the md5 hash equivalent of its lowercase, uppercase, titlecase and capitalized\
    \ version. \nWrite a function that takes a string \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyolj0rv.jl:15\nin expression starting at\
    \ /tmp/tmpkyolj0rv.jl:15\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp56ozre58.jl:15\nin expression starting at\
    \ /tmp/tmp56ozre58.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest.MD5(string_to_bytes(text))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtb0ikju.jl:15\nin expression starting at\
    \ /tmp/tmpjtb0ikju.jl:15\n"
  stdout: ''
  timestamp: 1659822880
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc3cua5os.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpc3cua5os.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n  UndefVarError: md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n\
    \     @ Main /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc3cua5os.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == nothing\n  MethodError: Cannot `convert` an object of type\
    \ Type{Nothing} to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] string_to_md5(text::String)\n   \
    \  @ Main /tmp/tmpc3cua5os.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc3cua5os.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n  UndefVarError:\
    \ md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n     @ Main\
    \ /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe3ne6g9e.jl:10\nin expression starting at /tmp/tmpe3ne6g9e.jl:10\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxkdg_xoj.jl:15\nin expression starting at\
    \ /tmp/tmpxkdg_xoj.jl:15\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest.MD5(string_to_bytes(text))\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ungy2ro.jl:15\nin expression starting at\
    \ /tmp/tmp4ungy2ro.jl:15\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncs7udbb.jl:15\nin expression starting at\
    \ /tmp/tmpncs7udbb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq_8aycgk.jl:10\nin expression starting at /tmp/tmpq_8aycgk.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,md5 |>\nThe accepted\
    \ answer doesn't work for me in Julia 1.5.1\n<code>\njulia> Digest(\"Hello world\"\
    ).hexdigest\nERROR: MethodError: no method matching Digest(::String)\nClosest\
    \ candidates are:\n  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/build/usr/share/julia/stdlib/v1.5/Digest/src/Digest.jl:16\n\
    \  Digest(::AbstractString) at /Users/julia/buildbot/worker/package_osx64/\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello\
    \ world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") ==\
    \ nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2yb5_2p1.jl:15\nin expression starting at\
    \ /tmp/tmp2yb5_2p1.jl:15\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,md5 |>\n\
    In Julia 1.5 you can use the MD5 package to compute MD5 hashes.\n<code>\nusing\
    \ MD5\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpldohvj4r.jl:10\nin expression starting at /tmp/tmpldohvj4r.jl:10\n"
  stdout: ''
  timestamp: 1659822880
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp56ozre58.jl:15\nin expression starting at\
    \ /tmp/tmp56ozre58.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI like your answer but I think\
    \ it would be better to return `nothing` instead of `nothing` as `nothing` is\
    \ an `enum` type. `nothing` can be used in `if` statements.\n<|/ c |>\n<| c |>\n\
    I agree with you. `nothing` can be used in `if` statements. But `nothing` cannot\
    \ be used in `if` statements because `nothing` is an `enum` type. `nothing` can\
    \ only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because `nothing` is an `enum` type. `nothing`\
    \ can only be used in `if` statements because \nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvyz8wond.jl:15\nin expression starting at\
    \ /tmp/tmpvyz8wond.jl:15\n"
  stdout: ''
  timestamp: 1659822880
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ return md5(text)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wwn77uq.jl:14\nin expression starting at\
    \ /tmp/tmp5wwn77uq.jl:14\n"
  stdout: ''
  timestamp: 1659822880
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7gtc_w20.jl:10\nin expression starting at /tmp/tmp7gtc_w20.jl:10\n"
  stdout: ''
  timestamp: 1659822880
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncs7udbb.jl:15\nin expression starting at\
    \ /tmp/tmpncs7udbb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp89qmq5yr.jl:10\nin expression starting at /tmp/tmp89qmq5yr.jl:10\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        Nothing \n    else \n        Digest(text)\
    \ \nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the md5 hash equivalent of the string in hexadecimal.\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zh6dzu5.jl:14\nin expression starting at\
    \ /tmp/tmp3zh6dzu5.jl:14\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkos44ddq.jl:10\nin expression starting at /tmp/tmpkos44ddq.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks for your answer! I\
    \ did some research and found that `md5` was deprecated in Julia v0.6, so I used\
    \ `hash` instead. Your code works perfectly fine. Thanks again!\n<|/ c |>\n<|\
    \ a tags=julia,md5 |>\nI used the code below to generate MD5 hash in Julia v0.6.\n\
    <code>\nusing MD5\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp94duvlxw.jl:15\nin expression starting at\
    \ /tmp/tmp94duvlxw.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncs7udbb.jl:15\nin expression starting at\
    \ /tmp/tmpncs7udbb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfgd4xf4l.jl:10\nin expression starting at /tmp/tmpfgd4xf4l.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp56ozre58.jl:15\nin expression starting at\
    \ /tmp/tmp56ozre58.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvvme4yow.jl:16\nin expression starting at\
    \ /tmp/tmpvvme4yow.jl:16\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = digests.MD5()\n        md5_hash.update(text)\n        return md5_hash.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoii3q6_e.jl:10\nin expression starting at /tmp/tmpoii3q6_e.jl:10\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpimql6dri.jl:15\nin expression starting at\
    \ /tmp/tmpimql6dri.jl:15\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ md5 = Digests.md5(text)\n        return md5\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyexd6qtr.jl:15\nin expression starting at\
    \ /tmp/tmpyexd6qtr.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncs7udbb.jl:15\nin expression starting at\
    \ /tmp/tmpncs7udbb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string as input and\
    \ returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string as input and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string as input and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string as input and returns the md5 hash equivalent\
    \ of the string. \nWrite a function that takes a string as input and returns the\
    \ md5 hash equivalent of the string. \nWrite a function that takes a string as\
    \ input and returns the md5 hash equivalent of the string. \nWrite \nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61ii2i4e.jl:15\nin expression starting at\
    \ /tmp/tmp61ii2i4e.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt1rhxkr0.jl:10\nin expression starting at /tmp/tmpt1rhxkr0.jl:10\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmxs1gz3b.jl:10\nin expression starting at /tmp/tmpmxs1gz3b.jl:10\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = Digest.new(\"md5\") \n        digest.update(text) \n        return digest.hexdigest\
    \ \nend \nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxe3pb4b1.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxe3pb4b1.jl:1\n\
    in expression starting at /tmp/tmpxe3pb4b1.jl:1\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ digest = md5(text) \n        return digest.hexdigest() \nend\n</cell>\n<code\
    \ language=julia-1.1>\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbnqbtzj.jl:15\nin expression starting at\
    \ /tmp/tmpqbnqbtzj.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  md5 = digests.md5(text) \n        return md5.hex \nend \n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuz3zfis6.jl:15\nin expression starting at\
    \ /tmp/tmpuz3zfis6.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        Nothing \n    else \n        md5(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp56b5cph3.jl:15\nin expression starting at\
    \ /tmp/tmp56b5cph3.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfgd4xf4l.jl:10\nin expression starting at /tmp/tmpfgd4xf4l.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7do8tt1.jl:15\nin expression starting at\
    \ /tmp/tmpi7do8tt1.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n  \
    \  Given a string 'text', return its md5 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwqb3hswu.jl:10\nin expression starting at /tmp/tmpwqb3hswu.jl:10\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr04egt9r.jl:15\nin expression starting at\
    \ /tmp/tmpr04egt9r.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        md5\
    \ = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4unasuxm.jl:16\nin expression starting at\
    \ /tmp/tmp4unasuxm.jl:16\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9dg8zjc.jl:15\nin expression starting at\
    \ /tmp/tmpz9dg8zjc.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest.MD5.hexdigest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7rj3ze1.jl:15\nin expression starting at\
    \ /tmp/tmpe7rj3ze1.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9mryhygx.jl:10\nin expression starting at /tmp/tmp9mryhygx.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0cad12ba.jl:15\nin expression starting at\
    \ /tmp/tmp0cad12ba.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the md5 hash of that string. \nFor example string_to_md5(\"Hello world\") should\
    \ return \"3e25960a79dbc69b674cd4ec67a72c62\".\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_go1189.jl:15\nin expression starting at\
    \ /tmp/tmpv_go1189.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc3cua5os.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpc3cua5os.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n  UndefVarError: md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n\
    \     @ Main /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc3cua5os.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == nothing\n  MethodError: Cannot `convert` an object of type\
    \ Type{Nothing} to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] string_to_md5(text::String)\n   \
    \  @ Main /tmp/tmpc3cua5os.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc3cua5os.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n  UndefVarError:\
    \ md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n     @ Main\
    \ /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the md5 hash equivalent of the string. \nIf the input is\
    \ an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8dqih1bp.jl:10\nin expression starting at /tmp/tmp8dqih1bp.jl:10\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps2ntqp1g.jl:15\nin expression starting at\
    \ /tmp/tmps2ntqp1g.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given\
    \ a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2cruwcgf.jl:10\nin expression starting at /tmp/tmp2cruwcgf.jl:10\n"
  stdout: ''
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_vr91h4.jl:15\nin expression starting at\
    \ /tmp/tmpj_vr91h4.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\") == string_to_md5(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string_to_md5(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\
    Hello world\") != string_to_md5(\"Hello world!\") || string_to_md5(\"Hello world\"\
    ) != string\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3801iqg1.jl:15\nin expression starting at\
    \ /tmp/tmp3801iqg1.jl:15\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaur8svfk.jl:15\nin expression starting at\
    \ /tmp/tmpaur8svfk.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcazgs7l6.jl:15\nin expression starting at\
    \ /tmp/tmpcazgs7l6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \nWrite a function\
    \ that takes a string and returns the md5 hash equivalent of the string. \nWrite\
    \ a function that takes a string and returns the md5 hash equivalent of the string.\
    \ \nWrite a function that takes a string and returns the md5 hash equivalent of\
    \ the string. \nWrite a function that takes a string and returns the md5 hash\
    \ equivalent of the string. \nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of the string. \nWrite a function that takes a string\
    \ and returns the md5 hash equivalent of the string. \nWrite a function that takes\
    \ a string and returns the md5 hash equivalent of the string. \n\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqta0w_g.jl:15\nin expression starting at\
    \ /tmp/tmpmqta0w_g.jl:15\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpznvz52sp.jl:10\nin expression starting at /tmp/tmpznvz52sp.jl:10\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    md5(text::String)\n\
    using Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9dg8zjc.jl:15\nin expression starting at\
    \ /tmp/tmpz9dg8zjc.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  digest = digest.MD5()\n        digest.update(text)\n        return digest.hexdigest()\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_to_md5(\"Hello world\")\n</cell>\n\
    <code language=julia-1.3>\nstring_to_md5(\"\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the md5 hash equivalent of the string\
    \ in hexadecimal.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgjdm54k1.jl:16\nin expression starting at\
    \ /tmp/tmpgjdm54k1.jl:16\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest.MD5.hexdigest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ws0jts3.jl:15\nin expression starting at\
    \ /tmp/tmp5ws0jts3.jl:15\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp516l2frl.jl:15\nin expression starting at\
    \ /tmp/tmp516l2frl.jl:15\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        Nothing \n    else \n        md5(text)\
    \ \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeebklf32.jl:14\nin expression starting at\
    \ /tmp/tmpeebklf32.jl:14\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj_vr91h4.jl:15\nin expression starting at\
    \ /tmp/tmpj_vr91h4.jl:15\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the md5 hash equivalent\
    \ of its lowercase version. Test it on several examples:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpisnzecsv.jl:15\nin expression starting at\
    \ /tmp/tmpisnzecsv.jl:15\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc3cua5os.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpc3cua5os.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n  UndefVarError: md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n\
    \     @ Main /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc3cua5os.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == nothing\n  MethodError: Cannot `convert` an object of type\
    \ Type{Nothing} to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] string_to_md5(text::String)\n   \
    \  @ Main /tmp/tmpc3cua5os.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc3cua5os.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n  UndefVarError:\
    \ md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n     @ Main\
    \ /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc3cua5os.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpc3cua5os.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n  UndefVarError: md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n\
    \     @ Main /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc3cua5os.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == nothing\n  MethodError: Cannot `convert` an object of type\
    \ Type{Nothing} to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] string_to_md5(text::String)\n   \
    \  @ Main /tmp/tmpc3cua5os.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc3cua5os.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n  UndefVarError:\
    \ md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n     @ Main\
    \ /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpznvz52sp.jl:10\nin expression starting at /tmp/tmpznvz52sp.jl:10\n"
  stdout: ''
  timestamp: 1659822879
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise: Write a function that converts a string to a md5\
    \ hash. Test it on several examples. What is the output?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkxq2nakf.jl:10\nin expression starting at /tmp/tmpkxq2nakf.jl:10\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ hash = md5(text)\n        return hash.hexdigest()\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdhugkpmq.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdhugkpmq.jl:1\n\
    in expression starting at /tmp/tmpdhugkpmq.jl:1\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp983h0cpj.jl:10\nin expression starting at /tmp/tmp983h0cpj.jl:10\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its sha1 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0cad12ba.jl:15\nin expression starting at\
    \ /tmp/tmp0cad12ba.jl:15\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ return md5(text)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp493cy5dc.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp493cy5dc.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n  UndefVarError: md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n\
    \     @ Main /tmp/tmp493cy5dc.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp493cy5dc.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp493cy5dc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp493cy5dc.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == nothing\n  MethodError: Cannot `convert` an object of type\
    \ Type{Nothing} to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] string_to_md5(text::String)\n   \
    \  @ Main /tmp/tmp493cy5dc.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp493cy5dc.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp493cy5dc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp493cy5dc.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n  UndefVarError:\
    \ md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n     @ Main\
    \ /tmp/tmp493cy5dc.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822886
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr04egt9r.jl:15\nin expression starting at\
    \ /tmp/tmpr04egt9r.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc3cua5os.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpc3cua5os.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n  UndefVarError: md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n\
    \     @ Main /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc3cua5os.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == nothing\n  MethodError: Cannot `convert` an object of type\
    \ Type{Nothing} to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] string_to_md5(text::String)\n   \
    \  @ Main /tmp/tmpc3cua5os.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc3cua5os.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n  UndefVarError:\
    \ md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n     @ Main\
    \ /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfgd4xf4l.jl:10\nin expression starting at /tmp/tmpfgd4xf4l.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text).hexdigest\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeabc4n6q.jl:15\nin expression starting at\
    \ /tmp/tmpeabc4n6q.jl:15\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string as input and returns the md5 hash\
    \ of the string converted to lowercase. \nWrite a function that takes a string\
    \ as input and returns the md5 hash of the string converted to uppercase.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello\
    \ world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") ==\
    \ nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgrz3qzb.jl:15\nin expression starting at\
    \ /tmp/tmpzgrz3qzb.jl:15\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc3cua5os.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpc3cua5os.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n  UndefVarError: md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n\
    \     @ Main /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpc3cua5os.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == nothing\n  MethodError: Cannot `convert` an object of type\
    \ Type{Nothing} to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] string_to_md5(text::String)\n   \
    \  @ Main /tmp/tmpc3cua5os.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc3cua5os.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc3cua5os.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpc3cua5os.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n  UndefVarError:\
    \ md5 not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n     @ Main\
    \ /tmp/tmpc3cua5os.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/juli"
  timestamp: 1659822882
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq_8aycgk.jl:10\nin expression starting at /tmp/tmpq_8aycgk.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer 'n' and\
    \ returns the first n prime numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcughv3dg.jl:15\nin expression starting at\
    \ /tmp/tmpcughv3dg.jl:15\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return None \n    else \n        digest\
    \ = digest(text) \n        return digest.hex \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph7sh5mit.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph7sh5mit.jl:1\n\
    in expression starting at /tmp/tmph7sh5mit.jl:1\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        Nothing\n    else \n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmponzt2e7z.jl:15\nin expression starting at\
    \ /tmp/tmponzt2e7z.jl:15\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4632e7x0.jl:10\nin expression starting at /tmp/tmp4632e7x0.jl:10\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        None \n    else \n        md5(text)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr18bqcgw.jl:14\nin expression starting at\
    \ /tmp/tmpr18bqcgw.jl:14\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a binary\
    \ 'data' string, return its md5 hash equivalent string.\n    If 'data' is an empty\
    \ string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9bk9fh3a.jl:15\nin expression starting at\
    \ /tmp/tmp9bk9fh3a.jl:15\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnvlnlbrg.jl:10\nin expression starting at /tmp/tmpnvlnlbrg.jl:10\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        None \n    else \n        md5(text)\
    \ \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpervf9mpg.jl:14\nin expression starting at\
    \ /tmp/tmpervf9mpg.jl:14\n"
  stdout: ''
  timestamp: 1659822883
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp732n3sz7.jl:10\nin expression starting at /tmp/tmp732n3sz7.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\
    \ |> Digest.new\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a string 'text', return its sha1 hash equivalent string.\n    If 'text'\
    \ is an empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp132zf7j7.jl:15\nin expression starting at\
    \ /tmp/tmp132zf7j7.jl:15\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfgd4xf4l.jl:10\nin expression starting at /tmp/tmpfgd4xf4l.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        Nothing\n    else \n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19dkwn1a.jl:15\nin expression starting at\
    \ /tmp/tmp19dkwn1a.jl:15\n"
  stdout: ''
  timestamp: 1659822884
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI used the answer\
    \ from to create a function that will return the md5 hash of a given string. \n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgzc9_det.jl:15\nin expression starting at\
    \ /tmp/tmpgzc9_det.jl:15\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeou9rxao.jl:15\nin expression starting at\
    \ /tmp/tmpeou9rxao.jl:15\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkos44ddq.jl:10\nin expression starting at /tmp/tmpkos44ddq.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7ol_6po.jl:15\nin expression starting at\
    \ /tmp/tmpi7ol_6po.jl:15\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,md5 |>\n<| a tags=julia,md5 |>\nThe accepted\
    \ answer does not work for me on Julia 1.5.1. I used the following to get the\
    \ same result as the accepted answer:\n<code>\nusing MD5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpah3ihn3z.jl:15\nin expression starting at\
    \ /tmp/tmpah3ihn3z.jl:15\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nstring_to_md5(\"Hello world\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the md5 hash equivalent of its lowercase version. Test it by printing the result\
    \ of the function on a few strings.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpia422snz.jl:15\nin expression starting at\
    \ /tmp/tmpia422snz.jl:15\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text,\
    \ \"md5\")\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given\
    \ a string 'text', return its sha1 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ixsdm8d.jl:15\nin expression starting at\
    \ /tmp/tmp2ixsdm8d.jl:15\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncs7udbb.jl:15\nin expression starting at\
    \ /tmp/tmpncs7udbb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  digest = Digest.new(\"md5\") \n        digest.update(text) \n        return\
    \ digest.hexdigest \nend \n</cell>\n<code language=julia-1.4>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgczifzvc.jl:16\nin expression starting at\
    \ /tmp/tmpgczifzvc.jl:16\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        Nothing \n    else \n        Digest(text)\
    \ \nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Given a string 'text',\
    \ return its md5 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0b7rcg3.jl:14\nin expression starting at\
    \ /tmp/tmpn0b7rcg3.jl:14\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return Nothing\n    else \n  \
    \      md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp46b8d436.jl:10\nin expression starting at /tmp/tmp46b8d436.jl:10\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5(text) \n    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf55o_5t7.jl:10\nin expression starting at /tmp/tmpf55o_5t7.jl:10\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = digest.MD5()\n        md5.update(text)\n        return md5.digest()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt1rhxkr0.jl:10\nin expression starting at /tmp/tmpt1rhxkr0.jl:10\n"
  stdout: ''
  timestamp: 1659822881
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return Nothing\n    else\n   \
    \     hash::String = md5(text)\n        return hash\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a string 'text', return its sha1 hash\
    \ equivalent string.\n    If 'text' is an empty string, return None.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjpvdqwi3.jl:10\nin expression starting at /tmp/tmpjpvdqwi3.jl:10\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else \n       \
    \ return md5(text)\nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n    Given\
    \ a string 'text', return its md5 hash equivalent string.\n    If 'text' is an\
    \ empty string, return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyv9dib5o.jl:14\nin expression starting at\
    \ /tmp/tmpyv9dib5o.jl:14\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1r5zh2z.jl:15\nin expression starting at\
    \ /tmp/tmpy1r5zh2z.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcazgs7l6.jl:15\nin expression starting at\
    \ /tmp/tmpcazgs7l6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5 = Digest.new(\"md5\") \n        md5.update(text) \n        return md5.digest()\
    \ \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string 'text',\
    \ return its sha1 hash equivalent string.\n    If 'text' is an empty string, return\
    \ None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\"\
    ) == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppda5ixe6.jl:10\nin expression starting at /tmp/tmppda5ixe6.jl:10\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n    else \n    \
    \    md5_hash = md5(text) \n        return md5_hash.hexdigest \nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\
    \t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc4af3hwe.jl:10\nin expression starting at /tmp/tmpc4af3hwe.jl:10\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9mryhygx.jl:10\nin expression starting at /tmp/tmp9mryhygx.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        md5(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr04egt9r.jl:15\nin expression starting at\
    \ /tmp/tmpr04egt9r.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1seeewg1.jl:15\nin expression starting at\
    \ /tmp/tmp1seeewg1.jl:15\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\"\n        Nothing\n    else\n        Digest(text)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a string\
    \ 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string,\
    \ return None.\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9k3zt78.jl:15\nin expression starting at\
    \ /tmp/tmpc9k3zt78.jl:15\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing \n    else \n      \
    \  digest = Digest.new(\"md5\") \n        digest.update(text) \n        return\
    \ digest.hexdigest \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\") == \"\
    3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\t@test(candidate(\"\
    A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"password\"\
    ) == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7f8bd0h.jl:16\nin expression starting at\
    \ /tmp/tmpk7f8bd0h.jl:16\n"
  stdout: ''
  timestamp: 1659822885
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        then return None \n        else return\
    \ md5(text) \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_to_md5;\n\t@test(candidate(\"Hello world\"\
    ) == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t@test(candidate(\"\") == nothing)\n\
    \t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\n\t@test(candidate(\"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9mryhygx.jl:10\nin expression starting at /tmp/tmp9mryhygx.jl:10\n"
  stdout: ''
  timestamp: 1659822878
- exit_code: 1
  program: "\"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n\
    \    If 'text' is an empty string, return None.\n\n    >>> string_to_md5(\"Hello\
    \ world\")\n    \"3e25960a79dbc69b674cd4ec67a72c62\"\n    \"\"\"\nfunction string_to_md5(text::String)::Union{String,\
    \ Nothing} \n    if text == \"\" \n        return Nothing\n    else\n        md5\
    \ = Digest.new(\"md5\")\n        md5.update(text)\n        return md5.digest().hex\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = string_to_md5;\n\t\
    @test(candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\n\t\
    @test(candidate(\"\") == nothing)\n\t@test(candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\n\t@test(candidate(\"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpt0xcp0tl.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpt0xcp0tl.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    \n  UndefVarError: Digest not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n\
    \     @ Main /tmp/tmpt0xcp0tl.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt0xcp0tl.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt0xcp0tl.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpt0xcp0tl.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"\") == nothing\n  MethodError: Cannot `convert` an object of type\
    \ Type{Nothing} to an object of type String\n  Closest candidates are:\n    convert(::Type{String},\
    \ !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] convert(#unused#::Type{Union{Nothing, String}},\
    \ x::Type)\n     @ Base ./some.jl:36\n   [2] string_to_md5(text::String)\n   \
    \  @ Main /tmp/tmpt0xcp0tl.jl:10\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt0xcp0tl.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt0xcp0tl.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpt0xcp0tl.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\n  UndefVarError:\
    \ Digest not defined\n  Stacktrace:\n   [1] string_to_md5(text::String)\n    \
    \ @ Main /tmp/tmpt0xcp0tl.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/shar"
  timestamp: 1659822887
