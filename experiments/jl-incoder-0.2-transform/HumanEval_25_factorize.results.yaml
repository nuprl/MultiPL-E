language: jl
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5uu2ws6k.jl:17\nin expression starting at\
    \ /tmp/tmp5uu2ws6k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else factor_counts[factor]\n    end\n    factor_counts = collect(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by=x->x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nfactorize(8)\n\
    </cell>\n<code language=julia-1.5>\nfactorize(25)\n</cell>\n<code language=julia-1.5>\n\
    factorize(70)\n</cell>\n<text>\nExercise 2\nWrite a function that returns all\
    \ prime factors of a given integer in the order from smallest to largest.\n  \
    \  Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpo8byukie.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo8byukie.jl:15\n\
    in expression starting at /tmp/tmpo8byukie.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bpaybju.jl:18\nin expression starting at\
    \ /tmp/tmp0bpaybju.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvx86u9ob.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvx86u9ob.jl:1\n\
    in expression starting at /tmp/tmpvx86u9ob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ > 0 else 1\n    end\n    factor_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmprla8u28v.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprla8u28v.jl:15\n\
    in expression starting at /tmp/tmprla8u28v.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvx86u9ob.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvx86u9ob.jl:1\n\
    in expression starting at /tmp/tmpvx86u9ob.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factors = []\n    for factor in factorization\n        push!(factors,\
    \ factor)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ [1]\n    factor = 1\n    while factor <= n\n        factor *= factors[1]\n \
    \       factors[1] += 1\n        if factor > n\n            factors[1] = 1\n \
    \           factors[2] = 1\n        end\n        push!(factors, factor)\n    end\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4j3hwegp.jl:25\nin expression starting at\
    \ /tmp/tmp4j3hwegp.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6vqoc07.jl:18\nin expression starting at\
    \ /tmp/tmpk6vqoc07.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1\n\
    \        return [1]\n    factors=[]\n    factor=1\n    while n>1\n        if n%factor==0\n\
    \            factor=factor+1\n            factors=append(factors,factor)\n   \
    \         n=n/factor\n        else\n            factor=factor+1\n            factors=append(factors,factor)\n\
    \            n=n/factor\n        end\n    end\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5d7ar2a.jl:29\nin expression starting at\
    \ /tmp/tmpv5d7ar2a.jl:29\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n-1)\n    factorization = factorization .+ [Int64(n)]\n    return\
    \ factorization\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort!(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nfactorize(8)\n</cell>\n<code language=julia-1.5>\n\
    factorize(25)\n</cell>\n<code language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns all prime factors of a given integer\
    \ in the order from smallest to largest.\n    Input number should be equal to\
    \ the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n\
    \    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbz01a5ob.jl:22\nin expression starting at\
    \ /tmp/tmpbz01a5ob.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factors = []\n    for factor in factorization\n        push!(factors,\
    \ factor)\n    end\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: -1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factorization = [factorization[i] | i in factorization]\n\
    \    return factorization\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycmemh9r.jl:19\nin expression starting at\
    \ /tmp/tmpycmemh9r.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5uu2ws6k.jl:17\nin expression starting at\
    \ /tmp/tmp5uu2ws6k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmekjek_7.jl:17\nin expression starting at\
    \ /tmp/tmpmekjek_7.jl:17\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else 1\n    end\n    factor_counts = collect(factor_counts)\n    factor_counts\
    \ = sort(factor_counts, by = x -> x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp6fgb7z43.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6fgb7z43.jl:15\n\
    in expression starting at /tmp/tmp6fgb7z43.jl:15\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpks3bp8kb.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpks3bp8kb.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpks3bp8kb.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpks3bp8kb.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks3bp8kb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpks3bp8kb.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpks3bp8kb.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpks3bp8kb.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks3bp8kb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpks3bp8kb.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpks3bp8kb.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpks3bp8kb.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks3bp8kb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpks3bp8kb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpks3bp8kb.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    return factor_counts\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpjrkth4lz.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpjrkth4lz.jl:27\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpjrkth4lz.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjrkth4lz.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjrkth4lz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjrkth4lz.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpjrkth4lz.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjrkth4lz.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjrkth4lz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjrkth4lz.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpjrkth4lz.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjrkth4lz.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjrkth4lz.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpjrkth4lz.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpjrkth4lz.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else factor_counts[factor]\n    end\n    factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmprc3wgjqv.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprc3wgjqv.jl:15\n\
    in expression starting at /tmp/tmprc3wgjqv.jl:15\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nfactorize(8)\n\
    </cell>\n<code language=julia-1.5>\nfactorize(25)\n</cell>\n<code language=julia-1.5>\n\
    factorize(70)\n</cell>\n<text>\nExercise\nWrite a function that returns all prime\
    \ factors of a given integer in the order from smallest to largest.\n    Input\
    \ number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0itci1g.jl:23\nin expression starting at\
    \ /tmp/tmps0itci1g.jl:23\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojfjrl8e.jl:18\nin expression starting at\
    \ /tmp/tmpojfjrl8e.jl:18\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = sort(collect(factor_counts))\n    return factor_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm4ya5i6c.jl:20\nin expression starting at\
    \ /tmp/tmpm4ya5i6c.jl:20\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for (i,factor)\
    \ in enumerate(factors)\n        factors_count[i] = factors[factor]\n    end\n\
    \    factors_count = sort(factors_count)\n    return factors_count\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dj1bo85.jl:20\nin expression starting at\
    \ /tmp/tmp6dj1bo85.jl:20\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ [1]\n    for f in factorization(n)\n        push!(factors, f)\n    end\n   \
    \ return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_al4y8la.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp_al4y8la.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factorization not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_al4y8la.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_al4y8la.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_al4y8la.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp_al4y8la.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factorization not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_al4y8la.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_al4y8la.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_al4y8la.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp_al4y8la.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factorization not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_al4y8la.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_al4y8la.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_al4y8la.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp_al4y8la.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factorization not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_al4y8la.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] "
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else factor_counts[factor]\n    end\n    factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmprc3wgjqv.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprc3wgjqv.jl:15\n\
    in expression starting at /tmp/tmprc3wgjqv.jl:15\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1 \n\
    \        return [1]\n    factors = factorize(n-1)\n    factors = [factors[i]*factors[i+1]\
    \ for i in 1:length(factors)]\n    factors = unique(factors)\n    factors = [i\
    \ for i in factors if i>1]\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphjj23eq6.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphjj23eq6.jl:1\n\
    in expression starting at /tmp/tmphjj23eq6.jl:1\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factorization = sort(factorization)\n    factorization =\
    \ unique(factorization)\n    return factorization\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41ux6hoz.jl:17\nin expression starting at\
    \ /tmp/tmp41ux6hoz.jl:17\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        Vector{1}\n    else\n        factors = factor(n)\n        Vector{Int64}(undef,\
    \ 0)\n        for factor in factors\n            push!(factors, factor)\n    \
    \        push!(factors, 1)\n        end\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns all prime factors of given integer in the order\
    \ from smallest to largest.\n    Input number should be equal to the product of\
    \ all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n  \
    \  [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15znq8fz.jl:23\nin expression starting at\
    \ /tmp/tmp15znq8fz.jl:23\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgiri3a_q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiri3a_q.jl:1\n\
    in expression starting at /tmp/tmpgiri3a_q.jl:1\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ [1]\n    i = 2\n    while i <= sqrt(n)\n        if n % i == 0\n            factors\
    \ *= i\n            n /= i\n        else\n            i += 1\n        end\n  \
    \  end\n    factors *= n\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptx24_anj.jl:25\nin expression starting at\
    \ /tmp/tmptx24_anj.jl:25\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1\n\
    \        return [1]\n    factors = factorize(n/2)\n    factors = factors .+ factors\n\
    \    factors = factors .+ factors\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_memofi.jl:19\nin expression starting at\
    \ /tmp/tmpl_memofi.jl:19\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojfjrl8e.jl:18\nin expression starting at\
    \ /tmp/tmpojfjrl8e.jl:18\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ [1]\n    for f in factorize(n-1)\n        if n % f == 0\n            push!(factors,\
    \ f)\n        end\n    end\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9xkoeb4g.jl:20\nin expression starting at\
    \ /tmp/tmp9xkoeb4g.jl:20\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = sort(factors)\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0s523ok.jl:17\nin expression starting at\
    \ /tmp/tmpf0s523ok.jl:17\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpv_5pa0mn.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpv_5pa0mn.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpv_5pa0mn.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv_5pa0mn.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv_5pa0mn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv_5pa0mn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpv_5pa0mn.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv_5pa0mn.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv_5pa0mn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv_5pa0mn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpv_5pa0mn.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpv_5pa0mn.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpv_5pa0mn.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpv_5pa0mn.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpv_5pa0mn.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmphaxemo01.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmphaxemo01.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphaxemo01.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphaxemo01.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphaxemo01.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphaxemo01.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphaxemo01.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphaxemo01.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphaxemo01.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphaxemo01.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphaxemo01.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphaxemo01.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphaxemo01.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphaxemo01.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphaxemo01.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ [1]\n    for f in factorization(n)\n        push!(factors, f)\n    end\n   \
    \ return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_al4y8la.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp_al4y8la.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factorization not defined\n\
    \  Stacktrace:\n   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_al4y8la.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_al4y8la.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_al4y8la.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp_al4y8la.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factorization not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_al4y8la.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_al4y8la.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_al4y8la.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp_al4y8la.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factorization not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_al4y8la.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_al4y8la.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_al4y8la.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp_al4y8la.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factorization not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_al4y8la.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] "
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = reverse(factors)\n   \
    \ return factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx94jxpc5.jl:17\nin expression starting at\
    \ /tmp/tmpx94jxpc5.jl:17\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == nil else factor_counts[factor]\n    end\n    factor_counts = sort(collect(factor_counts))\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmptzzewr_x.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptzzewr_x.jl:15\n\
    in expression starting at /tmp/tmptzzewr_x.jl:15\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp0iur9jp7.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp0iur9jp7.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0iur9jp7.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0iur9jp7.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0iur9jp7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0iur9jp7.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0iur9jp7.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0iur9jp7.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0iur9jp7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0iur9jp7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0iur9jp7.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0iur9jp7.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0iur9jp7.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp0iur9jp7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp0iur9jp7.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpew2vh53l.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpew2vh53l.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpew2vh53l.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpew2vh53l.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpew2vh53l.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpew2vh53l.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpew2vh53l.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpew2vh53l.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpew2vh53l.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpew2vh53l.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpew2vh53l.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpew2vh53l.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpew2vh53l.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpew2vh53l.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpew2vh53l.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts)\n    return\
    \ factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxj0g9lvz.jl:21\nin expression starting at\
    \ /tmp/tmpxj0g9lvz.jl:21\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojfjrl8e.jl:18\nin expression starting at\
    \ /tmp/tmpojfjrl8e.jl:18\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmz1ekdpg.jl:18\nin expression starting at\
    \ /tmp/tmpmz1ekdpg.jl:18\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28l_cnjk.jl:17\nin expression starting at\
    \ /tmp/tmp28l_cnjk.jl:17\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycmemh9r.jl:19\nin expression starting at\
    \ /tmp/tmpycmemh9r.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factor(n)\n    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8uo_3omt.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8uo_3omt.jl:1\n\
    in expression starting at /tmp/tmp8uo_3omt.jl:1\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgiri3a_q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiri3a_q.jl:1\n\
    in expression starting at /tmp/tmpgiri3a_q.jl:1\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpt0v0hcju.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpt0v0hcju.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpt0v0hcju.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt0v0hcju.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt0v0hcju.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt0v0hcju.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpt0v0hcju.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt0v0hcju.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt0v0hcju.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt0v0hcju.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpt0v0hcju.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpt0v0hcju.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt0v0hcju.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpt0v0hcju.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpt0v0hcju.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5uu2ws6k.jl:17\nin expression starting at\
    \ /tmp/tmp5uu2ws6k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpas8_wa43.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpas8_wa43.jl:1\n\
    in expression starting at /tmp/tmpas8_wa43.jl:1\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28l_cnjk.jl:17\nin expression starting at\
    \ /tmp/tmp28l_cnjk.jl:17\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgiri3a_q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiri3a_q.jl:1\n\
    in expression starting at /tmp/tmpgiri3a_q.jl:1\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1\n\
    \        Vector{1}\n    else\n        factors = factorize(n-1)\n        push!(factors,n)\n\
    \        return factors\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp98h8rbkk.jl:25\n  Test threw
    exception\n  Expression: candidate(2) == [2]\n  MethodError: Cannot `convert`
    an object of type Type{Vector{1}} to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmp98h8rbkk.jl:13\n   [2] factorize(n::Int64)\n     @
    Main /tmp/tmp98h8rbkk.jl:15\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp98h8rbkk.jl:25 [inlined]\n   [5]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp98h8rbkk.jl:24\ntest set: Error
    During Test at /tmp/tmp98h8rbkk.jl:26\n  Test threw exception\n  Expression: candidate(4)
    == [2, 2]\n  MethodError: Cannot `convert` an object of type Type{Vector{1}} to
    an object of type Vector{Int64}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    factorize(n::Int64)\n     @ Main /tmp/tmp98h8rbkk.jl:13\n   [2] factorize(n::Int64)
    (repeats 3 times)\n     @ Main /tmp/tmp98h8rbkk.jl:15\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/'
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycmemh9r.jl:19\nin expression starting at\
    \ /tmp/tmpycmemh9r.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycmemh9r.jl:19\nin expression starting at\
    \ /tmp/tmpycmemh9r.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hk599pu.jl:19\nin expression starting at\
    \ /tmp/tmp6hk599pu.jl:19\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp28l_cnjk.jl:17\nin expression starting at\
    \ /tmp/tmp28l_cnjk.jl:17\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgiri3a_q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiri3a_q.jl:1\n\
    in expression starting at /tmp/tmpgiri3a_q.jl:1\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0wxkv9g.jl:19\nin expression starting at\
    \ /tmp/tmpm0wxkv9g.jl:19\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvx86u9ob.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvx86u9ob.jl:1\n\
    in expression starting at /tmp/tmpvx86u9ob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[factors != 1]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxli__qg.jl:19\nin expression starting at\
    \ /tmp/tmpwxli__qg.jl:19\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort!(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6pw9ti5u.jl:22\nin expression starting at\
    \ /tmp/tmp6pw9ti5u.jl:22\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bpaybju.jl:18\nin expression starting at\
    \ /tmp/tmp0bpaybju.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bpaybju.jl:18\nin expression starting at\
    \ /tmp/tmp0bpaybju.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[factors != 1]\n    factors = factors[2:end]\n\
    \    factors = factors[factors != 1]\n    return factors\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqc7vm9j4.jl:21\nin expression starting at\
    \ /tmp/tmpqc7vm9j4.jl:21\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else 1\n    end\n    factor_counts = collect(factor_counts)\n    factor_counts\
    \ = sort(factor_counts, by=x->x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpjutu3p8c.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjutu3p8c.jl:15\n\
    in expression starting at /tmp/tmpjutu3p8c.jl:15\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwq9oanxm.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwq9oanxm.jl:1\n\
    in expression starting at /tmp/tmpwq9oanxm.jl:1\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycmemh9r.jl:19\nin expression starting at\
    \ /tmp/tmpycmemh9r.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factorization = sort(factorization)\n    factorization =\
    \ unique(factorization)\n    return factorization\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41ux6hoz.jl:17\nin expression starting at\
    \ /tmp/tmp41ux6hoz.jl:17\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bpaybju.jl:18\nin expression starting at\
    \ /tmp/tmp0bpaybju.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factor(n)\n    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8uo_3omt.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8uo_3omt.jl:1\n\
    in expression starting at /tmp/tmp8uo_3omt.jl:1\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bpaybju.jl:18\nin expression starting at\
    \ /tmp/tmp0bpaybju.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgiri3a_q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiri3a_q.jl:1\n\
    in expression starting at /tmp/tmpgiri3a_q.jl:1\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp99ehg56a.jl:19\nin expression starting at\
    \ /tmp/tmp99ehg56a.jl:19\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = sort(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7s_vrhaj.jl:18\nin expression starting at\
    \ /tmp/tmp7s_vrhaj.jl:18\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvx86u9ob.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvx86u9ob.jl:1\n\
    in expression starting at /tmp/tmpvx86u9ob.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ [1]\n    for f in factorization(n)\n        push!(factors, f)\n    end\n   \
    \ return factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzww4sju.jl:18\nin expression starting at\
    \ /tmp/tmprzww4sju.jl:18\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahr2t5v8.jl:19\nin expression starting at\
    \ /tmp/tmpahr2t5v8.jl:19\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = reverse(factors)\n   \
    \ return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_xzf7zhw.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp_xzf7zhw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_xzf7zhw.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_xzf7zhw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_xzf7zhw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_xzf7zhw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_xzf7zhw.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_xzf7zhw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_xzf7zhw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_xzf7zhw.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_xzf7zhw.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_xzf7zhw.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_xzf7zhw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_xzf7zhw.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_xzf7zhw.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n-1)\n    factorization = [n] + factorization\n    factorization\
    \ = sort(factorization)\n    return factorization\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr58nfig_.jl:17\nin expression starting at\
    \ /tmp/tmpr58nfig_.jl:17\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgiri3a_q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiri3a_q.jl:1\n\
    in expression starting at /tmp/tmpgiri3a_q.jl:1\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ [1]\n    for f in factorization(n)\n        push!(factors, f)\n    end\n   \
    \ factors\nend\n</cell>\n<code language=julia-1.4>\nfactorize(8)\n</cell>\n<code\
    \ language=julia-1.4>\nfactorize(25)\n</cell>\n<code language=julia-1.4>\nfactorize(70)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns all prime factors of\
    \ given integer in the order from smallest to largest.\n    Input number should\
    \ be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n\
    \    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkr3n69iw.jl:18\nin expression starting at\
    \ /tmp/tmpkr3n69iw.jl:18\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpimlqi17o.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpimlqi17o.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpimlqi17o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimlqi17o.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimlqi17o.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpimlqi17o.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpimlqi17o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimlqi17o.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimlqi17o.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpimlqi17o.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpimlqi17o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimlqi17o.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimlqi17o.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpimlqi17o.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpimlqi17o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bpaybju.jl:18\nin expression starting at\
    \ /tmp/tmp0bpaybju.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == nil else factor_counts[factor]\n    end\n    factor_counts = collect(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by=x->x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmphmb6q0h6.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphmb6q0h6.jl:15\n\
    in expression starting at /tmp/tmphmb6q0h6.jl:15\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[factors != 1]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxli__qg.jl:19\nin expression starting at\
    \ /tmp/tmpwxli__qg.jl:19\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for (i,factor)\
    \ in enumerate(factors)\n        factors_count[i] = factors[factor]\n    end\n\
    \    return factors_count\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevkw33he.jl:19\nin expression starting at\
    \ /tmp/tmpevkw33he.jl:19\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factor_count[i] = count(factors)\n    end\n    factor_count\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_hbvkah.jl:19\nin expression starting at\
    \ /tmp/tmpm_hbvkah.jl:19\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1\n\
    \        return [1]\n    factors = factor(n)\n    factors = sort(factors)\n  \
    \  factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2cw6c6n.jl:1\nin expression starting at /tmp/tmpv2cw6c6n.jl:1\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \    factorization = unique(factorization)\n    factorization = sort(factorization)\n\
    \    factorization = reverse(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = reverse(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsk_wfgx1.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsk_wfgx1.jl:1\n\
    in expression starting at /tmp/tmpsk_wfgx1.jl:1\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factor(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphepkmkf4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphepkmkf4.jl:1\n\
    in expression starting at /tmp/tmphepkmkf4.jl:1\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpf6sctyjm.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpf6sctyjm.jl:25\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpf6sctyjm.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf6sctyjm.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf6sctyjm.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpf6sctyjm.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpf6sctyjm.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf6sctyjm.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf6sctyjm.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpf6sctyjm.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpf6sctyjm.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf6sctyjm.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf6sctyjm.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpf6sctyjm.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpf6sctyjm.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojfjrl8e.jl:18\nin expression starting at\
    \ /tmp/tmpojfjrl8e.jl:18\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hk599pu.jl:19\nin expression starting at\
    \ /tmp/tmp6hk599pu.jl:19\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgiri3a_q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiri3a_q.jl:1\n\
    in expression starting at /tmp/tmpgiri3a_q.jl:1\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return Vector{Int64}()\n    factors = factor(n)\n    factor_counts =\
    \ count_factors(factors)\n    factor_counts = sort(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = Vector{Int64}(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgu2tr32n.jl:21\nin expression starting at\
    \ /tmp/tmpgu2tr32n.jl:21\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else 1\n    end\n    factor_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1sbv1w6w.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1sbv1w6w.jl:15\n\
    in expression starting at /tmp/tmp1sbv1w6w.jl:15\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hk599pu.jl:19\nin expression starting at\
    \ /tmp/tmp6hk599pu.jl:19\n"
  stdout: ''
  timestamp: 1659822758
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahr2t5v8.jl:19\nin expression starting at\
    \ /tmp/tmpahr2t5v8.jl:19\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpimlqi17o.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpimlqi17o.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpimlqi17o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimlqi17o.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimlqi17o.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpimlqi17o.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpimlqi17o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimlqi17o.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimlqi17o.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpimlqi17o.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpimlqi17o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpimlqi17o.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpimlqi17o.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpimlqi17o.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpimlqi17o.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1 \n\
    \        return [1]\n    factors = factorize(n-1)\n    factors = [f*factors[i]\
    \ for i,f in enumerate(factors)]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjo_xdulx.jl:15\nin expression starting at\
    \ /tmp/tmpjo_xdulx.jl:15\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = map(x -> x[1],\
    \ factor_counts)\n    return factor_counts\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp13lmgj1t.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp13lmgj1t.jl:28\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp13lmgj1t.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp13lmgj1t.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp13lmgj1t.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp13lmgj1t.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp13lmgj1t.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp13lmgj1t.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp13lmgj1t.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp13lmgj1t.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp13lmgj1t.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp13lmgj1t.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp13lmgj1t.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp13lmgj1t.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp13lmgj1t.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgiri3a_q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgiri3a_q.jl:1\n\
    in expression starting at /tmp/tmpgiri3a_q.jl:1\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpy0nlr7la.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpy0nlr7la.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpy0nlr7la.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0nlr7la.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0nlr7la.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpy0nlr7la.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpy0nlr7la.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0nlr7la.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0nlr7la.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpy0nlr7la.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpy0nlr7la.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpy0nlr7la.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpy0nlr7la.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpy0nlr7la.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpy0nlr7la.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojfjrl8e.jl:18\nin expression starting at\
    \ /tmp/tmpojfjrl8e.jl:18\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factor(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphepkmkf4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphepkmkf4.jl:1\n\
    in expression starting at /tmp/tmphepkmkf4.jl:1\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = reverse(factors)\n   \
    \ return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_xzf7zhw.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp_xzf7zhw.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_xzf7zhw.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_xzf7zhw.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_xzf7zhw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_xzf7zhw.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_xzf7zhw.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_xzf7zhw.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_xzf7zhw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_xzf7zhw.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_xzf7zhw.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_xzf7zhw.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_xzf7zhw.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp_xzf7zhw.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp_xzf7zhw.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5hvr5j_.jl:19\nin expression starting at\
    \ /tmp/tmps5hvr5j_.jl:19\n"
  stdout: ''
  timestamp: 1659822760
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n-1)\n    factorization = [factorization[i] | i in factorization]\n\
    \    return factorization\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822765
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmphaxemo01.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmphaxemo01.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphaxemo01.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphaxemo01.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphaxemo01.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphaxemo01.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphaxemo01.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphaxemo01.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphaxemo01.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphaxemo01.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphaxemo01.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphaxemo01.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphaxemo01.jl:22\ntest set:\
    \ Error During Test at /tmp/tmphaxemo01.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmphaxemo01.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = reverse(factors)\n   \
    \ factors = factors[2:end]\n    factors = sort(factors)\n    factors = reverse(factors)\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqo9y9h8z.jl:21\nin expression starting at\
    \ /tmp/tmpqo9y9h8z.jl:21\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycmemh9r.jl:19\nin expression starting at\
    \ /tmp/tmpycmemh9r.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz6vrkc3r.jl:20\nin expression starting at\
    \ /tmp/tmpz6vrkc3r.jl:20\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojfjrl8e.jl:18\nin expression starting at\
    \ /tmp/tmpojfjrl8e.jl:18\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n-1)\n    factorization = [factorization[i] | i in factorization]\n\
    \    factorization = [factorization[i] | i in factorization]\n    factorization\
    \ = [factorization[i] | i in factorization]\n    factorization = [factorization[i]\
    \ | i in factorization]\n    factorization = [factorization[i] | i in factorization]\n\
    \    factorization = [factorization[i] | i in factorization]\n    factorization\
    \ = [factorization[i] | i in factorization]\n    factorization = [factorization[i]\
    \ | i in factorization]\n    factorization = [factorization[i] | i in factorization]\n\
    \    factorization = [factorization[i] | i in factorization]\n    factorization\
    \ = [factorization[i] | i in factorization]\n    factorization = [factorization[i]\
    \ | i in factorization]\n    factorization = [factorization[i] | i in factorization]\n\
    \    factorization = [factorization[i] | i in factorization]\n    factorization\
    \ = [factorization[i] | i in factorization]\n    factorization = [factorization[i]\
    \ | i in factorization]\n    factorization = [factorization[i] | i in factorization]\n\
    \    factorization = [factorization[i] | i in factorization]\n    factorization\
    \ = [factorization[i] | i in factorization]\n    factorization = [factorization[i]\
    \ | i in factorization]\n    factorization = [factorization[i] | i in factorization]\n\
    \    factorization = [factorization[i] | i in factorization]\n    factorization\
    \ = [factorization[i] | i in factorization]\n    factorization = [factorization[i]\
    \ | i in factorization]\n    factorization = [factorization[i] | i in factorization]\n\
    \    factorization = [factorization[i] | i in factorization]\n    factorization\
    \ = [factorization[i] | i in factorization]\n    factorization = [factorization[i]\
    \ | i in factorization]\n    factorization = [factorization[i] | i in factorization]\n\
    \    factorization = [factorization[i] | i in factorization]\n    factorization\
    \ = [factorization[i] | i in factorization]\n    factorization = [factorization[i]\
    \ | i in factorization]\n    factorization = [factorization[i] | i in factorization]\n\
    \    factorization = [factorization[i] | i in factorization]\n    factorization\
    \ = [factorization[i] | i in factorization]\n    factorization = [factorization[i]\
    \ | i in factorization]\n    factorization = [factorization[i] | i in factorization]\n\
    \    factorization = [factorization[i] | i in factorization]\n    factorization\
    \ = [factorization[i] | i in \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_qxfq4s.jl:1\nin expression starting at /tmp/tmp4_qxfq4s.jl:1\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return Vector{Int64}()\n    factors = factorize(n-1)\n    factors = factors\
    \ .+ [Int64(n)]\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8pn6vd6k.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8pn6vd6k.jl:1\n\
    in expression starting at /tmp/tmp8pn6vd6k.jl:1\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bpaybju.jl:18\nin expression starting at\
    \ /tmp/tmp0bpaybju.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    factorize(8)\n</cell>\n<code language=julia-1.5>\nfactorize(25)\n</cell>\n<code\
    \ language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\nExercise: Factorization\
    \ of a number\nWrite a function that will return the factorization of given number.\
    \ \nThe function should return a list of integers representing the factors of\
    \ the given number.\nThe function should return an empty list if the given number\
    \ is less than or equal to 0.\nThe function should return a list of integers representing\
    \ the factors of the given number in descending order.\nThe function should return\
    \ a list of integers representing the factors of the given number in ascending\
    \ order.\nThe function should return a list of integers representing the factors\
    \ of the given number in descending order and in ascending order.\nThe function\
    \ should return a list of integers representing the factors of the given number\
    \ in descending order and in ascending order in one call.\nThe function should\
    \ return a list of integers representing the factors of the given number in descending\
    \ order and in ascending order in one call.\nThe function should return a list\
    \ of integers representing the factors of the given number in descending order\
    \ and in ascending order in one call.\nThe function should return a list of integers\
    \ representing the factors of the given number in descending order and in ascending\
    \ order in one call.\nThe function should return a list of integers representing\
    \ the factors of the given number in descending order and in ascending order in\
    \ one call.\nThe function should return a list of integers representing the factors\
    \ of the given number in descending order and in ascending order in one call.\n\
    The function should return a list of integers representing the factors of the\
    \ given number in descending order and in ascending order in one call.\nThe function\
    \ should return a list of integers representing the factors of the given number\
    \ in descending order and in ascending order in one call.\nThe function should\
    \ return a list of integers representing the factors of the given number in descending\
    \ order and in ascending order in one call.\nThe function should return a list\
    \ of integers representing the factors of the given number in descending order\
    \ and in ascending order in one call.\nThe function should return a list of integers\
    \ representing the factors of the given number in descending order and in ascending\
    \ order in one call.\nThe function should return a list of integers representing\
    \ the factors of the \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx9hvrwux.jl:22\nin expression starting at\
    \ /tmp/tmpx9hvrwux.jl:22\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9ql7mnqs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9ql7mnqs.jl:1\n\
    in expression starting at /tmp/tmp9ql7mnqs.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp9h1hhwm0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp9h1hhwm0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9h1hhwm0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9h1hhwm0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp9h1hhwm0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmp9h1hhwm0.jl:12\n   [2] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n"
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ducc7zd.jl:17\nin expression starting at\
    \ /tmp/tmp9ducc7zd.jl:17\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpks3bp8kb.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpks3bp8kb.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpks3bp8kb.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpks3bp8kb.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks3bp8kb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpks3bp8kb.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(4) == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpks3bp8kb.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpks3bp8kb.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks3bp8kb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpks3bp8kb.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(8) == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpks3bp8kb.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpks3bp8kb.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpks3bp8kb.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpks3bp8kb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(57) == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(n::Int64)\n     @ Main /tmp/tmpks3bp8kb.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/"
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xm3mrpz.jl:18\nin expression starting at\
    \ /tmp/tmp1xm3mrpz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojfjrl8e.jl:18\nin expression starting at\
    \ /tmp/tmpojfjrl8e.jl:18\n"
  stdout: ''
  timestamp: 1659822756
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ > 0 else 1\n    end\n    factor_counts = collect(factor_counts)\n    factor_counts\
    \ = sort(factor_counts, by = x -> x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplcsv2iqh.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplcsv2iqh.jl:15\n\
    in expression starting at /tmp/tmplcsv2iqh.jl:15\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5uu2ws6k.jl:17\nin expression starting at\
    \ /tmp/tmp5uu2ws6k.jl:17\n"
  stdout: ''
