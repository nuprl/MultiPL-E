name: HumanEval_59_largest_prime_factor
language: jl
prompt: "\"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
  \    2\n    \"\"\"\nfunction largest_prime_factor(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = largest_prime_factor;\n\t@test(candidate(15)\
  \ == 5)\n\t@test(candidate(27) == 3)\n\t@test(candidate(63) == 7)\n\t@test(candidate(330)\
  \ == 11)\n\t@test(candidate(13195) == 29)\nend\n"
completions: ["    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^6)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^7)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^8)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^9)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^10)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^11)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^12)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^13)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^14)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^15)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^16)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^17)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^18)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^19)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^20)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^21)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^22)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^23)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^24)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^25)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^26)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^27)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^28)\n</cell>", "    if\
    \ n < 2 \n        then return 1\n    else if n == 2 \n        then return 2\n\
    \    else if n % 2 == 0 \n        then return n\n    else \n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n==1\
    \ \n        1\n    else if n==2 \n        2\n    else if n%2==0 \n        largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(n/3)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n<2 return 1\n    \n    p := 2\n    while\
    \ p*p <= n do\n        p := p*p\n    end\n    return p\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the greatest common\
    \ divisor of two numbers. Assume that both numbers are positive and are not zero.\
    \ Assume that both numbers are relatively prime to each other.", "    if n < 2\
    \ \n        then return n\n    else if n % 2 == 0 \n        then return 2\n  \
    \  else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n     \
    \   then return 5\n    else if n % 7 == 0 \n        then return 7\n    else if\
    \ n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n < 2 \n        then return 1\n    else if\
    \ n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n        then return\
    \ 3\n    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n\
    \        then return 7\n    else if n % 11 == 0 \n        then return 11\n   \
    \ else if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n   \
    \     then return 17\n    else if n % 19 == 0 \n        then return 19\n    else\
    \ if n % 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then\
    \ return 29\n    else if n % 31 == 0 \n        then return 31\n    else if n %\
    \ 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n        then return\
    \ 41\n    else if n % 43 == 0 \n        then return 43\n    else if n % 47 ==\
    \ 0 \n        then return 47\n    else if n % 53 == 0 \n        then return 53\n\
    \    else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n\
    \        then return 61\n    else if n % 67 == 0 \n        then return 67\n  \
    \  else if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n  \
    \      then return 73\n    else if n % 79 == 0 \n        then return 79\n    else\
    \ if n % 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then\
    \ return 89\n    else if n % 97 == 0 \n        then return 97\n    else if n %\
    \ 101 == 0 \n        then return 101\n    else if n % 103 == 0 \n        then\
    \ return 103\n    else if n % 107 == 0 \n        then return 107\n    else if\
    \ n % 111 == 0 \n        then return 111\n    else if n % 117 == 0 \n        then\
    \ return 117\n    else if n % 121 == 0 \n        then return 121\n    else if\
    \ n % 127 == 0 \n        then return 127\n    else if n % 131 == 0 \n        then\
    \ return 131\n    else if n % 137 == 0 \n        then return 137\n    else if\
    \ n % 141 == 0 \n        then return 141\n    else if n % 147 == 0 \n        then\
    \ return 147\n    else if n % 151 == 0 \n        then return 151\n    else if\
    \ n % 157 == 0 \n        then return 157\n    else if n % 161 == 0 ", "    if\
    \ n==1 \n        return 1 \n    else if n==2 \n        return 2 \n    else if\
    \ n%2==0 \n        return largest_prime_factor(n/2) \n    else \n        return\
    \ largest_prime_factor(n/2) + largest_prime_factor(n/3) \nend\n</cell>\n<code\
    \ language=julia-1.1>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return the smallest\
    \ prime factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    3\n    >>> smallest_prime_factor(2048)\n    7\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the greatest common\
    \ divisor (GCD) of two positive integers. Assume that both integers are positive.\n\
    Hint: use the Euclidean algorithm.", "    if n < 2 \n        then return n\n \
    \   else if n == 2 \n        then return 1\n    else if n % 2 == 0 \n        then\
    \ return largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n == 1 \n    \
    \    1 \n    else \n        largest_prime_factor(n / 2) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of prime factors\
    \ of a given number. Assume that n is a prime.\nHint: Use a while loop.", "  \
    \  if n == 1 \n        1\n    else \n        largest_prime_factor(n / 2) \n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise: Write a function that returns the largest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a while loop and a prime factorization\
    \ function.", "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n\
    \        then return largest_prime_factor(n/2)\n    else \n        largest_prime_factor(3*n+1)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000001)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000002)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000003)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000004)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000005)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000006)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000007)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000008)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000009)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000010)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000011)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000012)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000013)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000014)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000015)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000016)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000017)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000018)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000019)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000020)\n</cell>\n<code language=julia-1.5",
  "    if n==1 \n        1\n    else\n        largest_prime_factor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        1\n    else\n\
    \        largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    Hint: use largest_prime_factor", "    if n < 2 \n        then return 1\n    else\
    \ if n == 2 \n        then return 2\n    else if n % 2 == 0 \n        then return\
    \ n\n    else \n        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the smallest prime factor of n. Assume n >\
    \ 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>>\
    \ smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n        then\
    \ return n\n    else if n % 2 == 0 \n        then return 2\n    else \n      \
    \  p := 3\n        while p < n \n            do if n % p == 0 \n             \
    \   then return p\n                p := p + 2\n        return n\nend\n</cell>\n\
    <code language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the smallest prime factor of n. Assume n > 1 and is not a prime.\nHint: use\
    \ the function largest_prime_factor", "    if n == 1 \n        1\n    else\n \
    \       largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n\
    \        then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n < 2 \n        then return n\n    else if\
    \ n % 2 == 0 \n        then return 2\n    else \n        largest = 2\n       \
    \ for p in prime_factors(n) \n            if p > largest \n                then\
    \ largest = p\n        return largest\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of prime factors\
    \ of a given number. Assume n > 1 and is not a prime.", "    if n < 2 \n     \
    \   then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(3 * n + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n == 1 \n        1 \n    else \n        largest_prime_factor(n\
    \ / 2) \n    end\nend\n</cell>\n<code language=julia-1.4>\n@time largest_prime_factor(20000000);\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a while loop to find the smallest\
    \ prime factor of n.", "    if n==1 \n        1\n    else \n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n        then\
    \ return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(sqrt(n)) * 3\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        p := 3\n        while p < n\
    \ \n            do if n % p == 0 \n                then return p\n           \
    \     p := p + 2\n        end\n        return n\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return 1\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n        then\
    \ return 3\n    else if n % 5 == 0 \n        then return 5\n    else if n % 7\
    \ == 0 \n        then return 7\n    else if n % 11 == 0 \n        then return\
    \ 11\n    else if n % 13 == 0 \n        then return 13\n    else if n % 17 ==\
    \ 0 \n        then return 17\n    else if n % 19 == 0 \n        then return 19\n\
    \    else if n % 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n\
    \        then return 29\n    else if n % 31 == 0 \n        then return 31\n  \
    \  else if n % 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n  \
    \      then return 41\n    else if n % 43 == 0 \n        then return 43\n    else\
    \ if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n        then\
    \ return 53\n    else if n % 59 == 0 \n        then return 59\n    else if n %\
    \ 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n        then return\
    \ 67\n    else if n % 71 == 0 \n        then return 71\n    else if n % 73 ==\
    \ 0 \n        then return 73\n    else if n % 79 == 0 \n        then return 79\n\
    \    else if n % 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n\
    \        then return 89\n    else if n % 97 == 0 \n        then return 97\n  \
    \  else if n % 101 == 0 \n        then return 101\n    else if n % 103 == 0 \n\
    \        then return 103\n    else if n % 107 == 0 \n        then return 107\n\
    \    else if n % 111 == 0 \n        then return 111\n    else if n % 117 == 0\
    \ \n        then return 117\n    else if n % 121 == 0 \n        then return 121\n\
    \    else if n % 123 == 0 \n        then return 123\n    else if n % 127 == 0\
    \ \n        then return 127\n    else if n % 131 == 0 \n        then return 131\n\
    \    else if n % 137 == 0 \n        then return 137\n    else if n % 141 == 0\
    \ \n        then return 141\n    else if n % 147 == 0 \n        then return 147\n\
    \    else if n % 151 == 0 \n        then ", "    if n == 1 \n        1 \n    else\
    \ \n        largest_prime_factor(n / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n < 2 \n        then return n\n    else if n == 2\
    \ \n        then return 2\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else if n % 3 == 0 \n        then return largest_prime_factor(n/3)\n    else\
    \ if n % 5 == 0 \n        then return largest_prime_factor(n/5)\n    else if n\
    \ % 7 == 0 \n        then return largest_prime_factor(n/7)\n    else if n % 11\
    \ == 0 \n        then return largest_prime_factor(n/11)\n    else return largest_prime_factor(n*(n+1)/2)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n==1 \n        1\n    else if\
    \ n==2 \n        2\n    else if n%3==0 \n        largest_prime_factor(n/3)\n \
    \   else \n        largest_prime_factor(n*3)\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n==1\
    \ \n        1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        1 \n    else \n        largest_prime_factor(n\
    \ / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert largest_prime_factor(7)\
    \ == 3\n@assert largest_prime_factor(11) == 5\n@assert largest_prime_factor(13)\
    \ == 7\n@assert largest_prime_factor(17) == 11\n@assert largest_prime_factor(19)\
    \ == 13\n@assert largest_prime_factor(23) == 17\n@assert largest_prime_factor(29)\
    \ == 19\n@assert largest_prime_factor(31) == 23\n@assert largest_prime_factor(37)\
    \ == 29\n@assert largest_prime_factor(43) == 31\n@assert largest_prime_factor(47)\
    \ == 37\n@assert largest_prime_factor(53) == 43\n@assert largest_prime_factor(59)\
    \ == 47\n@assert largest_prime_factor(61) == 53\n@assert largest_prime_factor(67)\
    \ == 59\n@assert largest_prime_factor(71) \n</cell>\n<text>\nProblem 7: Prime\
    \ Factors\nA positive integer $n$ has $n$ prime factors. For example, $3$ has\
    \ $3$ prime factors, $5$ has $5$, and so on. Write a function that finds the prime\
    \ factors of a given positive integer $n$. For example, prime_factors(3) should\
    \ return $[3,3]$. You may wish to use the sieve of Eratosthenes to speed up the\
    \ calculation.", "    if n < 2 \n        then return n\n    else if n == 2 \n\
    \        then return 2\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n < 2 \n        then return n\n    else if n % 2\
    \ == 0 \n        then return largest_prime_factor(n/2)\n    else \n        p :=\
    \ largest_prime_factor(n/2) \n        while p*p <= n \n            do return p\n\
    \            p := p + 2\n        end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        1 \n    else \n        largest_prime_factor(n-1) * n \n\
    end\n</cell>\n<code language=julia-1.5>\n@assert largest_prime_factor(10) == 2\
    \ \n@assert largest_prime_factor(11) == 3 \n@assert largest_prime_factor(12) ==\
    \ 5 \n@assert largest_prime_factor(13) == 7 \n@assert largest_prime_factor(14)\
    \ == 11 \n@assert largest_prime_factor(15) == 13 \n@assert largest_prime_factor(16)\
    \ == 17 \n@assert largest_prime_factor(17) == 19 \n@assert largest_prime_factor(18)\
    \ == 23 \n@assert largest_prime_factor(19) == 29 \n@assert largest_prime_factor(20)\
    \ == 29 \n@assert largest_prime_factor(21) == 29 \n@assert largest_prime_factor(22)\
    \ == 29 \n@assert largest_prime_factor(23) == 29 \n@assert largest_prime_factor(24)\
    \ == 29 \n@assert largest_prime_factor(25) == 29 \n@assert largest_prime_factor(26)\
    \ == 29 \n@assert largest_prime_factor(27) == 29 \n@assert largest_prime_factor(28)\
    \ == 29 \n@assert largest_prime_factor(29) == 29 \n@assert largest_prime_factor(30)\
    \ == 29 \n@assert largest_prime_factor(31) == 29 \n@assert largest_prime_factor(32)\
    \ == 29 \n@assert largest_prime_factor(33) == 29 \n@assert largest_prime_factor(34)\
    \ == 29 \n@assert largest_prime_factor(35) == 29 \n@assert largest_prime_factor(36)\
    \ == 29 \n@assert largest_prime_factor(37) == 29 \n@assert largest_prime_factor(38)\
    \ == 29 \n@assert largest_prime_factor(39) == 29 \n@assert largest_prime_factor(40)\
    \ == 29 \n@assert largest_prime_factor(41) == 29 \n@assert largest_prime_factor(42)\
    \ == 29 \n@assert largest_prime_factor(43) == 29 \n@assert largest_prime_factor(44)\
    \ == 29 \n@assert largest_prime_factor(45) == 29 \n@assert largest_prime_factor(46)\
    \ == 29 \n@assert largest_prime_factor(47) == 29 \n@assert largest_prime_factor(48)\
    \ == 29 \n@assert largest_prime_factor(49) == 29 \n@assert largest_prime_factor(50)\
    \ == 29 \n@assert largest_prime_factor(51) == 29 \n@assert largest_prime_factor(52)\
    \ == 29 \n@assert largest_prime_factor(", "    if n < 2 \n        then return\
    \ 2\n    else if n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n\
    \        then return 3\n    else if n % 5 == 0 \n        then return 5\n    else\
    \ if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n        then\
    \ return 11\n    else if n % 13 == 0 \n        then return 13\n    else if n %\
    \ 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n        then return\
    \ 19\n    else if n % 23 == 0 \n        then return 23\n    else if n % 29 ==\
    \ 0 \n        then return 29\n    else if n % 31 == 0 \n        then return 31\n\
    \    else if n % 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n\
    \        then return 41\n    else if n % 43 == 0 \n        then return 43\n  \
    \  else if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n  \
    \      then return 53\n    else if n % 59 == 0 \n        then return 59\n    else\
    \ if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n        then\
    \ return 67\n    else if n % 71 == 0 \n        then return 71\n    else if n %\
    \ 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n        then return\
    \ 79\n    else if n % 83 == 0 \n        then return 83\n    else if n % 89 ==\
    \ 0 \n        then return 89\n    else if n % 97 == 0 \n        then return 97\n\
    \    else if n % 101 == 0 \n        then return 101\n    else if n % 103 == 0\
    \ \n        then return 103\n    else if n % 107 == 0 \n        then return 107\n\
    \    else if n % 111 == 0 \n        then return 111\n    else if n % 117 == 0\
    \ \n        then return 117\n    else if n % 121 == 0 \n        then return 121\n\
    \    else if n % 123 == 0 \n        then return 123\n    else if n % 127 == 0\
    \ \n        then return 127\n    else if n % 131 == 0 \n        then return 131\n\
    \    else if n % 137 == 0 \n        then return 137\n    else if n % 141 == 0\
    \ \n        then return 141\n    else if n % 147 == 0 \n        then return 147\n\
    \    else if n % 151 == 0 \n        then return 151\n    else if n % 157 == 0 ",
  "    if n==1 \n        1 \n    else \n        largest_prime_factor(n-1) * n \nend\n\
    </cell>\n<code language=julia-1.5>", "    if n==1 \n        1\n    else if n==2\
    \ \n        2\n    else if n%2==0 \n        largest_prime_factor(n/2)\n    else\
    \ \n        largest_prime_factor(n/3)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    if n==1 \n        return 1 \n    else \n        p :=\
    \ largest_prime_factor(n-1) \n        if p*p==n \n            return p \n    \
    \    else \n            return p \nend \n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        return 1 \n    else \n        return largest_prime_factor(n\
    \ / 2) \nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: use largest_prime_factor", "    if n < 2 \n\
    \        then return 1\n    else if n == 2 \n        then return 2\n    else if\
    \ n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n        then return\
    \ 3\n    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n\
    \        then return 7\n    else if n % 11 == 0 \n        then return 11\n   \
    \ else if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n   \
    \     then return 17\n    else if n % 19 == 0 \n        then return 19\n    else\
    \ if n % 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then\
    \ return 29\n    else if n % 31 == 0 \n        then return 31\n    else if n %\
    \ 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n        then return\
    \ 41\n    else if n % 43 == 0 \n        then return 43\n    else if n % 47 ==\
    \ 0 \n        then return 47\n    else if n % 53 == 0 \n        then return 53\n\
    \    else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n\
    \        then return 61\n    else if n % 67 == 0 \n        then return 67\n  \
    \  else if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n  \
    \      then return 73\n    else if n % 79 == 0 \n        then return 79\n    else\
    \ if n % 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then\
    \ return 89\n    else if n % 97 == 0 \n        then return 97\n    else if n %\
    \ 101 == 0 \n        then return 101\n    else if n % 103 == 0 \n        then\
    \ return 103\n    else if n % 107 == 0 \n        then return 107\n    else if\
    \ n % 111 == 0 \n        then return 111\n    else if n % 117 == 0 \n        then\
    \ return 117\n    else if n % 121 == 0 \n        then return 121\n    else if\
    \ n % 127 == 0 \n        then return 127\n    else if n % 131 == 0 \n        then\
    \ return 131\n    else if n % 137 == 0 \n        then return 137\n    else if\
    \ n % 141 == 0 \n        then return 141\n    else if n % 147 == 0 \n        then\
    \ return 147\n    else if n % 151 == 0 \n        then return 151\n    else if\
    \ n % 157 == 0 \n        ", "    if n < 2 \n        then return n\n    else if\
    \ n % 2 == 0 \n        then return largest_prime_factor(n/2)\n    else \n    \
    \    largest_prime_factor(3*n+2)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(20000000)\n</cell>\n<code language=julia-1.5", "  \
    \  if n == 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        return 1 \n    else if n == 2 \n        return 2 \n    else \n \
    \       p := largest_prime_factor(n/2) \n        if n % p == 0 \n            return\
    \ p \n        else \n            return p \nend \n</cell>\n<code language=julia-1.4>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.4>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n-1) * n\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the smallest prime factor of n. Assume n > 1 and\
    \ is not a prime.\nHint: Use a while loop and a conditional statement to find\
    \ the smallest prime factor of n.", "    if n < 2 \n        then return n\n  \
    \  else if n == 2 \n        then return 2\n    else if n % 2 == 0 \n        then\
    \ return largest_prime_factor(n/2)\n    else \n        largest_prime_factor(3*n+1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(", "    if n < 2 || n % 2 ==\
    \ 0 \n        then return 2\n    else if n % 3 == 0 \n        then return 3\n\
    \    else if n % 5 == 0 \n        then return 5\n    else if n % 7 == 0 \n   \
    \     then return 7\n    else if n % 11 == 0 \n        then return 11\n    else\
    \ if n % 13 == 0 \n        then return 13\n    else if n % 17 == 0 \n        then\
    \ return 17\n    else if n % 19 == 0 \n        then return 19\n    else if n %\
    \ 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n        then return\
    \ 29\n    else if n % 31 == 0 \n        then return 31\n    else if n % 37 ==\
    \ 0 \n        then return 37\n    else if n % 41 == 0 \n        then return 41\n\
    \    else if n % 43 == 0 \n        then return 43\n    else if n % 47 == 0 \n\
    \        then return 47\n    else if n % 53 == 0 \n        then return 53\n  \
    \  else if n % 59 == 0 \n        then return 59\n    else if n % 61 == 0 \n  \
    \      then return 61\n    else if n % 67 == 0 \n        then return 67\n    else\
    \ if n % 71 == 0 \n        then return 71\n    else if n % 73 == 0 \n        then\
    \ return 73\n    else if n % 79 == 0 \n        then return 79\n    else if n %\
    \ 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n        then return\
    \ 89\n    else if n % 97 == 0 \n        then return 97\n    else if n % 101 ==\
    \ 0 \n        then return 101\n    else if n % 103 == 0 \n        then return\
    \ 103\n    else if n % 107 == 0 \n        then return 107\n    else if n % 111\
    \ == 0 \n        then return 111\n    else if n % 117 == 0 \n        then return\
    \ 117\n    else if n % 121 == 0 \n        then return 121\n    else if n % 123\
    \ == 0 \n        then return 123\n    else if n % 127 == 0 \n        then return\
    \ 127\n    else if n % 131 == 0 \n        then return 131\n    else if n % 137\
    \ == 0 \n        then return 137\n    else if n % 141 == 0 \n        then return\
    \ 141\n    else if n % 147 == 0 \n        then return 147\n    else if n % 151\
    \ == 0 \n        then return 151\n    else if n % 157 == 0 \n        then return\
    \ 157\n    else ", "    if n < 2 \n        then return n\n    else if n % 2 ==\
    \ 0 \n        then return largest_prime_factor(n / 2)\n    else \n        largest\
    \ = 2\n        for m in 3:1:largest\n            if n % m == 0 \n            \
    \    then return largest\n            largest = m\n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.3>", "    if n==1 \n        1\n    else \n   \
    \     largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if n==1 \n        1\n    else\n        largest_prime_factor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000);\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n\
    \        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n < 2 \n        then return n\n    else if n == 2\
    \ \n        then return 2\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(3*n+2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    Hint: You may want to use the sieve of Eratosthenes or the Sieve of Atkin.", " \
    \   if n < 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else \n        p := largest_prime_factor(n / 2)\n        if n % p ==\
    \ 0 \n            then return p\n        else return n\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n==1\
    \ \n        1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n < 2 \n        then return n\n    else if\
    \ n == 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(n / 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n==1 then return\
    \ 1\n    else if n==2 then return 2\n    else if n%2==0 then return largest_prime_factor(n/2)\n\
    \    else return largest_prime_factor(n/2) + largest_prime_factor(n/3) + 1\nend\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the smallest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the greatest common\
    \ divisor of two positive integers. Assume that both integers are positive.\n\
    Hint: use Euclid's algorithm.", "    if n==1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2\
    \ \n        then return n\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n\
    \        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n-1) * n\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n==1\
    \ \n        1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Return the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n   \
    \ >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "    if n<2 return 1\n \
    \   if n==2 return n\n    if n%3==0 return n\n    \n    factors=[]\n    \n   \
    \ for f in factors(n)\n        if f>n \n            factors.push(f)\n        else\n\
    \            break\n    \n    return factors[factors.length-1]\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<code language=julia-1.5>", "    if n < 2\
    \ \n        then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else if n % 3 == 0 \n        then return largest_prime_factor(n /\
    \ 3)\n    else if n % 5 == 0 \n        then return largest_prime_factor(n / 5)\n\
    \    else if n % 7 == 0 \n        then return largest_prime_factor(n / 7)\n  \
    \  else if n % 11 == 0 \n        then return largest_prime_factor(n / 11)\n  \
    \  else if n % 13 == 0 \n        then return largest_prime_factor(n / 13)\n  \
    \  else if n % 17 == 0 \n        then return largest_prime_factor(n / 17)\n  \
    \  else if n % 19 == 0 \n        then return largest_prime_factor(n / 19)\n  \
    \  else if n % 23 == 0 \n        then return largest_prime_factor(n / 23)\n  \
    \  else if n % 29 == 0 \n        then return largest_prime_factor(n / 29)\n  \
    \  else if n % 31 == 0 \n        then return largest_prime_factor(n / 31)\n  \
    \  else if n % 37 == 0 \n        then return largest_prime_factor(n / 37)\n  \
    \  else if n % 41 == 0 \n        then return largest_prime_factor(n / 41)\n  \
    \  else if n % 43 == 0 \n        then return largest_prime_factor(n / 43)\n  \
    \  else if n % 47 == 0 \n        then return largest_prime_factor(n / 47)\n  \
    \  else if n % 53 == 0 \n        then return largest_prime_factor(n / 53)\n  \
    \  else if n % 59 == 0 \n        then return largest_prime_factor(n / 59)\n  \
    \  else if n % 61 == 0 \n        then return largest_prime_factor(n / 61)\n  \
    \  else if n % 67 == 0 \n        then return largest_prime_factor(n / 67)\n  \
    \  else if n % 71 == 0 \n        then return largest_prime_factor(n / 71)\n  \
    \  else if n % 73 == 0 \n        then return largest_prime_factor(n / 73)\n  \
    \  else if n % 79 == 0 \n        then return largest_prime_factor(n / 79)\n  \
    \  else if n % 83 == 0 \n        then return largest_prime_factor(n / 83)\n  \
    \  else if n % 89 == 0 \n        then return largest_prime_factor(n / 89)\n  \
    \  else if n % 97 == 0 \n        ", "    if n == 1 \n        1\n    else\n   \
    \     largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n<2\
    \ return 1\n    if n==2 return n\n    if n%3==0 return n\n    if n%5==0 return\
    \ n\n    if n%7==0 return n\n    if n%11==0 return n\n    if n%13==0 return n\n\
    \    if n%17==0 return n\n    if n%19==0 return n\n    if n%23==0 return n\n \
    \   if n%29==0 return n\n    if n%31==0 return n\n    if n%37==0 return n\n  \
    \  if n%41==0 return n\n    if n%43==0 return n\n    if n%47==0 return n\n   \
    \ if n%53==0 return n\n    if n%59==0 return n\n    if n%61==0 return n\n    if\
    \ n%67==0 return n\n    if n%73==0 return n\n    if n%79==0 return n\n    if n%83==0\
    \ return n\n    if n%89==0 return n\n    if n%97==0 return n\n    if n%103==0\
    \ return n\n    if n%107==0 return n\n    if n%113==0 return n\n    if n%119==0\
    \ return n\n    if n%127==0 return n\n    if n%131==0 return n\n    if n%137==0\
    \ return n\n    if n%141==0 return n\n    if n%147==0 return n\n    if n%153==0\
    \ return n\n    if n%159==0 return n\n    if n%163==0 return n\n    if n%167==0\
    \ return n\n    if n%173==0 return n\n    if n%179==0 return n\n    if n%183==0\
    \ return n\n    if n%189==0 return n\n    if n%193==0 return n\n    if n%197==0\
    \ return n\n    if n%201==0 return n\n    if n%205==0 return n\n    if n%209==0\
    \ return n\n    if n%213==0 return n\n    if n%217==0 return n\n    if n%223==0\
    \ return n\n    if n%227==0 return n\n    if n%231==0 return n\n    if n%235==0\
    \ return n\n    if n%239==0 return n\n    if n%243==0 return n\n    if n%247==0\
    \ return n\n    if n%", "    if n < 2 \n        then return n\n    else if n %\
    \ 2 == 0 \n        then return 2\n    else \n        p := 3\n        while p <\
    \ n \n            do if n % p == 0 \n                then return p\n         \
    \       p := p + 2\n            end\n        end\n        return n\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        1\n    else\n\
    \        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n\
    \        then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n<2\n        error(\"n must be positive\"\
    )\n    end\n    if n==2\n        return n\n    \n    factor::Int64 = 1\n    \n\
    \    while n%factor==0\n        factor+=1\n    end\n    \n    return factor\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the smallest prime factor of n. Assume n >\
    \ 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>>\
    \ smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n==1 \n        1\n\
    \    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        1\n    else if n % 2 == 0 \n        largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n < 2 \n        then return n\n    else if\
    \ n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n  \
    \      largest = 2\n        for m in 3:1:largest\n            if n % m == 0 \n\
    \                then return largest\n            largest = m\n        end\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n ==\
    \ 1 \n        1 \n    else \n        largest_prime_factor(n / 2) \n    end\nend\n\
    </cell>\n<code language=julia-1.4>", "    if n == 1 \n        1\n    else\n  \
    \      largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        then return 2\n    else if n == 2 \n        then return\
    \ 1\n    else \n        p := 2\n        while p < n \n            do if n % p\
    \ == 0 \n                then return p\n                p := p * 2\n         \
    \   end\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ largest_prime_factor(2) == 2 \"largest_prime_factor(2) failed\"\n@assert largest_prime_factor(3)\
    \ == 1 \"largest_prime_factor(3) failed\"\n@assert largest_prime_factor(5) ==\
    \ 2 \"largest_prime_factor(5) failed\"\n@assert largest_prime_factor(7) == 3 \"\
    largest_prime_factor(7) failed\"\n@assert largest_prime_factor(11) == 5 \"largest_prime_factor(11)\
    \ failed\"\n@assert largest_prime_factor(13) == 7 \"largest_prime_factor(13) failed\"\
    \n@assert largest_prime_factor(17) == 11 \"largest_prime_factor(17) failed\"\n\
    @assert largest_prime_factor(29) == 13 \"largest_prime_factor(29) failed\"\n@assert\
    \ largest_prime_factor(31) == 17 \"largest_prime_factor(31) failed\"\n@assert\
    \ largest_prime_factor(41) == 29 \"largest_prime_factor(41) failed\"\n@assert\
    \ largest_prime_factor(43) == 31 \"largest_prime_factor(43) failed\"\n@assert\
    \ largest_prime_factor(47) == 41 \"largest_prime_factor(47) failed\"\n@assert\
    \ largest_prime_factor(59) == 43 \"largest_prime_factor(59) failed\"\n@assert\
    \ largest_prime_factor(61) == 47 \"largest_prime_factor(61) failed\"\n@assert\
    \ largest_prime_factor(73) == 59 \"largest_prime_factor(73) failed\"\n@assert\
    \ largest_prime_factor(79) == 61 \"largest_prime_factor(79) failed\"\n@assert\
    \ largest_prime_factor(89) == 73 \"largest_prime_factor(89) failed\"\n@assert\
    \ largest_prime_factor(97) == 79 \"largest_prime_factor(97) failed\"\n@assert\
    \ largest_prime_factor(101) == 89 \"largest_prime_factor(101) failed\"\n@assert\
    \ largest_prime_factor(103) == 97 \"largest_prime_factor(103) failed\"\n@assert\
    \ largest_prime_factor(107) == 101 \"largest_prime_factor(107) failed\"\n", " \
    \   if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n/2)\n    else \n        largest_prime_factor(3*n+1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else if n % 3 == 0 \n        then return largest_prime_factor(n /\
    \ 3)\n    else if n % 5 == 0 \n        then return largest_prime_factor(n / 5)\n\
    \    else if n % 7 == 0 \n        then return largest_prime_factor(n / 7)\n  \
    \  else if n % 11 == 0 \n        then return largest_prime_factor(n / 11)\n  \
    \  else if n % 13 == 0 \n        then return largest_prime_factor(n / 13)\n  \
    \  else if n % 17 == 0 \n        then return largest_prime_factor(n / 17)\n  \
    \  else if n % 19 == 0 \n        then return largest_prime_factor(n / 19)\n  \
    \  else if n % 23 == 0 \n        then return largest_prime_factor(n / 23)\n  \
    \  else if n % 29 == 0 \n        then return largest_prime_factor(n / 29)\n  \
    \  else if n % 31 == 0 \n        then return largest_prime_factor(n / 31)\n  \
    \  else if n % 37 == 0 \n        then return largest_prime_factor(n / 37)\n  \
    \  else if n % 41 == 0 \n        then return largest_prime_factor(n / 41)\n  \
    \  else if n % 43 == 0 \n        then return largest_prime_factor(n / 43)\n  \
    \  else if n % 47 == 0 \n        then return largest_prime_factor(n / 47)\n  \
    \  else if n % 53 == 0 \n        then return largest_prime_factor(n / 53)\n  \
    \  else if n % 59 == 0 \n        then return largest_prime_factor(n / 59)\n  \
    \  else if n % 61 == 0 \n        then return largest_prime_factor(n / 61)\n  \
    \  else if n % 67 == 0 \n        then return largest_prime_factor(n / 67)\n  \
    \  else if n % 71 == 0 \n        then return largest_prime_factor(n / 71)\n  \
    \  else if n % 73 == 0 \n        then return largest_prime_factor(n / 73)\n  \
    \  else if n % 79 == 0 \n        then return largest_prime_factor(n / 79)\n  \
    \  else if n % 83 == 0 \n        then return largest_prime_factor(n / 83)\n  \
    \  else if n % 89 == 0 \n        then return largest_prime_factor(n / 89)\n  \
    \  else if n % 97 == 0 \n        ", "    if n == 1 \n        1 \n    else \n \
    \       largest_prime_factor(n / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert largest_prime_factor(7) == 3\n@assert largest_prime_factor(12) == 3\n\
    @assert largest_prime_factor(17) == 7\n@assert largest_prime_factor(19) == 3\n\
    @assert largest_prime_factor(25) == 5\n@assert largest_prime_factor(29) == 3\n\
    @assert largest_prime_factor(31) == 7\n@assert largest_prime_factor(35) == 3\n\
    @assert largest_prime_factor(39) == 5\n@assert largest_prime_factor(41) == 3\n\
    @assert largest_prime_factor(47) == 7\n@assert largest_prime_factor(53) == 3\n\
    @assert largest_prime_factor(59) == 7\n@assert largest_prime_factor(61) == 3\n\
    @assert largest_prime_factor(67) == 5\n@assert largest_prime_factor(71) ==  3\n\
    @assert largest_prime_factor(73) == 7\n@assert largest_prime_factor(79) == 3\n\
    @assert largest_prime_factor(83) == 11\n@assert largest_prime_factor(89) == 3\n\
    @assert largest_prime_factor(97) == 11\n</cell>\n<text>\nProblem 7: Largest prime\
    \ factor\nA palindromic number reads the same both ways. The largest palindrome\
    \ made from the product of two 2-digit numbers is 9009 = 91 \xD7 99.", "    if\
    \ n == 1 \n        1\n    else \n        largest_prime_factor(n-1) * n \nend\n\
    </cell>\n<code language=julia-1.3>", "    if n < 2 \n        then return n\n \
    \   else if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n   \
    \ else \n        largest_prime_factor(3 * n + 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the smallest prime factor of n. Assume n >\
    \ 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>>\
    \ smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n        then\
    \ return 1\n    else if n == 2 \n        then return 2\n    else if n % 2 == 0\
    \ \n        then return largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3\
    \ * n + 1)\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a sieve of Eratosthenes or\
    \ Sieve of Atkin.", "    if n < 2 \n        then return n\n    else if n % 2 ==\
    \ 0 \n        then return largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.1>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n == 1 \n    \
    \    1\n    else if n % 2 == 0 \n        largest_prime_factor(n / 2)\n    else\
    \ \n        largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n==1 \n        1\n    else if n==2 \n        2\n\
    \    else if n%2==0 \n        largest_prime_factor(n/2)\n    else \n        largest_prime_factor(n/3)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    3\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2\
    \ \n        then return 1\n    else if n % 2 == 0 \n        then return 2\n  \
    \  else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n     \
    \   then return 5\n    else if n % 7 == 0 \n        then return 7\n    else if\
    \ n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n == 1 \n        1 \n    else if n % 2 ==\
    \ 0 \n        largest_prime_factor(n/2) \n    else \n        largest_prime_factor(3*n+1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the smallest prime factor of n. Assume n > 1 and\
    \ is not a prime.\nHint: Use a while loop and a prime factorization function.",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest = 2\n        for i =\
    \ 3 to sqrt(n) \n            largest = i if n % i == 0 \n            largest =\
    \ largest if largest % i == 0 \n        return largest\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 3\nWrite a function prime_sum(n::Int64)::Int64 that\
    \ returns the sum of the prime factors of n. Assume n > 1 and is not a prime.\n\
    \    >>> prime_sum(13195)\n    29\n    >>> prime_sum(2048)\n    8\n    \"\"\"",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest = 2\n        for p in\
    \ prime_factors(n) \n            if p > largest \n                then largest\
    \ = p\n        return largest\nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the greatest common divisor of two numbers.\
    \ Assume that both numbers are positive.", "    if n==1 \n        1\n    else\n\
    \        largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        1\n    else if n % 2 == 0 \n        largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(3 * n + 1) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the smallest prime factor of n. Assume n > 1 and is not a prime.\nHint: Use\
    \ a while loop and a prime factorization function.", "    if n < 2 \n        then\
    \ return n\n    else if n % 2 == 0 \n        then return 2\n    else if n % 3\
    \ == 0 \n        then return 3\n    else if n % 5 == 0 \n        then return 5\n\
    \    else if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n  \
    \      then return 11\n    else if n % 13 == 0 \n        then return 13\n    else\
    \ if n % 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n        then\
    \ return 19\n    else if n % 23 == 0 \n        then return 23\n    else if n %\
    \ 29 == 0 \n        then return 29\n    else if n % 31 == 0 \n        then return\
    \ 31\n    else if n % 37 == 0 \n        then return 37\n    else if n % 41 ==\
    \ 0 \n        then return 41\n    else if n % 43 == 0 \n        then return 43\n\
    \    else if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n\
    \        then return 53\n    else if n % 59 == 0 \n        then return 59\n  \
    \  else if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n  \
    \      then return 67\n    else if n % 71 == 0 \n        then return 71\n    else\
    \ if n % 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n        then\
    \ return 79\n    else if n % 83 == 0 \n        then return 83\n    else if n %\
    \ 89 == 0 \n        then return 89\n    else if n % 97 == 0 \n        then return\
    \ 97\n    else if n % 101 == 0 \n        then return 101\n    else if n % 103\
    \ == 0 \n        then return 103\n    else if n % 107 == 0 \n        then return\
    \ 107\n    else if n % 111 == 0 \n        then return 111\n    else if n % 117\
    \ == 0 \n        then return 117\n    else if n % 121 == 0 \n        then return\
    \ 121\n    else if n % 123 == 0 \n        then return 123\n    else if n % 127\
    \ == 0 \n        then return 127\n    else if n % 131 == 0 \n        then return\
    \ 131\n    else if n % 137 == 0 \n        then return 137\n    else if n % 141\
    \ == 0 \n        then return 141\n    else if n % 147 == 0 \n        then return\
    \ 147\n    else if n % 151 == 0 \n        then return 151\n    else if n % 157\
    \ == 0 ", "    if n==1 \n        1 \n    else \n        largest_prime_factor(n-1)\
    \ * n \nend \n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n    else if n\
    \ % 3 == 0 \n        then return largest_prime_factor(n/3)\n    else if n % 5\
    \ == 0 \n        then return largest_prime_factor(n/5)\n    else if n % 7 == 0\
    \ \n        then return largest_prime_factor(n/7)\n    else if n % 11 == 0 \n\
    \        then return largest_prime_factor(n/11)\n    else if n % 13 == 0 \n  \
    \      then return largest_prime_factor(n/13)\n    else if n % 17 == 0 \n    \
    \    then return largest_prime_factor(n/17)\n    else if n % 19 == 0 \n      \
    \  then return largest_prime_factor(n/19)\n    else if n % 23 == 0 \n        then\
    \ return largest_prime_factor(n/23)\n    else if n % 29 == 0 \n        then return\
    \ largest_prime_factor(n/29)\n    else if n % 31 == 0 \n        then return largest_prime_factor(n/31)\n\
    \    else if n % 37 == 0 \n        then return largest_prime_factor(n/37)\n  \
    \  else if n % 41 == 0 \n        then return largest_prime_factor(n/41)\n    else\
    \ if n % 43 == 0 \n        then return largest_prime_factor(n/43)\n    else if\
    \ n % 47 == 0 \n        then return largest_prime_factor(n/47)\n    else if n\
    \ % 53 == 0 \n        then return largest_prime_factor(n/53)\n    else if n %\
    \ 59 == 0 \n        then return largest_prime_factor(n/59)\n    else if n % 61\
    \ == 0 \n        then return largest_prime_factor(n/61)\n    else if n % 67 ==\
    \ 0 \n        then return largest_prime_factor(n/67)\n    else if n % 71 == 0\
    \ \n        then return largest_prime_factor(n/71)\n    else if n % 73 == 0 \n\
    \        then return largest_prime_factor(n/73)\n    else if n % 79 == 0 \n  \
    \      then return largest_prime_factor(n/79)\n    else if n % 83 == 0 \n    \
    \    then return largest_prime_factor(n/83)\n    else if n % 89 == 0 \n      \
    \  then return largest_prime_factor(n/89)\n    else if n % 97 == 0 \n        then\
    \ return largest_prime_factor(n/97)\n    else if n % 101 == ", "    if n < 2 \n\
    \        then return 1\n    else if n % 2 == 0 \n        then return 2\n    else\
    \ \n        p := largest_prime_factor(n / 2)\n        if n % p == 0 \n       \
    \     then return p\n        else return n\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n % 2 == 0 \n        then return 2\n\
    \    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n   \
    \     then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n==1 \n        return 1 \n    else if n==2\
    \ \n        return 2 \n    else if n%2==0 \n        return largest_prime_factor(n/2)\
    \ \n    else \n        return largest_prime_factor(n/2) + largest_prime_factor(n/2)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function prime_sum(n::Int64) which returns the sum of the prime factors\
    \ of n. Assume n > 1 and is not a prime.\nFor example, prime_sum(12) should return\
    \ 1 + 2 + 3 + 5 = 10.\nHint: Use a for loop to iterate over all prime factors.",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3 * n +\
    \ 1) \n    end\nend\n</cell>\n<code language=julia-1.3>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nHint: use largest_prime_factor",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n/2)\n    else \n        largest = 2\n        for p in\
    \ prime_factors(n) \n            if p > largest \n                then largest\
    \ = p\n        return largest\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ largest_prime_factor(13) == 13\n@assert largest_prime_factor(14) == 14\n@assert\
    \ largest_prime_factor(15) == 7\n@assert largest_prime_factor(16) == 5\n@assert\
    \ largest_prime_factor(17) == 17\n@assert largest_prime_factor(18) == 3\n@assert\
    \ largest_prime_factor(19) == 19\n@assert largest_prime_factor(20) == 7\n@assert\
    \ largest_prime_factor(21) == 2\n@assert largest_prime_factor(22) == 7\n@assert\
    \ largest_prime_factor(23) == 3\n@assert largest_prime_factor(24) == 5\n@assert\
    \ largest_prime_factor(25) == 5\n@assert largest_prime_factor(26) == 7\n@assert\
    \ largest_prime_factor(27) == 11\n@assert largest_prime_factor(28) == 7\n@assert\
    \ largest_prime_factor(29) == 29\n@assert largest_prime_factor(30) == 5\n@assert\
    \ largest_prime_factor(31) == 7\n@assert largest_prime_factor(32) == 13\n@assert\
    \ largest_prime_factor(33) == 11\n@assert largest_prime_factor(34) == 13\n@assert\
    \ largest_prime_factor(35) == 17\n@assert largest_prime_factor(36) == 19\n@assert\
    \ largest_prime_factor(37) == 23\n@assert largest_prime_factor(38) == 29\n@assert\
    \ largest_prime_factor(39) == 31\n@assert largest_prime_factor(40) == 31\n@assert\
    \ largest_prime_factor(41) == 33\n@assert largest_prime_factor(42) == 39\n@assert\
    \ largest_prime_factor(43) == 41\n@assert largest_prime_factor(44) == 43\n@assert\
    \ largest_prime_factor(45) == 47\n@assert largest_prime_factor(46) == 23\n@assert\
    \ largest_prime_factor(47) == 29\n@assert largest_prime_factor(48) == 31\n@assert\
    \ largest_prime_factor(49) == 37\n@assert largest_prime_factor(50) == 41\n@assert\
    \ largest_prime_factor(51) == 43\n@assert largest_prime_factor(52) == 57\n@assert\
    \ largest_", "    if n==1 then return 1\n    if n==2 then return 2\n    if n%2==0\
    \ then return n//2\n    \n    largest=2\n    largest=n\n    while largest%2==0\
    \ do\n        largest=largest/2\n    end\n    while largest%3==0 do\n        largest=largest/3\n\
    \    end\n    while largest%5==0 do\n        largest=largest/5\n    end\n    while\
    \ largest%7==0 do\n        largest=largest/7\n    end\n    while largest%11==0\
    \ do\n        largest=largest/11\n    end\n    while largest%13==0 do\n      \
    \  largest=largest/13\n    end\n    while largest%17==0 do\n        largest=largest/17\n\
    \    end\n    while largest%19==0 do\n        largest=largest/19\n    end\n  \
    \  while largest%23==0 do\n        largest=largest/23\n    end\n    while largest%29==0\
    \ do\n        largest=largest/29\n    end\n    while largest%31==0 do\n      \
    \  largest=largest/31\n    end\n    while largest%37==0 do\n        largest=largest/37\n\
    \    end\n    while largest%41==0 do\n        largest=largest/41\n    end\n  \
    \  while largest%43==0 do\n        largest=largest/43\n    end\n    while largest%47==0\
    \ do\n        largest=largest/47\n    end\n    while largest%53==0 do\n      \
    \  largest=largest/53\n    end\n    while largest%59==0 do\n        largest=largest/59\n\
    \    end\n    while largest%61==0 do\n        largest=largest/61\n    end\n  \
    \  while largest%67==0 do\n        largest=largest/67\n    end\n    while largest%71==0\
    \ do\n        largest=largest/71\n    end\n    while largest%73==0 do\n      \
    \  largest=largest/73\n    end\n    while largest%79==0 do\n        largest=largest/79\n\
    \    end\n    while largest%83==0 do\n        largest=largest/83\n    end\n  \
    \  while largest%89==0 do\n        largest=lar", "    if n < 2 || n % 2 == 0 \n\
    \        then return n\n    else if n % 3 == 0 \n        then return n\n    else\
    \ if n % 5 == 0 \n        then return n\n    else if n % 7 == 0 \n        then\
    \ return n\n    else \n        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    3\n    >>> smallest_prime_factor(2048)\n\
    \    7\n    \"\"\"", "    if n < 2 \n        then return n\n    else if n % 2\
    \ == 0 \n        then return largest_prime_factor(n / 2)\n    else \n        p\
    \ := 3\n        while p < n \n            do if n % p == 0 \n                then\
    \ return p\n                p := p + 2\n        end\n        return n\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of prime factors of n. Assume n > 1 and is not a prime.",
  "    if n < 2 \n        then return n\n    else if n == 2 \n        then return\
    \ 1\n    else if n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n\
    \        then return 3\n    else if n % 5 == 0 \n        then return 5\n    else\
    \ if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n        then\
    \ return 11\n    else if n % 13 == 0 \n        then return 13\n    else if n %\
    \ 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n        then return\
    \ 19\n    else if n % 23 == 0 \n        then return 23\n    else if n % 29 ==\
    \ 0 \n        then return 29\n    else if n % 31 == 0 \n        then return 31\n\
    \    else if n % 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n\
    \        then return 41\n    else if n % 43 == 0 \n        then return 43\n  \
    \  else if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n  \
    \      then return 53\n    else if n % 59 == 0 \n        then return 59\n    else\
    \ if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n        then\
    \ return 67\n    else if n % 71 == 0 \n        then return 71\n    else if n %\
    \ 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n        then return\
    \ 79\n    else if n % 83 == 0 \n        then return 83\n    else if n % 89 ==\
    \ 0 \n        then return 89\n    else if n % 97 == 0 \n        then return 97\n\
    \    else if n % 101 == 0 \n        then return 101\n    else if n % 103 == 0\
    \ \n        then return 103\n    else if n % 107 == 0 \n        then return 107\n\
    \    else if n % 111 == 0 \n        then return 111\n    else if n % 117 == 0\
    \ \n        then return 117\n    else if n % 121 == 0 \n        then return 121\n\
    \    else if n % 123 == 0 \n        then return 123\n    else if n % 127 == 0\
    \ \n        then return 127\n    else if n % 131 == 0 \n        then return 131\n\
    \    else if n % 137 == 0 \n        then return 137\n    else if n % 141 == 0\
    \ \n        then return 141\n    else if n % 147 == 0 \n        then return 147\n\
    \    else if n % 151 == 0 \n        then ", "    if n == 1 \n        1\n    else\n\
    \        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3 * n +\
    \ 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the greatest common\
    \ divisor of two numbers. Assume that both numbers are positive.", "    if n==1\
    \ \n        1 \n    else \n        largest_prime_factor(n-1) * n \nend\n</cell>\n\
    <code language=julia-1.4>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\nHint: use the function largest_prime_factor(n::Int64)::Int64",
  "    if n==1 \n        1 \n    else \n        largest_prime_factor(n-1) * n \nend\
    \ \n</cell>\n<code language=julia-1.5>", "    if n < 2 || n % 2 == 0 \n      \
    \  then return n\n    else \n        largest = 2\n        for factor in prime_factors(n)\
    \ \n            if factor > largest \n                then largest = factor \n\
    \        return largest\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of prime factors of a given\
    \ number. Assume that n > 1.", "    if n == 1 \n        1\n    else \n       \
    \ largest_prime_factor(n-1) * n\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    3\n   \
    \ >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2 \n      \
    \  then return n\n    else if n % 2 == 0 \n        then return 2\n    else if\
    \ n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n        then return\
    \ 5\n    else if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n\
    \        then return 11\n    else if n % 13 == 0 \n        then return 13\n  \
    \  else if n % 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n  \
    \      then return 19\n    else if n % 23 == 0 \n        then return 23\n    else\
    \ if n % 29 == 0 \n        then return 29\n    else if n % 31 == 0 \n        then\
    \ return 31\n    else if n % 37 == 0 \n        then return 37\n    else if n %\
    \ 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n        then return\
    \ 43\n    else if n % 47 == 0 \n        then return 47\n    else if n % 53 ==\
    \ 0 \n        then return 53\n    else if n % 59 == 0 \n        then return 59\n\
    \    else if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n\
    \        then return 67\n    else if n % 71 == 0 \n        then return 71\n  \
    \  else if n % 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n  \
    \      then return 79\n    else if n % 83 == 0 \n        then return 83\n    else\
    \ if n % 89 == 0 \n        then return 89\n    else if n % 97 == 0 \n        then\
    \ return 97\n    else if n % 101 == 0 \n        then return 101\n    else if n\
    \ % 103 == 0 \n        then return 103\n    else if n % 107 == 0 \n        then\
    \ return 107\n    else if n % 111 == 0 \n        then return 111\n    else if\
    \ n % 117 == 0 \n        then return 117\n    else if n % 121 == 0 \n        then\
    \ return 121\n    else if n % 123 == 0 \n        then return 123\n    else if\
    \ n % 127 == 0 \n        then return 127\n    else if n % 131 == 0 \n        then\
    \ return 131\n    else if n % 137 == 0 \n        then return 137\n    else if\
    \ n % 141 == 0 \n        then return 141\n    else if n % 147 == 0 \n        then\
    \ return 147\n    else if n % 151 == 0 \n        then return 151\n    else if\
    \ n % 157 == 0 ", "    if n < 2 \n        then return n\n    else if n == 2 \n\
    \        then return 2\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(3 * n + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>", "    if n == 1 \n        1\n    else \n \
    \       largest_prime_factor(n-1) * prime_factor(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the nth prime factor of n. Assume n > 1 and is not a prime.",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3 * n +\
    \ 1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time largest_prime_factor(20000000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nHint: use the largest_prime_factor\
    \ function you wrote earlier.", "    if n < 2 \n        then return n\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n\
    \        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the greatest common divisor of two numbers. Assume that\
    \ both numbers are positive.", "    if n == 1 \n        1 \n    else \n      \
    \  largest_prime_factor(n / 2) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.4>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: Use a while loop and a conditional\
    \ statement.", "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n\
    \        then return largest_prime_factor(n/2)\n    else \n        largest = 2\n\
    \        for m in 3:1:largest\n            if n % m == 0 \n                then\
    \ return largest\n            largest = m\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest = 2\n        for m in 3:1:largest\n       \
    \     if n % m == 0 \n                then return largest\n            largest\
    \ = m\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n < 2 || n % 2 == 0 \n        then return n\n    else if n % 3 == 0 \n     \
    \   then return n\n    else if n % 5 == 0 \n        then return n\n    else if\
    \ n % 7 == 0 \n        then return n\n    else \n        largest_prime_factor(n/3)\
    \ + 1\nend\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\nThe `if` statement can\
    \ be replaced with `return n if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 ==\
    \ 0 || n % 7 == 0`. Also, `largest_prime_factor(n/3) + 1` can be replaced with\
    \ `largest_prime_factor(n/3) * 3`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that\
    \ you can do that. I'll edit my answer.\n<|/ c |>\n<| c |>\nThe `if` statement\
    \ can be replaced with `return n if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5\
    \ == 0 || n % 7 == 0`. Also, `largest_prime_factor(n/3) * 3` can be replaced with\
    \ `largest_prime_factor(n/3) * 3`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that\
    \ you can do that. I'll edit my answer.\n<|/ c |>\n<| a |>\nThe simplest way is\
    \ to use Julia's built-in function factor:\n<code>\njulia> factor(123)\n(123,1)\n\
    </code>\n<|/ a tags=julia,primes dscore=4 |>\n<| c |>\nThis doesn't work for large\
    \ numbers. factor(2^1000) returns nothing\n<|/ c |>\n<| c |>\nIt works for me\
    \ (Julia 0.4.0). Are you sure you used `factor` and not `factorint`?\n<|/ c |>\n\
    <| c |>\nYes, I used factor. My Julia version is 0.4.1\n<|/ c |>\n<| c |>\nI see.\
    \ `factorint` doesn't exist in Julia 0.4.1. I guess it has been removed from the\
    \ package. I'll edit my answer.\n<|/ c |>\n<| c |>\nI guess `factorint` was removed\
    \ from Julia 0.4.1 because it was too slow. `factor` should be faster.\n<|/ c\
    \ |>\n<| a tags=julia,primes |>\nThe fastest way is to use factorint\n<code>\n\
    julia> factorint(2^1000)\n(2^1000,1)\n</code>\n<|/ a dscore=4 |>\n<| ", "    if\
    \ n < 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else \n        p := 3\n        while p < n \n            do if n % p\
    \ == 0 \n                then return p\n                p := p + 2\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>", "    if n < 2 \n        then\
    \ return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest = 2\n        for i = 3 to sqrt(n) \n      \
    \      do if n % i == 0 \n                then largest = i\n                break\n\
    \        return largest\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if n < 2 \n        then return 1\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n\
    \        then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 || n % 2 == 0 \n        then return n\n    else if n % 3 == 0 \n        then\
    \ return 3\n    else if n % 5 == 0 \n        then return 5\n    else if n % 7\
    \ == 0 \n        then return 7\n    else if n % 11 == 0 \n        then return\
    \ 11\n    else if n % 13 == 0 \n        then return 13\n    else if n % 17 ==\
    \ 0 \n        then return 17\n    else if n % 19 == 0 \n        then return 19\n\
    \    else if n % 23 == 0 \n        then return 23\n    else if n % 29 == 0 \n\
    \        then return 29\n    else if n % 31 == 0 \n        then return 31\n  \
    \  else if n % 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n  \
    \      then return 41\n    else if n % 43 == 0 \n        then return 43\n    else\
    \ if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n        then\
    \ return 53\n    else if n % 59 == 0 \n        then return 59\n    else if n %\
    \ 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n        then return\
    \ 67\n    else if n % 71 == 0 \n        then return 71\n    else if n % 73 ==\
    \ 0 \n        then return 73\n    else if n % 79 == 0 \n        then return 79\n\
    \    else if n % 83 == 0 \n        then return 83\n    else if n % 89 == 0 \n\
    \        then return 89\n    else if n % 97 == 0 \n        then return 97\n  \
    \  else if n % 101 == 0 \n        then return 101\n    else if n % 103 == 0 \n\
    \        then return 103\n    else if n % 107 == 0 \n        then return 107\n\
    \    else if n % 111 == 0 \n        then return 111\n    else if n % 117 == 0\
    \ \n        then return 117\n    else if n % 121 == 0 \n        then return 121\n\
    \    else if n % 123 == 0 \n        then return 123\n    else if n % 127 == 0\
    \ \n        then return 127\n    else if n % 131 == 0 \n        then return 131\n\
    \    else if n % 137 == 0 \n        then return 137\n    else if n % 141 == 0\
    \ \n        then return 141\n    else if n % 147 == 0 \n        then return 147\n\
    \    else if n % 151 == 0 \n        then return 151\n    else if n % 157 == 0\
    \ \n        then return 157\n    else ", "    if n < 2 \n        then return 1\n\
    \    else if n % 2 == 0 \n        then return 2\n    else \n        p := largest_prime_factor(n\
    \ / 2)\n        if n % p == 0 \n            then return p\n        else return\
    \ n\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the smallest prime factor of n. Assume n >\
    \ 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>>\
    \ smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n        return\
    \ n\n    \n    p :: Int64 = 1\n    i :: Int64 = 2\n    \n    while i * i <= n\
    \ \n        p :: Int64 = i\n        i :: Int64 = i + 2\n    \n    return p\nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^8)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^9)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^10)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^11)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^12)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^13)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^14)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^15)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^16)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^17)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^18)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^19)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^20)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^21)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^22)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^23)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^24)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(10^25)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(10^26)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^27)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(10^28)\n</cell>\n\
    <code language=julia-1.5>\n@time ", "    if n==1 \n        1 \n    else if n==2\
    \ \n        2 \n    else if n%2==0 \n        largest_prime_factor(n/2) \n    else\
    \ \n        largest_prime_factor(n-1) \nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    if n < 2 \n        then return n\n    else if n == 2\
    \ \n        then return 2\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(3*n+2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n  \
    \      then return 1\n    else if n % 2 == 0 \n        then return 2\n    else\
    \ \n        p := 3\n        while p < n \n            do if n % p == 0 \n    \
    \            then return p\n                p := p + 2\n        return n\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        then return n\n \
    \   else if n % 2 == 0 \n        then return largest_prime_factor(n/2) \n    else\
    \ \n        largest_prime_factor(n/3) + 1\nend\n</cell>\n<code language=julia-1.1>",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest = 2\n        for p in\
    \ prime_factors(n) \n            do if p > largest \n                then largest\
    \ = p\n        return largest\nend\n</cell>\n<code language=julia-1.0>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.0>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of prime factors of a given\
    \ number. Assume n > 1 and is not a prime.\nHint: Use a for loop.", "    if n\
    \ == 1 \n        1\n    else \n        largest_prime_factor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\nHint: use the function largest_prime_factor.",
  "    if n < 2 \n        then return 1\n    else if n == 2 \n        then return\
    \ n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(3*n+2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n == 1 \n    \
    \    1 \n    else if n % 2 == 0 \n        largest_prime_factor(n / 2) \n    else\
    \ \n        largest_prime_factor(3 * n + 1) \nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000);\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n\
    \    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n==1 \n        1 \n    else \n        largest_prime_factor(n-1)\
    \ * n \nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n==1 \n      \
    \  1 \n    else \n        largest_prime_factor(n-1) * n \nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the greatest common divisor of two positive integers. Assume that both\
    \ numbers are positive integers and greater than 1.", "    if n < 2 \n       \
    \ then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest = 2\n        for p in prime_factors(n) \n \
    \           if p > largest \n                then largest = p\n        return\
    \ largest\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n", "    if n < 2 \n        then return 1\n    else if n\
    \ == 2 \n        then return 2\n    else if n % 2 == 0 \n        then return n\n\
    \    else \n        p := largest_prime_factor(n / 2)\n        if n % p == 0 \n\
    \            then return p\n        else return n\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.4>\nlargest_prime_factor(2048)\n\
    </cell>\n<code language=julia-1.4>", "    if n == 1 \n        1\n    else\n  \
    \      largest_prime_factor(n-1) * prime_factor(n-1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\nHint: use the function prime_factor(n).",
  "    if n == 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert largest_prime_factor(10) == 2\
    \ \"This function does not work as intended\"\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the smallest prime factor of n. Assume n > 1 and is\
    \ not a prime.\nHint: use the function largest_prime_factor", "    if n == 1 \n\
    \        1 \n    else \n        largest_prime_factor(n / 2) \nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the smallest prime factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else if n % 2 == 0 \n        largest_prime_factor(n / 2)\n\
    \    else \n        largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n % 2 == 0 \n        then return 2\n\
    \    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n   \
    \     then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n < 2 \n        then return n\n    else if\
    \ n == 2 \n        then return 2\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(n / 2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n\
    \    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2\
    \ \n        then return n\n    else if n % 2 == 0 \n        then return 2\n  \
    \  else \n        largest = 2\n        for i = 3 to n \n            largest =\
    \ largest if largest % i == 0 \n        return largest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of prime factors of n. Assume n > 1 and is not a prime.\n\
    \    >>> num_prime_factors(13195)\n    2\n    >>> num_prime_factors(2048)\n  \
    \  3\n    \"\"\"", "    if n < 2 \n        then return 1\n    else if n == 2 \n\
    \        then return 2\n    else if n % 2 == 0 \n        then return 2\n    else\
    \ \n        largest = 2\n        for i = 3 to n \n            largest = i\n  \
    \          if n % i == 0 \n                then largest = i\n                break\n\
    \        return largest\n    end\nend\n</cell>\n<code language=julia-1.0>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.0>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: Use a for loop and a prime number checker function.",
  "    if n < 2 \n        then return n\n    else if n == 2 \n        then return\
    \ 2\n    else if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n\
    \    else \n        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n < 2 \n        then return n\n    else if n %\
    \ 2 == 0 \n        then return 2\n    else \n        p := largest_prime_factor(n\
    \ / 2)\n        if n % p == 0 \n            then return p\n        else return\
    \ n\nend\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\nProblem\
    \ 4\nThe four adjacent digits in the 1000-digit number that have the greatest\
    \ product are 9 \xD7 9 \xD7 8 \xD7 9 = 5832.", "    if n == 1 \n        1\n  \
    \  else if n % 2 == 0 \n        largest_prime_factor(n / 2)\n    else \n     \
    \   largest_prime_factor(3 * n + 1) \nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    3\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n < 2\
    \ \n        then return 1\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n\
    \        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<text>\nExercise 3\nWrite a function prime_divisors(n::Int64)\
    \ which returns a list of prime divisors of n.", "    if n<2\n        error(\"\
    n must be greater than 1\")\n    end\n    \n    if n==2\n        return 2\n  \
    \  end\n    \n    factors=[]\n    \n    for f in prime_factors(n)\n        if\
    \ f>n\n            error(\"n must be greater than 1\")\n        end\n        factors.push(f)\n\
    \    end\n    \n    factors=sort(factors)\n    \n    return factors[end-1]\nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the greatest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: Use a for loop to iterate over all prime factors.",
  "    if n==1 \n        return n\n    else \n        largest_prime_factor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(100)\n\
    </cell>\n<code language=julia-1.3>", "    if n < 2 \n        then return n\n \
    \   else if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n   \
    \ else \n        largest_prime_factor(3 * n + 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the smallest prime factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n % 2 == 0 \n        then return 2\n\
    \    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n   \
    \     then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n < 2 \n        then return n\n    else if\
    \ n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n  \
    \      largest = 2\n        for m in prime_factors(n) \n            if m > largest\
    \ \n                then largest = m\n        return largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\nHint: Use a for loop.", "    if n<2 return 1\n  \
    \  if n==2 return n\n    if n%2==0 return 2\n    \n    primes=prime_factors(n)\n\
    \    largest=primes[primes.len-1]\n    \n    for p in primes[2:]\n        if largest<p\
    \ return largest\n        largest=p\n    return largest\nend\n</cell>\n<code language=julia-1.3>\n\
    @time largest_prime_factor(100_000_000)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the nth Fibonacci number. Assume n is positive.", "  \
    \  if n == 1 \n        1\n    else\n        largest_prime_factor(n-1) * n\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        1\n\
    \    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    3\n    >>> smallest_prime_factor(2048)\n    7\n    \"\"\"", "    if n < 2\
    \ \n        then return n\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n\
    \        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.1>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    2\n    \"\"\"", "    if n==1\
    \ then return 1\n    if n==2 then return 2\n    if n%2==0 then return n//2\n \
    \   else return largest_prime_factor(n//2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        1\n    else if n % 2 == 0 \n        largest_prime_factor(n\
    \ / 2)\n    else \n        largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@time largest_prime_factor(2000000)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n == 1 \n    \
    \    1\n    else\n        largest_prime_factor(n-1) * prime_factor(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nHint: use the sieve of Eratosthenes\
    \ (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)", "    if n < 2 \n   \
    \     then return 2\n    else if n % 2 == 0 \n        then return 2\n    else\
    \ if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n        then\
    \ return 5\n    else if n % 7 == 0 \n        then return 7\n    else if n % 11\
    \ == 0 \n        then return 11\n    else if n % 13 == 0 \n        then return\
    \ 13\n    else if n % 17 == 0 \n        then return 17\n    else if n % 19 ==\
    \ 0 \n        then return 19\n    else if n % 23 == 0 \n        then return 23\n\
    \    else if n % 29 == 0 \n        then return 29\n    else if n % 31 == 0 \n\
    \        then return 31\n    else if n % 37 == 0 \n        then return 37\n  \
    \  else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n  \
    \      then return 43\n    else if n % 47 == 0 \n        then return 47\n    else\
    \ if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n        then\
    \ return 59\n    else if n % 61 == 0 \n        then return 61\n    else if n %\
    \ 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then return\
    \ 71\n    else if n % 73 == 0 \n        then return 73\n    else if n % 79 ==\
    \ 0 \n        then return 79\n    else if n % 83 == 0 \n        then return 83\n\
    \    else if n % 89 == 0 \n        then return 89\n    else if n % 97 == 0 \n\
    \        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n < 2 \n        then return n\n    else if\
    \ n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n  \
    \      largest_prime_factor(3 * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert largest_prime_factor(7) == 3\n@assert largest_prime_factor(12) == 3\n\
    @assert largest_prime_factor(17) == 7\n@assert largest_prime_factor(19) == 3\n\
    @assert largest_prime_factor(25) == 5\n@assert largest_prime_factor(29) == 3\n\
    @assert largest_prime_factor(31) == 7\n@assert largest_prime_factor(35) == 5\n\
    @assert largest_prime_factor(39) == 3\n@assert largest_prime_factor(41) == 7\n\
    @assert largest_prime_factor(43) == 5\n@assert largest_prime_factor(47) == 3\n\
    @assert largest_prime_factor(53) == 7\n@assert largest_prime_factor(59) == 3\n\
    @assert largest_prime_factor(61) == 7\n@assert largest_prime_factor(67) == 5\n\
    @assert largest_prime_factor(71) is nothing\n@assert largest_prime_factor(73)\
    \ is nothing\n@assert largest_prime_factor(79) is nothing\n@assert largest_prime_factor(83)\
    \ is nothing\n@assert largest_prime_factor(89) is nothing\n@assert largest_prime_factor(97)\
    \ is nothing\n@assert largest_prime_factor(101) is nothing\n@assert largest_prime_factor(103)\
    \ is not nothing\n@assert largest_prime_factor(127) is nothing\n@assert largest_prime_factor(131)\
    \ is nothing\n@assert largest_prime_factor(137) is nothing\n@assert largest_prime_factor(139)\
    \ is nothing\n@assert largest_prime_factor(149) is nothing\n@assert largest_prime_factor(151)\
    \ is nothing\n@assert largest_prime_factor(157) is nothing\n@assert largest_prime_factor(163)\
    \ is not nothing\n@assert largest_prime_factor(173) is nothing\n@assert largest_prime_factor(179)\
    \ is nothing\n@assert largest_prime_factor(181) is nothing\n@assert largest_prime_factor(191)\
    \ is nothing\n@assert largest_prime_factor(193) is nothing\n@assert largest_prime_factor(197)\
    \ is nothing\n@assert largest_prime_factor(199) is nothing\n@assert largest_prime_factor(211)\
    \ is nothing\n@assert largest_prime_factor(", "    if n == 1 \n        1\n   \
    \ else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time largest_prime_factor(1000000000)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the greatest common divisor (GCD) of two positive integers. Assume\
    \ that both numbers are positive.\nHint: use the Euclidean algorithm (https://en.wikipedia.org/wiki/Euclidean_algorithm).",
  "    if n < 2 \n        then return 1\n    else if n == 2 \n        then return\
    \ 2\n    else if n % 2 == 0 \n        then return 2\n    else \n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest prime\
    \ factor of n. Assume n > 1 and is not a prime.\nHint: Use a while loop to keep\
    \ dividing n by 2 until you reach 1.", "    if n < 2 \n        then return 1 \n\
    \    else if n % 2 == 0 \n        then return n \n    else \n        largest_prime_factor(n\
    \ / 2) \nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n-1)\
    \ * prime_factor(n-1)\nend\n</cell>\n<code language=julia-1.5>\n@assert largest_prime_factor(5)\
    \ == 5\n@assert largest_prime_factor(7) == 7\n@assert largest_prime_factor(12)\
    \ == 3\n@assert largest_prime_factor(13) == 3\n@assert largest_prime_factor(17)\
    \ == 5\n@assert largest_prime_factor(19) == 7\n@assert largest_prime_factor(25)\
    \ == 5\n@assert largest_prime_factor(29) == 3\n@assert largest_prime_factor(31)\
    \ == 7\n@assert largest_prime_factor(37) == 5\n@assert largest_prime_factor(41)\
    \ == 3\n@assert largest_prime_factor(43) == 7\n@assert largest_prime_factor(47)\
    \ == 5\n@assert largest_prime_factor(53) == 3\n@assert largest_prime_factor(59)\
    \ == 7\n@assert largest_prime_factor(61) == 5\n@assert largest_prime_factor(67)\
    \ == 3\n@assert largest_prime_factor(71) == 7\n@assert largest_prime_factor(73)\
    \ == 5\n@assert largest_prime_factor(79) == 3\n@assert largest_prime_factor(83)\
    \ == 7\n@assert largest_prime_factor(89) == 5\n@assert largest_prime_factor(97)\
    \ == 3\n@assert largest_prime_factor(101) != 7\n@assert largest_prime_factor(101)\
    \ != 7\n@assert largest_prime_factor(101) != 7\n@assert largest_prime_factor(101)\
    \ != 7\n@assert largest_prime_factor(101) != 7\n@assert largest_prime_factor(101)\
    \ != 7\n@assert largest_prime_factor(101) != 7\n@assert largest_prime_factor(101)\
    \ != 7\n@assert largest_prime_factor(101) != 7\n@assert largest_prime_factor(101)\
    \ != 7\n@assert largest_prime_factor(101) != 7\n@assert largest_prime_factor(101)\
    \ != 7\n@assert largest_prime_factor(101) != 7\n@assert largest_prime_factor(101)\
    \ != 7\n@assert largest_prime_factor(101) != 7\n@assert largest_prime_factor(101)\
    \ != 7\n@assert largest_prime_factor(101) != 7\n@assert largest_prime_factor(101)\
    \ != 7\n@assert largest_prime_factor(101) ", "    if n==1 then return 1\n    else\
    \ if n==2 then return 2\n    else if n%2==0 then return largest_prime_factor(n/2)\n\
    \    else return largest_prime_factor(n/2) + largest_prime_factor(n/3) + 1\nend\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the smallest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n==1 then return 1\n    if n==2 then return 2\n \
    \   if n%2==0 then return n//2\n    \n    largest=2\n    for d in range(3,n+1,2)\
    \ do \n        if n%d==0 then \n            largest=d \n            break\n  \
    \  return largest\nend\n</cell>\n<code language=julia-1.5>", "    if n < 2 \n\
    \        then return n\n    else if n == 2 \n        then return 2\n    else if\
    \ n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n  \
    \      largest = 2\n        for p in prime_factors(n) do \n            if p >\
    \ largest \n                then largest = p\n        return largest\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the smallest prime factor of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n\
    \        largest_prime_factor(3 * n + 1) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n <\
    \ 2 \n        then return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n/2)\n\
    \    else \n        largest_prime_factor(3*n+1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the smallest prime factor of n. Assume n > 1 and is not a prime.\n \
    \   >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    2\n    \"\"\"", "    if n < 2 \n        then return n\n    else if n % 2\
    \ == 0 \n        then return largest_prime_factor(n / 2)\n    else \n        largest_prime_factor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_prime_factor(2000000)\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_prime_factor(2000000)\n</cell>\n<code language=",
  "    if n==1 \n        1 \n    else \n        largest_prime_factor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        1 \n    else\
    \ \n        largest_prime_factor(n/2) \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert largest_prime_factor(10) == 2 \n@assert largest_prime_factor(13) == 5\
    \ \n@assert largest_prime_factor(17) == 7 \n@assert largest_prime_factor(19) ==\
    \ 11 \n@assert largest_prime_factor(25) == 13 \n@assert largest_prime_factor(29)\
    \ == 29 \n@assert largest_prime_factor(31) == 31 \n@assert largest_prime_factor(37)\
    \ == 37 \n@assert largest_prime_factor(41) == 41 \n@assert largest_prime_factor(43)\
    \ == 43 \n@assert largest_prime_factor(47) == 47 \n@assert largest_prime_factor(53)\
    \ == 53 \n@assert largest_prime_factor(59) == 59 \n@assert largest_prime_factor(61)\
    \ == 61 \n@assert largest_prime_factor(67) == 67 \n@assert largest_prime_factor(71)\
    \ == 71 \n@assert largest_prime_factor(73) == 73 \n@assert largest_prime_factor(79)\
    \ == 79 \n@assert largest_prime_factor(83) == 83 \n@assert largest_prime_factor(89)\
    \ == 89 \n@assert largest_prime_factor(97) == 97 \n@assert largest_prime_factor(1031)\
    \ == 1031 \n@assert largest_prime_factor(1047) == 1047 \n@assert largest_prime_factor(1059)\
    \ == 1059 \n@assert largest_prime_factor(1063) == 1063 \n@assert largest_prime_factor(1069)\
    \ == 1069 \n@assert largest_prime_factor(1087) == 1087 \n@assert largest_prime_factor(1093)\
    \ == 1093 \n@assert largest_prime_factor(1099) == 1099 \n@assert largest_prime_factor(1111)\
    \ == 1111 \n@assert largest_prime_factor(1117) == 1117 \n@assert largest_prime_factor(1123)\
    \ == 1123 \n@assert largest_prime_factor(1129) == 1129 \n@assert largest_prime_factor(1135)\
    \ == 1135 \n@assert largest_prime_factor(1139) == 1139 \n@assert largest_prime_factor(1143)\
    \ == 1143 \n@assert largest_prime_factor(1149) == 1149 \n@assert largest_prime_factor(1153)\
    \ == 1153 \n@assert largest_prime_factor(1159) == 1159", "    if n < 2 \n    \
    \    then return n\n    else if n == 2 \n        then return 2\n    else if n\
    \ % 2 == 0 \n        then return largest_prime_factor(n / 2)\n    else \n    \
    \    largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise: Write a function that returns the smallest prime factor\
    \ of n. Assume n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n\
    \    13\n    >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n ==\
    \ 1 \n        1\n    else\n        largest_prime_factor(n / 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n < 2 \n        then return 1 \n\
    \    else if n == 2 \n        then return 1 \n    else \n        p := largest_prime_factor(n/2)\
    \ \n        while p*p <= n \n            do return p \n            p := p + 2\
    \ \nend \n</cell>\n<code language=julia-1.5>\n@assert largest_prime_factor(7)\
    \ == 3\n@assert largest_prime_factor(12) == 5\n@assert largest_prime_factor(17)\
    \ == 7\n@assert largest_prime_factor(29) == 11\n@assert largest_prime_factor(31)\
    \ == 7\n@assert largest_prime_factor(33) == 13\n@assert largest_prime_factor(101)\
    \ == 7\n@assert largest_prime_factor(13) == 7\n@assert largest_prime_factor(17)\
    \ == 7\n@assert largest_prime_factor(29) == 11\n@assert largest_prime_factor(31)\
    \ == 7\n@assert largest_prime_factor(33) == 13\n@assert largest_prime_factor(101)\
    \ == 7\n@assert largest_prime_factor(13) == 7\n@assert largest_prime_factor(17)\
    \ == 7\n@assert largest_prime_factor(29) == 11\n@assert largest_prime_factor(31)\
    \ == 7\n@assert largest_prime_factor(33) == 13\n@assert largest_prime_factor(101)\
    \ == 7\n@assert largest_prime_factor(13) == 7\n@assert largest_prime_factor(17)\
    \ == 7\n@assert largest_prime_factor(29) == 11\n@assert largest_prime_factor(31)\
    \ == 7\n@assert largest_prime_factor(33) == 13\n@assert largest_prime_factor(101)\
    \ == 7\n@assert largest_prime_factor(13) == 7\n@assert largest_prime_factor(17)\
    \ == 7\n@assert largest_prime_factor(29) == 11\n@assert largest_prime_factor(31)\
    \ == 7\n@assert largest_prime_factor(33) == 13\n@assert largest_prime_factor(101)\
    \ == 7\n@assert largest_prime_factor(13) == 7\n@assert largest_prime_factor(17)\
    \ == 7\n@assert largest_prime_factor(29) == 11\n@assert largest_prime_factor(31)\
    \ == 7\n@assert largest_prime_factor(33) == 13\n@assert largest_prime_factor(101)\
    \ == 7\n@assert largest_prime_factor(13) == 7\n@assert largest_prime_factor(17)\
    \ == 7\n@assert largest_prime_factor(29) == 11\n@assert largest_prime_factor(",
  "    if n < 2 \n        then return 2\n    else if n == 2 \n        then return\
    \ 2\n    else if n % 2 == 0 \n        then return 2\n    else if n % 3 == 0 \n\
    \        then return 3\n    else if n % 5 == 0 \n        then return 5\n    else\
    \ if n % 7 == 0 \n        then return 7\n    else if n % 11 == 0 \n        then\
    \ return 11\n    else if n % 13 == 0 \n        then return 13\n    else if n %\
    \ 17 == 0 \n        then return 17\n    else if n % 19 == 0 \n        then return\
    \ 19\n    else if n % 23 == 0 \n        then return 23\n    else if n % 29 ==\
    \ 0 \n        then return 29\n    else if n % 31 == 0 \n        then return 31\n\
    \    else if n % 37 == 0 \n        then return 37\n    else if n % 41 == 0 \n\
    \        then return 41\n    else if n % 43 == 0 \n        then return 43\n  \
    \  else if n % 47 == 0 \n        then return 47\n    else if n % 53 == 0 \n  \
    \      then return 53\n    else if n % 59 == 0 \n        then return 59\n    else\
    \ if n % 61 == 0 \n        then return 61\n    else if n % 67 == 0 \n        then\
    \ return 67\n    else if n % 71 == 0 \n        then return 71\n    else if n %\
    \ 73 == 0 \n        then return 73\n    else if n % 79 == 0 \n        then return\
    \ 79\n    else if n % 83 == 0 \n        then return 83\n    else if n % 89 ==\
    \ 0 \n        then return 89\n    else if n % 97 == 0 \n        then return 97\n\
    \    else if n % 101 == 0 \n        then return 101\n    else if n % 103 == 0\
    \ \n        then return 103\n    else if n % 107 == 0 \n        then return 107\n\
    \    else if n % 111 == 0 \n        then return 111\n    else if n % 117 == 0\
    \ \n        then return 117\n    else if n % 121 == 0 \n        then return 121\n\
    \    else if n % 123 == 0 \n        then return 123\n    else if n % 127 == 0\
    \ \n        then return 127\n    else if n % 131 == 0 \n        then return 131\n\
    \    else if n % 137 == 0 \n        then return 137\n    else if n % 141 == 0\
    \ \n        then return 141\n    else if n % 147 == 0 \n        then return 147\n\
    \    else if n % 151 == 0 \n        then ", "    if n < 2 \n        then return\
    \ 1\n    else if n == 2 \n        then return n\n    else if n % 2 == 0 \n   \
    \     then return largest_prime_factor(n/2)\n    else \n        largest_prime_factor(3*n+2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the smallest prime factor of n. Assume n >\
    \ 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>>\
    \ smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n < 2 \n        then\
    \ return n\n    else if n % 2 == 0 \n        then return largest_prime_factor(n\
    \ / 2)\n    else \n        largest = 2\n        for factor in prime_factors(n)\
    \ \n            largest = max {largest, factor}\n        return largest\nend\n\
    </cell>\n<code language=julia-1.4>\nlargest_prime_factor(13195)\n</cell>\n<code\
    \ language=julia-1.4>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the smallest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n < 2 \n        then return n\n    else if n % 2\
    \ == 0 \n        then return largest_prime_factor(n/2)\n    else \n        largest_prime_factor(3*n+2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n\
    <code language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise\n\
    Write a function that returns the smallest prime factor of n. Assume n > 1 and\
    \ is not a prime.\nHint: You may want to use recursion.", "    if n==1 \n    \
    \    1\n    else\n        largest_prime_factor(n-1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_prime_factor(13195)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the smallest prime factor of n. Assume n >\
    \ 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>>\
    \ smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n == 1 \n        1\n\
    \    else\n        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n<2 return 1\n\
    \    if n==2 return n\n    if n%2==0 return n\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    if n < 2 \n        return n\n    else\
    \ if n % 2 == 0 \n        return largest_prime_factor(n/2)\n    else \n      \
    \  return largest_prime_factor(3*n+1)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_prime_factor(13195)\n</cell>\n<code language=julia-1.5>\nlargest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the greatest common\
    \ divisor of two numbers. Assume that both numbers are positive.", "    if n <\
    \ 2 \n        then return 1\n    else if n == 2 \n        then return 2\n    else\
    \ if n % 2 == 0 \n        then return n\n    else \n        largest_prime_factor(n\
    \ / 2)\nend\n</cell>\n<code language=julia-1.3>\nlargest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.3>\nlargest_prime_factor(2048)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest prime factor of n. Assume\
    \ n > 1 and is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n  \
    \  >>> smallest_prime_factor(2048)\n    3\n    \"\"\"", "    if n == 1 \n    \
    \    1\n    else\n        largest_prime_factor(n-1) * n\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the smallest prime factor of\
    \ n. Assume n > 1 and is not a prime.\nHint: You may want to use an if statement\
    \ to test whether n is prime.", "    if n < 2 \n        then return n\n    else\
    \ if n == 2 \n        then return 2\n    else if n % 2 == 0 \n        then return\
    \ largest_prime_factor(n/2)\n    else \n        largest_prime_factor(n/3)\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_prime_factor(13195)\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_prime_factor(2048)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the smallest prime factor of n. Assume n > 1 and\
    \ is not a prime.\n    >>> smallest_prime_factor(13195)\n    13\n    >>> smallest_prime_factor(2048)\n\
    \    3\n    \"\"\"", "    if n == 1 \n        1\n    else \n        largest_prime_factor(n/2)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>\n@code_warntype largest_prime_factor(13195)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype largest_prime_factor(2048)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the greatest common\
    \ divisor of two positive integers. Assume that both numbers are positive.", " \
    \   if n==1 \n        1\n    else \n        largest_prime_factor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>", "    if n == 1 \n        1\n    else\n\
    \        largest_prime_factor(n / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 2 \n        then return n\n    else if n % 2 == 0 \n        then return\
    \ 2\n    else if n % 3 == 0 \n        then return 3\n    else if n % 5 == 0 \n\
    \        then return 5\n    else if n % 7 == 0 \n        then return 7\n    else\
    \ if n % 11 == 0 \n        then return 11\n    else if n % 13 == 0 \n        then\
    \ return 13\n    else if n % 17 == 0 \n        then return 17\n    else if n %\
    \ 19 == 0 \n        then return 19\n    else if n % 23 == 0 \n        then return\
    \ 23\n    else if n % 29 == 0 \n        then return 29\n    else if n % 31 ==\
    \ 0 \n        then return 31\n    else if n % 37 == 0 \n        then return 37\n\
    \    else if n % 41 == 0 \n        then return 41\n    else if n % 43 == 0 \n\
    \        then return 43\n    else if n % 47 == 0 \n        then return 47\n  \
    \  else if n % 53 == 0 \n        then return 53\n    else if n % 59 == 0 \n  \
    \      then return 59\n    else if n % 61 == 0 \n        then return 61\n    else\
    \ if n % 67 == 0 \n        then return 67\n    else if n % 71 == 0 \n        then\
    \ return 71\n    else if n % 73 == 0 \n        then return 73\n    else if n %\
    \ 79 == 0 \n        then return 79\n    else if n % 83 == 0 \n        then return\
    \ 83\n    else if n % 89 == 0 \n        then return 89\n    else if n % 97 ==\
    \ 0 \n        then return 97\n    else if n % 101 == 0 \n        then return 101\n\
    \    else if n % 103 == 0 \n        then return 103\n    else if n % 107 == 0\
    \ \n        then return 107\n    else if n % 111 == 0 \n        then return 111\n\
    \    else if n % 117 == 0 \n        then return 117\n    else if n % 121 == 0\
    \ \n        then return 121\n    else if n % 123 == 0 \n        then return 123\n\
    \    else if n % 127 == 0 \n        then return 127\n    else if n % 131 == 0\
    \ \n        then return 131\n    else if n % 137 == 0 \n        then return 137\n\
    \    else if n % 141 == 0 \n        then return 141\n    else if n % 147 == 0\
    \ \n        then return 147\n    else if n % 151 == 0 \n        then return 151\n\
    \    else if n % 157 == 0 ", "    if n < 2 \n        then return 2\n    else if\
    \ n % 2 == 0 \n        then return 2\n    else \n        p := 3\n        while\
    \ p < n \n            do if n % p == 0 \n                then return p\n     \
    \           p := p + 2\n            end\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert largest_prime_factor(5)\
    \ == 5\n@assert largest_prime_factor(7) == 3\n@assert largest_prime_factor(11)\
    \ == 7\n@assert largest_prime_factor(13) == 3\n@assert largest_prime_factor(17)\
    \ == 7\n@assert largest_prime_factor(19) == 5\n@assert largest_prime_factor(23)\
    \ == 3\n@assert largest_prime_factor(29) == 5\n@assert largest_prime_factor(31)\
    \ == 7\n@assert largest_prime_factor(37) == 3\n@assert largest_prime_factor(41)\
    \ == 7\n@assert largest_prime_factor(43) == 5\n@assert largest_prime_factor(47)\
    \ == 3\n@assert largest_prime_factor(53) == 7\n@assert largest_prime_factor(59)\
    \ == 3\n@assert largest_prime_factor(61) == 7\n@assert largest_prime_factor(67)\
    \ == 5\n@assert largest_prime_factor(71) ==3\n@assert largest_prime_factor(73)\
    \ == 7\n@assert largest_prime_factor(79) == 3\n@assert largest_prime_factor(83)\
    \ == 7\n@assert largest_prime_factor(89) == 5\n@assert largest_prime_factor(97)\
    \ == 3\n@assert largest_prime_factor(101) ==7\n@assert largest_prime_factor(103)\
    \ == 5\n@assert largest_prime_factor(107) == 3\n@assert largest_prime_factor(109)\
    \ == 7\n@assert largest_prime_factor(113) == 5\n@assert largest_prime_factor(127)\
    \ == 3\n@assert largest_prime_factor(131) == 7\n@assert largest_prime_factor(137)\
    \ == 5\n@assert largest_prime_factor(139) == 3\n@assert largest_prime_factor(141)\
    \ ==7\n@assert largest_prime_factor(147) == 5\n@assert largest_prime_factor(153)\
    \ == 3\n@assert largest_prime_factor(157) == 7\n@assert largest_prime_factor(163)\
    \ == 5\n@assert largest_prime_factor(167) == 3\n@assert largest_prime_factor(173)\
    \ == 7\n@assert largest_prime_factor(179) == 5\n@assert largest_prime_factor(181)\
    \ == 3\n@assert largest_prime_factor(191) == 7\n@assert largest_prime_factor(193)\
    \ == 5", "    if n == 1 \n        1\n    else\n        largest_prime_factor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_prime_factor(100_000_000)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of prime\
    \ factors of n. Assume n > 1 and is not a prime.\nHint: use the function largest_prime_factor."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
