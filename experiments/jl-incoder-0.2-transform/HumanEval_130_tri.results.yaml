language: jl
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the first n numbers of the Fibonacci sequence starting\
    \ from 1.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6f7c1an.jl:25\nin expression starting at\
    \ /tmp/tmpl6f7c1an.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    if n == 2 \n        return [1, 1]\n\
    \    if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) \n  \
    \  else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the n-th number of the\
    \ Fibonacci sequence starting from 0.\nExamples:\n>>> fibonacci(0)\n0\n>>> fibonacci(1)\n\
    1\n>>> fibonacci(2)\n1\n>>> fibonacci(3)\n2\n>>> fibonacci(4)\n3\n>>> fibonacci(5)\n\
    5\n>>> fibonacci(6)\n8\n>>> fibonacci(7)\n13\n>>> fibonacci(8)\n21\n>>> fibonacci(9)\n\
    34\n>>> fibonacci(10)\n55\n>>> fibonacci(11)\n89\n>>> fibonacci(12)\n144\n>>>\
    \ fibonacci(13)\n233\n>>> fibonacci(14)\n377\n>>> fibonacci(15)\n610\n>>> fibonacci(16)\n\
    987\n>>> fibonacci(17)\n1597\n>>> fibonacci(18)\n2584\n>>> fibonacci(19)\n4181\n\
    >>> fibonacci(20)\n6765\n>>> fibonacci(21)\n10946\n>>> fibonacci(22)\n17711\n\
    >>> fibonacci(23)\n28657\n>>> fibonacci(24)\n46368\n>>> fibonacci(25)\n75025\n\
    >>> fibonacci(26)\n121393\n>>> fibonacci(27)\n196418\n>>> fibonacci(28)\n317811\n\
    >>> fibonacci(29)\n514229\n>>> fibonacci(30)\n832040\n>>> fibonacci(31)\n1346269\n\
    >>> fibonacci(32)\n2178309\n>>> fibonacci(33)\n3524578\n>>> fibonacci(34)\n5702887\n\
    >>> fibonacci(35)\n9227465\n>>> fibonacci(36)\n14930352\n>>> fibonacci(37)\n24157817\n\
    >>> fibon\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjhx49vj.jl:28\nin expression starting at\
    \ /tmp/tmprjhx49vj.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n    \
    \    tri_3 = tri(n + 1) + tri(n - 1) + tri(n - 2)\n        return tri_1 + tri_2\
    \ + tri_3\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ sum of the numbers from 1 to n.\nExamples:\n>>> sum_of_numbers(10)\n55\n>>>\
    \ sum_of_numbers(5)\n15\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(-10)\n-10\n\
    >>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n-1\n\
    >>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n\
    0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n-1\n>>> sum_of_numbers(10)\n\
    55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n\
    1\n>>> sum_of_numbers(-1)\n-1\n>>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n\
    -10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n\
    -1\n>>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n\
    0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n-1\n>>> sum_of_numbers(10)\n\
    55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n\
    1\n>>> sum_of_numbers(-1)\n-1\n>>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n\
    -10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n\
    -1\n>>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n\
    0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n-1\n>>> sum_of_numbers(10)\n\
    55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n\
    1\n\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
    \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpin4ub6xd.jl:21\nin expression starting at\
    \ /tmp/tmpin4ub6xd.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    if n == 2 \n        return [1, 1]\n\
    \    if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n   \
    \ else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)\nusing Test\n\n\
    @testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgjw9to3.jl:28\nin expression starting at\
    \ /tmp/tmpxgjw9to3.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the numbers\
    \ in the Fibonacci sequence up to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdofmsam.jl:21\nin expression starting at\
    \ /tmp/tmpcdofmsam.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        [1]\n    else if n % 2 == 0 \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvyz7g2a.jl:21\nin expression starting at\
    \ /tmp/tmppvyz7g2a.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\nend\n</cell>\n<text>\nProblem 4\nWrite a function that returns the n-th\
    \ Fibonacci number in the Fibonacci sequence.\nExamples:\n>>> fib(3)\n3\n>>> fib(5)\n\
    13\n>>> fib(8)\n21\n>>> fib(10)\n34\n>>> fib(15)\n55\n>>> fib(20)\n89\n>>> fib(25)\n\
    142\n>>> fib(30)\n233\n>>> fib(35)\n377\n>>> fib(40)\n610\n>>> fib(45)\n987\n\
    >>> fib(50)\n1597\n>>> fib(55)\n2584\n>>> fib(60)\n4181\n>>> fib(65)\n7356\n>>>\
    \ fib(70)\n11592\n>>> fib(75)\n18363\n>>> fib(80)\n29712\n>>> fib(85)\n39529\n\
    >>> fib(90)\n51474\n>>> fib(95)\n76607\n>>> fib(100)\n121393\n>>> fib(105)\n196418\n\
    >>> fib(110)\n317811\n>>> fib(115)\n514229\n>>> fib(120)\n832040\n>>> fib(125)\n\
    1346269\n>>> fib(130)\n2178309\n>>> fib(135)\n3524578\n>>> fib(140)\n5702887\n\
    >>> fib(145)\n9301728\n>>> fib(150)\n14329242\n>>> fib(155)\n24558013\n>>> fib(160)\n\
    39088169\n>>> fib(165)\n63245986\n>>> fib(170)\n102334155\n>>> fib(175)\n165580141\n\
    >>> fib(180)\n267914296\n>>> fib(185)\n433494437\n>>> fib(190)\n701408733\n>>>\
    \ fib(195)\n1134903170\n>>> fib(200)\n1836311903\n>>> fib(205)\n2971215073\n>>>\
    \ fib(210)\n3952934883\n>>> fib(\nusing Test\n\n@testset begin\n\ncandidate =\
    \ tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuxznsror.jl:29\nin expression starting at\
    \ /tmp/tmpuxznsror.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0\n        return Vector{Int64}()\n    else if n == 1\n      \
    \  return Vector{Int64}(1)\n    else\n        return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n\
    \    \n    Fibonacci sequence is defined by the recurrence:\n    fib(1) = 1\n\
    \    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3), if n is odd.\n    For example:\n    fib(2) = 1 + 1 = 2\n    fib(3)\
    \ = fib(2) + fib(1) = 3\n    fib(4) = fib(3) + fib(2) = 1 + 2 + 3 = 6\n    You\
    \ are given a non-negative integer number n, you have to a return a list of the\
    \ \n    first n numbers of the Fibonacci sequence.\n    Examples:\n    >>> fib(2)\n\
    \    [1, 1, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpk4n5s5.jl:21\nin expression starting at\
    \ /tmp/tmpnpk4n5s5.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2egjeeo.jl:21\nin expression starting at\
    \ /tmp/tmpx2egjeeo.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that returns the sum of the numbers from 1 to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2,\
    \ 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3,\
    \ 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk4nwmeme.jl:21\nin expression starting at\
    \ /tmp/tmpk4nwmeme.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1\n        Vector{Int64}(1)\n    else\n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a given number. \nExamples:\nfactorial(0) = 1\n\
    factorial(5) = 120\nfactorial(10) = 3,6,10,12,20,30,40,50\nWrite a function that\
    \ returns the Fibonacci number for a given number. \nExamples:\nfibonacci(0) =\
    \ 1\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\n\
    fibonacci(5) = 5\nfibonacci(6) = 8,13\nfibonacci(7) = 13,21\nfibonacci(8) = 21\n\
    fibonacci(9) = 67,89\nfibonacci(10) = 67,89,144\nWrite a function that returns\
    \ the Fibonacci number for a given number in a recursive way. \nExamples:\nfibonacci_recursive(0)\
    \ = 1\nfibonacci_recursive(1) = 1\nfibonacci_recursive(2) = 1\nfibonacci_recursive(3)\
    \ = 2\nfibonacci_recursive(4) = 3\nfibonacci_recursive(5) = 5\nfibonacci_recursive(6)\
    \ = 8,13\nfibonacci_recursive(7) = 13,21\nfibonacci_recursive(8) = 21\nfibonacci_recursive(9)\
    \ = 67,89\nfibonacci_recursive(10) = 67,89,144\nWrite a function that returns\
    \ the Fibonacci number for a given number in a iterative way. \nExamples:\nfibonacci_iterative(0)\
    \ = 1\nfibonacci_iterative(1) = 1\nfibonacci_iterative(2) = 1\nfibonacci_iterative(3)\
    \ = 2\nfibonacci_iterative(4) = 3\nfibonacci_iterative(5) = 5\nfibonacci_iterative(6)\
    \ = 8,13\nfibonacci_iterative(7) = 13,21\nfibonacci_iterative(8) = 21\nfibonacci_iterative(9)\
    \ = 67,89\nfibonacci_iterative(10) = 67,89,144\nWrite a function that returns\
    \ the Fibonacci number for a given number in a iterative way using an accumulator.\
    \ \nExamples:\nfibonacci_iterative_acc(0) = 1\nfibonacci_iterative_acc(1) = 1\n\
    fibonacci_iter\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3)\
    \ == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
    \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t\
    @test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1,\
    \ 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7,\
    \ 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps76dxl8j.jl:25\nin expression starting at\
    \ /tmp/tmps76dxl8j.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\t\
    @test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphy36i100.jl:21\nin expression starting at\
    \ /tmp/tmphy36i100.jl:21\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the first\
    \ n numbers of the Fibonacci sequence. \n    For example, fib(3) = 1 + 2 + 3 =\
    \ 6\n    You are given a non-negative integer number n, you have to a return a\
    \ list of the \n    first n + 1 numbers of the Fibonacci sequence.\n    Examples:\n\
    \    >>> fib(3)\n    [1, 1, 2]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3,\
    \ 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\
    \t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) ==\
    \ [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0)\
    \ == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gxg6zz3.jl:21\nin expression starting at\
    \ /tmp/tmp0gxg6zz3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        Vector{Int64}(1)\n    elseif n == 2 \n        Vector{Int64}(3)\n\
    \    elseif n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\n\
    end\n</code>\n<|/ a dscore=3 |>\n<| a tags=fibonacci,recursion,julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpure_6omj.jl:29\nin expression starting at\
    \ /tmp/tmpure_6omj.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that calculates the sum of all even numbers in a given list.\nExamples:\n\
    >>> sum([2, 4, 6, 8])\n10\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n21\n>>> sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n30\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20])\n42\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n101\n>>> sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n\
    101\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\
    \ 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\
    \ 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,\
    \ 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\
    \ 96, 97, 98, 99])\n101\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_ciq5qd.jl:25\nin expression starting at\
    \ /tmp/tmpt_ciq5qd.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp656__hla.jl:25\nin expression starting at\
    \ /tmp/tmp656__hla.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the n-th number of the Fibonacci sequence.\
    \ \nExamples:\n>>> fib(3)\n3\n>>> fib(10)\n55\n>>> fib(20)\n6765\n>>> fib(30)\n\
    6765\n>>> fib(100)\n6765\n>>> fib(1000)\n6765\n>>> fib(10000)\n6765\n>>> fib(100000)\n\
    6765\n>>> fib(1000000)\n6765\n>>> fib(10000000)\n6765\n>>> fib(100000000)\n6765\n\
    >>> fib(1000000000)\n6765\n>>> fib(10000000000)\n6765\n>>> fib(100000000000)\n\
    6765\n>>> fib(1000000000000)\n6765\n>>> fib(10000000000000)\n6765\n>>> fib(100000000000000)\n\
    6765\n>>> fib(1000000000000000)\n6765\n>>> fib(10000000000000000)\n6765\n>>> fib(100000000000000000)\n\
    6765\n>>> fib(1000000000000000000)\n6765\n>>> fib(10000000000000000000)\n6765\n\
    >>> fib(100000000000000000000)\n6765\n>>> fib(1000000000000000000000)\n6765\n\
    >>> fib(10000000000000000000000)\n6765\n>>> fib(100000000000000000000000)\n6765\n\
    >>> fib(1000000000000000000000000)\n6765\n>>> fib(10000000000000000000000000)\n\
    6765\n>>> fib(100000000000000000000000000)\n6765\n>>> fib(1000000000000000000000000000)\n\
    6765\n>>> fib(10000000000000000000000000000)\n6765\n>>> fib(100000000000000000000000000000)\n\
    6765\n>>> fib(1000000000000000000000000000000)\n6765\n>>> fib(10000000000000000000000000000000)\n\
    6765\n>>> fib(100000000000000000000000000000000)\n6765\n>>> fib(1000000000000000000000000000000000)\n\
    6765\n>>> fib(10000000000000000000000000000000000)\n6765\n>>> fib(100000000000000000000000000000000000)\n\
    6765\n>>> fib(1000000000000000000000000000000000000)\n6765\n>>> fib(10000000000000000000000000000000000000)\n\
    6765\n>>> fib(100000000000000000000000000000000000000)\n6765\n>>> fib(10000000000000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1,\
    \ 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) ==\
    \ [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpelzlxv5v.jl:21\nin expression starting at\
    \ /tmp/tmpelzlxv5v.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1,\
    \ 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$ and returns\
    \ the $n$th Fibonacci number.\nusing Test\n\n@testset begin\n\ncandidate = tri;\n\
    \t@test(candidate(3) == [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\
    \t@test(candidate(5) == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2,\
    \ 8, 3, 15, 4])\n\t@test(candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5, 35])\n\t@test(candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6,\
    \ 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\t@test(candidate(0) == [1])\n\t@test(candidate(1)\
    \ == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2w_otv5.jl:21\nin expression starting at\
    \ /tmp/tmpj2w_otv5.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1)\
    \ = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2)\
    \ = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 +\
    \ 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n\
    \    Examples:\n    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
    \ \n    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2)\n    else \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + \nusing Test\n\
    \n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) == [1, 3, 2, 8])\n\t\
    @test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5) == [1, 3, 2, 8, 3,\
    \ 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15,\
    \ 4, 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
    \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1lrp4yru.jl:21\nin expression starting at\
    \ /tmp/tmp1lrp4yru.jl:21\n"
  stdout: ''
