name: HumanEval_42_incr_list
language: jl
prompt: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
  \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6,\
  \ 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
completions: ["    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list that satisfies a condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is ", "    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1]\
    \ = l[i] - 1\n        i = i-1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = copy(l)\n    l = l + [length(l)+1]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.", "    l\
    \ = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first\
    \ element of a list that satisfies a given condition. For example, incr_list_satisfying(l::Vector{Int64},\
    \ x::Int64) should return the element x in l that satisfies x>0. Write a test\
    \ that checks that your function works as expected.", "    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    for i =\
    \ 1:length(l)\n        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.4>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.4>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a list.\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, ", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = copy(l)\n    i = length(l)\n    while i > 1\n\
    \        l[i - 1] = l[i - 1] + 1\n        i = i - 1\n    end\n    return l\nend",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the sum of\
    \ the elements of an array.", "    l = copy(l)\n    l = l + 1\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of an array.",
  "    l = copy(l)\n    length(l) += 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, plus 1. \nFor example, incr_vec([1, 2, 3]) should\
    \ return [2, 3, 4].", "    l = copy(l)\n    i = length(l)\n    while i > 1\n \
    \       l[i - 1] = l[i - 1] + 1\n        i = i - 1\n    end\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + [length(l)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + 1\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + 1\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a list.", "    l = copy(l)\n\
    \    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"", "    l = l + 1\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of an array.\
    \ \n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    6\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
