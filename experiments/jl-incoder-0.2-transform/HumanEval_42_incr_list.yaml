name: HumanEval_42_incr_list
language: jl
prompt: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
  \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6,\
  \ 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
completions: ["    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list that satisfies a condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is ", "    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1]\
    \ = l[i] - 1\n        i = i-1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = copy(l)\n    l = l + [length(l)+1]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.", "    l\
    \ = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first\
    \ element of a list that satisfies a given condition. For example, incr_list_satisfying(l::Vector{Int64},\
    \ x::Int64) should return the element x in l that satisfies x>0. Write a test\
    \ that checks that your function works as expected.", "    l = l + 1 \n    return\
    \ l \nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    for i =\
    \ 1:length(l)\n        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.4>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.4>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a list.\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, ", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = copy(l)\n    i = length(l)\n    while i > 1\n\
    \        l[i - 1] = l[i - 1] + 1\n        i = i - 1\n    end\n    return l\nend",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the sum of\
    \ the elements of an array.", "    l = copy(l)\n    l = l + 1\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of an array.",
  "    l = copy(l)\n    length(l) += 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, plus 1. \nFor example, incr_vec([1, 2, 3]) should\
    \ return [2, 3, 4].", "    l = copy(l)\n    i = length(l)\n    while i > 1\n \
    \       l[i - 1] = l[i - 1] + 1\n        i = i - 1\n    end\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + [length(l)]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + 1\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + 1\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a list.", "    l = copy(l)\n\
    \    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"", "    l = l + 1\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of an array.\
    \ \n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    6\n    \"\"\"", "    l = copy(l)\n    i = length(l)\n    while i > 0\n  \
    \      l[i - 1] += 1\n        i -= 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a list.\n    >>> sum([1, 2,\
    \ 3])\n    6\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n \
    \   10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + 1\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.4>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the same vector with each element incremented by 1.", "    l = copy(l)\n   \
    \ push!(l, l[end]+1)\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = copy(l)\n    length(l) += 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the mean of the\
    \ elements of an array. \nWrite a function that returns the median of the elements\
    \ of an array. \nWrite a function that returns the mode of the elements of an\
    \ array. \nWrite a function that returns the variance of the elements of an array.\
    \ \nWrite a function that returns the standard deviation of the elements of an\
    \ array. \nWrite a function that returns the minimum of the elements of an array.\
    \ \nWrite a function that returns the maximum of the elements of an array. \n\
    Write a function that returns the absolute value of the elements of an array.\
    \ \nWrite a function that returns the absolute value of the elements of a vector.\
    \ \nWrite a function that returns the elementwise product of the elements of two\
    \ arrays. \nWrite a function that returns the elementwise product of the elements\
    \ of two vectors. \nWrite a function that returns the elementwise product of the\
    \ elements of two arrays. \nWrite a function that returns the elementwise product\
    \ of the elements of two vectors. \nWrite a function that returns the elementwise\
    \ product of the elements of two arrays. \nWrite a function that returns the elementwise\
    \ product of the elements of two vectors. \nWrite a function that returns the\
    \ elementwise product of the elements of two arrays. \nWrite a function that returns\
    \ the elementwise product of the elements of two vectors. \nWrite a function that\
    \ returns the elementwise product of the elements of two arrays. \nWrite a function\
    \ that returns the elementwise product of the elements of two vectors. \nWrite\
    \ a function that returns the elementwise product of the elements of two arrays.\
    \ \nWrite a function that returns the elementwise product of the elements of two\
    \ vectors. \nWrite a function that returns the elementwise product of the elements\
    \ of two arrays. \nWrite a function that returns the elementwise product of the\
    \ elements of two vectors. \nWrite a function that returns the elementwise product\
    \ of the elements of two arrays. \nWrite a function that returns the elementwise\
    \ product of the elements of two vectors. \nWrite a function that returns the\
    \ elementwise product of the elements of two arrays. \nWrite a function that returns\
    \ the elementwise product of the elements of two vectors. \nWrite a function that\
    \ returns the elementwise product of the elements of two arrays. \nWrite a function\
    \ that returns the elementwise product of the elements of two vectors. \nWrite\
    \ a function that returns the elementwise product of the elements of two arrays.\
    \ \nWrite a function that returns the elementwise product of the elements of two\
    \ vectors. \nWrite a function that returns the elementwise product of the elements\
    \ of two arrays. \nWrite a function that returns the elementwise product of the\
    \ elements of two vectors. \nWrite a function that returns the elementwise product\
    \ of the elements of two arrays. \n", "    l = l + [Int64]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a list if it is non-zero, otherwise\
    \ return 0.", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.4>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ a list with elements incremented by 1 starting from the second element of the\
    \ list.", "    l = copy(l)\n    for i = 1:length(l)\n        l[i] = l[i] + 1\n\
    \    end\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l +\
    \ [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the vector with its elements incremented by 1.\n>>> incr_vector([1,\
    \ 2, 3])\n[1, 2, 3, 4]\n>>> incr_vector([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\n</text>\n<code language=julia-1.5>", "    l = copy(l)\n\
    \    i = length(l)\n    while i > 0\n        l[i] = l[i - 1] + 1\n        i -=\
    \ 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the same vector but with each element incremented by 1.", "    l\
    \ = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l\
    \ + 1\n    return l\nend\n</cell>\n<code language=julia-1.3>\n@time incr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\n@time incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ first element of a list that satisfies a given condition. For example, suppose\
    \ you have a list of numbers and you want to find the first number greater than\
    \ or equal to 10. Write a function that returns the first element of the list\
    \ that satisfies this condition.", "    l = l + [Int64(1)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the first element of a list multiplied by 2.\n    >>>\
    \ mult_list([1, 2, 3])\n    6\n    >>> mult_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    30\n    \"\"\"", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l + [length(l)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the list with elements incremented\
    \ by 1 but starting from position n. \nFor example, incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123], 2) should return [6, 4, 6, 3, 4, 4, 10, 1, 124]. \nUse incr_list()\
    \ to solve this problem.", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a vector, incremented by 1.", " \
    \   l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ as input and returns a vector with elements incremented by 1.\n    >>> incr_vec([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_vec([5, 3, 5, 2, 3, 3, 9, 0, 123])\n   \
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"", "    l = l + 1 \n    return l \n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 1\n        l[i-1] = l[i] - 1\n        i = i-1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\n@time incr_list([1, 2, 3])\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first element of a vector, incremented by 1.\nWrite a function that\
    \ returns the last element of a vector, decremented by 1.\nWrite a function that\
    \ returns the sum of a vector, incremented by 1.\nWrite a function that returns\
    \ the product of a vector, incremented by 1.\nWrite a function that returns the\
    \ maximum of a vector, incremented by 1.\nWrite a function that returns the minimum\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector, incremented by 1.\nWrite ", "    l = l + 1\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a list, and a function that returns\
    \ the last element of a list. \nWrite a function that returns the sum of the elements\
    \ of a list.\nWrite a function that returns the product of the elements of a list.\n\
    Write a function that returns the maximum of the elements of a list.\nWrite a\
    \ function that returns the minimum of the elements of a list.\nWrite a function\
    \ that returns the absolute value of a number.\nWrite a function that returns\
    \ the factorial of a number.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of times\
    \ a value appears in a list.\nWrite a function that returns the number of ", " \
    \   l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = copy(l)\n    l = l\
    \ + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a vector, incremented by 1.\n    >>> incr_vec([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_vec([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \"\"\"", "    l = l + [length(l)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1 \n    return l\nend", "    l = l +\
    \ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\n@time incr_list([5,3,5,2,3,3,9,0,123])\n</cell>\n\
    <text>\nExercise\nWrite a function that returns a list with elements incremented\
    \ by 1 up to a specified number.", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a vector, plus 1.\n    >>> first_element([1,\
    \ 2, 3])\n    2\n    >>> first_element([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n\
    \    \"\"\"", "    l = copy(l)\n    i = length(l)\n    \n    while i > 1\n   \
    \     l[i-1] = l[i-1] + 1\n        i = i-1\n    end\n    \n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = copy(l)\n    for i = 1:length(l)\n\
    \        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    @time incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the first element of a list that satisfies a condition. For example,\
    \ if the list is [5, 3, 5, 2, 3, 3, 9, 0, 123], the function should return 6.\
    \ Write a test that checks the function by comparing the result with the expected\
    \ value.", "    l = l + 1 \n    return l\nend", "    l = l .+ 1\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 0\n        l[i] = l[i - 1] + 1\n        i = i - 1\n    end\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@time incr_list([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    @time incr_list([5,3,5,2,3,3,9,0,123])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n prime numbers. \nThe function should accept a parameter\
    \ n and return a vector of prime numbers.\nThe function should return an error\
    \ if n is not positive.\nThe function should return an error if n is less than\
    \ 2.\nThe function should return an error if n is greater than the square root\
    \ of the number of elements in the input vector.", "    l = copy(l)\n    l = l\
    \ .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the elements of an array.", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.3>", "    l = l + [Int64]\n    return l\nend", "    l =\
    \ l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ first element of a vector, plus 1.\nWrite a function that returns the first\
    \ element of a vector, multiplied by 2.\nWrite a function that returns the first\
    \ element of a vector, divided by 2.\nWrite a function that returns the first\
    \ element of a vector, raised to the power of 2.\nWrite a function that returns\
    \ the first element of a vector, divided by 2, raised to the power of 2.\nWrite\
    \ a function that returns the first element of a vector, multiplied by 2, raised\
    \ to the power of 2.\nWrite a function that returns the first element of a vector,\
    \ divided by 2, raised to the power of 2, and rounded to the nearest integer.\n\
    Write a function that returns the first element of a vector, divided by 2, raised\
    \ to the power of 2, and rounded to the nearest integer.\nWrite a function that\
    \ returns the first element of a vector, multiplied by 2, raised to the power\
    \ of 2, and rounded to the nearest integer.\nWrite a function that returns the\
    \ first element of a vector, divided by 2, raised to the power of 2, and rounded\
    \ to the nearest integer.\nWrite a function that returns the first element of\
    \ a vector, multiplied by 2, raised to the power of 2, and rounded to the nearest\
    \ integer.\nWrite a function that returns the first element of a vector, divided\
    \ by 2, raised to the power of 2, and rounded to the nearest integer.\nWrite a\
    \ function that returns the first element of a vector, multiplied by 2, raised\
    \ to the power of 2, and rounded to the nearest integer.\nWrite a function that\
    \ returns the first element of a vector, divided by 2, raised to the power of\
    \ 2, and rounded to the nearest integer.\nWrite a function that returns the first\
    \ element of a vector, multiplied by 2, raised to the power of 2, and rounded\
    \ to the nearest integer.\nWrite a function that returns the first element of\
    \ a vector, divided by 2, raised to the power of 2, and rounded to the nearest\
    \ integer.\nWrite a function that returns the first element of a vector, multiplied\
    \ by 2, raised to the power of 2, and rounded to the nearest integer.\nWrite a\
    \ function that returns the first element of a vector, divided by 2, raised to\
    \ the power of 2, and rounded to the nearest integer.\nWrite a function that returns\
    \ the first element of a vector, multiplied by 2, raised to the power of 2, and\
    \ rounded to the nearest integer.\nWrite a function that returns the first element\
    \ of a vector, divided by 2, raised to the power of 2, and rounded to the nearest\
    \ integer.\nWrite a function that returns the first element of a vector, multiplied\
    \ by 2, raised to the power of 2, and rounded to the nearest integer.\nWrite ",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.3>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.3>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a vector. \nThe function should work for both vectors and\
    \ matrices.", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns a new vector with elements incremented by 1.\n>>> incr_vector([1,\
    \ 2, 3])\n[2, 3, 4]\n>>> incr_vector([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n</text>\n<code language=julia-1.5>", "    l = copy(l)\n\
    \    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the same vector but with each element incremented by 1.", "    l\
    \ = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements of an array. \nWrite a function that returns\
    \ the sum of the elements of an array multiplied by 2.\nWrite a function that\
    \ returns the sum of the elements of an array multiplied by 3.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 4.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 5.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 6.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 7.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 8.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 9.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 10.\nWrite a\
    \ function that returns the sum of the elements of an array multiplied by 11.\n\
    Write a function that returns the sum of the elements of an array multiplied by\
    \ 12.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 13.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 14.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 15.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 16.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 17.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 18.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 19.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 20.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 21.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 22.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 23.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 24.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 25.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 26.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 27.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 28.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 29.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 30.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 31.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 32.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 33.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 34.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 35.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 36.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 37.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 38.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 39.\nWrite ", "    l = copy(l)\n    i = length(l)\n    while i > 1\n    \
    \    l[i-1] = l[i-1] + 1\n        i = i-1\n    end\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of an array.", "    l = l + 1\
    \ \n    return l \nend\n</cell>\n<code language=julia-1.4>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ of an array.", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n elements of a list.", "    l = l + [Int64]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l |> Vector{Int64}\n    l = l |>\
    \ Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = copy(l)\n    l = l + [Int64]\n    return l\nend\n\
    </cell>\n<code language=julia-1.3>", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a vector, plus 1. \nFor example,\
    \ incr_vec([1, 2, 3]) should return [2, 3, 4].", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector and returns a new vector\
    \ with each element incremented by 1.", "    l = copy(l)\n    l = l + ones(length(l))\
    \ * length(l)\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the list\
    \ with elements incremented by 1 starting from the second element.\nHint: Use\
    \ incr_list", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in a list that satisfy a certain condition. For example,\
    \ a list with only positive integers would return 2.", "    l = copy(l)\n    i\
    \ = length(l)\n    while i > 1\n        l[i-1] = l[i-1] + 1\n        i = i-1\n\
    \    end\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l +\
    \ [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the elements of a list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123])\n    60\n    \"\"\"", "    l = copy(l)\n    for i =\
    \ length(l) + 1:-1:1\n        l[i] = l[i] + 1\n    end\n    return l\nend\n</cell>\n\
    <code language=julia-1.3>", "    l = copy(l)\n    l = l + 1\n    return l\nend",
  "    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i] - 1\n\
    \        i = i-1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements of the vector.",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 1\n        l[i-1] = l[i] - 1\n        i = i-1\n    end\n    return\
    \ l\nend", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in a vector that are not equal to zero.", "    l = copy(l)\n\
    \    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector that is greater than a specified value.", "  \
    \  l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the maximum of\
    \ the elements of an array. \nWrite a function that returns the minimum of the\
    \ elements of an array. \nWrite a function that returns the absolute value of\
    \ the elements of an array. \nWrite a function that returns the sign of the elements\
    \ of an array. \nWrite a function that returns the absolute value of the first\
    \ element of an array. \nWrite a function that returns the sign of the first element\
    \ of an array. \nWrite a function that returns the sum of the first element of\
    \ an array. \nWrite a function that returns the product of the first element of\
    \ an array. \nWrite a function that returns the maximum of the first element of\
    \ an array. \nWrite a function that returns the minimum of the first element of\
    \ an array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \n", "    l = copy(l)\n    l = l + 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the product of a list of numbers.", "    l = copy(l)\n\
    \    push!(l, l[end]+1)\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the list with the elements reversed.\n    >>> reverse_list([1, 2, 3])\n    [3,\
    \ 2, 1]\n    >>> reverse_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [123, 0, 9,\
    \ 5, 3, 2, 3, 5, 1]\n    \"\"\"", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a list.\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a list that satisfies a given condition.\
    \ For example, if the condition is that all elements are positive, then the function\
    \ should return the first element of a list that satisfies this condition. For\
    \ example, if the list contains only positive numbers, then the function should\
    \ return the first positive number. Otherwise, it should return -1.", "    l =\
    \ l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l +\
    \ [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n\
    \    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a value appears in a list. For example, incr_count([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) should return 3 because 3 appears 3 times in the list.",
  "    l = copy(l)\n    for i = 1:length(l)\n        l[i] = l[i] + 1\n    end\n  \
    \  return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the elements in a\
    \ list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n\
    >>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([", "    l = copy(l)\n    push!(l,\
    \ l[end]+1)\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a list that satisfies a predicate.", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 1\n        l[i-1] = l[i] - 1\n        i = i-1\n    end\n    l\n\
    end\n</cell>\n<code language=julia-1.4>", "    l = l + 1 \n    return l \nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a vector, plus 1. \nThe function\
    \ should work for both vectors and matrices.", "    l = l |> Vector{Int64}\n \
    \   l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ list.", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the elements of an array. \nThe function should take an array as\
    \ input, and return a scalar.", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of elements in a vector that are greater than\
    \ a given value.", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of integers incremented by 2.\n>>>\
    \ incr_vec([1, 2, 3])\n[3, 4, 5]\n>>> incr_vec([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n</text>\n<code language=julia-1.5>", "    l =\
    \ copy(l)\n    l = l + [length(l)+1]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, plus 1.\nWrite a function that returns the first\
    \ element of a vector, multiplied by 2.\nWrite a function that returns the first\
    \ element of a vector, divided by 3.\nWrite a function that returns the first\
    \ element of a vector, raised to the power of 4.\nWrite a function that returns\
    \ the first element of a vector, modulo 5.\nWrite a function that returns the\
    \ first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the ", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i] - 1\n\
    \        i = i-1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, incremented by 1.\n    >>> incr_vec([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_vec([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \"\"\"", "    l = l + [Int64(1)]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n    return l\nend",
  "    l = l + [Int64]\n    return l\nend", "    l = l + 1 \n    return l \nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + 1\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + 1\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of an array.", "    l = l + [Int64]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [length(l)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n  \
    \  l = l + [length(l)]\n    return l\nend", "    l = l + [Int64(1)]\n    return\
    \ l\nend", "    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements of a vector.\
    \ \nThe function should accept a vector as input and output a scalar.\nThe function\
    \ should work for both scalars and vectors.", "    l = copy(l)\n    l = l .+ 1\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n  \
    \  i = length(l)\n    while i > 1\n        l[i-1] = l[i] - 1\n        i = i -\
    \ 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([", "    l = l + [Int64]\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return l \nend\n</cell>\n\
    <code language=julia-1.3>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector and returns a vector with\
    \ elements incremented by 1.", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.3>", "    l = l + [Int64(1)]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a list.\nWrite a function that returns\
    \ the last element of a list.\nWrite a function that returns the element at a\
    \ given index in a list.\nWrite a function that returns the elements in a list\
    \ after a given index in a list.\nWrite a function that returns the elements in\
    \ a list before a given index in a list.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given indexes.\nWrite a function that returns the elements\
    \ in a list between two given index", "    l = l + [length(l)+1]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>", "    l = l + [Int64]\n    return l\n\
    end\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the elements of a list after a specified\
    \ index.\nFor example, incr_list([1, 2, 3], 2) should return [3, 5].", "    l\
    \ = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a vector, if it exists. Otherwise, return 0.", "    l = l + [Int64]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the elements\
    \ of an array. \nWrite a function that returns the product of the elements of\
    \ an array. \nWrite a function that returns the maximum of the elements of an\
    \ array. \nWrite a function that returns the minimum of the elements of an array.\
    \ \nWrite a function that returns the number of elements in a vector. \nWrite\
    \ a function that returns the number of elements in a matrix. \nWrite a function\
    \ that returns the number of elements in a 2D array. \nWrite a function that returns\
    \ the number of elements in a 3D array. \nWrite a function that returns the number\
    \ of elements in a 4D array. \nWrite a function that returns the number of elements\
    \ in a 5D array. \nWrite a function that returns the number of elements in a 6D\
    \ array. \nWrite a function that returns the number of elements in a 7D array.\
    \ \nWrite a function that returns the number of elements in a 8D array. \nWrite\
    \ a function that returns the number of elements in a 9D array. \nWrite a function\
    \ that returns the number of elements in a 10D array. \nWrite a function that\
    \ returns the number of elements in a 11D array. \nWrite a function that returns\
    \ the number of elements in a 12D array. \nWrite a function that returns the number\
    \ of elements in a 13D array. \nWrite a function that returns the number of elements\
    \ in a 14D array. \nWrite a function that returns the number of elements in a\
    \ 15D array. \nWrite a function that returns the number of elements in a 16D array.\
    \ \nWrite a function that returns the number of elements in a 17D array. \nWrite\
    \ a function that returns the number of elements in a 18D array. \nWrite a function\
    \ that returns the number of elements in a 19D array. \nWrite a function that\
    \ returns the number of elements in a 20D array. \nWrite a function that returns\
    \ the number of elements in a 21D array. \nWrite a function that returns the number\
    \ of elements in a 22D array. \nWrite a function that returns the number of elements\
    \ in a 23D array. \nWrite a function that returns the number of elements in a\
    \ 24D array. \nWrite a function that returns the number of elements in a 25D array.\
    \ \nWrite a function that returns the number of elements in a 26D array. \nWrite\
    \ a function that returns the number of elements in a 27D array. \nWrite a function\
    \ that returns the number of elements in a 28D array. \nWrite a function that\
    \ returns the number of elements in a 29D array. \nWrite a function that returns\
    \ the number of elements in a 30D array. \nWrite a function that returns the number\
    \ of elements in a 31D array. \nWrite a function that returns the number of elements\
    \ in a 32D array. \nWrite a function that returns the number of elements in a\
    \ 33D array. \nWrite a function that returns the ", "    l = l + [Int64]\n   \
    \ return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.4>", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first element of a vector,\
    \ incremented by 1.\nWrite a function that returns the last element of a vector,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a given index,\
    \ incremented by 1.\nWrite a function that returns the element at a given index,\
    \ decremented by 1.\nWrite a function that returns the element at a ", "    l\
    \ = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + [length(l)+1]\n    return l\nend", "    l = l + 1 \n    return l \nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns a list with elements incremented by 1 starting at index i. For\
    \ example, incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 3) should return [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]. Hint: Use a for loop.", "    l = l + [Int64]\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.3>", "    l = copy(l)\n    l = l + ones(length(l))\
    \ * 1 \n    return l\nend\n</cell>\n<code language=julia-1.3>", "    l = l + 1\
    \ \n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n\
    \    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ first element of a vector, incremented by 1.\nWrite a function that returns\
    \ the last element of a vector, decremented by 1.\nWrite a function that returns\
    \ the sum of a vector, incremented by 1.\nWrite a function that returns the product\
    \ of a vector, multiplied by 1.\nWrite a function that returns the maximum of\
    \ a vector, incremented by 1.\nWrite a function that returns the minimum of a\
    \ vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector.\nWrite a function that returns the sign of a vector.\nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1.\nWrite a function\
    \ that returns the sign of a vector, multiplied by 1.\nWrite a function that returns\
    \ the sum of a vector, incremented by 1, multiplied by 1.\nWrite a function that\
    \ returns the product of a vector, multiplied by 1, multiplied by 1.\nWrite a\
    \ function that returns the maximum of a vector, incremented by 1, multiplied\
    \ by 1.\nWrite a function that returns the minimum of a vector, decremented by\
    \ 1, multiplied by 1.\nWrite a function that returns the absolute value of a vector,\
    \ multiplied by 1.\nWrite a function that returns the sign of a vector, multiplied\
    \ by 1.\nWrite a function that returns the sum of a vector, incremented by 1,\
    \ multiplied by 1, multiplied by 1.\nWrite a function that returns the product\
    \ of a vector, multiplied by 1, multiplied by 1, multiplied by 1.\nWrite a function\
    \ that returns the maximum of a vector, incremented by 1, multiplied by 1, multiplied\
    \ by 1.\nWrite a function that returns the minimum of a vector, decremented by\
    \ 1, multiplied by 1, multiplied by 1.\nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1, multiplied by 1.\nWrite a function that\
    \ returns the sign of a vector, multiplied by 1, multiplied by 1.\nWrite a function\
    \ that returns the sum of a vector, incremented by 1, multiplied by 1, multiplied\
    \ by 1, multiplied by 1.\nWrite a function that returns the product of a vector,\
    \ multiplied by 1, multiplied by 1, multiplied by 1, multiplied by 1.\nWrite a\
    \ function that returns the maximum of a vector, incremented by 1, multiplied\
    \ by 1, multiplied by 1, multiplied by 1.\nWrite a function that returns the minimum\
    \ of a vector, decremented by 1, multiplied by 1, multiplied by 1, multiplied\
    \ by 1.\nWrite a function that returns the absolute value of a vector, multiplied\
    \ by 1, multiplied by 1, multiplied by 1.\nWrite a function that returns the sign\
    \ of a vector, multiplied by 1, multiplied by 1, multiplied by 1.", "    l = copy(l)\n\
    \    i = length(l)\n    while i > 1\n        l[i-1] = l[i-1] + 1\n        i -=\
    \ 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = copy(l)\n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l\
    \ = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>", " \
    \   l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i] - 1\n\
    \        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i - 1] +\
    \ 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i] - 1\n\
    \        i = i - 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements of a list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3, 4])\n    10\n    >>> sum([1, 2, 3, 4, 5])\n    15\n   \
    \ >>> sum([1, 2, 3, 4, 5, 6])\n    21\n    >>> sum([1, 2, 3, 4, 5, 6, 7])\n  \
    \  28\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n    36\n    >>> sum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9])\n    45\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    55\n\
    \    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    66\n    >>> sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    76\n    >>> sum([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13])\n    86\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14])\n    96\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15])\n    105\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16])\n    114\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17])\n    123\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18])\n    132\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19])\n    142\n    >>> sum([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    152\n    >>> sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n \
    \   162\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22])\n    172\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n    182\n    >>> sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24])\n    192\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n    202\n    >>> sum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26])\n    212\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n    222\n    >>> sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ", "  \
    \  l = copy(l)\n    length(l) += 1 \n    return l\nend", "    l = l + 1 \n   \
    \ return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector and returns a vector with\
    \ each element incremented by 1.", "    l = copy(l)\n    l = l + [length(l)+1]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + [length(l)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the vector with its elements incremented by 1.\n>>> incr_vector([1, 2, 3])\n\
    [1, 2, 3, 4]\n>>> incr_vector([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n</text>\n<code language=julia-1.5>", "    l = l + [Int64(1)]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>", "    l = l + 1 \n   \
    \ return l \nend\n</cell>\n<code language=julia-1.5>", "    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = copy(l)\n    i = length(l)\n    while i > 1\n\
    \        l[i - 1] = l[i - 1] + 1\n        i = i - 1\n    end\n    return l\nend",
  "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.4>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the first element of a vector, plus 1. \nFor example, incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) = 6.", "    l = copy(l)\n    i = length(l) - 1\n\
    \    while i >= 0\n        l[i+1] = l[i] + 1\n        i -= 1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    i = length(l)\n\
    \    while i > 0\n        l[i] = l[i] + 1\n        i = i - 1\n    end\n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = l |> Vector{Int64}\n \
    \   l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.4>",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + [Int64(1)]\n \
    \   return l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n   \
    \ l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the maximum of\
    \ the elements of an array. \nWrite a function that returns the minimum of the\
    \ elements of an array. \nWrite a function that returns the number of elements\
    \ in a vector. \nWrite a function that returns the number of non-zero elements\
    \ in a vector. \nWrite a function that returns the number of non-zero elements\
    \ in a matrix. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero elements\
    \ in a tensor. \nWrite a function that returns the number of non-zero ", "   \
    \ l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = l + [Int64]\n    return l\nend\n</cell>\n\
    <code language=julia-1.5>", "    l = copy(l)\n    l = l .+ 1\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the first element of a list.\nHint: Use head function.", "    l\
    \ = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>", "    l =\
    \ l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ numbers and returns the sum of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the product of the numbers in the list.\n\
    Write a function that takes a list of numbers and returns the mean of the numbers\
    \ in the list.\nWrite a function that takes a list of numbers and returns the\
    \ median of the numbers in the list.", "    l = l |> Vector{Int64}\n    l = l\
    \ |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n \
    \   l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector", "    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>",
  "    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector", "    l = l + [Int64]\n    return\
    \ l\nend", "    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the elements of a list that are less than a given value.  For example, suppose\
    \ that l = [1, 2, 3, 7, 8, 9] and that val = 4.  Then the function should return\
    \ [7, 8, 9].", "    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return\
    \ l\nend\n</cell>\n<code language=julia-1.5>", "    l = copy(l)\n    l = l + [length(l)+1]\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
