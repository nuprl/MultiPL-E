name: HumanEval_57_monotonic
language: jl
prompt: "\"\"\"Return True is list elements are monotonically increasing or decreasing.\n\
  \    >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
  \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"\nfunction monotonic(l::Vector{Int64})::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = monotonic;\n\t@test(candidate([1,\
  \ 2, 4, 10]) == true)\n\t@test(candidate([1, 2, 4, 20]) == true)\n\t@test(candidate([1,\
  \ 20, 4, 10]) == false)\n\t@test(candidate([4, 1, 0, -10]) == true)\n\t@test(candidate([4,\
  \ 1, 1, 0]) == true)\n\t@test(candidate([1, 2, 3, 2, 5, 60]) == false)\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 60]) == true)\n\t@test(candidate([9, 9, 9, 9]) == true)\nend\n"
completions: ["    l = sort(l)\n    l = l[end-l.<0]\n    l = l[end-l.>0]\n    l =\
    \ l[end-l.==0]\n    l = l[end-l.>0]\n    l = l[end-l.<0]\n    return length(l)\
    \ == 0 || all(l[end-l.==0] == 0)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Return True is list elements are monotonically increasing or decreasing.\n \
    \   >>> monotonic([1, 2, 4, 20])\n    true\n    >>> monotonic([1, 20, 4, 10])\n\
    \    false\n    >>> monotonic([4, 1, 0, -10])\n    true\n    \"\"\"", "    if\
    \ length(l) < 2 \n        return true\n    \n    l = sort(l)\n    \n    if l[1]\
    \ < l[2] \n        return true\n    \n    return false\nend", "    if length(l)\
    \ == 0 \n        return true\n    \n    if l[1] < l[2] \n        return true\n\
    \    \n    if l[2] < l[1] \n        return false\n    \n    if l[1] > l[2] \n\
    \        return false\n    \n    if l[1] > l[2] \n        return true\n    \n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        return true\n    end\n    \n    if l[1] < l[2] \n        return\
    \ true\n    end\n    \n    if l[1] > l[2] \n        return false\n    end\n  \
    \  \n    if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2]\
    \ \n        return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false\n    end\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] < l[2] \n        return true\n    end\n    \n    if l[1] > l[2] \n \
    \       return false", "    l = sort(l)\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l", "    if length(l) == 0 \n        return true\n\
    \    end\n    \n    if l[1] < l[2] \n        return true\n    end\n    \n    if\
    \ l[2] < l[3] \n        return true\n    end\n    \n    if l[3] < l[4] \n    \
    \    return true\n    end\n    \n    if l[4] < l[1] \n        return true\n  \
    \  end\n    \n    return false\nend", "    l = sort(l)\n    i = 2\n    while i\
    \ < length(l)\n        if l[i] > l[i-1]\n            return false\n        end\n\
    \        i += 1\n    return true\nend", "    l = sort(l)\n    l = l[1..end-1]\n\
    \    l = l[l .> l[1]]\n    l = l[l .< l[end]]\n    l = l[l .> 0]\n    l = l[l\
    \ .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n    l =\
    \ l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n   \
    \ l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]\n\
    \    l = l[l .< end]\n    l = l[l .> 0]\n    l = l[l .< end]\n    l = l[l .> 0]",
  "    l = sort(l)\n    l = l[1::-1]\n    l = l[1::-1]\n    return all(l[1:end-1]\
    \ < l[2:end])\nend", "    l = sort(l)\n    i = 2\n    while i < length(l)\n  \
    \      if l[i-1] > l[i]\n            return false\n        end\n        i += 1\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>", "    if length(l)\
    \ == 0 \n        return true\n    \n    if l[1] < l[2] \n        return true\n\
    \    \n    if l[1] > l[2] \n        return false\n    \n    return monotonic(l[2:end-1])\
    \ \nend", "    if length(l) < 2 \n        return true\n    \n    l = sort(l)\n\
    \    \n    if l[1] < l[2] \n        return true\n    \n    if l[1] > l[2] \n \
    \       return false\n    \n    return monotonic(l[2:end-1]) \nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(l) == 0 \n        return true\n   \
    \ end\n    \n    l = sort(l)\n    \n    if l[1] < l[2] \n        return true\n\
    \    end\n    \n    if l[1] > l[2] \n        return false\n    end\n    \n   \
    \ if l[1] > l[3] \n        return true\n    end\n    \n    if l[1] < l[3] \n \
    \       return false\n    end\n    \n    if l[1] < l[4] \n        return true\n\
    \    end\n    \n    if l[1] > l[4] \n        return false\n    end\n    \n   \
    \ if l[1] > l[5] \n        return true\n    end\n    \n    if l[1] < l[5] \n \
    \       return false\n    end\n    \n    if l[1] < l[6] \n        return true\n\
    \    end\n    \n    if l[1] > l[6] \n        return false\n    end\n    \n   \
    \ if l[1] > l[7] \n        return true\n    end\n    \n    if l[1] < l[7] \n \
    \       return false\n    end\n    \n    if l[1] < l[8] \n        return true\n\
    \    end\n    \n    if l[1] > l[8] \n        return false\n    end\n    \n   \
    \ if l[1] > l[9] \n        return true\n    end\n    \n    if l[1] < l[9] \n \
    \       return false\n    end\n    \n    if l[1] < l[10] \n        return true\n\
    \    end\n    \n    if l[1] > l[10] \n        return false\n    end\n    \n  \
    \  if l[1] > l[11] \n        return true\n    end\n    \n    if l[1] < l[11] \n\
    \        return false\n    end\n    \n    if l[1] < l[12] \n        return true\n\
    \    end\n    \n    if l[1] > l[12] \n        return false\n    end\n    \n  \
    \  if l[1] > l[13] \n        return true\n    end\n    \n    if l[1] < l[13] \n\
    \        return false\n    end\n    \n    if l[1] < l[14] \n        return true\n\
    \    end\n    \n    if l[1] > l[14] \n        return false\n    end\n    \n  \
    \  if l[1] > l[15] \n        return true\n    end\n    \n    if l[1] < l[15] \n\
    \        return false\n    end\n    \n    if l[1] < l[16] \n        return true\n\
    \    end\n    \n    if l[1] > l[16] \n        return false\n    end\n    \n  \
    \  if l[1] > l[17] \n        return true\n    end\n    \n    if l[1] < l[17] \n\
    \        return false\n    end\n    \n    if l[1] < ", "    l = sort(l)\n    l\
    \ = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   if length(l) == 0 \n        return true\n    end\n    \n    if l[1] < l[2]\
    \ \n        return false\n    end\n    \n    if l[1] > l[2] \n        return true\n\
    \    end\n    \n    if l[1] < l[3] \n        return false\n    end\n    \n   \
    \ if l[1] > l[3] \n        return true\n    end\n    \n    if l[2] < l[3] \n \
    \       return false\n    end\n    \n    if l[2] > l[3] \n        return true\n\
    \    end\n    \n    if l[3] < l[4] \n        return false\n    end\n    \n   \
    \ if l[3] > l[4] \n        return true\n    end\n    \n    if l[4] < l[5] \n \
    \       return false\n    end\n    \n    if l[4] > l[5] \n        return true\n\
    \    end\n    \n    if l[5] < l[6] \n        return false\n    end\n    \n   \
    \ if l[5] > l[6] \n        return true\n    end\n    \n    if l[6] < l[7] \n \
    \       return false\n    end\n    \n    if l[6] > l[7] \n        return true\n\
    \    end\n    \n    if l[7] < l[8] \n        return false\n    end\n    \n   \
    \ if l[7] > l[8] \n        return true\n    end\n    \n    if l[8] < l[9] \n \
    \       return false\n    end\n    \n    if l[8] > l[9] \n        return true\n\
    \    end\n    \n    if l[9] < l[10] \n        return false\n    end\n    \n  \
    \  if l[9] > l[10] \n        return true\n    end\n    \n    if l[10] < l[11]\
    \ \n        return false\n    end\n    \n    if l[10] > l[11] \n        return\
    \ true\n    end\n    \n    if l[11] < l[12] \n        return false\n    end\n\
    \    \n    if l[11] > l[12] \n        return true\n    end\n    \n    if l[12]\
    \ < l[13] \n        return false\n    end\n    \n    if l[12] > l[13] \n     \
    \   return true\n    end\n    \n    if l[13] < l[14] \n        return false\n\
    \    end\n    \n    if l[13] > l[14] \n        return true\n    end\n    \n  \
    \  if l[14] < l[15] \n        return false\n    end\n    \n    if l[14] > l[15]\
    \ \n        return true\n    end\n    \n    if l[15] < l[16] \n        return\
    \ false\n    end\n    \n    if l[15] > l[16] \n        return true\n    end\n\
    \    \n    if l[16] < l[", "    if length(l) == 0 \n        return true\n    \n\
    \    if l[1] < l[0] \n        return false\n    \n    if l[1] > l[-1] \n     \
    \   return false\n    \n    return monotonic(tail(l))\nend", "    l = sort(l)\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n\
    \    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l[end:-1:1]\n    l = l", " \
    \   l = sort(l)\n    l = l[end-l.>0]\n    l = l[end-l.<0]\n    l = l[end-l.==0]\n\
    \    l = l[end-l.==1]\n    return length(l) == 0 || all(l[1:end-1].>l[2:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Return True is list elements are\
    \ monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n\
    \    true\n    >>> monotonic([1, 20, 4, 10])\n    false\n    >>> monotonic([4,\
    \ 1, 0, -10])\n    true\n    \"\"\"", "    l = sort(l)\n    if l[1] < l[2]\n \
    \       true\n    elseif l[2] < l[1]\n        false\n    else\n        monotonic(l[2:end-1])\
    \ || monotonic(l[1:end-1])\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\nI wrote a package that does this for you:\nhttps://github.com/kazuya/monotonic\n\
    <code>\nusing Monotonic\nismonotonic([1,2,3,4,5])\ntrue\nismonotonic([1,2,3,4,5,6])\n\
    false\nismonotonic([1,2,3,4,5,6,7])\ntrue\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nI wrote a package that does this for you:\nhttps://github.com/kazuya/monotonic\n\
    <code>\nusing Monotonic\nismonotonic([1,2,3,4,5])\ntrue\nismonotonic([1,2,3,4,5,6])\n\
    false\nismonotonic([1,2,3,4,5,6,7])\ntrue\n</code>\n<|/ a tags=julia |>\n<| a\
    \ tags=julia |>\nI wrote a package that does this for you:\nhttps://github.com/kazuya/monotonic\n\
    <code>\nusing Monotonic\nismonotonic([1,2,3,4,5])\ntrue\nismonotonic([1,2,3,4,5,6])\n\
    false\nismonotonic([1,2,3,4,5,6,7])\ntrue\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\nI wrote a package that does this for you:\nhttps://github.com/kazuya/monotonic\n\
    <code>\nusing Monotonic\nismonotonic([1,2,3,4,5])\ntrue\nismonotonic([1,2,3,4,5,6])\n\
    false\nismonotonic([1,2,3,4,5,6,7])\ntrue\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nI wrote a package that does this for you:\nhttps://github.com/kazuya/monotonic\n\
    <code>\nusing Monotonic\nismonotonic([1,2,3,4,5])\ntrue\nismonotonic([1,2,3,4,5,6])\n\
    false\nismonotonic([1,2,3,4,5,6,7])\ntrue\n</code>\n<|/ a tags=julia |>\n<| a\
    \ dscore=1 |>\nI wrote a package that does this for you:\nhttps://github.com/kazuya/monotonic\n\
    <code>\nusing Monotonic\nismonotonic([1,2,3,4,5])\ntrue\nismonotonic([1,2,3,4,5,6])\n\
    false\nismonotonic([1,2,3,4,5,6,7])", "    l = sort(l)\n    l = l[end-1:end]\n\
    \    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l =\
    \ l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n\
    \    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l =\
    \ l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n\
    \    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l =\
    \ l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n\
    \    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l =\
    \ l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n\
    \    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l =\
    \ l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n\
    \    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l =\
    \ l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n\
    \    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l =\
    \ l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n\
    \    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l =\
    \ l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n\
    \    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l =\
    \ l[end:-1:end]\n    l = l[end:-1:end]\n    l = l[end:-1:end]\n    l = l"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
