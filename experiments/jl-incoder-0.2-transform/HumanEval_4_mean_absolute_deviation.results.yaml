language: jl
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the mean absolute deviation for a set of numbers.\
    \ \nThe function should take an input vector and output the mean absolute deviation\
    \ for each element in the vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nThe function should also output the mean absolute\
    \ deviation for the entire vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7zpesmv.jl:16\nin expression starting at\
    \ /tmp/tmpk7zpesmv.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcup8wfh1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpcup8wfh1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation with Weights\nThe mean absolute deviation function above\
    \ is great for calculating the\nmean of a set of numbers, but what if we want\
    \ to weigh the deviations by\nsome factor? For example, if we want to weight the\
    \ deviations by how much\neach number deviates from the mean? We can do this by\
    \ passing in a weight\nvector to mean_absolute_deviation. For example, if we wanted\
    \ to weight the\ndeviations by how far each number deviates from the mean by 10%,\
    \ then we\ncould do:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_frcnis.jl:16\nin expression starting at\
    \ /tmp/tmpg_frcnis.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of this exercise is to use Mean Absolute Deviation\
    \ to calculate the standard deviation of a dataset.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3cy4trlm.jl:16\nin expression starting at\
    \ /tmp/tmp3cy4trlm.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl_qnhvc.jl:16\nin expression starting at\
    \ /tmp/tmpgl_qnhvc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyytauf4.jl:16\nin expression starting at\
    \ /tmp/tmpsyytauf4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats\nThe mean absolute deviation function above is very simple\
    \ to implement, but we can do better. Instead of looping over each element in\
    \ the dataset, we can use the StatsBase.mean function, which will calculate the\
    \ mean of the entire dataset in one step. This means we can calculate the mean\
    \ and standard deviation at the same time.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2m7bgtyn.jl:17\nin expression starting at\
    \ /tmp/tmp2m7bgtyn.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ayw6425.jl:16\nin expression starting at\
    \ /tmp/tmp5ayw6425.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for n in numbers\n        sum_of_squared_deviations\
    \ += ((n - mean(numbers)) * (n - mean(numbers)))\n    end\n    return sqrt(sum_of_squared_deviations\
    \ / length(numbers))\nend\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation with Julia\nThe above\
    \ function can be easily implemented in Julia using the StatsBase package:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc35jzvoh.jl:16\nin expression starting at\
    \ /tmp/tmpc35jzvoh.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nThe next function calculates the variance of a given list of numbers:\n\
    \    Variance = average | x - x_mean |^2\n    >>> variance([1.0, 2.0, 3.0, 4.0])\n\
    \    1.25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmxtge0d.jl:16\nin expression starting at\
    \ /tmp/tmpkmxtge0d.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ruhzh8e.jl:16\nin expression starting at\
    \ /tmp/tmp0ruhzh8e.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nExercise 2: Mean\
    \ Absolute Deviation\nWrite a function that calculates the mean absolute deviation\
    \ of a given list of numbers. \nThe function should take a list of numbers as\
    \ an input and return a Float64 number.\nThe function should calculate the mean\
    \ absolute deviation for each number in the list and return the average of all\
    \ these deviations.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfn7c4d2i.jl:16\nin expression starting at\
    \ /tmp/tmpfn7c4d2i.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n</cell>\n<code\
    \ language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n\
    </cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n</cell>\n\
    <code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0, 13.0, 14.0, 15.0, 16.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0])\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphk63thj0.jl:16\nin expression starting at\
    \ /tmp/tmphk63thj0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.1>\nmean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute Deviation Function\nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a given\
    \ set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a given set of numbers:\nMAD = average\
    \ | x - x_mean |\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given set of numbers:\nMAD = average | x - x_mean |\nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a given\
    \ set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a given set of numbers:\nMAD = average\
    \ | x - x_mean |\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given set of numbers:\nMAD = average | x - x_mean |\nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a given\
    \ set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a given set of numbers:\nMAD = average\
    \ | x - x_mean |\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given set of numbers:\nMAD = average | x - x_mean |\nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a given\
    \ set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a given set of numbers:\nMAD = average\
    \ | x - x_mean |\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given set of numbers:\nMAD = average | x - x_mean |\nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a given\
    \ set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a given set of numbers:\nMAD = average\
    \ | x - x_mean |\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a given set of numbers:\nMAD = average | x - x_mean |\nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a given\
    \ set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute \nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmposw_n5za.jl:16\nin expression starting at\
    \ /tmp/tmposw_n5za.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a measure of how far each point is from the\
    \ mean of the dataset. \nThe larger the MAD, the more distant the point is from\
    \ the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33931xtt.jl:15\nin expression starting at\
    \ /tmp/tmp33931xtt.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk15ebspr.jl:16\nin expression starting at\
    \ /tmp/tmpk15ebspr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model predicts new data.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v4mjc9g.jl:16\nin expression starting at\
    \ /tmp/tmp8v4mjc9g.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ayw6425.jl:16\nin expression starting at\
    \ /tmp/tmp5ayw6425.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ Mean Absolute Deviation squared. \nThis can be calculated using the following\
    \ formula:\nMAD_SQ = MAD x MAD\nWhere MAD is the Mean Absolute Deviation and MAD_SQ\
    \ is the Mean Absolute Deviation squared:\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x\
    \ MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD\
    \ x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ =\
    \ MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ\
    \ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ\
    \ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ\
    \ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ\
    \ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ\
    \ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ = MAD x MAD\nMAD_SQ\
    \ = M\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t\
    @test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) ==\
    \ 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqo2xf_m.jl:16\nin expression starting at\
    \ /tmp/tmpmqo2xf_m.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcup8wfh1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpcup8wfh1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate a model's performance. \nIt measures the average\
    \ distance between each point and the mean of the dataset. \nIt is a good way\
    \ to evaluate a model's performance.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptrae1lbv.jl:16\nin expression starting at\
    \ /tmp/tmptrae1lbv.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ n * n\n    end\n    return sum_of_squares / length(numbers)\nend\n</cell>\n\
    <code language=julia-1.4>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation with StatsModels\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6_h7whh.jl:16\nin expression starting at\
    \ /tmp/tmpa6_h7whh.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpthwni1l0.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpthwni1l0.jl:22\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpthwni1l0.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpthwni1l0.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpthwni1l0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpthwni1l0.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpthwni1l0.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpthwni1l0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpthwni1l0.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpthwni1l0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpthwni1l0.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpthwni1l0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpthwni1l0.jl:21\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Exercise\nWrite a function that calculates the mean absolute deviation of\
    \ a list of numbers.\nThe function should take a list of numbers as an argument\
    \ and return the mean absolute deviation.\nThe function should return the mean\
    \ absolute deviation for the following numbers:\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3qemvb__.jl:16\nin expression starting at\
    \ /tmp/tmp3qemvb__.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each data point is from the mean.\nIt is a good measure\
    \ of outliers and is often used in conjunction with other measures.\nThe mean\
    \ is often a good choice of centerpoint for outlier detection.\nThe MAD measure\
    \ is defined as:\nMAD = average | x - x_mean |\nwhere x is the data point and\
    \ x_mean is the mean of the data set.\nThe MAD measure is calculated as:\nMAD\
    \ = average | x - x_mean |\nwhere x is the data point and x_mean is the mean of\
    \ the data set.\nThe MAD measure is calculated as:\nMAD = average | x - x_mean\
    \ |\nwhere x is the data point and x_mean is the mean of the data set.\nThe MAD\
    \ measure is calculated as:\nMAD = average | x - x_mean |\nwhere x is the data\
    \ point and x_mean is the mean of the data set.\nThe MAD measure is calculated\
    \ as:\nMAD = average | x - x_mean |\nwhere x is the data point and x_mean is the\
    \ mean of the data set.\nThe MAD measure is calculated as:\nMAD = average | x\
    \ - x_mean |\nwhere x is the data point and x_mean is the mean of the data set.\n\
    The MAD measure is calculated as:\nMAD = average | x - x_mean |\nwhere x is the\
    \ data point and x_mean is the mean of the data set.\nThe MAD measure is calculated\
    \ as:\nMAD = average | x - x_mean |\nwhere x is the data point and x_mean is the\
    \ mean of the data set.\nThe MAD measure is calculated as:\nMAD = average | x\
    \ - x_mean |\nwhere x is the data point and x_mean is the mean of the data set.\n\
    The MAD measure is calculated as:\nMAD = average | x - x_mean |\nwhere x is the\
    \ data point and x_mean is the mean of the data set.\nThe MAD measure is calculated\
    \ as:\nMAD = average | x - x_mean |\nwhere x is the data point and x_mean is the\
    \ mean of the data set.\nThe MAD measure is calculated as:\nMAD = average | x\
    \ - x_mean |\nwhere x is the data point and x_mean is the mean of the data set.\n\
    The MAD measure is calculated as:\nMAD = average | x - x_mean |\nwhere x is the\
    \ data point and x_mean is the mean of the \nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpro845c7n.jl:16\nin expression starting at\
    \ /tmp/tmpro845c7n.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl_qnhvc.jl:16\nin expression starting at\
    \ /tmp/tmpgl_qnhvc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x-mean(x))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation - Part 2\nNow let's use our new function mean_absolute_deviation\
    \ to calculate the mean absolute deviation for a list of numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5u_9pcf.jl:15\nin expression starting at\
    \ /tmp/tmp_5u_9pcf.jl:15\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlc13laj.jl:16\nin expression starting at\
    \ /tmp/tmpjlc13laj.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit01y6sk.jl:16\nin expression starting at\
    \ /tmp/tmpit01y6sk.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for number in numbers\n        sum_of_squares\
    \ += (number - mean(number))^2 \n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a metric that measures how far\
    \ each point is from the mean.\nIt is a good way to measure the variability of\
    \ data over time.\nThe mean is often used as a centerpoint for data analysis,\
    \ since it can help us \ndetermine whether a point is far from the mean.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptispbxvr.jl:15\nin expression starting at\
    \ /tmp/tmptispbxvr.jl:15\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far away a dataset is from its mean.\nIt is a good\
    \ way to measure the variability of a dataset.\nThe mean is often a good choice\
    \ of centerpoint for MAD.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz74gc24l.jl:16\nin expression starting at\
    \ /tmp/tmpz74gc24l.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe Mean Absolute Deviation Function (MAD) is a measure of how far\
    \ a dataset is from the mean.\nThe MAD can be calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean|\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset.\nThe MADF is calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean|\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset.\nThe MADF is calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean|\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset.\nThe MADF is calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean|\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset.\nThe MADF is calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean|\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset.\nThe MADF is calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean|\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset.\nThe MADF is calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean|\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset.\nThe MADF is calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean|\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset.\nThe MADF is calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean|\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset.\nThe MADF is calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean|\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset.\nThe MADF is calculated using the Mean Absolute\
    \ Deviation Function (MADF):\nMADF = |x - x_mean\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmq9whndc.jl:16\nin expression starting at\
    \ /tmp/tmpmq9whndc.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppv02vcsw.jl:16\nin expression starting at\
    \ /tmp/tmppv02vcsw.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe Mean Absolute\
    \ Deviation function above is vectorized, which means it can operate on any number\
    \ of numbers at once.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k5lhffb.jl:16\nin expression starting at\
    \ /tmp/tmp0k5lhffb.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's use our new function mean_absolute_deviation to calculate\
    \ the mean absolute deviation for a list of numbers:\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplejqdcrd.jl:16\nin expression starting at\
    \ /tmp/tmplejqdcrd.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk15ebspr.jl:16\nin expression starting at\
    \ /tmp/tmpk15ebspr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a set of numbers:\n$$\n\\text{MAD} = \\sqrt{\\frac{\\sum_{i=1}^N\
    \ (x_i - \\mu)^2}{N}}\n$$\nwhere $\\mu$ is the mean of the dataset.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5v5lgvv.jl:16\nin expression starting at\
    \ /tmp/tmpy5v5lgvv.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe mean absolute deviation is a more robust measure of outliers.\
    \ It is more robust than standard deviation because it is less sensitive to outliers.\
    \ It is also more robust than standard deviation because it takes into account\
    \ the distribution of the data rather than just the mean of the data.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplzx92fk2.jl:16\nin expression starting at\
    \ /tmp/tmplzx92fk2.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlc13laj.jl:16\nin expression starting at\
    \ /tmp/tmpjlc13laj.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation Error\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6qbzt2og.jl:16\nin expression starting at\
    \ /tmp/tmp6qbzt2og.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined as\
    \ the mean of the absolute differences between each element and the\nmean of the\
    \ dataset:\nMADE = average | x - x_mean |\nwhere x is the current element and\
    \ x_mean is the mean of the dataset.\nThe MADE can be interpreted as the average\
    \ distance between each element and the\nmean of the dataset.\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakusz1_9.jl:16\nin expression starting at\
    \ /tmp/tmpakusz1_9.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcup8wfh1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpcup8wfh1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nThe function above calculates the mean absolute deviation of a given list\
    \ of numbers. Let's try it out on some random numbers:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wvo8wa9.jl:15\nin expression starting at\
    \ /tmp/tmp6wvo8wa9.jl:15\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnym2oj5x.jl:17\nin expression starting at\
    \ /tmp/tmpnym2oj5x.jl:17\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyytauf4.jl:16\nin expression starting at\
    \ /tmp/tmpsyytauf4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ayw6425.jl:16\nin expression starting at\
    \ /tmp/tmp5ayw6425.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3amdjmk.jl:16\nin expression starting at\
    \ /tmp/tmpo3amdjmk.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlc13laj.jl:16\nin expression starting at\
    \ /tmp/tmpjlc13laj.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl_qnhvc.jl:16\nin expression starting at\
    \ /tmp/tmpgl_qnhvc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far a point is from the mean of its dataset. For example,\
    \ a point with a mean of $5$ and a deviation of $3$ would be considered \"far\"\
    \ from the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_eptnaz0.jl:16\nin expression starting at\
    \ /tmp/tmp_eptnaz0.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcup8wfh1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpcup8wfh1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom7s9y0s.jl:15\nin expression starting at\
    \ /tmp/tmpom7s9y0s.jl:15\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9e_nrf3a.jl:16\nin expression starting at\
    \ /tmp/tmp9e_nrf3a.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl14ra134.jl:16\nin expression starting at\
    \ /tmp/tmpl14ra134.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hxu8v0r.jl:16\nin expression starting at\
    \ /tmp/tmp_hxu8v0r.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ayw6425.jl:16\nin expression starting at\
    \ /tmp/tmp5ayw6425.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each element deviates from the mean.\nThe higher the\
    \ MAD, the more deviation from the mean.\nThe MAD can be calculated using the\
    \ function mean_absolute_deviation.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvleuc4hq.jl:16\nin expression starting at\
    \ /tmp/tmpvleuc4hq.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe mean absolute\
    \ deviation function above is very similar to the mean function in Julia. Let's\
    \ compare the two functions side-by-side.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjsxza7n.jl:16\nin expression starting at\
    \ /tmp/tmppjsxza7n.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far away each point is from the mean.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvu8o8qd.jl:15\nin expression starting at\
    \ /tmp/tmpkvu8o8qd.jl:15\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2k176dh.jl:17\nin expression starting at\
    \ /tmp/tmpi2k176dh.jl:17\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a set of numbers. \nIt takes in a list of numbers and returns the\
    \ mean absolute deviation of this set of numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_icxxg1p.jl:16\nin expression starting at\
    \ /tmp/tmp_icxxg1p.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a metric that measures the average distance between each element and it's\
    \ mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8m2s60a.jl:16\nin expression starting at\
    \ /tmp/tmpg8m2s60a.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far from a mean a dataset is. It is a good measure\
    \ of how far from a mean a dataset is from its mean.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwrkao2v1.jl:16\nin expression starting at\
    \ /tmp/tmpwrkao2v1.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of this exercise is to use Julia's broadcasting features\
    \ to calculate MAD without explicitly looping over each element of the dataset.\
    \ Broadcasting is a powerful feature of Julia that allows us to perform operations\
    \ on arrays of different sizes simultaneously. Broadcasting allows us to perform\
    \ operations on arrays of different sizes simultaneously without having to explicitly\
    \ loop over each element.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6b3hwuap.jl:16\nin expression starting at\
    \ /tmp/tmp6b3hwuap.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6ha0f6p.jl:16\nin expression starting at\
    \ /tmp/tmpt6ha0f6p.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ Mean Absolute Deviation around the mean.\nThe Mean Absolute Deviation is the\
    \ average absolute difference between each element and a centerpoint (mean in\
    \ this case):\nMAD = average | x - x_mean |\nThe mean is calculated using the\
    \ mean function from StatsBase:\nmean(x)\nThe mean is calculated using the mean\
    \ function from StatsBase:\nmean(x)\nThe mean is calculated using the mean function\
    \ from StatsBase:\nmean(x)\nThe mean is calculated using the mean function from\
    \ StatsBase:\nmean(x)\nThe mean is calculated using the mean function from StatsBase:\n\
    mean(x)\nThe mean is calculated using the mean function from StatsBase:\nmean(x)\n\
    The mean is calculated using the mean function from StatsBase:\nmean(x)\nThe mean\
    \ is calculated using the mean function from StatsBase:\nmean(x)\nThe mean is\
    \ calculated using the mean function from StatsBase:\nmean(x)\nThe mean is calculated\
    \ using the mean function from StatsBase:\nmean(x)\nThe mean is calculated using\
    \ the mean function from StatsBase:\nmean(x)\nThe mean is calculated using the\
    \ mean function from StatsBase:\nmean(x)\nThe mean is calculated using the mean\
    \ function from StatsBase:\nmean(x)\nThe mean is calculated using the mean function\
    \ from StatsBase:\nmean(x)\nThe mean is calculated using the mean function from\
    \ StatsBase:\nmean(x)\nThe mean is calculated using the mean function from StatsBase:\n\
    mean(x)\nThe mean is calculated using the mean function from StatsBase:\nmean(x)\n\
    The mean is calculated using the mean function from StatsBase:\nmean(x)\nThe mean\
    \ is calculated using the mean function from StatsBase:\nmean(x)\nThe mean is\
    \ calculated using the mean function from StatsBase:\nmean(x)\nThe mean is calculated\
    \ using the mean function from StatsBase:\nmean(x)\nThe mean is calculated using\
    \ the mean function from StatsBase:\nmean(x)\nThe mean is calculated using the\
    \ mean function from StatsBase:\nmean(x)\nThe mean is calculated using the mean\
    \ function from StatsBase:\nmean(x)\nThe mean is calculated using the mean function\
    \ from StatsBase:\nmean(x)\nThe mean is calculated using the mean function from\
    \ StatsBase:\nmean(x)\nThe mean is calculated using the mean function from StatsBase:\n\
    mean(x)\nThe mean is calculated using the mean function from StatsBase\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0lhlcuse.jl:16\nin expression starting at\
    \ /tmp/tmp0lhlcuse.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the mean absolute deviation function using Julia's\
    \ built-in functionality.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjghx0vy.jl:16\nin expression starting at\
    \ /tmp/tmptjghx0vy.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nThe median is another useful statistic to know:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6clocdo.jl:15\nin expression starting at\
    \ /tmp/tmpj6clocdo.jl:15\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnym2oj5x.jl:17\nin expression starting at\
    \ /tmp/tmpnym2oj5x.jl:17\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe mean absolute deviation function above is quite simple, but we\
    \ can make it more efficient by using the following trick:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplheojwl6.jl:16\nin expression starting at\
    \ /tmp/tmplheojwl6.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphf8bmthb.jl:16\nin expression starting at\
    \ /tmp/tmphf8bmthb.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a measure of how far each element of the dataset is from the mean\
    \ of the dataset.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jgk5xdz.jl:16\nin expression starting at\
    \ /tmp/tmp3jgk5xdz.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the mean absolute deviation for a list of numbers. \nThe function\
    \ should take a list of numbers as an input, and return a Float64\nvalue as the\
    \ result.\nThe function should calculate the mean of the numbers, and then calculate\
    \ the \nabsolute deviation for each number in the list. \nThe function should\
    \ return the mean absolute deviation for the list of numbers.\nThe function should\
    \ calculate the mean absolute deviation for the list of numbers\nand return the\
    \ mean absolute deviation for the list of numbers.\nThe function should calculate\
    \ the mean absolute deviation for the list of numbers\nand return the mean absolute\
    \ deviation for the list of numbers.\nThe function should calculate the mean absolute\
    \ deviation for the list of numbers\nand return the mean absolute deviation for\
    \ the list of numbers.\nThe function should calculate the mean absolute deviation\
    \ for the list of numbers\nand return the mean absolute deviation for the list\
    \ of numbers.\nThe function should calculate the mean absolute deviation for the\
    \ list of numbers\nand return the mean absolute deviation for the list of numbers.\n\
    The function should calculate the mean absolute deviation for the list of numbers\n\
    and return the mean absolute deviation for the list of numbers.\nThe function\
    \ should calculate the mean absolute deviation for the list of numbers\nand return\
    \ the mean absolute deviation for the list of numbers.\nThe function should calculate\
    \ the mean absolute deviation for the list of numbers\nand return the mean absolute\
    \ deviation for the list of numbers.\nThe function should calculate the mean absolute\
    \ deviation for the list of numbers\nand return the mean absolute deviation for\
    \ the list of numbers.\nThe function should calculate the mean absolute deviation\
    \ for the list of numbers\nand return the mean absolute deviation for the list\
    \ of numbers.\nThe function should calculate the mean absolute deviation for the\
    \ list of numbers\nand return the mean absolute deviation for the list of numbers.\n\
    The function should calculate the mean absolute deviation for the list of numbers\n\
    and return the mean absolute deviation for the list of numbers.\nThe function\
    \ should calculate the mean absolute deviation for the list of numbers\nand return\
    \ the mean absolute deviation for the list of numbers.\nThe function should calculate\
    \ the mean absolute deviation for the list of numbers\nand return the mean absolute\
    \ deviation for the list of numbers.\nThe function should calculate the mean absolute\
    \ deviation for the list of numbers\nand return the mean absolute deviation for\
    \ the list of numbers.\nThe function should calculate the mean absolute deviation\
    \ for the list of numbers\nand return the mean absolute deviation for the list\
    \ of numbers.\nThe function should calculate the mean absolute deviation for the\
    \ list of numbers\nand return the mean absolute deviation for the list of numbers.\n\
    The function should calculate the mean absolute deviation for the list of numbers\n\
    and return the mean absolute deviation for the list of numbers.\nThe function\
    \ should calculate the mean absolute deviation for the list of numbers\nand return\
    \ the mean absolute devi\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjd81f7u6.jl:16\nin expression starting at\
    \ /tmp/tmpjd81f7u6.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for n in numbers\n        sum_of_squared_deviations\
    \ += ((n - mean(n))^2)\n    return sqrt(sum_of_squared_deviations / length(numbers))\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the mean absolute\
    \ deviation for a list of numbers. \nThe function should take a list of numbers\
    \ as an argument, and return the mean absolute deviation \n(a float) for the list\
    \ of numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation for each\
    \ number in the list, and \nreturn the mean absolute deviation for the list of\
    \ numbers.\nThe function should calculate the mean absolute deviation \nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbt3l3dq7.jl:15\nin expression starting at\
    \ /tmp/tmpbt3l3dq7.jl:15\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's use our new function mean_absolute_deviation to calculate\
    \ the mean absolute deviation for a list of numbers. We'll use our new function\
    \ mean_absolute_deviation to calculate the mean absolute deviation for a list\
    \ of numbers. We'll use our new function mean_absolute_deviation to calculate\
    \ the mean absolute deviation for a list of numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphn93f1td.jl:16\nin expression starting at\
    \ /tmp/tmphn93f1td.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzzy4s4ot.jl:16\nin expression starting at\
    \ /tmp/tmpzzy4s4ot.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyytauf4.jl:16\nin expression starting at\
    \ /tmp/tmpsyytauf4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far away a dataset is from its mean.\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpilnme33v.jl:16\nin expression starting at\
    \ /tmp/tmpilnme33v.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model predicts data.\nIt can be used\
    \ for regression, classification, and clustering.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppftoj8pk.jl:16\nin expression starting at\
    \ /tmp/tmppftoj8pk.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for number in numbers\n        sum_of_squared_deviations\
    \ += math.pow(number - mean(numbers), 2)\n    end\n    return math.sqrt(sum_of_squared_deviations)\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far from a mean\
    \ a number is. It is a good measure of how far a data point is from the mean of\
    \ all the data points. It is also called mean absolute deviation.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9uxk8z2.jl:16\nin expression starting at\
    \ /tmp/tmpi9uxk8z2.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a list of numbers.\
    \ We will use the function mean_absolute_deviation that we defined earlier.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfl3bvol.jl:16\nin expression starting at\
    \ /tmp/tmpxfl3bvol.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of this exercise is to use Julia to calculate the\
    \ mean absolute deviation for a set of numbers. You will need to use Julia's Statistics\
    \ module to calculate the mean absolute deviation. Remember that in Julia the\
    \ mean of a vector is just the sum of the numbers in the vector. So the mean absolute\
    \ deviation for a set of numbers is just the mean of the absolute values of the\
    \ numbers - the mean of the absolute values of the deviations from the mean.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ygro9wr.jl:16\nin expression starting at\
    \ /tmp/tmp4ygro9wr.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate your model's performance. Let's try it out on our\
    \ dataset.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg2b5ksva.jl:16\nin expression starting at\
    \ /tmp/tmpg2b5ksva.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppv02vcsw.jl:16\nin expression starting at\
    \ /tmp/tmppv02vcsw.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good measure of how far away a point is from the mean.\nIt is a good measure\
    \ of how far away a point is from the mean because it is the\naverage of the absolute\
    \ difference between each element and the mean.\nThe mean is just the sum of the\
    \ numbers, divided by the number of elements.\nThe mean absolute deviation is\
    \ the square root of the mean absolute deviation.\nThe mean absolute deviation\
    \ is the average of the squared differences between each\nelement and the mean.\n\
    The mean absolute deviation is the average of the squared differences between\
    \ each\nelement and the mean.\nThe mean absolute deviation is the average of the\
    \ squared differences between each\nelement and the mean.\nThe mean absolute deviation\
    \ is the average of the squared differences between each\nelement and the mean.\n\
    The mean absolute deviation is the average of the squared differences between\
    \ each\nelement and the mean.\nThe mean absolute deviation is the average of the\
    \ squared differences between each\nelement and the mean.\nThe mean absolute deviation\
    \ is the average of the squared differences between each\nelement and the mean.\n\
    The mean absolute deviation is the average of the squared differences between\
    \ each\nelement and the mean.\nThe mean absolute deviation is the average of the\
    \ squared differences between each\nelement and the mean.\nThe mean absolute deviation\
    \ is the average of the squared differences between each\nelement and the mean.\n\
    The mean absolute deviation is the average of the squared differences between\
    \ each\nelement and the mean.\nThe mean absolute deviation is the average of the\
    \ squared differences between each\nelement and the mean.\nThe mean absolute deviation\
    \ is the average of the squared differences between each\nelement and the mean.\n\
    The mean absolute deviation is the average of the squared differences between\
    \ each\nelement and the mean.\nThe mean absolute deviation is the average of the\
    \ squared differences between each\nelement and the mean.\nThe mean absolute deviation\
    \ is the average of the squared differences between each\nelement and the mean.\n\
    The mean absolute deviation is the average of the squared differences between\
    \ each\nelement and the mean.\nThe mean absolute deviation is the average of the\
    \ squared differences between each\nelement and the mean.\nThe mean absolute deviation\
    \ is the average of the squared differences between each\nelement and the mean.\n\
    The mean absolute deviation is the average of the squared differences between\
    \ each\nelement and the mean.\nThe mean absolute deviation is the average of the\
    \ squared differences between each\nelement and the mean.\nThe mean absolute deviation\
    \ \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyibkuvni.jl:16\nin expression starting at\
    \ /tmp/tmpyibkuvni.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ou4y4sn.jl:16\nin expression starting at\
    \ /tmp/tmp2ou4y4sn.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwvorh8u2.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpwvorh8u2.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpwvorh8u2.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvorh8u2.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvorh8u2.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpwvorh8u2.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpwvorh8u2.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvorh8u2.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvorh8u2.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpwvorh8u2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpwvorh8u2.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwvorh8u2.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwvorh8u2.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb84e0q_t.jl:16\nin expression starting at\
    \ /tmp/tmpb84e0q_t.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean of the dataset. \nThe mean\
    \ is calculated using the mean function which calculates the mean of a list of\
    \ numbers.\nThe deviation is the absolute value of the difference between each\
    \ point and the mean.\nThe mean absolute deviation is the sum of the deviations\
    \ divided by the number of points.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4o479hz.jl:16\nin expression starting at\
    \ /tmp/tmpi4o479hz.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation - Exercise\nWrite a function that takes a list of numbers as an input,\
    \ and returns the Mean Absolute Deviation around the mean of this dataset.\nMean\
    \ Absolute Deviation is the average absolute difference between each element and\
    \ a centerpoint (mean in this case):\nMAD = average | x - x_mean |\nFor example,\
    \ given a list of numbers:\n[1.0, 2.0, 3.0, 4.0]\nThe mean is 2.0, so the MAD\
    \ would be 1.5\nThe function should return the MAD.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzkexta7m.jl:17\nin expression starting at\
    \ /tmp/tmpzkexta7m.jl:17\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is a good measure of outliers\
    \ and is often used in machine learning to determine how far from a mean a dataset\
    \ is. It is a good measure of how far from a mean a dataset is. It is a good measure\
    \ of how far from a mean a dataset is. It is a good measure of how far from a\
    \ mean a dataset is. It is a good measure of how far from a mean a dataset is.\
    \ It is a good measure of how far from a mean a dataset is. It is a good measure\
    \ of how far from a mean a dataset is. It is a good measure of how far from a\
    \ mean a dataset is. It is a good measure of how far from a mean a dataset is.\
    \ It is a good measure of how far from a mean a dataset is. It is a good measure\
    \ of how far from a mean a dataset is. It is a good measure of how far from a\
    \ mean a dataset is. It is a good measure of how far from a mean a dataset is.\
    \ It is a good measure of how far from a mean a dataset is. It is a good measure\
    \ of how far from a mean a dataset is. It is a good measure of how far from a\
    \ mean a dataset is. It is a good measure of how far from a mean a dataset is.\
    \ It is a good measure of how far from a mean a dataset is. It is a good measure\
    \ of how far from a mean a dataset is. It is a good measure of how far from a\
    \ mean a dataset is. It is a good measure of how far from a mean a dataset is.\
    \ It is a good measure of how far from a mean a dataset is. It is a good measure\
    \ of how far from a mean a dataset is. It is a good measure of how far from a\
    \ mean a dataset is. It is a good measure of how far from a mean a dataset is.\
    \ It is a good measure of how far from a mean a dataset is. It is a good measure\
    \ of how far from a mean a dataset is. It is a good measure of how far from a\
    \ mean a dataset is. It is a good measure of how far from a mean a dataset is.\
    \ It is a good measure of how far from a mean a dataset is. It is a good measure\
    \ of how far from a mean a dataset is. It is a good measure of how far from a\
    \ mean a dataset is. It is a good measure of how far from a mean a dataset is.\
    \ It is a good measure of how far from a mean a dataset is. It is a good measure\
    \ of how far from a mean a \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkzp3tple.jl:16\nin expression starting at\
    \ /tmp/tmpkzp3tple.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model generalizes to new data.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph46cvter.jl:16\nin expression starting at\
    \ /tmp/tmph46cvter.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nThe mean is often used\
    \ as a centerpoint for calculating MAD.\nThe MAD value is always positive.\nThe\
    \ MAD value is always less than or equal to the standard deviation.\nThe MAD value\
    \ is always greater than or equal to the mean of the dataset.\nThe MAD value is\
    \ always equal to the absolute value of the mean of the dataset.\nThe MAD value\
    \ is always equal to the absolute value of the standard deviation of the dataset.\n\
    The MAD value is always equal to the square root of the average of the squared\
    \ deviations from the mean.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpahikhh42.jl:16\nin expression starting at\
    \ /tmp/tmpahikhh42.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation Error\nThe Mean Absolute Deviation Error is defined as:\nMADE = average\
    \ | x - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean is\
    \ the mean of the dataset.\nThe MADE can be calculated as:\nMADE = average | x\
    \ - x_mean |\nwhere x is the actual value and x_mean is the mean of the dataset.\n\
    The MADE can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the\
    \ actual value and x_mean is the mean of the dataset.\nThe MADE can be calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the actual value and x_mean \n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwmga0fc.jl:17\nin expression starting at\
    \ /tmp/tmpwwmga0fc.jl:17\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the mean absolute deviation for a\
    \ list of numbers. Your function should take a list of numbers and return the\
    \ mean absolute deviation for each number. For example, given a list of numbers,\
    \ [1.1, 2.2, 3.3, 4.4], your function should return [1.1, 2.2, 3.3, 4.4].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6nk3j1v.jl:16\nin expression starting at\
    \ /tmp/tmpt6nk3j1v.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x - mean(x))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation - Part 2\nNow let's implement the Mean Absolute\
    \ Deviation function using Julia's built-in functionality.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1sin56z5.jl:15\nin expression starting at\
    \ /tmp/tmp1sin56z5.jl:15\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ayw6425.jl:16\nin expression starting at\
    \ /tmp/tmp5ayw6425.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation Function\nThe mean absolute deviation function calculates the mean\
    \ absolute deviation of a given list of numbers:\nMAD = average | x - x_mean |\n\
    where x is the given list of numbers and x_mean is the mean of the given list\
    \ of numbers.\nThe function returns the mean absolute deviation of a given list\
    \ of numbers.\nThe function can be called as follows:\nMAD = mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\nThe function can be also called as follows:\nMAD = mean_absolute_deviation(numbers)\n\
    where numbers is a vector of numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfvmlu1b.jl:17\nin expression starting at\
    \ /tmp/tmpnfvmlu1b.jl:17\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcup8wfh1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpcup8wfh1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric for evaluating outliers in our datasets. We will use Mean Absolute\
    \ Deviation to evaluate our model's performance.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10m5g7b6.jl:16\nin expression starting at\
    \ /tmp/tmp10m5g7b6.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a list of numbers:\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzko59qvf.jl:16\nin expression starting at\
    \ /tmp/tmpzko59qvf.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nThe Mean Absolute Deviation Error is the mean of\
    \ the absolute value of the deviation\nfrom the mean of the dataset:\nMADE = average\
    \ | x - x_mean |\nwhere x is the dataset and x_mean is the mean of the dataset:\n\
    x_mean = mean(data)\nThe Mean Absolute Deviation Error is calculated as:\nMADE\
    \ = average | x - x_mean |\nwhere x is the dataset and x_mean is the mean of the\
    \ dataset:\nx_mean = mean(data)\nThe Mean Absolute Deviation Error is calculated\
    \ as:\nMADE = average | x - x_mean |\nwhere x is the dataset and x_mean is the\
    \ mean of the dataset:\nx_mean = mean(data)\nThe Mean Absolute Deviation Error\
    \ is calculated as:\nMADE = average | x - x_mean |\nwhere x is the dataset and\
    \ x_mean is the mean of the dataset:\nx_mean = mean(data)\nThe Mean Absolute Deviation\
    \ Error is calculated as:\nMADE = average | x - x_mean |\nwhere x is the dataset\
    \ and x_mean is the mean of the dataset:\nx_mean = mean(data)\nThe Mean Absolute\
    \ Deviation Error is calculated as:\nMADE = average | x - x_mean |\nwhere x is\
    \ the dataset and x_mean is the mean of the dataset:\nx_mean = mean(data)\nThe\
    \ Mean Absolute Deviation Error is calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the dataset and x_mean is the mean of the dataset:\nx_mean = mean(data)\n\
    The Mean Absolute Deviation Error is calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the dataset and x_mean is the mean of the dataset:\nx_mean = mean(data)\n\
    The Mean Absolute Deviation Error is calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the dataset and x_mean is the mean of the dataset:\nx_mean = mean(data)\n\
    The Mean Absolute Deviation Error is calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the dataset and x_mean is the mean of the dataset:\nx_mean = mean(data)\n\
    The Mean Absolute Deviation Error is calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the dataset and x_mean is the mean of the dataset:\n\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1bvdmon8.jl:16\nin expression starting at\
    \ /tmp/tmp1bvdmon8.jl:16\n"
  stdout: ''
  timestamp: 1659822761
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that calculates the mean absolute deviation for a list of numbers.\
    \ Test it on a list of numbers that you generated above. How does it compare to\
    \ your implementation?\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgivm4_bq.jl:16\nin expression starting at\
    \ /tmp/tmpgivm4_bq.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit01y6sk.jl:16\nin expression starting at\
    \ /tmp/tmpit01y6sk.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlc13laj.jl:16\nin expression starting at\
    \ /tmp/tmpjlc13laj.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x-mean(x))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmwuo282.jl:15\nin expression starting at\
    \ /tmp/tmpdmwuo282.jl:15\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuxlsn9od.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpuxlsn9od.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuxlsn9od.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuxlsn9od.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvhhjvus.jl:16\nin expression starting at\
    \ /tmp/tmpmvhhjvus.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric for evaluating outliers in our dataset. Let's see how it works:\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgul12mw_.jl:16\nin expression starting at\
    \ /tmp/tmpgul12mw_.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuxlsn9od.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpuxlsn9od.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuxlsn9od.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuxlsn9od.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.1>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqeuy7z2w.jl:16\nin expression starting at\
    \ /tmp/tmpqeuy7z2w.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each element of the dataset is from the mean.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfeex_xoh.jl:16\nin expression starting at\
    \ /tmp/tmpfeex_xoh.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a metric that measures the average distance between a point and the mean\
    \ of the dataset. \nIt is a good measure of outliers in the dataset.\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hoegmmt.jl:16\nin expression starting at\
    \ /tmp/tmp5hoegmmt.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x - mean(x))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nMean Absolute Deviation is a measure of how far each point is from the\
    \ mean.\nThe higher the MAD, the better the prediction. \nThe MAD can be calculated\
    \ using the function mean_absolute_deviation().\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmponq7f4wk.jl:15\nin expression starting at\
    \ /tmp/tmponq7f4wk.jl:15\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation with StatsModels\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprbj_tee.jl:16\nin expression starting at\
    \ /tmp/tmpprbj_tee.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcup8wfh1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpcup8wfh1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using Julia's\
    \ built-in functionality.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnh3tasoi.jl:16\nin expression starting at\
    \ /tmp/tmpnh3tasoi.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for x in numbers\n        sum_of_squares +=\
    \ (x - mean(x))^2 \n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <text>\nThe function above is called mean_absolute_deviation. Let's test it out\
    \ on a few numbers:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplr432ywr.jl:15\nin expression starting at\
    \ /tmp/tmplr432ywr.jl:15\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a metric that measures how far a sample deviates from the mean of the dataset.\
    \ For example, a sample of data points with values {1, 2, 3} has a mean of 2,\
    \ so MAD would be 1 because all points are far away from 2.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9_v459r.jl:16\nin expression starting at\
    \ /tmp/tmpd9_v459r.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a dataset is. It is a good measure for comparing\
    \ datasets because it is independent of the distribution of the dataset. For example,\
    \ if we have two datasets, one with a mean of 5 and one with a mean of 3, the\
    \ MAD of these two datasets is 2.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjjfytio_.jl:16\nin expression starting at\
    \ /tmp/tmpjjfytio_.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ayw6425.jl:16\nin expression starting at\
    \ /tmp/tmp5ayw6425.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvhhjvus.jl:16\nin expression starting at\
    \ /tmp/tmpmvhhjvus.jl:16\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from mean a dataset is. It is a good measure of outliers\
    \ and is often used in machine learning to determine which features are important.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6xdma3c.jl:16\nin expression starting at\
    \ /tmp/tmpk6xdma3c.jl:16\n"
  stdout: ''
  timestamp: 1659822763
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlc13laj.jl:16\nin expression starting at\
    \ /tmp/tmpjlc13laj.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation Error\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkexau4p3.jl:16\nin expression starting at\
    \ /tmp/tmpkexau4p3.jl:16\n"
  stdout: ''
  timestamp: 1659822763
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation calculation is the\
    \ Mean Absolute Deviation Squared. \nThis can be calculated using the Mean Absolute\
    \ Deviation formula:\nMAD_SQ = MAD ^ 2\nThe Mean Absolute Deviation Squared is\
    \ a more robust measure of the variability of our data.\nIt is a measure of how\
    \ far away each point is from the mean.\nThe larger the MAD_SQ, the more variability\
    \ there is in our data.\nThe smaller the MAD_SQ, the more data there is in our\
    \ data.\nThe MAD_SQ can be calculated using the Mean Absolute Deviation formula:\n\
    MAD_SQ = MAD ^ 2\nThe Mean Absolute Deviation Squared is a more robust measure\
    \ of the variability of our data.\nIt is a measure of how far away each point\
    \ is from the mean.\nThe larger the MAD_SQ, the more variability there is in our\
    \ data.\nThe smaller the MAD_SQ, the more data there is in our data.\nThe MAD_SQ\
    \ can be calculated using the Mean Absolute Deviation formula:\nMAD_SQ = MAD ^\
    \ 2\nThe Mean Absolute Deviation Squared is a more robust measure of the variability\
    \ of our data.\nIt is a measure of how far away each point is from the mean.\n\
    The larger the MAD_SQ, the more variability there is in our data.\nThe smaller\
    \ the MAD_SQ, the more data there is in our data.\nThe MAD_SQ can be calculated\
    \ using the Mean Absolute Deviation formula:\nMAD_SQ = MAD ^ 2\nThe Mean Absolute\
    \ Deviation Squared is a more robust measure of the variability of our data.\n\
    It is a measure of how far away each point is from the mean.\nThe larger the MAD_SQ,\
    \ the more variability there is in our data.\nThe smaller the MAD_SQ, the more\
    \ data there is in our data.\nThe MAD_SQ can be calculated using the Mean Absolute\
    \ Deviation formula:\nMAD_SQ = MAD ^ 2\nThe Mean Absolute Deviation Squared is\
    \ a more robust measure of the variability of our data.\nIt is a measure of how\
    \ far away each point is from the mean.\nThe larger the MAD_SQ, the more variability\
    \ there is \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnus6a0rv.jl:16\nin expression starting at\
    \ /tmp/tmpnus6a0rv.jl:16\n"
  stdout: ''
  timestamp: 1659822763
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares\
    \ += (n - mean(n))^2\n    end\n    return sqrt(sum_of_squares/length(numbers))\n\
    end\n</cell>\n<code language=julia-1.4>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqd5c4mtv.jl:17\nin expression starting at\
    \ /tmp/tmpqd5c4mtv.jl:17\n"
  stdout: ''
  timestamp: 1659822762
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far a dataset is from the mean.\nIt is a good measure of\
    \ how far a dataset is from the mean.\nIt is a good measure of how far a dataset\
    \ is from the mean.\nIt is a good measure of how far a dataset is from the mean.\n\
    It is a good measure of how far a dataset is from the mean.\nIt is a good measure\
    \ of how far a dataset is from the mean.\nIt is a good measure of how far a dataset\
    \ is from the mean.\nIt is a good measure of how far a dataset is from the mean.\n\
    It is a good measure of how far a dataset is from the mean.\nIt is a good measure\
    \ of how far a dataset is from the mean.\nIt is a good measure of how far a dataset\
    \ is from the mean.\nIt is a good measure of how far a dataset is from the mean.\n\
    It is a good measure of how far a dataset is from the mean.\nIt is a good measure\
    \ of how far a dataset is from the mean.\nIt is a good measure of how far a dataset\
    \ is from the mean.\nIt is a good measure of how far a dataset is from the mean.\n\
    It is a good measure of how far a dataset is from the mean.\nIt is a good measure\
    \ of how far a dataset is from the mean.\nIt is a good measure of how far a dataset\
    \ is from the mean.\nIt is a good measure of how far a dataset is from the mean.\n\
    It is a good measure of how far a dataset is from the mean.\nIt is a good measure\
    \ of how far a dataset is from the mean.\nIt is a good measure of how far a dataset\
    \ is from the mean.\nIt is a good measure of how far a dataset is from the mean.\n\
    It is a good measure of how far a dataset is from the mean.\nIt is a good measure\
    \ of how far a dataset is from the mean.\nIt is a good measure of how far a dataset\
    \ is from the mean.\nIt is a good measure of how far a dataset is from the mean.\n\
    It is a good measure of how far a dataset is from the mean.\nIt is a good measure\
    \ of how far a dataset is from the mean.\nIt is a good measure of how far a dataset\
    \ is from the mean.\nIt is a good measure of how far a dataset is from the mean.\n\
    It is a good measure of how far a dataset is from the mean.\nIt is a good measure\
    \ of how far a dataset is from the mean.\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplnqpp2u3.jl:16\nin expression starting at\
    \ /tmp/tmplnqpp2u3.jl:16\n"
  stdout: ''
  timestamp: 1659822763
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlc13laj.jl:16\nin expression starting at\
    \ /tmp/tmpjlc13laj.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe mean absolute\
    \ deviation function above is very similar to the mean function we saw earlier.\
    \ Let's compare the two functions:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpf_4_pa.jl:16\nin expression starting at\
    \ /tmp/tmpgpf_4_pa.jl:16\n"
  stdout: ''
  timestamp: 1659822763
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation Error\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps11lbhm3.jl:16\nin expression starting at\
    \ /tmp/tmps11lbhm3.jl:16\n"
  stdout: ''
  timestamp: 1659822763
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model generalizes to new data. The closer\
    \ to zero, the better. Mean Absolute Deviation can be calculated using the function\
    \ mean_absolute_deviation().\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd0r4a65n.jl:16\nin expression starting at\
    \ /tmp/tmpd0r4a65n.jl:16\n"
  stdout: ''
  timestamp: 1659822763
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation\n(MAD) of a given set of numbers:\nMAD = average | x - x_mean |\n\
    The mean absolute deviation function calculates the mean absolute deviation\n\
    (MAD) of a given set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute\
    \ deviation function calculates the mean absolute deviation\n(MAD) of a given\
    \ set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation\n(MAD) of a given set of numbers:\nMAD\
    \ = average | x - x_mean |\nThe mean absolute deviation function calculates the\
    \ mean absolute deviation\n(MAD) of a given set of numbers:\nMAD = average | x\
    \ - x_mean |\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation\n(MAD) of a given set of numbers:\nMAD = average | x - x_mean |\n\
    The mean absolute deviation function calculates the mean absolute deviation\n\
    (MAD) of a given set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute\
    \ deviation function calculates the mean absolute deviation\n(MAD) of a given\
    \ set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation\n(MAD) of a given set of numbers:\nMAD\
    \ = average | x - x_mean |\nThe mean absolute deviation function calculates the\
    \ mean absolute deviation\n(MAD) of a given set of numbers:\nMAD = average | x\
    \ - x_mean |\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation\n(MAD) of a given set of numbers:\nMAD = average | x - x_mean |\n\
    The mean absolute deviation function calculates the mean absolute deviation\n\
    (MAD) of a given set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute\
    \ deviation function calculates the mean absolute deviation\n(MAD) of a given\
    \ set of numbers:\nMAD = average | x - x_mean |\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation\n(MAD) of a given set of numbers:\nMAD\
    \ = average | x - x_mean |\nThe mean absolute deviation function calculates the\
    \ mean absolute \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph_8te8_1.jl:16\nin expression starting at\
    \ /tmp/tmph_8te8_1.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far a sample deviates from the mean of its values. In other\
    \ words, it measures how far each element deviates from the mean of its values.\
    \ A value of 0 means there is no deviation; a value of 1 means there is one deviation;\
    \ and a value of -1 means there is one deviation. Mean Absolute Deviation is the\
    \ average absolute difference between each element and a centerpoint (mean in\
    \ this case):\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuo7nfd_p.jl:16\nin expression starting at\
    \ /tmp/tmpuo7nfd_p.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using the\
    \ same function we used before. We'll use the same dataset we used before, just\
    \ with different numbers. We'll use the function mean_absolute_deviation() we\
    \ defined earlier.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnfz5zm6.jl:16\nin expression starting at\
    \ /tmp/tmphnfz5zm6.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far each point is from the mean.\nIt is a good measure of\
    \ outliers, as points further from the mean are likely to be outliers.\nThe mean\
    \ is often a good choice of centerpoint for outlier detection.\nThe MAD can be\
    \ calculated using the mean_absolute_deviation function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0])\
    \ == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpynlqsm7q.jl:16\nin expression starting at\
    \ /tmp/tmpynlqsm7q.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlc13laj.jl:16\nin expression starting at\
    \ /tmp/tmpjlc13laj.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the mean absolute deviation of a\
    \ list of numbers. \nThe function should take a list of numbers as input and should\
    \ return the mean absolute deviation of this list.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01oj4v0p.jl:16\nin expression starting at\
    \ /tmp/tmp01oj4v0p.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far a sample deviates from the mean of its values. A low\
    \ MAD indicates that a sample is close to the mean.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5k24y7b.jl:16\nin expression starting at\
    \ /tmp/tmpu5k24y7b.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using Julia's\
    \ built-in functionality.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcagu1uf4.jl:16\nin expression starting at\
    \ /tmp/tmpcagu1uf4.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl14ra134.jl:16\nin expression starting at\
    \ /tmp/tmpl14ra134.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for x in numbers\n        sum_of_squared_deviations\
    \ += pow((x - mean), 2)\n    return sqrt(sum_of_squared_deviations / length(numbers))\n\
    end\n</cell>\n<text>\nMean Absolute Deviation is a measure of how far from a mean\
    \ a data point is. It is a good measure of outliers. It is also a measure of how\
    \ far from a mean a data point is. It is a good measure of outliers. It is also\
    \ a measure of how far from a mean a data point is. It is a good measure of outliers.\
    \ It is also a measure of how far from a mean a data point is. It is a good measure\
    \ of outliers. It is also a measure of how far from a mean a data point is. It\
    \ is a good measure of outliers. It is also a measure of how far from a mean a\
    \ data point is. It is a good measure of outliers. It is also a measure of how\
    \ far from a mean a data point is. It is a good measure of outliers. It is also\
    \ a measure of how far from a mean a data point is. It is a good measure of outliers.\
    \ It is also a measure of how far from a mean a data point is. It is a good measure\
    \ of outliers. It is also a measure of how far from a mean a data point is. It\
    \ is a good measure of outliers. It is also a measure of how far from a mean a\
    \ data point is. It is a good measure of outliers. It is also a measure of how\
    \ far from a mean a data point is. It is a good measure of outliers. It is also\
    \ a measure of how far from a mean a data point is. It is a good measure of outliers.\
    \ It is also a measure of how far from a mean a data point is. It is a good measure\
    \ of outliers. It is also a measure of how far from a mean a data point is. It\
    \ is a good measure of outliers. It is also a measure of how far from a mean a\
    \ data point is. It is a good measure of outliers. It is also a measure of how\
    \ far from a mean a data point is. It is a good measure of outliers. It is also\
    \ a measure of how far from a mean a data point is. It is a good measure of outliers.\
    \ It is also a measure of how far from a mean a data point is. It is a good measure\
    \ of outliers. It is also a measure of how far from a mean a data point is. It\
    \ is a good measure of outliers. It is also a measure of how far from a mean a\
    \ data point is. It is a good measure of outlier\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97_g8dej.jl:15\nin expression starting at\
    \ /tmp/tmp97_g8dej.jl:15\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppv02vcsw.jl:16\nin expression starting at\
    \ /tmp/tmppv02vcsw.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nExercise 7: Mean\
    \ Absolute Deviation\nWrite a function that calculates the mean absolute deviation\
    \ of a list of numbers. \nThe function should take a list of numbers and return\
    \ the mean absolute deviation.\nThe function should also take an optional argument\
    \ for the number of standard deviations around the mean.\nIf the number of standard\
    \ deviations is omitted, the function should return the mean absolute deviation\
    \ around the mean.\nThe function should raise an error if the number of standard\
    \ deviations is less than 1.\nFor example, if the mean is 3.0 and there are 3\
    \ standard deviations around the mean, the function should return 2.5.\nIf the\
    \ mean is 3.0 and there are 2 standard deviations around the mean, the function\
    \ should return 2.5.\nIf the mean is 3.0 and there are 1 standard deviations around\
    \ the mean, the function should return 2.5.\nIf the mean is 3.0 and there are\
    \ 0 standard deviations around the mean, the function should return 2.5.\nIf the\
    \ mean is 3.0 and there are -1 standard deviations around the mean, the function\
    \ should return 2.5.\nIf the mean is 3.0 and there are -2 standard deviations\
    \ around the mean, the function should return 2.5.\nIf the mean is 3.0 and there\
    \ are -3 standard deviations around the mean, the function should return 2.5.\n\
    If the mean is 3.0 and there are -4 standard deviations around the mean, the function\
    \ should return 2.5.\nIf the mean is 3.0 and there are -5 standard deviations\
    \ around the mean, the function should return 2.5.\nIf the mean is 3.0 and there\
    \ are -6 standard deviations around the mean, the function should return 2.5.\n\
    If the mean is 3.0 and there are -7 standard deviations around the mean, the function\
    \ should return 2.5.\nIf the mean is 3.0 and there are -8 standard deviations\
    \ around the mean, the function should return 2.5.\nIf the mean is 3.0 and there\
    \ are -9 standard deviations around the mean, the function should return 2.5.\n\
    If the mean is 3.0 and there are -10 standard deviations around the mean, the\
    \ function should return 2.5.\nIf the mean is 3.0 and there are -11 standard deviations\
    \ around the mean, the function should return 2.5.\nIf the mean is 3.0 and there\
    \ are -12 standard deviations around the mean, the function should return 2.5.\n\
    If the mean is 3.0 and there are -13 standard deviations around the mean, the\
    \ function should return 2.5.\nIf the mean is 3.0 and there are -14 standard deviations\
    \ around the mean, the function should return 2.5.\nIf the mean is 3.0 and there\
    \ are -15 standard deviations around the mean, the function should return 2.5.\n\
    If the mean is 3.0 and there are -16 standard deviations around the mean, the\
    \ function should return 2.5.\nIf the mean is 3.0 and there are -17 standard deviations\
    \ around the mean, the function should return 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0m6e4u4o.jl:16\nin expression starting at\
    \ /tmp/tmp0m6e4u4o.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    The median is another useful statistic to know. Median is defined as the middle\
    \ value of a sorted dataset. Median is defined as the value separating the higher\
    \ half of a dataset from the lower half:\n    median = [n/2 | n \u2208 dataset]\n\
    \    median = median(dataset)\n    median = median([1.0, 2.0, 3.0, 4.0])\n   \
    \ median = median([1.0, 2.0, 3.0, 4.0, 5.0])\n    median = median([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0])\n    median = median([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n\
    \    median = median([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n    median = median([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n    median = median([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n    median = median([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n    median = median([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n    median = median([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n    median = median([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n   \
    \ median = median([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0,\
    \ 13.0, 14.0, 15.0])\n    median = median([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,\
    \ 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n    median = median([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0])\n    median = median([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,\
    \ 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n    median = median([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq43zquvr.jl:16\nin expression starting at\
    \ /tmp/tmpq43zquvr.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl_qnhvc.jl:16\nin expression starting at\
    \ /tmp/tmpgl_qnhvc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for x in numbers\n        sum_of_squared_deviations\
    \ += pow((x - mean), 2)\n    return sqrt(sum_of_squared_deviations / length(numbers))\n\
    end\n</cell>\n<code language=julia-1.0>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation Function\nThe mean absolute\
    \ deviation function calculates the mean absolute deviation of a list of numbers.\
    \ \nThe mean absolute deviation is calculated as the average absolute difference\
    \ between each element and a centerpoint (mean in this case):\nMAD = average |\
    \ x - x_mean |\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a list of numbers. \nThe mean absolute deviation is calculated\
    \ as the average absolute difference between each element and a centerpoint (mean\
    \ in this case):\nMAD = average | x - x_mean |\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a list of numbers. \nThe mean absolute\
    \ deviation is calculated as the average absolute difference between each element\
    \ and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a list\
    \ of numbers. \nThe mean absolute deviation is calculated as the average absolute\
    \ difference between each element and a centerpoint (mean in this case):\nMAD\
    \ = average | x - x_mean |\nThe mean absolute deviation function calculates the\
    \ mean absolute deviation of a list of numbers. \nThe mean absolute deviation\
    \ is calculated as the average absolute difference between each element and a\
    \ centerpoint (mean in this case):\nMAD = average | x - x_mean |\nThe mean absolute\
    \ deviation function calculates the mean absolute deviation of a list of numbers.\
    \ \nThe mean absolute deviation is calculated as the average absolute difference\
    \ between each element and a centerpoint (mean in this case):\nMAD = average |\
    \ x - x_mean |\nThe mean absolute deviation function calculates the mean absolute\
    \ deviation of a list of numbers. \nThe mean absolute deviation is calculated\
    \ as the average absolute difference between each element and a centerpoint (mean\
    \ in this case):\nMAD = average | x - x_mean |\nThe mean absolute deviation function\
    \ calculates the mean absolute deviation of a list of numbers. \nThe mean absolute\
    \ deviation is calculated as the average absolute difference between each element\
    \ and a centerpoint (mean in this case):\nMAD = average | x - x_mean |\nThe mean\
    \ absolute deviation function calculates the mean absolute deviation of a list\
    \ of numbers. \nThe mean absolute deviation is calculated as the average absolute\
    \ difference between each element and a centerpoint (mean in this case):\nMAD\
    \ = average \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvejv5za.jl:15\nin expression starting at\
    \ /tmp/tmpyvejv5za.jl:15\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's calculate the mean absolute deviation for a list of numbers.\
    \ We'll use the function we defined above to calculate the mean absolute deviation.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41fhspm8.jl:16\nin expression starting at\
    \ /tmp/tmp41fhspm8.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation - Part 2\nThe second part of the Mean Absolute Deviation calculation\
    \ is the variance (square of the deviation). \nThe variance is the average of\
    \ the squared deviations:\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_mean |^2\n    Variance\
    \ = average | x - x_mean |^2\n    Variance = average | x - x_\nusing Test\n\n\
    @testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqtc8z8t.jl:16\nin expression starting at\
    \ /tmp/tmpdqtc8z8t.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far a data point is from the mean of its distribution.\n\
    The mean is often called the \"expected value\" of the data.\nThe mean is also\
    \ called the \"population mean\".\nThe mean is simply the sum of the values divided\
    \ by the number of values.\nThe mean is also called the \"sample mean\".\nThe\
    \ mean is simply the sum of the values divided by the number of values.\nThe mean\
    \ is also called the \"population average\".\nThe mean is simply the sum of the\
    \ values divided by the number of values.\nThe mean is also called the \"sample\
    \ average\".\nThe mean is simply the sum of the values divided by the number of\
    \ values.\nThe mean is also called the \"population median\".\nThe mean is simply\
    \ the sum of the values divided by the number of values.\nThe mean is also called\
    \ the \"sample median\".\nThe mean is simply the sum of the values divided by\
    \ the number of values.\nThe mean is also called the \"population mode\".\nThe\
    \ mean is simply the sum of the values divided by the number of values.\nThe mean\
    \ is also called the \"sample mode\".\nThe mean is simply the sum of the values\
    \ divided by the number of values.\nThe mean is also called the \"population spread\"\
    .\nThe mean is simply the sum of the values divided by the number of values.\n\
    The mean is also called the \"sample spread\".\nThe mean is simply the sum of\
    \ the values divided by the number of values.\nThe mean is also called the \"\
    population variance\".\nThe mean is simply the sum of the values divided by the\
    \ number of values.\nThe mean is also called the \"sample variance\".\nThe mean\
    \ is simply the sum of the values divided by the number of values.\nThe mean is\
    \ also called the \"population standard deviation\".\nThe mean is simply the sum\
    \ of the values divided by the number of values.\nThe mean is also called the\
    \ \"sample standard deviation\".\nThe mean is simply the sum of the values divided\
    \ by the number of values.\nThe mean is also called the \"population variance\"\
    .\nThe mean is simply the sum of the values divided by the number of values.\n\
    The mean is also called the \"sample variance\".\nThe mean is simply the sum of\
    \ the values divided by the number of values.\nThe mean is also called the \"\
    population standard deviation\".\nThe mean is simply the sum of the values divided\
    \ by the number of values.\nThe mean is also called the \"sample standard deviation\"\
    .\nThe mean is simply the sum of the values divided by the number of values.\n\
    \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvr19nk77.jl:16\nin expression starting at\
    \ /tmp/tmpvr19nk77.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl14ra134.jl:16\nin expression starting at\
    \ /tmp/tmpl14ra134.jl:16\n"
  stdout: ''
  timestamp: 1659822759
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppv02vcsw.jl:16\nin expression starting at\
    \ /tmp/tmppv02vcsw.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for n in numbers\n        sum_of_squared_deviations\
    \ += (n-mean(n))^2 \n    end\n    return sum_of_squared_deviations / length(numbers)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the mean absolute\
    \ deviation for a list of numbers. \nFor a vector of length $n$, the mean absolute\
    \ deviation is defined as:\nMAD = average | x - x_mean |\nwhere $x_i$ is the $i$th\
    \ element of the vector.\nThe function should return the mean absolute deviation.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmyaw8h9n.jl:16\nin expression starting at\
    \ /tmp/tmpmyaw8h9n.jl:16\n"
  stdout: ''
  timestamp: 1659822765
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using the\
    \ mean function from above:\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqq2hhcvs.jl:16\nin expression starting at\
    \ /tmp/tmpqq2hhcvs.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a good metric for evaluating outliers in your dataset. For example,\
    \ if you have some outliers in your dataset that deviate too much from the mean\
    \ by more than a certain amount, then you can remove them by calculating their\
    \ MAD.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6pyfj6c.jl:16\nin expression starting at\
    \ /tmp/tmpj6pyfj6c.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1f92i7ss.jl:17\nin expression starting at\
    \ /tmp/tmp1f92i7ss.jl:17\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's use our new function mean_absolute_deviation to calculate\
    \ the mean absolute deviation for a list of numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0a3f5g_x.jl:16\nin expression starting at\
    \ /tmp/tmp0a3f5g_x.jl:16\n"
  stdout: ''
  timestamp: 1659822765
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of this problem is to calculate the Mean Absolute\
    \ Deviation for a set of numbers. \nThe function below calculates the Mean Absolute\
    \ Deviation for a set of numbers. \nThe function takes two arguments: a list of\
    \ numbers and a centerpoint. \nThe function returns the Mean Absolute Deviation\
    \ for the set of numbers. \nThe function uses the Mean Absolute Deviation function\
    \ defined above.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxowb7ie.jl:16\nin expression starting at\
    \ /tmp/tmpwxowb7ie.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It is a good measure of outliers\
    \ and is often used in machine learning to determine how far from a mean a sample\
    \ is. It is also a good measure of how far from a mean a population is.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_hkjw3r.jl:16\nin expression starting at\
    \ /tmp/tmp2_hkjw3r.jl:16\n"
  stdout: ''
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]) == 1.0\n</cell>\n<text>\n\
    Mean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x is the actual\
    \ value and x_mean is the mean of the dataset.\nThe MADE can be calculated as:\n\
    MADE = average | x - x_mean |\nwhere x is the actual value and x_mean is the mean\
    \ of the dataset.\nThe MADE can be calculated as:\nMADE = average | x - x_mean\
    \ |\nwhere x is the actual value and x_mean is the mean of the dataset.\nThe MADE\
    \ can be calculated as:\nMADE = average | x - x_mean |\nwhere x \nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fjqnf5z.jl:17\nin expression starting at\
    \ /tmp/tmp9fjqnf5z.jl:17\n"
  stdout: ''
  timestamp: 1659822765
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlc13laj.jl:16\nin expression starting at\
    \ /tmp/tmpjlc13laj.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It is a good measure of outliers\
    \ and is often used in machine learning to determine how far from a mean a data\
    \ point is. It is also a good measure of how far from a mean a data point is,\
    \ since it penalizes outliers. It is calculated as the average of the absolute\
    \ difference between each element and a centerpoint (mean in this case).\nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8s2aonyi.jl:16\nin expression starting at\
    \ /tmp/tmp8s2aonyi.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    return sqrt(sum_of_squares/length(numbers))\nend\n</cell>\n\
    <code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n\
    <text>\nMean Absolute Deviation Error\nThe Mean Absolute Deviation Error is defined\
    \ as the mean of the absolute differences between each element and the mean of\
    \ the dataset:\nMDE = average | x - x_mean |\nwhere x is the dataset and x_mean\
    \ is the mean of the dataset.\nThe MDE Error is defined as the mean of the absolute\
    \ differences between each element and the MDE:\nMDE Error = average | x - MDE\
    \ |\nwhere x is the dataset and x_mean is the MDE.\nThe MDE Error is defined as\
    \ the mean of the absolute differences between each element and the MDE:\nMDE\
    \ Error = average | x - MDE |\nwhere x is the dataset and x_mean is the MDE.\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3k8yyb0.jl:15\nin expression starting at\
    \ /tmp/tmpb3k8yyb0.jl:15\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squared_deviations = 0.0\n    for n in numbers\n        sum_of_squared_deviations\
    \ += ((n - mean(n))^2)\n    return sqrt(sum_of_squared_deviations / length(numbers))\n\
    end\n</cell>\n<code language=julia-1.5>\nmean_absolute_deviation([1.0, 2.0, 3.0,\
    \ 4.0])\n</cell>\n<text>\nMean Absolute Deviation with StatsModels\nusing Test\n\
    \n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp78jnx76t.jl:15\nin expression starting at\
    \ /tmp/tmp78jnx76t.jl:15\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from a mean a number is. It is a good measure of outliers\
    \ and is often used as a measure of how far from a mean a number is. It is also\
    \ a good measure of how far from a mean a number is. It is a good measure of how\
    \ far from a mean a number is. It is a good measure of how far from a mean a number\
    \ is. It is a good measure of how far from a mean a number is. It is a good measure\
    \ of how far from a mean a number is. It is a good measure of how far from a mean\
    \ a number is. It is a good measure of how far from a mean a number is. It is\
    \ a good measure of how far from a mean a number is. It is a good measure of how\
    \ far from a mean a number is. It is a good measure of how far from a mean a number\
    \ is. It is a good measure of how far from a mean a number is. It is a good measure\
    \ of how far from a mean a number is. It is a good measure of how far from a mean\
    \ a number is. It is a good measure of how far from a mean a number is. It is\
    \ a good measure of how far from a mean a number is. It is a good measure of how\
    \ far from a mean a number is. It is a good measure of how far from a mean a number\
    \ is. It is a good measure of how far from a mean a number is. It is a good measure\
    \ of how far from a mean a number is. It is a good measure of how far from a mean\
    \ a number is. It is a good measure of how far from a mean a number is. It is\
    \ a good measure of how far from a mean a number is. It is a good measure of how\
    \ far from a mean a number is. It is a good measure of how far from a mean a number\
    \ is. It is a good measure of how far from a mean a number is. It is a good measure\
    \ of how far from a mean a number is. It is a good measure of how far from a mean\
    \ a number is. It is a good measure of how far from a mean a number is. It is\
    \ a good measure of how far from a mean a number is. It is a good measure of how\
    \ far from a mean a number is. It is a good measure of how far from a mean a number\
    \ is. It is a good measure of how far from a mean a number is. It is a good measure\
    \ of how far from a mean a number is. It is a good measure of how far from a mean\
    \ a number is.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyi4cd8yt.jl:16\nin expression starting at\
    \ /tmp/tmpyi4cd8yt.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuxlsn9od.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpuxlsn9od.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuxlsn9od.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuxlsn9od.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe mean absolute deviation is a more robust measure of outliers.\
    \ It is more robust to outliers than the standard deviation. \nThe mean absolute\
    \ deviation is calculated as:\nMAD = average | x - x_mean |\nwhere x is the input\
    \ number and x_mean is the mean of the input numbers. \nThe mean absolute deviation\
    \ is a robust measure of outliers. \nThe mean absolute deviation is a robust measure\
    \ of outliers. \nThe mean absolute deviation is a robust measure of outliers.\
    \ \nThe mean absolute deviation is a robust measure of outliers. \nThe mean absolute\
    \ deviation is a robust measure of outliers. \nThe mean absolute deviation is\
    \ a robust measure of outliers. \nThe mean absolute deviation is a robust measure\
    \ of outliers. \nThe mean absolute deviation is a robust measure of outliers.\
    \ \nThe mean absolute deviation is a robust measure of outliers. \nThe mean absolute\
    \ deviation is a robust measure of outliers. \nThe mean absolute deviation is\
    \ a robust measure of outliers. \nThe mean absolute deviation is a robust measure\
    \ of outliers. \nThe mean absolute deviation is a robust measure of outliers.\
    \ \nThe mean absolute deviation is a robust measure of outliers. \nThe mean absolute\
    \ deviation is a robust measure of outliers. \nThe mean absolute deviation is\
    \ a robust measure of outliers. \nThe mean absolute deviation is a robust measure\
    \ of outliers. \nThe mean absolute deviation is a robust measure of outliers.\
    \ \nThe mean absolute deviation is a robust measure of outliers. \nThe mean absolute\
    \ deviation is a robust measure of outliers. \nThe mean absolute deviation is\
    \ a robust measure of outliers. \nThe mean absolute deviation is a robust measure\
    \ of outliers. \nThe mean absolute deviation is a robust measure of outliers.\
    \ \nThe mean absolute deviation is a robust measure of outliers. \nThe mean absolute\
    \ deviation is a robust measure of outliers. \nThe mean absolute deviation is\
    \ a robust measure of outliers. \nThe mean absolute deviation is a robust measure\
    \ of outliers. \nThe mean absolute deviation is a robust measure of outliers.\
    \ \nThe mean absolute deviation is a robust measure of outliers. \nThe mean absolute\
    \ deviation is a \nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8agerjtl.jl:16\nin expression starting at\
    \ /tmp/tmp8agerjtl.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nThe second part of the Mean Absolute Deviation algorithm is called\
    \ Mean Absolute Deviation Index (MADI).\nMADI is a measure of how well the data\
    \ is distributed around the mean.\nThe MADI is calculated as:\nMADI = average\
    \ | x - x_mean |\nwhere x is the input number and x_mean is the mean of the input\
    \ numbers.\nThe MADI is calculated using the mean of the absolute difference between\
    \ each element and the\ncenterpoint (mean).\nThe MADI is calculated using the\
    \ mean of the absolute difference between each element and the\ncenterpoint (mean).\n\
    The MADI is calculated using the mean of the absolute difference between each\
    \ element and the\ncenterpoint (mean).\nThe MADI is calculated using the mean\
    \ of the absolute difference between each element and the\ncenterpoint (mean).\n\
    The MADI is calculated using the mean of the absolute difference between each\
    \ element and the\ncenterpoint (mean).\nThe MADI is calculated using the mean\
    \ of the absolute difference between each element and the\ncenterpoint (mean).\n\
    The MADI is calculated using the mean of the absolute difference between each\
    \ element and the\ncenterpoint (mean).\nThe MADI is calculated using the mean\
    \ of the absolute difference between each element and the\ncenterpoint (mean).\n\
    The MADI is calculated using the mean of the absolute difference between each\
    \ element and the\ncenterpoint (mean).\nThe MADI is calculated using the mean\
    \ of the absolute difference between each element and the\ncenterpoint (mean).\n\
    The MADI is calculated using the mean of the absolute difference between each\
    \ element and the\ncenterpoint (mean).\nThe MADI is calculated using the mean\
    \ of the absolute difference between each element and the\ncenterpoint (mean).\n\
    The MADI is calculated using the mean of the absolute difference between each\
    \ element and the\ncenterpoint (mean).\nThe MADI is calculated using the mean\
    \ of the absolute difference between each element and the\ncenterpoint (mean).\n\
    The MADI is calculated using the mean of the absolute difference between each\
    \ element and the\ncenterpoint (mean).\nThe MADI is calculated using the mean\
    \ of the absolute difference between each element and the\ncenterpoint (mean).\n\
    The MADI is calculated using the mean of the absolute difference between each\
    \ element and the\ncenterpoint (mean).\nThe MADI is calculated using the \nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jo3juav.jl:16\nin expression starting at\
    \ /tmp/tmp6jo3juav.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation - Part 2\nNow let's look at how we can use our new function mean_absolute_deviation\
    \ to calculate Mean Absolute Deviation for a list of numbers. We will use the\
    \ function map() to apply the function mean_absolute_deviation to each element\
    \ in the list numbers.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgutk5b6.jl:17\nin expression starting at\
    \ /tmp/tmpzgutk5b6.jl:17\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nThe mean absolute\
    \ deviation function above is called a mean absolute deviation function (MAF).\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2lkm_zh_.jl:16\nin expression starting at\
    \ /tmp/tmp2lkm_zh_.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n\
    \    end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute\
    \ Deviation with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqfxx5taa.jl:17\nin expression starting at\
    \ /tmp/tmpqfxx5taa.jl:17\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ Function\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlc13laj.jl:16\nin expression starting at\
    \ /tmp/tmpjlc13laj.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a measure of how far from the mean a dataset is. It is a good measure to\
    \ compare datasets because it is independent of the magnitude of the individual\
    \ values. However, it is not a good measure for comparing different datasets because\
    \ it is sensitive to outliers. Therefore, we will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute Deviation\
    \ metric to compare different datasets. We will use the Mean Absolute \nusing\
    \ Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc3vy_5x2.jl:16\nin expression starting at\
    \ /tmp/tmpc3vy_5x2.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a metric that measures the average distance between a point and an average.\n\
    It is a good measure of how far a point is from the average.\nIt is a good measure\
    \ of how far a point is from the average.\nIt is a good measure of how far a point\
    \ is from the average.\nIt is a good measure of how far a point is from the average.\n\
    It is a good measure of how far a point is from the average.\nIt is a good measure\
    \ of how far a point is from the average.\nIt is a good measure of how far a point\
    \ is from the average.\nIt is a good measure of how far a point is from the average.\n\
    It is a good measure of how far a point is from the average.\nIt is a good measure\
    \ of how far a point is from the average.\nIt is a good measure of how far a point\
    \ is from the average.\nIt is a good measure of how far a point is from the average.\n\
    It is a good measure of how far a point is from the average.\nIt is a good measure\
    \ of how far a point is from the average.\nIt is a good measure of how far a point\
    \ is from the average.\nIt is a good measure of how far a point is from the average.\n\
    It is a good measure of how far a point is from the average.\nIt is a good measure\
    \ of how far a point is from the average.\nIt is a good measure of how far a point\
    \ is from the average.\nIt is a good measure of how far a point is from the average.\n\
    It is a good measure of how far a point is from the average.\nIt is a good measure\
    \ of how far a point is from the average.\nIt is a good measure of how far a point\
    \ is from the average.\nIt is a good measure of how far a point is from the average.\n\
    It is a good measure of how far a point is from the average.\nIt is a good measure\
    \ of how far a point is from the average.\nIt is a good measure of how far a point\
    \ is from the average.\nIt is a good measure of how far a point is from the average.\n\
    It is a good measure of how far a point is from the average.\nIt is a good measure\
    \ of how far a point is from the average.\nIt is a good measure of how far a point\
    \ is from the average.\nIt is a good measure of how far a point is from the average.\n\
    It is a good measure of how far a point is \nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5881v4if.jl:16\nin expression starting at\
    \ /tmp/tmp5881v4if.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcup8wfh1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpcup8wfh1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum_of_squares = 0.0\n    for n in numbers\n        sum_of_squares +=\
    \ (n - mean(n))^2\n    end\n    return sum_of_squares / length(numbers)\nend\n\
    </cell>\n<text>\nMean Absolute Deviation with Stats\nusing Test\n\n@testset begin\n\
    \ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0,\
    \ 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpax77b03h.jl:16\nin expression starting at\
    \ /tmp/tmpax77b03h.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpuxlsn9od.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpuxlsn9od.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuxlsn9od.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuxlsn9od.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpuxlsn9od.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuxlsn9od.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuxlsn9od.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659822764
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using the\
    \ same code as above, but this time using a for loop to calculate the MAD value\
    \ for each element in the dataset.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgxsqprt.jl:16\nin expression starting at\
    \ /tmp/tmprgxsqprt.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl_qnhvc.jl:16\nin expression starting at\
    \ /tmp/tmpgl_qnhvc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ayw6425.jl:16\nin expression starting at\
    \ /tmp/tmp5ayw6425.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz61ckffj.jl:16\nin expression starting at\
    \ /tmp/tmpz61ckffj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\t@test(candidate([1.0,\
    \ 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzsmv9d2.jl:16\nin expression starting at\
    \ /tmp/tmpmzsmv9d2.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean)\n    end\n\
    \    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit01y6sk.jl:16\nin expression starting at\
    \ /tmp/tmpit01y6sk.jl:16\n"
  stdout: ''
  timestamp: 1659822757
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ayw6425.jl:16\nin expression starting at\
    \ /tmp/tmp5ayw6425.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ - Part 2\nNow let's implement the Mean Absolute Deviation function using Julia's\
    \ built-in functionality.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd09g0uga.jl:16\nin expression starting at\
    \ /tmp/tmpd09g0uga.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpcup8wfh1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpcup8wfh1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpcup8wfh1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpcup8wfh1.jl:12\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcup8wfh1.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcup8wfh1.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for i in numbers\n        sum += abs(i - mean(i))\n   \
    \ end\n    return sum / length(numbers)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpka584cxq.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpka584cxq.jl:21\n  Test threw exception\n\
    \  Expression: candidate([1.0, 2.0]) == 0.5\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpka584cxq.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpka584cxq.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpka584cxq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpka584cxq.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0]) == 1.0\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpka584cxq.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpka584cxq.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpka584cxq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpka584cxq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2\n  UndefVarError: mean not defined\n\
    \  Stacktrace:\n   [1] mean_absolute_deviation(numbers::Vector{Float64})\n   \
    \  @ Main /tmp/tmpka584cxq.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpka584cxq.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpka584cxq.jl:20\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659822767
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ is a good metric to evaluate how well a model performs. In our case, we want\
    \ to know how well our model predicts the mean of the dataset. Let's see how it\
    \ performs on our dataset.\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpigby1i7i.jl:16\nin expression starting at\
    \ /tmp/tmpigby1i7i.jl:16\n"
  stdout: ''
  timestamp: 1659822766
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for n in numbers\n        sum += abs(n - mean(n))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<text>\nMean Absolute Deviation\
    \ with Stats\nusing Test\n\n@testset begin\n\ncandidate = mean_absolute_deviation;\n\
    \t@test(candidate([1.0, 2.0]) == 0.5)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0])\
    \ == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ayw6425.jl:16\nin expression starting at\
    \ /tmp/tmp5ayw6425.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n\
    \    around the mean of this dataset.\n    Mean Absolute Deviation is the average\
    \ absolute difference between each\n    element and a centerpoint (mean in this\
    \ case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\nfunction mean_absolute_deviation(numbers::Vector{Float64})::Float64\
    \ \n    sum = 0.0\n    for x in numbers\n        sum += abs(x - mean(x))\n   \
    \ end\n    return sum / length(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n</cell>\n<text>\nMean Absolute\
    \ Deviation is a good metric to evaluate a model's performance. \nIt can be calculated\
    \ using the Mean Absolute Deviation function.\nusing Test\n\n@testset begin\n\n\
    candidate = mean_absolute_deviation;\n\t@test(candidate([1.0, 2.0]) == 0.5)\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0]) == 1.0)\n\t@test(candidate([1.0, 2.0, 3.0,\
    \ 4.0, 5.0]) == 1.2)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzsqe62o.jl:16\nin expression starting at\
    \ /tmp/tmpqzsqe62o.jl:16\n"
  stdout: ''
  timestamp: 1659822766
