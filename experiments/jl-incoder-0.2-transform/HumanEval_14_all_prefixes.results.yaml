language: jl
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp04t4w8uc.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp04t4w8uc.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpx96a99qx.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpx96a99qx.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpx96a99qx.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx96a99qx.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx96a99qx.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpx96a99qx.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpx96a99qx.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx96a99qx.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx96a99qx.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpx96a99qx.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpx96a99qx.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx96a99qx.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx96a9"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2: Write a function that returns the longest prefix of a given string.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpg03ixn16.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg03ixn16.jl:8\n\
    in expression starting at /tmp/tmpg03ixn16.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_lengths(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_0ilcp7.jl:13\nin expression starting at\
    \ /tmp/tmps_0ilcp7.jl:13\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the string. For example, for the string \"abcde\", the\
    \ longest prefix is \"abc\", since \"abcde\" is a substring of \"abc\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4r94apzk.jl:13\nin expression starting at\
    \ /tmp/tmp4r94apzk.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_list_to_string(prefix_list::Vector{String})\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaubzso8o.jl:13\nin expression starting at\
    \ /tmp/tmpaubzso8o.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    \n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7chwpiv7.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp7chwpiv7.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmp7chwpiv7.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7chwpiv7.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7chwpiv7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7chwpiv7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmp7chwpiv7.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7chwpiv7.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7chwpiv7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7chwpiv7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp7chwpiv7.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7chwpiv7.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7chwpiv7.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    end\n    \n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdce\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefg\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgj\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgjh\")\n</\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0iwjkfw7.jl:15\nin expression starting at\
    \ /tmp/tmp0iwjkfw7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a palindrome. For example, if the input string is \"racecar\", the longest\
    \ palindrome prefix is \"race\".\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_29v4lyo.jl:13\nin expression starting at\
    \ /tmp/tmp_29v4lyo.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3iidkee5.jl:12\nin expression starting at\
    \ /tmp/tmp3iidkee5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefixes_of_string(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1umo38f1.jl:13\nin expression starting at\
    \ /tmp/tmp1umo38f1.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpsb431i4z.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpsb431i4z.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpsb431i4z.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsb431i4z.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsb431i4z.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsb431i4z.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpsb431i4z.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsb431i4z.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsb431i4z.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsb431i4z.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpsb431i4z.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsb431i4z.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsb431"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_uy8riu.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_uy8riu.jl:1\n\
    in expression starting at /tmp/tmpn_uy8riu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt9avbkw9.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpt9avbkw9.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpt9avbkw9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt9avbkw9.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt9avbkw9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpt9avbkw9.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpt9avbkw9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt9avbkw9.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt9avbkw9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpt9avbkw9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpt9avbkw9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt9avbkw9.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt9avb"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    \n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the longest prefix that is a palindrome. For example, all_prefixes(\"abba\"\
    ) should return \"ab\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpdhu_suf7.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdhu_suf7.jl:10\n\
    in expression starting at /tmp/tmpdhu_suf7.jl:10\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + \nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz6j1jyp0.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz6j1jyp0.jl:1\n\
    in expression starting at /tmp/tmpz6j1jyp0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdcefg\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdcefghi\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdcefghi\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp2k_2f33u.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2k_2f33u.jl:8\n\
    in expression starting at /tmp/tmp2k_2f33u.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk48lg9zq.jl:1\nin expression starting at /tmp/tmpk48lg9zq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabacab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabacaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabacabac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabacabaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabacabacab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabacabacaba\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabacabacabac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabacabacabaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabacabacabacab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6vyl57fs.jl:13\nin expression starting at\
    \ /tmp/tmp6vyl57fs.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdlscbbr.jl:13\nin expression starting at\
    \ /tmp/tmpsdlscbbr.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = []\n    \n    for c in string\n        prefixes += all_prefixes(c)\n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpmcskag5r.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpmcskag5r.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpmcskag5r.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpmcskag5r.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmcskag5r.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmcskag5r.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpmcskag5r.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpmcskag5r.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpmcskag5r.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmcskag5r.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmcskag5r.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    prefix_count(string::String)::Int64\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbfbypz3.jl:12\nin expression starting at\
    \ /tmp/tmphbfbypz3.jl:12\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string\n\
    \    >>> longest_prefix(\"abc\")\n    \"abc\"\n    >>> longest_prefix(\"abcabc\"\
    )\n    \"abc\"\n    >>> longest_prefix(\"abcab\")\n    \"abc\"\n    >>> longest_prefix(\"\
    ab\")\n    \"ab\"\n    >>> longest_prefix(\"a\")\n    \"a\"\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5q10gm_g.jl:13\nin expression starting at\
    \ /tmp/tmp5q10gm_g.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8jhyl8jm.jl:10\nin expression starting at\
    \ /tmp/tmp8jhyl8jm.jl:10\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list ++ [string]\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    \n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string.\
    \ For example, for the string \"abc\", the longest prefix is \"abc\". For the\
    \ string \"abcabc\", the longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpioq__uwb.jl:13\nin expression starting at\
    \ /tmp/tmpioq__uwb.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the given string.\
    \ For example, all_prefixes(\"abc\") returns [\"a\", \"ab\", \"abc\"]\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5veli010.jl:12\nin expression starting at\
    \ /tmp/tmp5veli010.jl:12\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx107nfvy.jl:13\nin expression starting at\
    \ /tmp/tmpx107nfvy.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    \n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the longest prefix\
    \ of a given string. For example, for the string \"abc\", the longest prefix is\
    \ \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpgus6e2pt.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgus6e2pt.jl:10\n\
    in expression starting at /tmp/tmpgus6e2pt.jl:10\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n    end\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppk3jk3or.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3jk3or.jl:8\n\
    in expression starting at /tmp/tmppk3jk3or.jl:8\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ [string]\n    prefix_list\
    \ = prefix_list ++ [string[1:i] for i in length(string)]\n    prefix_list = prefix_list\
    \ ++ [string[i+1::] for i in length(string)]\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgktp_nr4.jl:9\nin expression starting at /tmp/tmpgktp_nr4.jl:9\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, for the input string \"\
    abcabc\", the longest prefix that is a substring of the input string is \"abc\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4xjhgrn7.jl:13\nin expression starting at\
    \ /tmp/tmp4xjhgrn7.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + prefixes(string)\n    prefix_list\
    \ = prefix_list + prefixes(string.reverse)\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string as input and returns the longest prefix that\
    \ is a substring of the input string. For example, if the input is \"abc\", the\
    \ longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8xqxxott.jl:11\nin expression starting at\
    \ /tmp/tmp8xqxxott.jl:11\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpustz0pyj.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpustz0pyj.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpustz0pyj.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpustz0pyj.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpustz0pyj.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpustz0pyj.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpustz0pyj.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpustz0pyj.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpustz0pyj.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpustz0pyj.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpustz0pyj.jl:16\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the longest prefix that\
    \ is a substring of the input string. For example, for the input string \"abc\"\
    \ the longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9to0vps.jl:12\nin expression starting at\
    \ /tmp/tmpv9to0vps.jl:12\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ [string[1:i] for i in length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in length(string)]\n  \
    \  return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5b8_03ah.jl:8\nin expression starting at /tmp/tmp5b8_03ah.jl:8\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp978w7enb.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp978w7enb.jl:1\n\
    in expression starting at /tmp/tmp978w7enb.jl:1\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ [string]\n    for i = 2:length(string)\n\
    \        prefix_list = prefix_list ++ [string[i-1:i]]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpi_akogrt.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpi_akogrt.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpi_akogrt.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi_akogrt.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi_akogrt.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi_akogrt.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: ++ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpi_akogrt.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi_akogrt.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi_akogrt.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpi_akogrt.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: ++ not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpi_akogrt.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi_akogrt.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi_akogrt.jl:17\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqn_5m7y3.jl:12\nin expression starting at\
    \ /tmp/tmpqn_5m7y3.jl:12\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for c in string\n        prefixes += all_prefixes(c)\n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise: Write a function that returns all suffixes from shortest to longest\
    \ of the input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"\
    ]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppnjfc3cr.jl:12\nin expression starting at\
    \ /tmp/tmppnjfc3cr.jl:12\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    prefix_sum(string::String)::String\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq46f96t_.jl:13\nin expression starting at\
    \ /tmp/tmpq46f96t_.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = []\n    \n    for c in string\n        prefixes += all_prefixes(c) \n    end\n\
    \    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpohsva3vh.jl:15\nin expression starting at\
    \ /tmp/tmpohsva3vh.jl:15\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpokjkrwcl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokjkrwcl.jl:1\n\
    in expression starting at /tmp/tmpokjkrwcl.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = []\n\
    \    for c in string\n        prefixes += all_prefixes(c)\n    end\n    prefixes\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpq373mtm2.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpq373mtm2.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpq373mtm2.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpq373mtm2.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq373mtm2.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq373mtm2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpq373mtm2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpq373mtm2.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpq373mtm2.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpq373mtm2.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpq373mtm2.jl:16\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string[1]\n    prefix_list[2] = string[2]\n\
    \    prefix_list[3] = string[3]\n    prefix_list[4] = string[4]\n    prefix_list[5]\
    \ = string[5]\n    prefix_list[6] = string[6]\n    prefix_list[7] = string[7]\n\
    \    prefix_list[8] = string[8]\n    prefix_list[9] = string[9]\n    prefix_list[10]\
    \ = string[10]\n    prefix_list[11] = string[11]\n    prefix_list[12] = string[12]\n\
    \    prefix_list[13] = string[13]\n    prefix_list[14] = string[14]\n    prefix_list[15]\
    \ = string[15]\n    prefix_list[16] = string[16]\n    prefix_list[17] = string[17]\n\
    \    prefix_list[18] = string[18]\n    prefix_list[19] = string[19]\n    prefix_list[20]\
    \ = string[20]\n    prefix_list[21] = string[21]\n    prefix_list[22] = string[22]\n\
    \    prefix_list[23] = string[23]\n    prefix_list[24] = string[24]\n    prefix_list[25]\
    \ = string[25]\n    prefix_list[26] = string[26]\n    prefix_list[27] = string[27]\n\
    \    prefix_list[28] = string[28]\n    prefix_list[29] = string[29]\n    prefix_list[30]\
    \ = string[30]\n    prefix_list[31] = string[31]\n    prefix_list[32] = string[32]\n\
    \    prefix_list[33] = string[33]\n    prefix_list[34] = string[34]\n    prefix_list[35]\
    \ = string[35]\n    prefix_list[36] = string[36]\n    prefix_list[37] = string[37]\n\
    \    prefix_list[38] = string[38]\n    prefix_list[39] = string[39]\n    prefix_list[40]\
    \ = string[40]\n    prefix_list[41] = string[41]\n    prefix_list[42] = string[42]\n\
    \    prefix_list[43] = string[43]\n    prefix_list[44] = string[44]\n    prefix_list[45]\
    \ = string[45]\n    prefix_list[46] = string[46]\n    prefix_list[47] = string[47]\n\
    \    prefix_list[48] = string[48]\n    prefix_list[49] = string[49]\n    prefix_list[50]\
    \ = string[50]\n    prefix_list[51] = string[51]\n    prefix_list[52] = string[52]\n\
    \    prefix_list[53] = string[53]\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0jufvtkk.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0jufvtkk.jl:1\n\
    in expression starting at /tmp/tmp0jufvtkk.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list.append(\"\")\n    for prefix in prefix_list\n\
    \        prefix_list.extend(prefixes_of_string(string))\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvvbw_ir2.jl:13\nin expression starting at\
    \ /tmp/tmpvvbw_ir2.jl:13\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    \n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyisbcos2.jl:16\nin expression starting at\
    \ /tmp/tmpyisbcos2.jl:16\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjradx_vz.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjradx_vz.jl:1\n\
    in expression starting at /tmp/tmpjradx_vz.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_counts(string::String)::Dict{String,\
    \ Int}\n    \n    Count number of occurrences of each prefix of a given string.\n\
    \    \n    >>> prefix_counts(\"abcabcbb\")\n    Dict(\"ab\" => 3, \"abc\" => 3,\
    \ \"b\" => 2, \"c\" => 2, \"bb\" => 2)\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwmbeb2f.jl:13\nin expression starting at\
    \ /tmp/tmpnwmbeb2f.jl:13\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a palindrome. For example, all_prefixes(\"abba\") should return \"ab\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpjh1xb7q1.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjh1xb7q1.jl:8\n\
    in expression starting at /tmp/tmpjh1xb7q1.jl:8\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_d2x880i.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp_d2x880i.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp_d2x880i.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d2x880i.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d2x880i.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_d2x880i.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp_d2x880i.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d2x880i.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d2x880i.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_d2x880i.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp_d2x880i.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d2x880i.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d2x880i.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbcadef\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefgh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghij\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijk\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijkl\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadefghijklm\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefghijklmn\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbcadefghijklmn\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbcadefghijklmn\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbcadefghijklmn\")\n</cell\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vxt69ec.jl:12\nin expression starting at\
    \ /tmp/tmp0vxt69ec.jl:12\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    \n    for c in string\n        prefixes += all_prefixes(c) \n    end\n  \
    \  \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpapd9v8dq.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpapd9v8dq.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpapd9v8dq.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpapd9v8dq.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpapd9v8dq.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpapd9v8dq.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpapd9v8dq.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpapd9v8dq.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpapd9v8dq.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpapd9v8dq.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpapd9v8dq.jl:18\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of words in the string. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string. \nWrite a function that takes a string and\
    \ returns the number of characters in the string divided by the number of words\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string divided by the number of sentences in the string.\
    \ \nWrite a function that takes a string and returns the number of characters\
    \ in the string divided by the number of words in the string divided by the number\
    \ of sentences in the string. \nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr0ftfu3e.jl:13\nin expression starting at\
    \ /tmp/tmpr0ftfu3e.jl:13\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: -1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_uy8riu.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_uy8riu.jl:1\n\
    in expression starting at /tmp/tmpn_uy8riu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qt2d8ao.jl:10\nin expression starting at\
    \ /tmp/tmp2qt2d8ao.jl:10\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n    end\n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpy30jo66c.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy30jo66c.jl:8\n\
    in expression starting at /tmp/tmpy30jo66c.jl:8\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp9e3_krn.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp9e3_krn.jl:1\n\
    in expression starting at /tmp/tmpp9e3_krn.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for i = 1:length(string)\n        prefixes +=\
    \ string[(i+1):end]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest prefix of a given string\n    >>> longest_prefix(\"abc\")\n    \"\
    a\"\n    >>> longest_prefix(\"abcab\")\n    \"abc\"\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvy0l7lk.jl:15\nin expression starting at\
    \ /tmp/tmpkvy0l7lk.jl:15\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbabab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbababaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbababaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbbaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbababaaabbbbbaaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbababaaabbbbbaaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbababaaabbbbbaaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbbaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbababaaabbbbbaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbab\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplu1314sb.jl:12\nin expression starting at\
    \ /tmp/tmplu1314sb.jl:12\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    \n    for i = length(string)..1 do\n        prefixes += string[i..i]\n  \
    \  end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzoxuyy7w.jl:8\nin expression starting at /tmp/tmpzoxuyy7w.jl:8\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    for i = 3:length(string)\n        prefix_list[i] = prefix_list[i-2] + string[i]\n\
    \    end\n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpph3kvz1r.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpph3kvz1r.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpph3kvz1r.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpph3kvz1r.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpph3kvz1r.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpph3kvz1r.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpph3kvz1r.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpph3kvz1r.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpph3kvz1r.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpph3kvz1r.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpph3kvz1r.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpph3kvz1r.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpph3kvz1r.jl:18\nTest Summary:\
    \ | Erro"
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for c in string\n        prefixes += all_prefixes(c) \n    end\n    return\
    \ prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp97s5jar_.jl:12\nin expression starting at\
    \ /tmp/tmp97s5jar_.jl:12\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_uy8riu.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_uy8riu.jl:1\n\
    in expression starting at /tmp/tmpn_uy8riu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(prefix_list)\n\
    \        prefix_list[i] = prefix_list[i-2] + prefix_list[i-1]\n    end\n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpy30jo66c.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy30jo66c.jl:8\n\
    in expression starting at /tmp/tmpy30jo66c.jl:8\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the longest prefix that is a substring of the input string. For example, if\
    \ the input string is \"abcde\", the longest prefix that is a substring of the\
    \ input string is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazsegq1z.jl:11\nin expression starting at\
    \ /tmp/tmpazsegq1z.jl:11\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   prefix_count(string::String)::Int64\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt32g4m7f.jl:12\nin expression starting at\
    \ /tmp/tmpt32g4m7f.jl:12\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = []\n    \n    for c in string\n        prefixes += all_prefixes(c)\n    end\n\
    \    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabba\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacabbacacaba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacabbacacabba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacabbacacabbac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacabbacacabbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabbacacabbacaca\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacabba\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wxm3_0s.jl:15\nin expression starting at\
    \ /tmp/tmp1wxm3_0s.jl:15\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string[1]\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1y2g6ycu.jl:14\nin expression starting at\
    \ /tmp/tmp1y2g6ycu.jl:14\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ggsspv4.jl:13\nin expression starting at\
    \ /tmp/tmp2ggsspv4.jl:13\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp918zla_v.jl:13\nin expression starting at\
    \ /tmp/tmp918zla_v.jl:13\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes in a string and returns the longest prefix that is\
    \ a palindrome. For example, for the string \"racecar\", the longest palindrome\
    \ would be \"racecar\". The function should return nothing if the input string\
    \ is not a palindrome.\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprtafnbtl.jl:9\nin expression\
    \ starting at /tmp/tmprtafnbtl.jl:9\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpg6cblvm2.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpg6cblvm2.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmpg6cblvm2.jl:7\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg6cblvm2.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg6cblvm2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpg6cblvm2.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmpg6cblvm2.jl:7\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg6cblvm2.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg6cblvm2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpg6cblvm2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpg6cblvm2.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg6cblvm2.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg6cblvm2.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_d2x880i.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp_d2x880i.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp_d2x880i.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d2x880i.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d2x880i.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_d2x880i.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp_d2x880i.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d2x880i.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d2x880i.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_d2x880i.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp_d2x880i.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d2x880i.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d2x880i.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpee_q9khn.jl:15\nin expression starting at\
    \ /tmp/tmpee_q9khn.jl:15\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpokjkrwcl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokjkrwcl.jl:1\n\
    in expression starting at /tmp/tmpokjkrwcl.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp9e3_krn.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpp9e3_krn.jl:1\n\
    in expression starting at /tmp/tmpp9e3_krn.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp04t4w8uc.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp04t4w8uc.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnl6_9s1j.jl:10\nin expression starting at\
    \ /tmp/tmpnl6_9s1j.jl:10\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccde\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdef\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefgh\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghij\"\
    )\n\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuc0dm2x9.jl:11\nin expression starting at\
    \ /tmp/tmpuc0dm2x9.jl:11\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0etco7q.jl:13\nin expression starting at\
    \ /tmp/tmpx0etco7q.jl:13\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6gjhyl2.jl:12\nin expression starting at\
    \ /tmp/tmpo6gjhyl2.jl:12\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string[1]\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52et9p37.jl:14\nin expression starting at\
    \ /tmp/tmp52et9p37.jl:14\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the longest prefix\
    \ that is a palindrome. For example, all_palindromes(\"abba\") should return \"\
    ab\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7s6eprj3.jl:13\nin expression starting at\
    \ /tmp/tmp7s6eprj3.jl:13\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3iidkee5.jl:12\nin expression starting at\
    \ /tmp/tmp3iidkee5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvfcmo9dj.jl:11\nin expression starting at\
    \ /tmp/tmpvfcmo9dj.jl:11\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ju9jg15.jl:13\nin expression starting at\
    \ /tmp/tmp7ju9jg15.jl:13\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the longest prefix of a given string. For example, for the string \"abc\", the\
    \ longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jhno8no.jl:12\nin expression starting at\
    \ /tmp/tmp6jhno8no.jl:12\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ij4uc37.jl:13\nin expression starting at\
    \ /tmp/tmp4ij4uc37.jl:13\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for c in string\n        prefixes += all_prefixes(c)\n    end\n    prefixes\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    prefixes_count(string::String)::Int64\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwee2cqxl.jl:12\nin expression starting at\
    \ /tmp/tmpwee2cqxl.jl:12\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list.append(\"\")\n    for prefix in prefix_list\n\
    \        prefix_list.append(prefix[1:end-1] + prefix)\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    prefix_list_to_string(prefix_list::Vector{String})\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1d7ff4ot.jl:13\nin expression starting at\
    \ /tmp/tmp1d7ff4ot.jl:13\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7y8vhzg.jl:13\nin expression starting at\
    \ /tmp/tmpj7y8vhzg.jl:13\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ [string[1:i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmm9rtkjf.jl:8\nin expression starting at /tmp/tmpmm9rtkjf.jl:8\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_helper(string)\n    prefix_list = prefix_list +\
    \ all_prefixes_helper(string)\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    prefix_list = prefix_list + all_prefixes_helper(string)\n    prefix_list\
    \ = prefix_list + all_prefixes_\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmnn1lvct.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmnn1lvct.jl:1\n\
    in expression starting at /tmp/tmpmnn1lvct.jl:1\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end:])\n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm44n4f5u.jl:9\nin expression\
    \ starting at /tmp/tmpm44n4f5u.jl:9\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpue7_x47l.jl:13\nin expression starting at\
    \ /tmp/tmpue7_x47l.jl:13\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ [string[1:i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 2:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 3:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 4:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 5:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 6:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 7:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 8:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 9:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 10:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 11:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 12:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 13:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 14:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 15:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 16:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 17:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 18:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 19:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 20:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 21:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 22:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 23:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 24:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 25:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 26:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 27:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 28:length(string)]\n\
    \    prefix_list = prefix_list ++ \nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp33_z78_1.jl:8\nin expression starting at /tmp/tmp33_z78_1.jl:8\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_length(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwdx1j98m.jl:13\nin expression starting at\
    \ /tmp/tmpwdx1j98m.jl:13\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for s in string\n        prefix_list += all_prefixes(s)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the original string. For example,\
    \ all_prefixes(\"abc\") should return [\"a\", \"ab\", \"abc\"]\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvy8_mon8.jl:12\nin expression starting at\
    \ /tmp/tmpvy8_mon8.jl:12\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8t_tvell.jl:15\nin expression starting at\
    \ /tmp/tmp8t_tvell.jl:15\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\
    \ \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8c3r9u3g.jl:12\nin expression starting at\
    \ /tmp/tmp8c3r9u3g.jl:12\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp04t4w8uc.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp04t4w8uc.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefixes << string\n    \n    for i = length(string)-1 downto 1 do\n    \
    \    prefixes << string[i : end]\n    end\n    return prefixes\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzjcwgex6.jl:9 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzjcwgex6.jl:9\n\
    in expression starting at /tmp/tmpzjcwgex6.jl:9\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpokjkrwcl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokjkrwcl.jl:1\n\
    in expression starting at /tmp/tmpokjkrwcl.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpsbiql_o_.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsbiql_o_.jl:8\n\
    in expression starting at /tmp/tmpsbiql_o_.jl:8\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    prefix_count(string::String)\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp918zla_v.jl:13\nin expression starting at\
    \ /tmp/tmp918zla_v.jl:13\n"
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpe0lrm3vh.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe0lrm3vh.jl:8\n\
    in expression starting at /tmp/tmpe0lrm3vh.jl:8\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp04t4w8uc.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp04t4w8uc.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdlscbbr.jl:13\nin expression starting at\
    \ /tmp/tmpsdlscbbr.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdlscbbr.jl:13\nin expression starting at\
    \ /tmp/tmpsdlscbbr.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    \n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph9pvejvh.jl:15\nin expression starting at\
    \ /tmp/tmph9pvejvh.jl:15\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt9avbkw9.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpt9avbkw9.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpt9avbkw9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt9avbkw9.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt9avbkw9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpt9avbkw9.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpt9avbkw9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt9avbkw9.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt9avbkw9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpt9avbkw9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpt9avbkw9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt9avbkw9.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt9avb"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"]. Assume that all_prefixes\
    \ is defined above as all_prefixes.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgeisdxzq.jl:15\nin expression starting at\
    \ /tmp/tmpgeisdxzq.jl:15\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = []\n    for c in string\n        prefixes += all_prefixes(c) \n    end\n \
    \   prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7a9cowx.jl:13\nin expression starting at\
    \ /tmp/tmpu7a9cowx.jl:13\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_lengths(string::String)::Vector{Int}\n\
    \    \n    Get list of all prefix lengths from shortest to longest of the input\
    \ string\n    >>> prefix_lengths(\"abc\")\n    [3, 1, 2, 1]\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rxpbhxg.jl:13\nin expression starting at\
    \ /tmp/tmp0rxpbhxg.jl:13\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpe0lrm3vh.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe0lrm3vh.jl:8\n\
    in expression starting at /tmp/tmpe0lrm3vh.jl:8\n"
  stdout: ''
  timestamp: 1659823125
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zoek0wz.jl:10\nin expression starting at\
    \ /tmp/tmp1zoek0wz.jl:10\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpokjkrwcl.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpokjkrwcl.jl:1\n\
    in expression starting at /tmp/tmpokjkrwcl.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of_string(prefix)\n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp29889ema.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp29889ema.jl:1\n\
    in expression starting at /tmp/tmp29889ema.jl:1\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_d2x880i.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp_d2x880i.jl:15\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp_d2x880i.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d2x880i.jl:15 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d2x880i.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_d2x880i.jl:16\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp_d2x880i.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d2x880i.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d2x880i.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_d2x880i.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp_d2x880i.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_d2x880i.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_d2x880i.jl:14\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjradx_vz.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjradx_vz.jl:1\n\
    in expression starting at /tmp/tmpjradx_vz.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpg6cblvm2.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpg6cblvm2.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmpg6cblvm2.jl:7\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg6cblvm2.jl:17 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg6cblvm2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpg6cblvm2.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmpg6cblvm2.jl:7\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg6cblvm2.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg6cblvm2.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpg6cblvm2.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpg6cblvm2.jl:7\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpg6cblvm2.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpg6cblvm2.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0478lsq.jl:12\nin expression starting at\
    \ /tmp/tmpz0478lsq.jl:12\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a string where all characters are capitalized.\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9c9mzu8.jl:10\nin expression starting at\
    \ /tmp/tmpz9c9mzu8.jl:10\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccde\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdef\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbccdefg\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccdefgh\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghi\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdefghij\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefix\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1ljgukw.jl:12\nin expression starting at\
    \ /tmp/tmpg1ljgukw.jl:12\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\n\
    \    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbd\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbdab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbdaba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbdabac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbdabacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbdabacaba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacbdabacabac\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacbdabacabaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacbdabacabacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacbdabacabacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbdabacabacacab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbdabacabacacaba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacbdabacabacacabac\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplair08qc.jl:15\nin expression starting at\
    \ /tmp/tmplair08qc.jl:15\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdlscbbr.jl:13\nin expression starting at\
    \ /tmp/tmpsdlscbbr.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3: Write a recursive function\
    \ all_prefixes_iter that returns all prefixes from shortest to longest of the\
    \ input string\n    >>> all_prefixes_iter(\"abc\")\n    [\"a\", \"ab\", \"abc\"\
    ]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk_wzhytv.jl:12\nin expression starting at\
    \ /tmp/tmpk_wzhytv.jl:12\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\")\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabcdef\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcdefghijklmnopqrstuvwxyz\")\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgx8750id.jl:13\nin expression starting at\
    \ /tmp/tmpgx8750id.jl:13\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjradx_vz.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjradx_vz.jl:1\n\
    in expression starting at /tmp/tmpjradx_vz.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string\nHint: use the function length\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqdy921i4.jl:13\nin expression starting at\
    \ /tmp/tmpqdy921i4.jl:13\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"a\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"a\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1274w9l.jl:12\nin expression starting at\
    \ /tmp/tmps1274w9l.jl:12\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list ++ all_prefix\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqtg1o8cj.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqtg1o8cj.jl:1\n\
    in expression starting at /tmp/tmpqtg1o8cj.jl:1\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = []\n    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0apv9wfk.jl:15\nin expression starting at\
    \ /tmp/tmp0apv9wfk.jl:15\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes_helper(string)\n\
    \    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qt2d8ao.jl:10\nin expression starting at\
    \ /tmp/tmp2qt2d8ao.jl:10\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpebvld3uc.jl:13\nin expression starting at\
    \ /tmp/tmpebvld3uc.jl:13\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\
    \ \n    end\n    prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp_s67axv5.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp_s67axv5.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmp_s67axv5.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmp_s67axv5.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_s67axv5.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_s67axv5.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp_s67axv5.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmp_s67axv5.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp_s67axv5.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_s67axv5.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_s67axv5.jl:16\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659823129
- exit_code: -1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are uppercase letters.\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are lowercase\
    \ letters.\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are digits or are letters.\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7a9ins5t.jl:13\nin expression starting at\
    \ /tmp/tmp7a9ins5t.jl:13\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns a list of all suffixes from shortest to longest of the\
    \ input string\n    >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgg43au6c.jl:10\nin expression starting at\
    \ /tmp/tmpgg43au6c.jl:10\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a palindrome. For example, all_prefixes(\"abba\") returns \"ab\".\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6ezfufo.jl:13\nin expression starting at\
    \ /tmp/tmpw6ezfufo.jl:13\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for s in string\n        prefix_list += all_prefixes(s)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ if the input string is \"abc\", the longest prefix that is a substring of the\
    \ input string is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps3bov882.jl:12\nin expression starting at\
    \ /tmp/tmps3bov882.jl:12\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\
    \ + [c]\n    end\n    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpgqq8ue_j.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpgqq8ue_j.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpgqq8ue_j.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpgqq8ue_j.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgqq8ue_j.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgqq8ue_j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgqq8ue_j.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpgqq8ue_j.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpgqq8ue_j.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgqq8ue_j.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgqq8ue_j.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+25:end+26])\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8w81m367.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8w81m367.jl:1\n\
    in expression starting at /tmp/tmp8w81m367.jl:1\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest prefix of a given string.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqex0gmvj.jl:13\nin expression starting at\
    \ /tmp/tmpqex0gmvj.jl:13\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjradx_vz.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjradx_vz.jl:1\n\
    in expression starting at /tmp/tmpjradx_vz.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ [string[1:i] for i in 1:length(string)]\n\
    \    prefix_list = prefix_list ++ [string[i+1::] for i in 1:length(string)]\n\
    \    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph5462upo.jl:8\nin expression starting at /tmp/tmph5462upo.jl:8\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    \n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpk1wxbxko.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk1wxbxko.jl:10\n\
    in expression starting at /tmp/tmpk1wxbxko.jl:10\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefix_length = 0\n    for character in string\n        if character == prefixes[prefix_length]\n\
    \            prefix_length += 1\n        else\n            prefix_length = 0\n\
    \            prefixes << character\n        end\n    end\n    return prefixes\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_eaaos_.jl:18\nin expression starting at\
    \ /tmp/tmpy_eaaos_.jl:18\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = []\n    \n    for c in string\n        prefixes += all_prefixes(c) \n    end\n\
    \    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpcgm6k1wh.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpcgm6k1wh.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  MethodError: no method matching all_prefixes(::Char)\n\
    \  Closest candidates are:\n    all_prefixes(!Matched::String) at /tmp/tmpcgm6k1wh.jl:5\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmpcgm6k1wh.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcgm6k1wh.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcgm6k1wh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpcgm6k1wh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  MethodError: no method matching\
    \ all_prefixes(::Char)\n  Closest candidates are:\n    all_prefixes(!Matched::String)\
    \ at /tmp/tmpcgm6k1wh.jl:5\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpcgm6k1wh.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpcgm6k1wh.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcgm6k1wh.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ [string]\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[1:end])\n    return prefix_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmplngw8u1l.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmplngw8u1l.jl:16\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: ++ not\
    \ defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmplngw8u1l.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplngw8u1l.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplngw8u1l.jl:15\ntest set:\
    \ Error During Test at /tmp/tmplngw8u1l.jl:17\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: ++ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmplngw8u1l.jl:7\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplngw8u1l.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplngw8u1l.jl:15\ntest set:\
    \ Error During Test at /tmp/tmplngw8u1l.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: ++ not defined\n\
    \  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main /tmp/tmplngw8u1l.jl:7\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplngw8u1l.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplngw8u1l.jl:15\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjradx_vz.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjradx_vz.jl:1\n\
    in expression starting at /tmp/tmpjradx_vz.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_counts(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3y_upt3j.jl:13\nin expression starting at\
    \ /tmp/tmp3y_upt3j.jl:13\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+25:end+26])\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8w81m367.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8w81m367.jl:1\n\
    in expression starting at /tmp/tmp8w81m367.jl:1\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.0>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjt5m5r09.jl:12\nin expression starting at\
    \ /tmp/tmpjt5m5r09.jl:12\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list.append(\"\")\n    for prefix in prefix_list\n\
    \        prefix_list.append(prefix[1:end-1] + prefix)\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03i_s5ld.jl:13\nin expression starting at\
    \ /tmp/tmp03i_s5ld.jl:13\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    prefix_length(prefix::String)::Int\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9hav2xb2.jl:13\nin expression starting at\
    \ /tmp/tmp9hav2xb2.jl:13\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3iidkee5.jl:12\nin expression starting at\
    \ /tmp/tmp3iidkee5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns a list of\
    \ all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"\
    abc\")\n    [\"b\", \"bc\", \"c\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0c61su7p.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0c61su7p.jl:8\n\
    in expression starting at /tmp/tmp0c61su7p.jl:8\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string[1:end-1]\n\
    \    prefix_list[3] = string[2:end]\n    prefix_list[4] = string[3:end]\n    prefix_list[5]\
    \ = string[4:end]\n    prefix_list[6] = string[5:end]\n    prefix_list[7] = string[6:end]\n\
    \    prefix_list[8] = string[7:end]\n    prefix_list[9] = string[8:end]\n    prefix_list[10]\
    \ = string[9:end]\n    prefix_list[11] = string[10:end]\n    prefix_list[12] =\
    \ string[11:end]\n    prefix_list[13] = string[12:end]\n    prefix_list[14] =\
    \ string[13:end]\n    prefix_list[15] = string[14:end]\n    prefix_list[16] =\
    \ string[15:end]\n    prefix_list[17] = string[16:end]\n    prefix_list[18] =\
    \ string[17:end]\n    prefix_list[19] = string[18:end]\n    prefix_list[20] =\
    \ string[19:end]\n    prefix_list[21] = string[20:end]\n    prefix_list[22] =\
    \ string[21:end]\n    prefix_list[23] = string[22:end]\n    prefix_list[24] =\
    \ string[23:end]\n    prefix_list[25] = string[24:end]\n    prefix_list[26] =\
    \ string[25:end]\n    prefix_list[27] = string[26:end]\n    prefix_list[28] =\
    \ string[27:end]\n    prefix_list[29] = string[28:end]\n    prefix_list[30] =\
    \ string[29:end]\n    prefix_list[31] = string[30:end]\n    prefix_list[32] =\
    \ string[31:end]\n    prefix_list[33] = string[32:end]\n    prefix_list[34] =\
    \ string[33:end]\n    prefix_list[35] = string[34:end]\n    prefix_list[36] =\
    \ string[35:end]\n    prefix_list[37] = string[36:end]\n    prefix_list[38] =\
    \ string[37:end]\n    prefix_list[39] = string[38:end]\n    prefix_list[40] =\
    \ string[39:end]\n    prefix_list[41] = string[40:end]\n    prefix_list[42] =\
    \ string[41:end]\n    prefix_list[43] = string[42:end]\n    prefix_list[44] =\
    \ string[43:end]\n    prefix_list[45] = string[44:end]\n    prefix_list[46] =\
    \ string[45:end]\n    prefix_list[47] = string[46:end]\n    prefix_list[48] =\
    \ string[47:end]\n    prefix_list[49] = string[48:end]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbzsu3p_q.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbzsu3p_q.jl:1\n\
    in expression starting at /tmp/tmpbzsu3p_q.jl:1\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ggsspv4.jl:13\nin expression starting at\
    \ /tmp/tmp2ggsspv4.jl:13\n"
  stdout: ''
  timestamp: 1659823122
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.3>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example \"abcabc\" should return\
    \ [('a', 3), ('b', 3), ('c', 3)]\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp3ihb7tpz.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ihb7tpz.jl:8\n\
    in expression starting at /tmp/tmp3ihb7tpz.jl:8\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    prefix_list[4] = string\n    prefix_list[5]\
    \ = string\n    prefix_list[6] = string\n    prefix_list[7] = string\n    prefix_list[8]\
    \ = string\n    prefix_list[9] = string\n    prefix_list[10] = string\n    prefix_list[11]\
    \ = string\n    prefix_list[12] = string\n    prefix_list[13] = string\n    prefix_list[14]\
    \ = string\n    prefix_list[15] = string\n    prefix_list[16] = string\n    prefix_list[17]\
    \ = string\n    prefix_list[18] = string\n    prefix_list[19] = string\n    prefix_list[20]\
    \ = string\n    prefix_list[21] = string\n    prefix_list[22] = string\n    prefix_list[23]\
    \ = string\n    prefix_list[24] = string\n    prefix_list[25] = string\n    prefix_list[26]\
    \ = string\n    prefix_list[27] = string\n    prefix_list[28] = string\n    prefix_list[29]\
    \ = string\n    prefix_list[30] = string\n    prefix_list[31] = string\n    prefix_list[32]\
    \ = string\n    prefix_list[33] = string\n    prefix_list[34] = string\n    prefix_list[35]\
    \ = string\n    prefix_list[36] = string\n    prefix_list[37] = string\n    prefix_list[38]\
    \ = string\n    prefix_list[39] = string\n    prefix_list[40] = string\n    prefix_list[41]\
    \ = string\n    prefix_list[42] = string\n    prefix_list[43] = string\n    prefix_list[44]\
    \ = string\n    prefix_list[45] = string\n    prefix_list[46] = string\n    prefix_list[47]\
    \ = string\n    prefix_list[48] = string\n    prefix_list[49] = string\n    prefix_list[50]\
    \ = string\n    prefix_list[51] = string\n    prefix_list[52] = string\n    prefix_list[53]\
    \ = string\n    prefix_list[54] = string\n    prefix_list[55] = string\n    prefix_list[56]\
    \ = string\n    prefix_list[57] = string\n    prefix_list[58] = string\n    prefix_list[59]\
    \ = string\n    prefix_list[60] = string\n    prefix_list[61] = string\n    prefix_list[62]\
    \ = string\n    prefix_list[63] = string\n    prefix_list[64] = string\n    prefix_list[65]\
    \ = string\n    prefix_list[66] = string\n    prefix_list[67] = string\n    prefix_list[68]\
    \ = string\n    prefix_list[69] = string\n    prefix_list[70] = string\n    prefix_list[71]\
    \ = string\n    prefix_list[72] = string\n    prefix_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjradx_vz.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjradx_vz.jl:1\n\
    in expression starting at /tmp/tmpjradx_vz.jl:1\n"
  stdout: ''
  timestamp: 1659823121
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(string[1:end-1])\
    \ + [c]\n    end\n    \n    return prefixes\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmp38mb6cqy.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp38mb6cqy.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"\
    asdfg\", \"asdfgh\"]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2] promote_shape\n\
    \     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{String}, Bs::Vector{Char})\n\
    \     @ Base ./arraymath.jl:45\n   [4] all_prefixes(string::String) (repeats 6\
    \ times)\n     @ Main /tmp/tmp38mb6cqy.jl:10\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp38mb6cqy.jl:21 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp38mb6cqy.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp38mb6cqy.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  DimensionMismatch(\"dimensions\
    \ must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),), mismatch\
    \ at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{String},\
    \ Bs::Vector{Char})\n     @ Base ./arraymath.jl:45\n   [4] all_prefixes(string::String)\
    \ (repeats 3 times)\n     @ Main /tmp/tmp38mb6cqy.jl:10\n   [5] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [6] macro expansion\n     @ /tmp/tmp38mb6cqy.jl:22 [inlined]\n   [7] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp38mb6cqy.jl:19\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list += all_prefixes(c)\
    \ + [c]\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaaac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaaacbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2weliph.jl:12\nin expression starting at\
    \ /tmp/tmpj2weliph.jl:12\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, for the input string \"abcabc\", the longest prefix is \"abc\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwtfwbemp.jl:12\nin expression starting at\
    \ /tmp/tmpwtfwbemp.jl:12\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for s in string\n        prefixes += all_prefixes(s)\n    end\n    return\
    \ prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the longest\
    \ prefix that is a substring of the input string. For example, if the input string\
    \ is \"abcde\", the longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9qrhsdf.jl:12\nin expression starting at\
    \ /tmp/tmpn9qrhsdf.jl:12\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    \n    return prefix_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp83ug7ds9.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp83ug7ds9.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmp83ug7ds9.jl:9\n   [3]\
    \ macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp83ug7ds9.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp83ug7ds9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp83ug7ds9.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmp83ug7ds9.jl:9\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp83ug7ds9.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp83ug7ds9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp83ug7ds9.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp83ug7ds9.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp83ug7ds9.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp83ug7ds9.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for c in string\n        prefixes += all_prefixes(c)\
    \ + [c]\n    end\n    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, all_prefixes(\"abcabc\") should return [\"abc\"].\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnja23tzw.jl:15\nin expression starting at\
    \ /tmp/tmpnja23tzw.jl:15\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for c in string\n        prefix_list = prefix_list + all_prefixes(c)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbac\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbaca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaab\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccc\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccca\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcccaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbcccaabb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbcccaabbbc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgt_40nhc.jl:12\nin expression starting at\
    \ /tmp/tmpgt_40nhc.jl:12\n"
  stdout: ''
  timestamp: 1659823128
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string[1]\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the input string. For example, all_prefixes(\"abcabc\"\
    ) should return [\"abc\"].\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpc7rwsp7y.jl:9 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc7rwsp7y.jl:9\n\
    in expression starting at /tmp/tmpc7rwsp7y.jl:9\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for s in string\n        prefix_list += all_prefixes(s)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"ab\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"aba\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abba\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbb\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbbbbbbbbbbbbbbbbb\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbbbbbbbbbbbbbbbbbbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckkx5_i2.jl:12\nin expression starting at\
    \ /tmp/tmpckkx5_i2.jl:12\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    prefix_list = prefix_list + all_prefixes(string[2:end])\
    \ + [string[2:end]]\n    prefix_list = prefix_list + all_prefixes(string[3:end])\
    \ + [string[3:end]]\n    prefix_list = prefix_list + all_prefixes(string[4:end])\
    \ + [string[4:end]]\n    prefix_list = prefix_list + all_prefixes(string[5:end])\
    \ + [string[5:end]]\n    prefix_list = prefix_list + all_prefixes(string[6:end])\
    \ + [string[6:end]]\n    prefix_list = prefix_list + all_prefixes(string[7:end])\
    \ + [string[7:end]]\n    prefix_list = prefix_list + all_prefixes(string[8:end])\
    \ + [string[8:end]]\n    prefix_list = prefix_list + all_prefixes(string[9:end])\
    \ + [string[9:end]]\n    prefix_list = prefix_list + all_prefixes(string[10:end])\
    \ + [string[10:end]]\n    prefix_list = prefix_list + all_prefixes(string[11:end])\
    \ + [string[11:end]]\n    prefix_list = prefix_list + all_prefixes(string[12:end])\
    \ + [string[12:end]]\n    prefix_list = prefix_list + all_prefixes(string[13:end])\
    \ + [string[13:end]]\n    prefix_list = prefix_list + all_prefixes(string[14:end])\
    \ + [string[14:end]]\n    prefix_list = prefix_list + all_prefixes(string[15:end])\
    \ + [string[15:end]]\n    prefix_list = prefix_list + all_prefixes(string[16:end])\
    \ + [string[16:end]]\n    prefix_list = prefix_list + all_prefixes(string[17:end])\
    \ + [string[17:end]]\n    prefix_list = prefix_list + all_prefixes(string[18:end])\
    \ + [string[18:end]]\n    prefix_list = prefix_list + all_prefixes(string[19:end])\
    \ + [string[19:end]]\n    prefix_list = prefix_list + all_prefixes(string[20:end])\
    \ + [string[20:end]]\n    prefix_list = prefix_list + all_prefixes(string[21:end])\
    \ + [string[21:end]]\n    prefix_list = prefix_list + all_prefixes(string[22:end])\
    \ + [string[22:end]]\n    prefix_list = prefix_list + all_prefixes(string[23:end])\
    \ + [string[23:end]]\n    prefix_list = prefix_list + all_prefixes(string[24:end])\
    \ + [string[24:\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4u993x2x.jl:32\nin expression starting at\
    \ /tmp/tmp4u993x2x.jl:32\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list + all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list + all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list + all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list + all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list + all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list + all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list + all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[end+25:end+26])\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8w81m367.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8w81m367.jl:1\n\
    in expression starting at /tmp/tmp8w81m367.jl:1\n"
  stdout: ''
  timestamp: 1659823127
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the longest prefix of a given string. For example, for the string \"abc\" the\
    \ longest prefix is \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9a0arb77.jl:10\nin expression starting at\
    \ /tmp/tmp9a0arb77.jl:10\n"
  stdout: ''
  timestamp: 1659823129
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the longest prefix that is a\
    \ substring of the input string. For example, all_prefixes(\"abcabc\") should\
    \ return \"abc\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk0jgp92p.jl:9\nin expression\
    \ starting at /tmp/tmpk0jgp92p.jl:9\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefixes\
    \ = Vector{String}()\n    \n    for s in string\n        prefixes << s\n    end\n\
    \    \n    return prefixes\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abc\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the longest prefix that is a substring of the input string. For example,\
    \ all_prefixes(\"abcabc\") should return \"abc\".\nusing Test\n\n@testset begin\n\
    \ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1lmzavb.jl:15\nin expression starting at\
    \ /tmp/tmph1lmzavb.jl:15\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for s in string\n        prefix_list += all_prefixes(s)\n\
    \    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2h0k_zw7.jl:12\nin expression starting at\
    \ /tmp/tmp2h0k_zw7.jl:12\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\");\n</cell>\n\
    <code language=julia-1.5>\n@time all_prefixes(\"abcabc\");\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcabc\");\n</cell>\n<code language=julia-1.5>\n@time\
    \ all_prefixes(\"abcabcabcabc\");\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcabcabcabc\");\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcabcabcabcabc\");\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcabcabcabcabcabc\");\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcabcabcabcabcabcabc\");\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcabcabcabcabcabcabcabc\");\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"\
    abcabcabcabcabcabcabcabcabcabc\");\n</cell>\n<code language=julia-1.5>\n@time\
    \ all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabc\");\n</cell>\n<code language=julia-1.5>\n\
    @time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabc\");\n</cell>\n<code\
    \ language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\"\
    );\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcab\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4gw9dv44.jl:13\nin expression starting at\
    \ /tmp/tmp4gw9dv44.jl:13\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdlscbbr.jl:13\nin expression starting at\
    \ /tmp/tmpsdlscbbr.jl:13\n"
  stdout: ''
  timestamp: 1659823119
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefixes_from_longest(string::String)::Vector{String}\n\
    \    \n    Find all prefixes from longest to shortest of the input string\n  \
    \  >>> prefixes_from_longest(\"abc\")\n    [\"abc\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0wrjdyt.jl:13\nin expression starting at\
    \ /tmp/tmph0wrjdyt.jl:13\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end:])\n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"end:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpma8pch2x.jl:9\nin expression\
    \ starting at /tmp/tmpma8pch2x.jl:9\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.3>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string\nHint: Use length()\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0q57c0o1.jl:12\nin expression starting at\
    \ /tmp/tmp0q57c0o1.jl:12\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    prefix_list[3] = string\n    \n    for i = 4 to length(string)\n        prefix_list[i]\
    \ = string[i-4:i]\n    end\n    \n    return prefix_list\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpk7huup7k.jl:12 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk7huup7k.jl:12\n\
    in expression starting at /tmp/tmpk7huup7k.jl:12\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1g0ioxu_.jl:13\nin expression starting at\
    \ /tmp/tmp1g0ioxu_.jl:13\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_uy8riu.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_uy8riu.jl:1\n\
    in expression starting at /tmp/tmpn_uy8riu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    prefix_list = prefix_list + all_prefixes(string[2:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[3:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[4:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[5:end])\n    prefix_list = prefix_list + all_prefixes(string[6:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[7:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[8:end])\n    prefix_list = prefix_list +\
    \ all_prefixes(string[9:end])\n    prefix_list = prefix_list + all_prefixes(string[10:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[11:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[12:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[13:end])\n    prefix_list = prefix_list + all_prefixes(string[14:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[15:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[16:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[17:end])\n    prefix_list = prefix_list + all_prefixes(string[18:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[19:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[20:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[21:end])\n    prefix_list = prefix_list + all_prefixes(string[22:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[23:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[24:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[25:end])\n    prefix_list = prefix_list + all_prefixes(string[26:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[27:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[28:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(string[29:end])\n    prefix_list = prefix_list + all_prefixes(string[31:end])\n\
    \    prefix_list = prefix_list + all_prefixes(string[32:end])\n    prefix_list\
    \ = prefix_list + all_prefixes(string[33:end])\n    prefix_list = prefix_list\
    \ + all_prefixes(\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykdk5cco.jl:43\nin expression starting at\
    \ /tmp/tmpykdk5cco.jl:43\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefixes_of_strings(string::String)::Vector{String}\n\
    \    \n    Find all prefixes of string\n    \n    >>> prefixes_of_strings(\"abc\"\
    )\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t\
    @test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"\
    asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpk14x3pi6.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk14x3pi6.jl:8\n\
    in expression starting at /tmp/tmpk14x3pi6.jl:8\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.0>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the longest prefix that is a substring of the input string.\
    \ For example, if the input string is \"abc\", the longest prefix is \"abc\".\
    \ If the input string is \"abcabc\", the longest prefix is \"abc\".\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65ivsnfk.jl:12\nin expression starting at\
    \ /tmp/tmp65ivsnfk.jl:12\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    prefix_list[2] = string\n\
    \    for i = length(prefix_list) downto 2 do\n        prefix_list[i] = prefix_list[i-2]\
    \ + prefix_list[i-1]\n    end\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpveo7e6ww.jl:9 expected \"\
    end\", got \"2\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpveo7e6ww.jl:9\n\
    in expression starting at /tmp/tmpveo7e6ww.jl:9\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ + [string[1:end-1]]\n    return prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwti1x4w5.jl:10\nin expression starting at\
    \ /tmp/tmpwti1x4w5.jl:10\n"
  stdout: ''
  timestamp: 1659823130
- exit_code: -1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp04t4w8uc.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp04t4w8uc.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ij4uc37.jl:13\nin expression starting at\
    \ /tmp/tmp4ij4uc37.jl:13\n"
  stdout: ''
  timestamp: 1659823124
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n@time all_prefixes(\"abc\");\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in that string that are uppercase letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8iye2zz.jl:13\nin expression starting at\
    \ /tmp/tmps8iye2zz.jl:13\n"
  stdout: ''
  timestamp: 1659823131
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9gxycx6m.jl:13\nin expression starting at\
    \ /tmp/tmp9gxycx6m.jl:13\n"
  stdout: ''
  timestamp: 1659823131
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    prefixes << string\n    prefixes << string[1:end]\n    prefixes << string[2:end]\n\
    \    prefixes << string[3:end]\n    prefixes << string[4:end]\n    prefixes <<\
    \ string[5:end]\n    prefixes << string[6:end]\n    prefixes << string[7:end]\n\
    \    prefixes << string[8:end]\n    prefixes << string[9:end]\n    prefixes <<\
    \ string[10:end]\n    prefixes << string[11:end]\n    prefixes << string[12:end]\n\
    \    prefixes << string[13:end]\n    prefixes << string[14:end]\n    prefixes\
    \ << string[15:end]\n    prefixes << string[16:end]\n    prefixes << string[17:end]\n\
    \    prefixes << string[18:end]\n    prefixes << string[19:end]\n    prefixes\
    \ << string[20:end]\n    prefixes << string[21:end]\n    prefixes << string[22:end]\n\
    \    prefixes << string[23:end]\n    prefixes << string[24:end]\n    prefixes\
    \ << string[25:end]\n    prefixes << string[26:end]\n    prefixes << string[27:end]\n\
    \    prefixes << string[28:end]\n    prefixes << string[29:end]\n    prefixes\
    \ << string[30:end]\n    prefixes << string[31:end]\n    prefixes << string[32:end]\n\
    \    prefixes << string[33:end]\n    prefixes << string[34:end]\n    prefixes\
    \ << string[35:end]\n    prefixes << string[36:end]\n    prefixes << string[37:end]\n\
    \    prefixes << string[38:end]\n    prefixes << string[39:end]\n    prefixes\
    \ << string[40:end]\n    prefixes << string[41:end]\n    prefixes << string[42:end]\n\
    \    prefixes << string[43:end]\n    prefixes << string[44:end]\n    prefixes\
    \ << string[45:end]\n    prefixes << string[46:end]\n    prefixes << string[47:end]\n\
    \    prefixes << string[48:end]\n    prefixes << string[49:end]\n    prefixes\
    \ << string[50:end]\n    prefixes << string[51:end]\n    prefixes << string[52:end]\n\
    \    prefixes << string[53:end]\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7xrh8km9.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7xrh8km9.jl:1\n\
    in expression starting at /tmp/tmp7xrh8km9.jl:1\n"
  stdout: ''
  timestamp: 1659823131
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<text>\nExercise 2: all_suffixes\nWrite a function\
    \ that returns all suffixes from shortest to longest of the input string\n   \
    \ >>> all_suffixes(\"abc\")\n    [\"b\", \"bc\", \"c\"]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6axjp09f.jl:12\nin expression starting at\
    \ /tmp/tmp6axjp09f.jl:12\n"
  stdout: ''
  timestamp: 1659823131
