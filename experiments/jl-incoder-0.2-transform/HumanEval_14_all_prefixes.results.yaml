language: jl
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = all_prefixes_helper(string, prefix_list)\n\
    \    \n    return prefix_list\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp04t4w8uc.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp04t4w8uc.jl:17\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:18\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  UndefVarError: all_prefixes_helper not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp04t4w8uc.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  UndefVarError: all_prefixes_helper\
    \ not defined\n  Stacktrace:\n   [1] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmp04t4w8uc.jl:8\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp04t4w8uc.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp04t4w8uc.jl:16\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i in 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpx96a99qx.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpx96a99qx.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpx96a99qx.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx96a99qx.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx96a99qx.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpx96a99qx.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpx96a99qx.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx96a99qx.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx96a99qx.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpx96a99qx.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpx96a99qx.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpx96a99qx.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpx96a9"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2: Write a function that returns the longest prefix of a given string.\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpg03ixn16.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg03ixn16.jl:8\n\
    in expression starting at /tmp/tmpg03ixn16.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_lengths(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_0ilcp7.jl:13\nin expression starting at\
    \ /tmp/tmps_0ilcp7.jl:13\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end-1])\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a substring of the string. For example, for the string \"abcde\", the\
    \ longest prefix is \"abc\", since \"abcde\" is a substring of \"abc\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\"\
    ) == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4r94apzk.jl:13\nin expression starting at\
    \ /tmp/tmp4r94apzk.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefix_list_to_string(prefix_list::Vector{String})\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaubzso8o.jl:13\nin expression starting at\
    \ /tmp/tmpaubzso8o.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefix\n    end\n    \n    return prefix_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp7chwpiv7.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp7chwpiv7.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  type String has no field\
    \ split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n  \
    \ [2] all_prefixes(string::String)\n     @ Main /tmp/tmp7chwpiv7.jl:9\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7chwpiv7.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7chwpiv7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7chwpiv7.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n     @\
    \ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main /tmp/tmp7chwpiv7.jl:9\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7chwpiv7.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7chwpiv7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7chwpiv7.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmp7chwpiv7.jl:9\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7chwpiv7.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7chwpiv7.jl:19\nTest Summary:\
    \ | Error  Total\ntest set      |     3      3\n"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    \n    for prefix in string.split(\"\")\n        prefix_list\
    \ += prefixes_of(prefix)\n    end\n    \n    return prefix_list\nend\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"ab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"aba\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abba\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbac\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacac\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacaca\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaa\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaa\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaab\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbb\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbc\")\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abbacacaaabbbcc\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"\
    abbacacaaabbbccd\")\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdc\"\
    )\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdce\")\n\
    </cell>\n<code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcef\")\n</cell>\n\
    <code language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefg\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgj\")\n</cell>\n<code\
    \ language=julia-1.5>\nall_prefixes(\"abbacacaaabbbccdcefgjh\")\n</\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0iwjkfw7.jl:15\nin expression starting at\
    \ /tmp/tmp0iwjkfw7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the longest prefix\
    \ that is a palindrome. For example, if the input string is \"racecar\", the longest\
    \ palindrome prefix is \"race\".\nusing Test\n\n@testset begin\n\ncandidate =\
    \ all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_29v4lyo.jl:13\nin expression starting at\
    \ /tmp/tmp_29v4lyo.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    for prefix in string.split(\"\")\n        prefix_list\
    \ += all_prefixes(prefix) \n    end\n    prefix_list\nend\n</cell>\n<code language=julia-1.5>\n\
    all_prefixes(\"abc\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3iidkee5.jl:12\nin expression starting at\
    \ /tmp/tmp3iidkee5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    prefixes_of_string(string::String)\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1umo38f1.jl:13\nin expression starting at\
    \ /tmp/tmp1umo38f1.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-1] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpsb431i4z.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpsb431i4z.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpsb431i4z.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsb431i4z.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsb431i4z.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsb431i4z.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpsb431i4z.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsb431i4z.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsb431i4z.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpsb431i4z.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpsb431i4z.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpsb431i4z.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpsb431"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list ++ all_prefixes(string[end-1:end])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+1:end+2])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+2:end+3])\n    prefix_list = prefix_list ++ all_prefixes(string[end+3:end+4])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+4:end+5])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+5:end+6])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+6:end+7])\n    prefix_list = prefix_list ++ all_prefixes(string[end+7:end+8])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+8:end+9])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+9:end+10])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+10:end+11])\n    prefix_list = prefix_list ++ all_prefixes(string[end+11:end+12])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+12:end+13])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+13:end+14])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+14:end+15])\n    prefix_list = prefix_list ++ all_prefixes(string[end+15:end+16])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+16:end+17])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+17:end+18])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+18:end+19])\n    prefix_list = prefix_list ++ all_prefixes(string[end+19:end+20])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+20:end+21])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+21:end+22])\n    prefix_list = prefix_list\
    \ ++ all_prefixes(string[end+22:end+23])\n    prefix_list = prefix_list ++ all_prefixes(string[end+23:end+24])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+24:end+25])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end+25:end+26])\n    prefix_\nusing Test\n\
    \n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_uy8riu.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_uy8riu.jl:1\n\
    in expression starting at /tmp/tmpn_uy8riu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2:length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    return prefix_list\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpt9avbkw9.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpt9avbkw9.jl:18\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n  BoundsError: attempt to\
    \ access 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n\
    \     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @\
    \ Main /tmp/tmpt9avbkw9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt9avbkw9.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt9avbkw9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpt9avbkw9.jl:19\n  Test threw exception\n  Expression:\
    \ candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"\
    ]\n  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n\
    \     @ Main /tmp/tmpt9avbkw9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt9avbkw9.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt9avbkw9.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpt9avbkw9.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]\n  BoundsError: attempt to access\
    \ 0-element Vector{String} at index [1]\n  Stacktrace:\n   [1] setindex!\n   \
    \  @ ./array.jl:903 [inlined]\n   [2] all_prefixes(string::String)\n     @ Main\
    \ /tmp/tmpt9avbkw9.jl:7\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpt9avbkw9.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpt9avb"
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list[1] = string\n    \n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    \n    return\
    \ prefix_list\nend\n</cell>\n<code language=julia-1.5>\nall_prefixes(\"abc\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the longest prefix that is a palindrome. For example, all_prefixes(\"abba\"\
    ) should return \"ab\".\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpdhu_suf7.jl:10 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdhu_suf7.jl:10\n\
    in expression starting at /tmp/tmpdhu_suf7.jl:10\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list = prefix_list ++ all_prefixes(string[1:end])\n\
    \    prefix_list = prefix_list ++ all_prefixes(string[end+1:end-1])\n    prefix_list\
    \ = prefix_list ++ all_prefixes(string[end-1:end])\n    return prefix_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + all_prefixes(string[1:end-1]) \n    prefix_list = prefix_list\
    \ + all_prefixes(string[end+1:end-1]) \n    prefix_list = prefix_list + all_prefixes(string[1:end-1])\
    \ \n    prefix_list = prefix_list + all_prefixes(string[end+1:end-1]) \n    prefix_list\
    \ = prefix_list + \nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz6j1jyp0.jl:5\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz6j1jyp0.jl:1\n\
    in expression starting at /tmp/tmpz6j1jyp0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    prefix_list =\
    \ Vector{String}()\n    prefix_list[1] = string\n    for i = 2 to length(string)\n\
    \        prefix_list[i] = prefix_list[i-2] + string[i]\n    end\n    prefix_list\n\
    end\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abc\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"aba\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abba\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbac\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbaca\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacac\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacaca\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaa\")\n\
    </cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaa\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaab\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbb\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbc\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbcc\")\n</cell>\n\
    <code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccd\")\n</cell>\n<code\
    \ language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdc\")\n</cell>\n<code language=julia-1.4>\n\
    all_prefixes(\"abbacacaaabbbccdce\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"\
    abbacacaaabbbccdcef\")\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdcefg\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdcefghi\"\
    )\n</cell>\n<code language=julia-1.4>\nall_prefixes(\"abbacacaaabbbccdcefghi\n\
    using Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"\
    asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\"\
    , \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp2k_2f33u.jl:8 expected \"\
    end\", got \"length\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2k_2f33u.jl:8\n\
    in expression starting at /tmp/tmp2k_2f33u.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \"\"\
    \"\nfunction all_prefixes(string::String)::Vector{String} \n    \n    prefix_list\
    \ = Vector{String}()\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string[1:i] for i in range(1,\
    \ length(string))]\n    prefix_list = prefix_list + [string\nusing Test\n\n@testset\
    \ begin\n\ncandidate = all_prefixes;\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\"\
    , \"asdfgh\"])\n\t@test(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk48lg9zq.jl:1\nin expression starting at /tmp/tmpk48lg9zq.jl:1\n"
  stdout: ''
