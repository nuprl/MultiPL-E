language: jl
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8511fqj.jl:17\nin expression starting at\
    \ /tmp/tmpj8511fqj.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3140ntpc.jl:18\nin expression starting at\
    \ /tmp/tmp3140ntpc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl00pql6g.jl:15\nin expression starting at\
    \ /tmp/tmpl00pql6g.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hzuk0yq.jl:17\nin expression starting at\
    \ /tmp/tmp_hzuk0yq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpepuuszw6.jl:18\nin expression starting at\
    \ /tmp/tmpepuuszw6.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = reverse(digits)\n\
    \        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnv2oqn45.jl:18\nin expression starting at\
    \ /tmp/tmpnv2oqn45.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    return join(reverse(digits[shift:end]))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n\
    @assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer. For example, length(123) should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj45wsbyz.jl:17\nin expression starting at\
    \ /tmp/tmpj45wsbyz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63d9erkj.jl:15\nin expression starting at\
    \ /tmp/tmp63d9erkj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkuynqub_.jl:18\nin expression starting at\
    \ /tmp/tmpkuynqub_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvz8prv3.jl:16\nin expression starting at\
    \ /tmp/tmphvz8prv3.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 3)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 5)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 10)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 12)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 16)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 17)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 19)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 23)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 24)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 25)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98lqdpsf.jl:17\nin expression starting at\
    \ /tmp/tmp98lqdpsf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(x, -shift)\n    else\n \
    \       digits = digits(x)\n        digits = digits[shift:end]\n        return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxf3sfitu.jl:12\nin expression starting at\
    \ /tmp/tmpxf3sfitu.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(digits, digits[shift+1:end])\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number of\
    \ digits in an integer. Test it on $12$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppq48s035.jl:16\nin expression starting at\
    \ /tmp/tmppq48s035.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5vykh52.jl:17\nin expression starting at\
    \ /tmp/tmpr5vykh52.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and $length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = reverse(digits)\n\
    \        return join(digits)\nend\n</cell>\n<text>\nThe function digits() returns\
    \ an array of digits of x, in reverse order.\nusing Test\n\n@testset begin\n\n\
    candidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo6nf44p1.jl:18\nin expression starting at\
    \ /tmp/tmpo6nf44p1.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwpd_7ru.jl:17\nin expression starting at\
    \ /tmp/tmpiwpd_7ru.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) - 1 \n        then return reverse(x)\n\
    \    else \n        digits = digits(x)\n        digits = digits[shift:end]\n \
    \       return reverse(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppcsvecy4.jl:11\nin expression starting at /tmp/tmppcsvecy4.jl:11\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3yne8ojd.jl:17\nin expression starting at\
    \ /tmp/tmp3yne8ojd.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and $length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjr7txny.jl:18\nin expression starting at\
    \ /tmp/tmppjr7txny.jl:18\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxh43gxo.jl:17\nin expression starting at\
    \ /tmp/tmpfxh43gxo.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. Test it on all\
    \ of the\n    integers from 0 to 20.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg36g76ej.jl:17\nin expression starting at\
    \ /tmp/tmpg36g76ej.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9dgqj2r.jl:17\nin expression starting at\
    \ /tmp/tmpn9dgqj2r.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq2ra1uc.jl:17\nin expression starting at\
    \ /tmp/tmpjq2ra1uc.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<text>\nThe function reverse(x) returns a string containing the characters\
    \ in reverse order. For example, \n    reverse(\"hello\") returns \"olleh\".\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ar90txq.jl:15\nin expression starting at\
    \ /tmp/tmp3ar90txq.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppdvnpcxw.jl:18\nin expression starting at\
    \ /tmp/tmppdvnpcxw.jl:18\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise: Circular\
    \ shift the digits of the integer x, shift the digits right by shift\n    and\
    \ return the result as a string.\n    If shift > number of digits, return digits\
    \ reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12,\
    \ 2)\n    \"12\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6csyhl3e.jl:17\nin expression starting at\
    \ /tmp/tmp6csyhl3e.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98vf4oum.jl:18\nin expression starting at\
    \ /tmp/tmp98vf4oum.jl:18\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnpmoxrl9.jl:17\nin expression starting at\
    \ /tmp/tmpnpmoxrl9.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 2)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(1234) = 4.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpidpb4g1t.jl:16\nin expression starting at\
    \ /tmp/tmpidpb4g1t.jl:16\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits[shift] = digits[shift] % 10\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wn7_58q.jl:17\nin expression starting at\
    \ /tmp/tmp8wn7_58q.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63d9erkj.jl:15\nin expression starting at\
    \ /tmp/tmp63d9erkj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2t0l3am_.jl:17\nin expression starting at\
    \ /tmp/tmp2t0l3am_.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nWrite\
    \ a function that returns the number of digits in an integer, rounded up to the\
    \ nearest integer.\nWrite a function that returns the number of digits in an integer,\
    \ rounded down to the nearest integer.\nWrite a function that returns the number\
    \ of digits in an integer, rounded up to the nearest integer, ignoring trailing\
    \ zeros.\nWrite a function that returns the number of digits in an integer, rounded\
    \ down to the nearest integer, ignoring trailing zeros.\nWrite a function that\
    \ returns the number of digits in an integer, rounded up to the nearest integer,\
    \ ignoring trailing zeros.\nWrite a function that returns the number of digits\
    \ in an integer, rounded down to the nearest integer, ignoring trailing zeros.\n\
    Write a function that returns the number of digits in an integer, rounded up to\
    \ the nearest integer, ignoring trailing zeros.\nWrite a function that returns\
    \ the number of digits in an integer, rounded down to the nearest integer, ignoring\
    \ trailing zeros.\nWrite a function that returns the number of digits in an integer,\
    \ rounded up to the nearest integer, ignoring trailing zeros.\nWrite a function\
    \ that returns the number of digits in an integer, rounded down to the nearest\
    \ integer, ignoring trailing zeros.\nWrite a function that returns the number\
    \ of digits in an integer, rounded up to the nearest integer, ignoring trailing\
    \ zeros.\nWrite a function that returns the number of digits in an integer, rounded\
    \ down to the nearest integer, ignoring trailing zeros.\nWrite a function that\
    \ returns the number of digits in an integer, rounded up to the nearest integer,\
    \ ignoring trailing zeros.\nWrite a function that returns the number of digits\
    \ in an integer, rounded down to the nearest integer, ignoring trailing zeros.\n\
    Write a function that returns the number of digits in an integer, rounded up to\
    \ the nearest integer, ignoring trailing zeros.\nWrite a function that returns\
    \ the number of digits in an integer, rounded down to the nearest integer, ignoring\
    \ trailing zeros.\nWrite a function that returns the number of digits in an integer,\
    \ rounded up to the nearest integer, ignoring trailing zeros.\nWrite a function\
    \ that returns the number of digits in an integer, rounded down to the nearest\
    \ integer, ignoring trailing zeros.\nWrite a function that returns the number\
    \ of digits in an integer, rounded up to the nearest integer, ignoring trailing\
    \ zeros.\nWrite a function that returns the number of digits in an integer, rounded\
    \ down to the nearest integer, ignoring trailing zeros.\nWrite a function that\
    \ returns the number of digits in an integer, rounded up to the nearest integer,\
    \ ignoring trailing zeros.\nWrite a function that returns the number of digits\
    \ in an integer, rounded down to the nearest integer, ignoring trailing zeros.\n\
    Write a function that returns the number of digits in an integer, rounded up to\
    \ the nearest integer, ignoring trailing zeros.\nWrite a function that returns\
    \ the number of digits in an integer, rounded down to the nearest integer, ignoring\
    \ trailing zeros.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqrc18a2.jl:15\nin expression starting at\
    \ /tmp/tmpiqrc18a2.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_h03fesp.jl:15\nin expression starting at\
    \ /tmp/tmp_h03fesp.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeoxbiov_.jl:15\nin expression starting at\
    \ /tmp/tmpeoxbiov_.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3140ntpc.jl:18\nin expression starting at\
    \ /tmp/tmp3140ntpc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl00pql6g.jl:15\nin expression starting at\
    \ /tmp/tmpl00pql6g.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(circular_shift(reverse(x), shift))\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi54fmuuw.jl:12\nin expression starting at\
    \ /tmp/tmpi54fmuuw.jl:12\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        return\
    \ digits_shifted_reversed\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpro5pzsuv.jl:19\nin expression starting at\
    \ /tmp/tmpro5pzsuv.jl:19\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_nislyw.jl:17\nin expression starting at\
    \ /tmp/tmpc_nislyw.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[-shift:] + digits[: shift]\n        return join(digits,\
    \ \"\")\nend\n</cell>\n<text>\nThe function digits() returns the digits of an\
    \ integer as a string in reverse order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmjp4i75l.jl:14\n\
    in expression starting at /tmp/tmpmjp4i75l.jl:14\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4e60z_r6.jl:15\nin expression starting at\
    \ /tmp/tmp4e60z_r6.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        return join(digits, \"\")\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3j4mlrhj.jl:19\nin expression starting at\
    \ /tmp/tmp3j4mlrhj.jl:19\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in an integer. Test it on all integers\
    \ from 0 to 20.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkdcv6_3z.jl:17\nin expression starting at\
    \ /tmp/tmpkdcv6_3z.jl:17\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpld3j_vu7.jl:17\nin expression starting at\
    \ /tmp/tmpld3j_vu7.jl:17\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        return\
    \ digits_shifted_reversed\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0dr2clno.jl:20\nin expression starting at\
    \ /tmp/tmp0dr2clno.jl:20\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp45wq5xp2.jl:18\nin expression starting at\
    \ /tmp/tmp45wq5xp2.jl:18\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkuynqub_.jl:18\nin expression starting at\
    \ /tmp/tmpkuynqub_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:length(x)+shift]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpry0vtjag.jl:15\nin expression starting at\
    \ /tmp/tmpry0vtjag.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3ztz2ub.jl:18\nin expression starting at\
    \ /tmp/tmpk3ztz2ub.jl:18\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = split(x,\
    \ digits)\n        digits = digits[shift:end]\n        digits = join(digits, digits)\n\
    \        return digits\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2fauf8dg.jl:18\nin expression starting at\
    \ /tmp/tmp2fauf8dg.jl:18\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63d9erkj.jl:15\nin expression starting at\
    \ /tmp/tmp63d9erkj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4el4zh4z.jl:17\nin expression starting at\
    \ /tmp/tmp4el4zh4z.jl:17\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        digits = join(digits, \"\")\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nHere's a solution that doesn't\
    \ use any packages:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgdw4vz55.jl:20\nin expression starting at\
    \ /tmp/tmpgdw4vz55.jl:20\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  digits = join(digits)\n        return digits\n    end\nend\n</cell>\n<text>\n\
    The function digits(x::Int64) returns a string containing the digits of x, as\
    \ a string. For example,\n    digits(123) = \"123\".\nThe function length(x::Int64)\
    \ returns the number of digits in x. For example,\n    length(123) = 4.\nThe function\
    \ reverse(x::String) returns a string containing the digits of x, in reverse order.\
    \ For example,\n    reverse(\"123\") = \"321\".\nThe function join(y::String)\
    \ returns a string containing the characters of y joined together. For example,\n\
    \    join([\"a\", \"b\", \"c\"]) = \"abc\".\nThe function reverse(y::String) returns\
    \ a string containing the characters of y joined together. For example,\n    reverse(\"\
    abc\") = \"cba\".\nThe function digits(x::Int64) returns a string containing the\
    \ digits of x, as a string. For example,\n    digits(123) = \"123\".\nThe function\
    \ length(x::Int64) returns the number of digits in x. For example,\n    length(123)\
    \ = 4.\nThe function reverse(x::String) returns a string containing the digits\
    \ of x, in reverse order. For example,\n    reverse(\"123\") = \"321\".\nThe function\
    \ join(y::String) returns a string containing the characters of y joined together.\
    \ For example,\n    join([\"a\", \"b\", \"c\"]) = \"abc\".\nThe function reverse(y::String)\
    \ returns a string containing the characters of y joined together. For example,\n\
    \    reverse(\"abc\") = \"cba\".\nThe function digits(x::Int64) returns a string\
    \ containing the digits of x, as a string. For example,\n    digits(123) = \"\
    123\".\nThe function length(x::Int64) returns the number of digits in x. For example,\n\
    \    length(123) = 4.\nThe function reverse(x::String) returns a string containing\
    \ the digits of x, in reverse order. For example,\n    reverse(\"123\") = \"321\"\
    .\nThe function join(y::String) returns a string containing the characters of\
    \ y joined together. For example,\n    join([\"a\", \"b\", \"c\"]) = \"abc\".\n\
    The function reverse(y::String) returns a string containing the characters of\
    \ y joined together. For example,\n    reverse(\"abc\") = \"cba\".\nThe function\
    \ digits(x::Int64) returns a string \nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgg8em0pz.jl:20\nin expression starting at\
    \ /tmp/tmpgg8em0pz.jl:20\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak09fwap.jl:15\nin expression starting at\
    \ /tmp/tmpak09fwap.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63d9erkj.jl:15\nin expression starting at\
    \ /tmp/tmp63d9erkj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdefikrn7.jl:15\nin expression starting at\
    \ /tmp/tmpdefikrn7.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgbri80p.jl:17\nin expression starting at\
    \ /tmp/tmprgbri80p.jl:17\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4e60z_r6.jl:15\nin expression starting at\
    \ /tmp/tmp4e60z_r6.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoeoyiv1t.jl:17\nin expression starting at\
    \ /tmp/tmpoeoyiv1t.jl:17\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(reverse(x))\n    else\n       \
    \ return reverse(reverse(reverse(x)))\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the string with all the\
    \ letters in lower case.\nIf the string has any spaces, they should be replaced\
    \ with underscores.\nIf the string starts or ends with an underscore, the underscore\
    \ should be removed.\nIf the string has any other characters, it should be left\
    \ unchanged.\nFor example, if the input is \"the quick brown fox\", the output\
    \ should be \"the_quick_brown_fox\".\nWrite a function that takes a string as\
    \ input and returns the string with all the letters in upper case.\nIf the string\
    \ has any spaces, they should be replaced with underscores.\nIf the string starts\
    \ or ends with an underscore, the underscore should be removed.\nIf the string\
    \ has any other characters, it should be left unchanged.\nFor example, if the\
    \ input is \"the quick brown fox\", the output should be \"THE_QUICK_BROWN_FOX\"\
    .\nWrite a function that takes a string as input and returns the string with all\
    \ the letters in title case.\nIf the string has any spaces, they should be replaced\
    \ with underscores.\nIf the string starts or ends with an underscore, the underscore\
    \ should be removed.\nIf the string has any other characters, it should be left\
    \ unchanged.\nFor example, if the input is \"the quick brown fox\", the output\
    \ should be \"The Quick Brown Fox\".\nWrite a function that takes a string as\
    \ input and returns the string with all the letters in mixed case.\nIf the string\
    \ has any spaces, they should be replaced with underscores.\nIf the string starts\
    \ or ends with an underscore, the underscore should be removed.\nIf the string\
    \ has any other characters, it should be left unchanged.\nFor example, if the\
    \ input is \"the quick brown fox\", the output should be \"the quick brown fox\"\
    .\nWrite a function that takes a string as input and returns the string with all\
    \ the letters in mixed case and spaces removed.\nIf the string has any spaces,\
    \ they should be replaced with underscores.\nIf the string starts or ends with\
    \ an underscore, the underscore should be removed.\nIf the string has any other\
    \ characters, it should be left unchanged.\nFor example, if the input is \"the\
    \ quick brown fox\", the output should be \"thequickbrownfox\".\nWrite a function\
    \ that takes a string as input and returns the string with all the letters in\
    \ upper case and spaces removed.\nIf the string has any spaces, they should be\
    \ replaced with underscores.\nIf the string starts or ends with an underscore,\
    \ the underscore should be removed.\nIf the string has any other characters, it\
    \ should be left unchanged.\nFor example, if the input is \"the quick brown fox\"\
    , the output should be \nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkerqybv2.jl:12\nin expression starting at\
    \ /tmp/tmpkerqybv2.jl:12\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5mi8tlo.jl:15\nin expression starting at\
    \ /tmp/tmpi5mi8tlo.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppdvnpcxw.jl:18\nin expression starting at\
    \ /tmp/tmppdvnpcxw.jl:18\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<text>\nThe function digits() is defined in the file digit.jl\
    \ and looks like this:\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiebevpjy.jl:17\nin expression starting at\
    \ /tmp/tmpiebevpjy.jl:17\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(digits, digits[shift:end])\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhuwua5d.jl:16\nin expression starting at\
    \ /tmp/tmpdhuwua5d.jl:16\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4towzxf.jl:18\nin expression starting at\
    \ /tmp/tmpp4towzxf.jl:18\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3ztz2ub.jl:18\nin expression starting at\
    \ /tmp/tmpk3ztz2ub.jl:18\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)::Array{Int64,1}\n\
    Return the digits of x in a numeric array.\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_kiw1sp.jl:17\nin expression starting at\
    \ /tmp/tmp6_kiw1sp.jl:17\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63d9erkj.jl:15\nin expression starting at\
    \ /tmp/tmp63d9erkj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq2ra1uc.jl:17\nin expression starting at\
    \ /tmp/tmpjq2ra1uc.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5mi8tlo.jl:15\nin expression starting at\
    \ /tmp/tmpi5mi8tlo.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift == 0\n        return\
    \ x\n    else\n        digits = split(x, \"0123456789\")\n        digits_reversed\
    \ = reverse(digits)\n        digits_shifted = shift(digits_reversed, shift)\n\
    \        return join(digits_shifted, \"0123456789\")\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqczek5j.jl:20\nin expression starting at\
    \ /tmp/tmpiqczek5j.jl:20\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwpd_7ru.jl:17\nin expression starting at\
    \ /tmp/tmpiwpd_7ru.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of digits in an integer.\nWrite\
    \ a function that returns the number of digits in an integer, rounded down.\n\
    Write a function that returns the number of digits in an integer, rounded up.\n\
    Write a function that returns the number of digits in an integer, rounded towards\
    \ zero.\nWrite a function that returns the number of digits in an integer, rounded\
    \ away from zero.\nWrite a function that returns the number of digits in an integer,\
    \ rounded towards even.\nWrite a function that returns the number of digits in\
    \ an integer, rounded towards -infinity.\nWrite a function that returns the number\
    \ of digits in an integer, rounded towards infinity.\nWrite a function that returns\
    \ the number of digits in an integer, rounded away from -infinity.\nWrite a function\
    \ that returns the number of digits in an integer, rounded away from infinity.\n\
    Write a function that returns the number of digits in an integer, rounded towards\
    \ NaN.\nWrite a function that returns the number of digits in an integer, rounded\
    \ away from NaN.\nWrite a function that returns the number of digits in an integer,\
    \ rounded towards +Inf.\nWrite a function that returns the number of digits in\
    \ an integer, rounded away from +Inf.\nWrite a function that returns the number\
    \ of digits in an integer, rounded towards -1.\nWrite a function that returns\
    \ the number of digits in an integer, rounded away from -1.\nWrite a function\
    \ that returns the number of digits in an integer, rounded towards -0.\nWrite\
    \ a function that returns the number of digits in an integer, rounded away from\
    \ -0.\nWrite a function that returns the number of digits in an integer, rounded\
    \ towards +Inf.\nWrite a function that returns the number of digits in an integer,\
    \ rounded away from +Inf.\nWrite a function that returns the number of digits\
    \ in an integer, rounded towards -1.\nWrite a function that returns the number\
    \ of digits in an integer, rounded away from -1.\nWrite a function that returns\
    \ the number of digits in an integer, rounded towards -0.\nWrite a function that\
    \ returns the number of digits in an integer, rounded away from -0.\nWrite a function\
    \ that returns the number of digits in an integer, rounded towards +Inf.\nWrite\
    \ a function that returns the number of digits in an integer, rounded away from\
    \ +Inf.\nWrite a function that returns the number of digits in an integer, rounded\
    \ towards -1.\nWrite a function that returns the number of digits in an integer,\
    \ rounded away from -1.\nWrite a function that returns the number of digits in\
    \ an integer, rounded towards -0.\nWrite a function that returns the number of\
    \ digits in an integer, rounded away from -0.\nWrite a function that returns the\
    \ number of digits in an integer, rounded towards +Inf.\nWrite a function that\
    \ returns the number of digits in an integer, rounded away from +Inf.\nWrite a\
    \ function that returns the number of digits in an integer, rounded to\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0fhy3sx.jl:15\nin expression starting at\
    \ /tmp/tmpx0fhy3sx.jl:15\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(x)-shift] =\
    \ digits[length(x)-shift] % 10\n        digits = digits[0..(length(x)-shift-1)]\n\
    \        return join(digits, \"\")\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp156_up99.jl:20\nin expression starting at\
    \ /tmp/tmp156_up99.jl:20\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9dgqj2r.jl:17\nin expression starting at\
    \ /tmp/tmpn9dgqj2r.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + x[(shift+1):length(x)]\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjzqbus3.jl:12\nin expression starting at\
    \ /tmp/tmpzjzqbus3.jl:12\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwpd_7ru.jl:17\nin expression starting at\
    \ /tmp/tmpiwpd_7ru.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63d9erkj.jl:15\nin expression starting at\
    \ /tmp/tmp63d9erkj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3140ntpc.jl:18\nin expression starting at\
    \ /tmp/tmp3140ntpc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:] + digits[-1:]\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpct_0pmeb.jl:14\n\
    in expression starting at /tmp/tmpct_0pmeb.jl:14\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        return\
    \ digits_shifted_reversed\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpro5pzsuv.jl:19\nin expression starting at\
    \ /tmp/tmpro5pzsuv.jl:19\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns\
    \ a string containing the digits of x, in reverse order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx_nxw1fq.jl:17\nin expression starting at\
    \ /tmp/tmpx_nxw1fq.jl:17\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkuynqub_.jl:18\nin expression starting at\
    \ /tmp/tmpkuynqub_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi5mi8tlo.jl:15\nin expression starting at\
    \ /tmp/tmpi5mi8tlo.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    elseif shift == 0\n        return\
    \ \"\"\n    else\n        return reverse(digits(x))\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nWrite\
    \ a function that returns the number of digits in an integer, rounded up to the\
    \ nearest integer.\nWrite a function that returns the number of digits in an integer,\
    \ rounded down to the nearest integer.\nWrite a function that returns the number\
    \ of digits in an integer, rounded up to the nearest integer, ignoring trailing\
    \ zeros.\nWrite a function that returns the number of digits in an integer, rounded\
    \ down to the nearest integer, ignoring trailing zeros.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwiz06pzu.jl:17\nin expression starting at\
    \ /tmp/tmpwiz06pzu.jl:17\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjxjfu4m.jl:12\nin expression starting at\
    \ /tmp/tmpsjxjfu4m.jl:12\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and $length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(x)-shift] =\
    \ digits[length(x)-shift] % 10\n        return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmport3bfwn.jl:18\nin expression starting at\
    \ /tmp/tmport3bfwn.jl:18\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp98vf4oum.jl:18\nin expression starting at\
    \ /tmp/tmp98vf4oum.jl:18\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + x[(shift + 1):length(x)]\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    digits(x::Int64)::Vector{Int64}\nReturn the digits of an integer x in a vector.\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8x0k7c9v.jl:12\nin expression starting at\
    \ /tmp/tmp8x0k7c9v.jl:12\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns\
    \ a list of digits of x in reverse order.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xplnnum.jl:17\nin expression starting at\
    \ /tmp/tmp7xplnnum.jl:17\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a string to a vector of integers. If the string\
    \ cannot be converted to a vector of integers, return an empty vector.\nFor example,\
    \ given \"123\", the function should return [1,2,3].\nGiven \"-123\", the function\
    \ should return [-1,2,3].\nGiven \"qwertyuiop\", the function should return [].\n\
    Given \"-12qwertyuiop\", the function should return [-12,1,2,3].\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck8ls1wg.jl:17\nin expression starting at\
    \ /tmp/tmpck8ls1wg.jl:17\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:] + digits[-1:]\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4c40db6e.jl:14\n\
    in expression starting at /tmp/tmp4c40db6e.jl:14\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        return\
    \ digits_shifted_reversed\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpro5pzsuv.jl:19\nin expression starting at\
    \ /tmp/tmpro5pzsuv.jl:19\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits[shift::Int64] = digits[-shift::Int64]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp496q1i48.jl:18\nin expression starting at\
    \ /tmp/tmp496q1i48.jl:18\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakoe3kec.jl:17\nin expression starting at\
    \ /tmp/tmpakoe3kec.jl:17\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4nr8g9mz.jl:18\nin expression starting at\
    \ /tmp/tmp4nr8g9mz.jl:18\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        return join(digits, \"\")\n    end\n\
    end\n</cell>\n<text>\nThe function digits() returns an array of digits of an integer,\
    \ x, in reverse order.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jot8awy.jl:20\nin expression starting at\
    \ /tmp/tmp5jot8awy.jl:20\n"
  stdout: ''
  timestamp: 1659822941
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxz61eue.jl:17\nin expression starting at\
    \ /tmp/tmptxz61eue.jl:17\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    return join(reverse(digits[shift:end]))\n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2jgv08i.jl:17\nin expression starting at\
    \ /tmp/tmpq2jgv08i.jl:17\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(x[shift:end-1] + x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    circular_shift(x, shift)\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4awyy6ce.jl:12\nin expression starting at\
    \ /tmp/tmp4awyy6ce.jl:12\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of words in the string.\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n    8\n    >>> count_words(\"\
    The quick brown fox jumps over the \nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycjhghb9.jl:17\nin expression starting at\
    \ /tmp/tmpycjhghb9.jl:17\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of digits in an integer. Test it on all\
    \ of the\nintegers from 0 to 20.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwxjt_cs.jl:17\nin expression starting at\
    \ /tmp/tmpbwxjt_cs.jl:17\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3140ntpc.jl:18\nin expression starting at\
    \ /tmp/tmp3140ntpc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(digits)] =\
    \ digits[length(digits)] % 10\n        digits = digits[0..(length(digits)-1)]\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpa39dj9pb.jl:10\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa39dj9pb.jl:1\n\
    in expression starting at /tmp/tmpa39dj9pb.jl:1\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits_reversed = reverse(digits)\n        digits_shifted = shift(digits_reversed,\
    \ shift)\n        digits_shifted_reversed = reverse(digits_shifted)\n        return\
    \ digits_shifted_reversed\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in \nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpylc9e6b1.jl:19\nin expression starting at\
    \ /tmp/tmpylc9e6b1.jl:19\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwpd_7ru.jl:17\nin expression starting at\
    \ /tmp/tmpiwpd_7ru.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwpd_7ru.jl:17\nin expression starting at\
    \ /tmp/tmpiwpd_7ru.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  digits = join(digits)\n        return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2j8ky2k_.jl:19\nin expression starting at\
    \ /tmp/tmp2j8ky2k_.jl:19\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zjftps7.jl:18\nin expression starting at\
    \ /tmp/tmp0zjftps7.jl:18\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3140ntpc.jl:18\nin expression starting at\
    \ /tmp/tmp3140ntpc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of characters in that string.\nWrite a function that takes a string and returns\
    \ the number of words in that string.\nWrite a function that takes a string and\
    \ returns the number of lines in that string.\nWrite a function that takes a string\
    \ and returns the number of characters in that string that are not spaces.\nWrite\
    \ a function that takes a string and returns the number of words in that string\
    \ that are not spaces.\nWrite a function that takes a string and returns the number\
    \ of lines in that string that are not spaces.\nWrite a function that takes a\
    \ string and returns the number of characters in that string that are spaces.\n\
    Write a function that takes a string and returns the number of words in that string\
    \ that are spaces.\nWrite a function that takes a string and returns the number\
    \ of lines in that string that are spaces.\nWrite a function that takes a string\
    \ and returns the number of characters in that string that are spaces and are\
    \ not spaces.\nWrite a function that takes a string and returns the number of\
    \ words in that string that are spaces and are not spaces.\nWrite a function that\
    \ takes a string and returns the number of lines in that string that are spaces\
    \ and are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in that string that are spaces and are not spaces.\nWrite a function\
    \ that takes a string and returns the number of words in that string that are\
    \ spaces and are not spaces.\nWrite a function that takes a string and returns\
    \ the number of lines in that string that are spaces and are not spaces.\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string that are spaces and are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in that string that are spaces and are not spaces.\n\
    Write a function that takes a string and returns the number of lines in that string\
    \ that are spaces and are not spaces.\nWrite a function that takes a string and\
    \ returns the number of characters in that string that are spaces and are not\
    \ spaces.\nWrite a function that takes a string and returns the number of words\
    \ in that string that are spaces and are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in that string that are spaces and\
    \ are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in that string that are spaces and are not spaces.\nWrite a function\
    \ that takes a string and returns the number of words in that string that are\
    \ spaces and are not spaces.\nWrite a function that takes a string and returns\
    \ the number of lines in that string that are spaces and are not spaces.\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string that are spaces and are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in that string that are spaces and are not spaces.\n\
    Write a function that takes a string and returns the number of lines in that \n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0347jjah.jl:16\nin expression starting at\
    \ /tmp/tmp0347jjah.jl:16\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else \n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcuj3mdni.jl:15\nin expression starting at\
    \ /tmp/tmpcuj3mdni.jl:15\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns a\
    \ string containing the digits of x.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjp42jt6.jl:17\nin expression starting at\
    \ /tmp/tmpsjp42jt6.jl:17\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(x, -shift))\n  \
    \  else\n        return reverse(circular_shift(x, shift))\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzymtw8ih.jl:12\nin expression starting at\
    \ /tmp/tmpzymtw8ih.jl:12\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_52ksi2.jl:15\nin expression starting at\
    \ /tmp/tmp1_52ksi2.jl:15\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2t0l3am_.jl:17\nin expression starting at\
    \ /tmp/tmp2t0l3am_.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4e60z_r6.jl:15\nin expression starting at\
    \ /tmp/tmp4e60z_r6.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:] + digits[:\
    \ shift]\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpup1vcm9y.jl:14\n\
    in expression starting at /tmp/tmpup1vcm9y.jl:14\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudoxepp0.jl:18\nin expression starting at\
    \ /tmp/tmpudoxepp0.jl:18\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3yne8ojd.jl:17\nin expression starting at\
    \ /tmp/tmp3yne8ojd.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:]+digits[:shift]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp17ycskfg.jl:14\n\
    in expression starting at /tmp/tmp17ycskfg.jl:14\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(x, -shift)\n    else\n \
    \       return reverse(circular_shift(reverse(x), shift-length(x)))\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8dh0k_x6.jl:12\nin expression starting at\
    \ /tmp/tmp8dh0k_x6.jl:12\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0en08gr8.jl:18\nin expression starting at\
    \ /tmp/tmp0en08gr8.jl:18\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0 : shift-1]\
    \ + digits[shift : end]\n        digits = reverse(digits)\n        return join(digits)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc924kbh0.jl:20\nin expression starting at\
    \ /tmp/tmpc924kbh0.jl:20\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(x)-shift] =\
    \ digits[length(x)-shift] % 10\n        digits = reverse(digits)\n        return\
    \ join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19t8erpv.jl:20\nin expression starting at\
    \ /tmp/tmp19t8erpv.jl:20\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:] + digits[:\
    \ shift]\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ circular_shift(12, 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(1234) == 4.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv0iizh42.jl:14\n\
    in expression starting at /tmp/tmpv0iizh42.jl:14\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwpd_7ru.jl:17\nin expression starting at\
    \ /tmp/tmpiwpd_7ru.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:] + digits[:\
    \ shift]\n    return digits\nend\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 3)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 4)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 5)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 9)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 10)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 11)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 12)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 16)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 17)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 18)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 19)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 23)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 24)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 25)\n</cell>\n\
    <code language=julia-1.3>\n@time cir\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"-(shift):\" range\
    \ expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyfp2_aul.jl:14\n\
    in expression starting at /tmp/tmpyfp2_aul.jl:14\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(digits)] =\
    \ digits[length(digits)] % 10\n        return join(digits, \"\")\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaw6_lba5.jl:19\nin expression starting at\
    \ /tmp/tmpaw6_lba5.jl:19\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns\
    \ a list of digits of the integer x. For example, digits(12) returns [1,2,0].\
    \ digits(x) returns x if x is positive, otherwise it returns -x.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zzre9f9.jl:18\nin expression starting at\
    \ /tmp/tmp0zzre9f9.jl:18\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4e60z_r6.jl:15\nin expression starting at\
    \ /tmp/tmp4e60z_r6.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkb54x24d.jl:17\nin expression starting at\
    \ /tmp/tmpkb54x24d.jl:17\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nThe function\
    \ reverse() reverses a string. For example, circular_shift(reverse(\"hello\"),\
    \ \"world\") returns \"olleh\".\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmjvvbf8l.jl:15\nin expression starting at\
    \ /tmp/tmpmjvvbf8l.jl:15\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    end\n    digits[shift::shift] = digits[-shift::-shift]\n\
    \    return join(digits, \"\")\nend\n</code>\n<|/ a tags=julia,string |>\n<| a\
    \ dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyamo1wg1.jl:18\nin expression starting at\
    \ /tmp/tmpyamo1wg1.jl:18\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns a\
    \ string containing the digits of x.\nThe function reverse(x::String) returns\
    \ a string containing the digits of x in reverse order.\nThe function join(digits::String)\
    \ returns a string containing the concatenation of digits in the order they appear\
    \ in the string.\nThe function shift(x::Int64, shift::Int64) returns a string\
    \ containing the digits of x shifted right by shift.\nThe function length(x::String)\
    \ returns the number of characters in x.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqo17vyrq.jl:17\nin expression starting at\
    \ /tmp/tmpqo17vyrq.jl:17\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) ==\
    \ \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"\
    79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dwjxi5r.jl:17\nin expression starting at\
    \ /tmp/tmp4dwjxi5r.jl:17\n"
  stdout: ''
  timestamp: 1659822944
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time digits(123456789)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 4)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 9)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 11)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 16)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 17)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 18)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 23)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphi2pll8l.jl:18\nin expression starting at\
    \ /tmp/tmphi2pll8l.jl:18\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the sum of the digits\
    \ of that integer. For example, digit_sum(12) should return 1 + 2 + 3 = 6.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6rfyxxar.jl:15\nin expression starting at\
    \ /tmp/tmp6rfyxxar.jl:15\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwpd_7ru.jl:17\nin expression starting at\
    \ /tmp/tmpiwpd_7ru.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3yne8ojd.jl:17\nin expression starting at\
    \ /tmp/tmp3yne8ojd.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63d9erkj.jl:15\nin expression starting at\
    \ /tmp/tmp63d9erkj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns\
    \ a string containing the digits of x, in reverse order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0uqipttp.jl:17\nin expression starting at\
    \ /tmp/tmp0uqipttp.jl:17\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4e60z_r6.jl:15\nin expression starting at\
    \ /tmp/tmp4e60z_r6.jl:15\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(reverse(digits[shift:end-1]),\
    \ digits[end])\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzzyblemo.jl:16\nin expression starting at\
    \ /tmp/tmpzzyblemo.jl:16\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9dgqj2r.jl:17\nin expression starting at\
    \ /tmp/tmpn9dgqj2r.jl:17\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl00pql6g.jl:15\nin expression starting at\
    \ /tmp/tmpl00pql6g.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoeoyiv1t.jl:17\nin expression starting at\
    \ /tmp/tmpoeoyiv1t.jl:17\n"
  stdout: ''
  timestamp: 1659822940
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuj114j1p.jl:16\nin expression starting at\
    \ /tmp/tmpuj114j1p.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3140ntpc.jl:18\nin expression starting at\
    \ /tmp/tmp3140ntpc.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise: Implement the function digits(x::Int64) which\
    \ returns a string containing all the digits of x.\n    For example, digits(123456789)\
    \ should return \"123456789\".\n    digits(0) should return \"\".\n    digits(-123456)\
    \ should return \"-123456\".\n    digits(123456789123456789) should return \"\
    123456789123456789\".\n    digits(123456789123456789123456789) should return \"\
    123456789123456789123456789\".\n    digits(123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789\".\n    digits(123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789\".\n    digits(123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789\".\n\
    \    digits(123456789123456789123456789123456789123456789123456789123456789) should\
    \ return \"123456789123456789123456789123456789123456789123456789123456789\".\n\
    \    digits(123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789\nusing Test\n\n@testset begin\n\ncandidate\
    \ = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12,\
    \ 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1)\
    \ == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4xpt39q5.jl:17\nin expression starting at\
    \ /tmp/tmp4xpt39q5.jl:17\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(x, -shift)\n    else\n \
    \       digits = digits(x)\n        digits = digits[shift .. end]\n        return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer. For example,\
    \ length(123) == 3.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4n11znw.jl:12\nin expression starting at\
    \ /tmp/tmpo4n11znw.jl:12\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxdqr63gj.jl:16\nin expression starting at\
    \ /tmp/tmpxdqr63gj.jl:16\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in an integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjlre3m3g.jl:17\nin expression starting at\
    \ /tmp/tmpjlre3m3g.jl:17\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.\nWrite\
    \ a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nusing Test\n\n@testset begin\n\ncandidate = circular_shift;\n\
    \t@test(candidate(100, 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t\
    @test(candidate(97, 8) == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11,\
    \ 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptizeywx.jl:15\nin expression starting at\
    \ /tmp/tmpptizeywx.jl:15\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj8511fqj.jl:17\nin expression starting at\
    \ /tmp/tmpj8511fqj.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi4cqva6q.jl:15\nin expression starting at\
    \ /tmp/tmpi4cqva6q.jl:15\n"
  stdout: ''
  timestamp: 1659822938
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkuynqub_.jl:18\nin expression starting at\
    \ /tmp/tmpkuynqub_.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits() is defined in the\
    \ file digits.py, which is available in the directory /opt/conda/lib/python3.7/site-packages/.\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpulvq7sk5.jl:17\nin expression starting at\
    \ /tmp/tmpulvq7sk5.jl:17\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"\
    001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\"\
    )\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zjftps7.jl:18\nin expression starting at\
    \ /tmp/tmp0zjftps7.jl:18\n"
  stdout: ''
  timestamp: 1659822943
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = circular_shift;\n\t@test(candidate(100, 2) == \"001\")\n\
    \t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8) == \"79\")\n\t@test(candidate(12,\
    \ 1) == \"21\")\n\t@test(candidate(11, 101) == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61w_6_97.jl:17\nin expression starting at\
    \ /tmp/tmp61w_6_97.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
    \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>>\
    \ circular_shift(12, 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64,\
    \ shift::Int64)::String \n    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return join(digits)\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
    \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
    \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101)\
    \ == \"11\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpernudmwh.jl:18\nin expression starting at\
    \ /tmp/tmpernudmwh.jl:18\n"
  stdout: ''
  timestamp: 1659822945
