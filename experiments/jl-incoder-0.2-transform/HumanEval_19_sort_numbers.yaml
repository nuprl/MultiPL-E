name: HumanEval_19_sort_numbers
language: jl
prompt: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to\
  \ largest\n    >>> sort_numbers(\"three one five\")\n    \"one three five\"\n  \
  \  \"\"\"\nfunction sort_numbers(numbers::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
  \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
  \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six\
  \ five four three two one zero\") == \"zero one two three four five six\")\nend\n"
completions: ["    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n \
    \   return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort!\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string with the first letter of each word capitalized.\n>>> capitalize_first_letter(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps O", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized. \n    For example, sort_words(\"The quick brown fox jumps over\
    \ the lazy dog\") should return \"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capit", "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all the numbers in sorted order. For example, sort_numbers(\"\
    one two three four five six seven eight nine\") returns \"one two three four five\
    \ six seven eight nine\".", "    numbers = split(numbers, \" \")\n    numbers\
    \ = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers[2:]\n    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a tags=julia,sorting |>\nI wanted to add an answer that uses Julia's\
    \ built-in sort! function, which sorts in-place. \n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a string and returns the string with each\
    \ word capitalized.\n>>> capitalize(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"the\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize(\"the quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"the quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize(\"the quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"the quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize(\"the quick brown fox jumps over the lazy dog\")\n\"The Quick\
    \ Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"the quick brown fox jumps\
    \ over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize(\"the quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"the quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize(\"the quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"the quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over ", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all vowels replaced by 'y'.\n    >>> replace_vowels(\"The quick brown fox\
    \ jumps over the lazy dog\")\n    \"The quick brown fox jumps over the lazy dog\"\
    \n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the string with all numbers in descending order.\n>>> sort_numbers(\"\
    one two three\")\n\"three two one\"\n>>> sort_numbers(\"one two three four\")\n\
    \"four three two one\"\n>>> sort_numbers(\"one two three four five\")\n\"five\
    \ four three two one\"\n>>> sort_numbers(\"one two three four five six\")\n\"\
    six five four three two one\"\n>>> sort_numbers(\"one two three four five six\
    \ seven\")\n\"seven six five four three two one\"\n>>> sort_numbers(\"one two\
    \ three four five six seven eight\")\n\"eight seven six five four three two one\"\
    \n>>> sort_numbers(\"one two three four five six seven eight nine\")\n\"nine seven\
    \ six five four three two one\"\n>>> sort_numbers(\"one two three four five six\
    \ seven eight nine ten\")\n\"ten seven six five four three two one\"\n>>> sort_numbers(\"\
    one two three four five six seven eight nine ten eleven\")\n\"eleven seven six\
    \ five four three two one\"\n>>> sort_numbers(\"one two three four five six seven\
    \ eight nine ten eleven twelve\")\n\"twelve eleven seven six five four three two\
    \ one\"\n>>> sort_numbers(\"one two three four five six seven eight nine ten eleven\
    \ twelve thirteen\")\n\"thirteen twelve eleven seven six five four three two one\"\
    \n>>> sort_numbers(\"one two three four five six seven eight nine ten eleven twelve\
    \ thirteen fourteen\")\n\"fourteen thirteen twelve eleven seven six five four\
    \ three two one\"\n>>> sort_numbers(\"one two three four five six seven eight\
    \ nine ten eleven twelve thirteen fourteen fifteen\")\n\"fifteen fourteen thirteen\
    \ twelve eleven se", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    numbers = numbers.join(\" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a string with all the words in lower case. \n\
    The function should ignore numbers and punctuation. \nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore word", "    numbers = numbers.split(\" \"\
    )\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,haskell,string\
    \ |>\n<| a dscore=1 |>\n<code>\nimport Data.List", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all numbers\
    \ in reverse order.\n    >>> sort_numbers(\"three one five\")\n    \"five three\
    \ one\"\n    \"\"\"", "    numbers = numbers[2:]\n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.4>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the string with\
    \ all characters converted to lowercase\ne.g. \"hello\" -> \"hello\"\ne.g. \"\
    HELLO\" -> \"hello\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world\"\ne.g. \"HELLO WORLD\"\
    \ -> \"hello world\"\ne.g. \"HELLO WORLD\" -> \"hello world", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.3>", "    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n \
    \   return numbers.join(\" \")\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The ", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \"\
    \ \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all numbers sorted from smallest to largest.\n \
    \   Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    >>> sort_numbers(\"three one five\")\n    \"one three\
    \ five\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ as input and returns a string with all the words capitalized.\n    Valid strings\
    \ are \"one two three\", \"One Two Three\", \"one two three four\", \"One Two\
    \ Three Four\".\n    >>> capitalize_words(\"one two three\")\n    \"One Two Three\"\
    \n    >>> capitalize_words(\"One Two Three\")\n    \"One Two Three\"\n    >>>\
    \ capitalize_words(\"one two three four\")\n    \"One Two Three Four\"\n    >>>\
    \ capitalize_words(\"One Two Three Four\")\n    \"One Two Three Four\"\n    \"\
    \"\"", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return join(numbers, \" \")\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = numbers[2:]\n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\n</code>\n<|/ a tags=sorting,haskell,string |>\n<| a tags=sorting,haskell,string\
    \ |>\nHere's a solution using Data.List.sortBy and Data.List.unwords to get rid\
    \ of spaces and then Data.List.concat to put them back together:\n<code>\nimport\
    \ Data.List", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a dscore=2 |>\nI like using sort! to sort a vector in place:\n<code>\n\
    julia> sort!(\"three one five\".split(\" \"))\n3-element Array{String,1}:\n \"\
    one\"\n \"three\"\n \"five\"\n</code>\n<|/ a tags=julia,sorting,string |>\n<|\
    \ a tags=julia,sorting,string |>\nI like using sort! to sort a vector in place:\n\
    <code>\njulia> sort!(\"three one five\".split(\" \"))\n3-element Array{String,1}:\n\
    \ \"one\"\n \"three\"\n \"five\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting,string\
    \ |>\n<code>\njulia> sort!(\"three one five\".split(\" \"))\n3-element Array{String,1}:\n\
    \ \"one\"\n \"three\"\n \"five\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>\njulia> sort!(\"three one five\".split(\" \"))\n3-element Array{String,1}:\n\
    \ \"one\"\n \"three\"\n \"five\"\n</code>\n<|/ a tags=julia,sorting,string |>\n\
    <| a dscore=1 |>\n<code>\njulia> sort!(\"three one five\".split(\" \"))\n3-element\
    \ Array{String,1}:\n \"one\"\n \"three\"\n \"five\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a dscore=1 |>\n<code>\njulia> sort!(\"three one five\".split(\" \"))\n\
    3-element Array{String,1}:\n \"one\"\n \"three\"\n \"five\"\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\n<code>\njulia> sort!(\"three one five\"\
    .split(\" \"))\n3-element Array{String,1}:\n \"one\"\n \"three\"\n \"five\"\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting,string |>\n<code>\njulia>\
    \ sort!(\"three one five\".split(", "    numbers = numbers.split(\" \")\n    numbers\
    \ = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns a string with all the words capitalized.\n>>>\
    \ capitalize(\"The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown\
    \ Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize(\"The quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"The quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize(\"The quick brown fox jumps over the lazy dog\")\n\"The Quick\
    \ Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"The quick brown fox jumps\
    \ over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize(\"The quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over ", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    one two three\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a string with all the characters in lower case. \nFor example \"\
    hello\" => \"hello\"\nFor example \"HELLO\" => \"hello\"\nFor example \"HELLO\
    \ WORLD\" => \"hello world\"\nFor example \"HELLO WORLD HELLO WORLD\" => \"hello\
    \ world hello world\"\nFor example \"HELLO WORLD HELLO WORLD HELLO WORLD\" =>\
    \ \"hello world hello world hello world\"\nFor example \"HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO\
    \ WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD\
    \ HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HELLO WORLD HEL",
  "    numbers = numbers[2:]\n    numbers = numbers.split(\" \")\n    numbers = numbers[2:]\n\
    \    numbers = numbers.sort()\n    numbers = numbers.reverse()\n    numbers =\
    \ \" \".join(numbers)\n    return numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick bro", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers.join(\"\
    \ \")\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting,string |>\nI like\
    \ using sort! for this. It sorts in-place, so you don't have to return anything.\
    \ \n<code>\njulia> sort!(\"one two three four five\")\n\"one two three four five\"\
    \n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting,string |>\n<code>", "  \
    \  numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell,string\
    \ |>\n<| c |>\nI like this solution, but I wonder if there's a way to do it without\
    \ importing `Data.List`?\n<|/ c |>\n<| c |>\nI added a solution without importing\
    \ `Data.List`\n<|/ c |>\n<| c |>\nI added a solution without importing `Data.List`\n\
    <|/ c |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport Data.List\nimport\
    \ Data.Ord", "    numbers = numbers[2:]\n    numbers = numbers.split(\" \")\n\
    \    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a tags=sorting,string,haskell |>\n<| a dscore=1 |>\n<code>\nimport\
    \ Data.List", "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nimport Data.Ord",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI wrote a package\
    \ called Sorting which does exactly what you need:\n<code>\njulia> using Sorting",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise\nWrite a function that takes a string and returns\
    \ the string with each word capitalized.", "    numbers = numbers.split(\" \"\
    )\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n   \
    \ return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the string with all vowels replaced by 'y'.\n  \
    \  >>> replace_vowels(\"The quick brown fox jumps over the lazy dog\")\n    \"\
    Thy quick brown fox jumps over thy lazy dog\"\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized.\n    For example, sort_words(\"the quick brown fox jumped over\
    \ the lazy dog\") should return \"The Quick Brown Fox Jumped Over The Lazy Dog\"\
    \n    >>> sort_words(\"the quick brown fox jumped over the lazy dog\")\n    \"\
    The Quick Brown Fox Jumped Over The Lazy Dog\"\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nI wrote a function that sorts numbers in\
    \ ascending order:\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    numbers = \" \".join(numbers)\n    return numbers\n</code>\n<|/ a tags=sorting,haskell\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers` returns `[\"one\", \"\
    three\", \"five\"]` instead of `\"one three five\"`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug. Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport\
    \ Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers[2:]\n    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell,string\
    \ |>\n<| c |>\n`sort` doesn't return a list. It sorts the list in-place. `sortBy\
    \ (comparing fst)` would do that.\n<|/ c |>\n<| c |>\nThanks, I didn't know that.\
    \ I've updated my answer.\n<|/ c |>\n<| a tags=sorting,haskell,string |>\n<code>\n\
    import Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort()\n \
    \   return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the string with all numbers in reverse order.\n    >>> sort_numbers(\"\
    three one five\")\n    \"five three one\"\n    \"\"\"", "    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n\
    </code>\n<|/ a tags=julia,sorting,string |>\n<| a dscore=2 |>\n<code>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n\
    \    return numbers\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if\
    \ there are more than 9 numbers in the string. For example, sort_numbers(\"one\
    \ two three four five six seven eight nine ten\") returns \"one two three four\
    \ five six seven eight nine ten\" instead of \"one two three four five six seven\
    \ eight nine\".\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that\
    \ out. I've updated my answer to account for that.\n<|/ c |>\n<| a |>\nThis solution\
    \ uses recursion and a helper function to sort a list using recursion. \n<code>",
  "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns a string with all the words capitalized. \n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick ", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all numbers\
    \ in descending order. For example, sort_numbers(\"three one five\") should return\
    \ \"five three one\".", "    numbers = numbers.split(\" \")\n    numbers.sort\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.3>", " \
    \   numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n\
    </code>\n<|/ a tags=sorting,string,haskell |>\n<| a tags=sorting,string,haskell\
    \ |>\nHere's a solution using Data.List.sortBy and Data.List.unwords (from Data.List).\n\
    <code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ as input and returns the string with all the vowels removed.\n    >>> remove_vowels(\"\
    The quick brown fox jumps over the lazy dog\")\n    \"Th quick brwn fx jmps ovr\
    \ thz gnd\"\n    \"\"\"", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all numbers\
    \ in it sorted from smallest to largest.\nFor example, sort_numbers(\"one two\
    \ three four five six seven eight nine\") returns \"one two three four five six\
    \ seven eight nine\".", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all numbers in descending order\n    >>> sort_numbers(\"\
    three one five\")\n    \"five three one\"\n    \"\"\"", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized. \n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick ", "    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n",
  "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in lower case.\
    \ \nFor example, sort_characters(\"hello world\") should return \"hELLO wORLD\"\
    .", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ a string with all the characters in lowercase and uppercase sorted alphabetically.\n\
    \    >>> sort_alphabetically(\"one two three four five six seven eight nine\"\
    )\n    \"one two three four five six seven eight nine\"\n    \"\"\"", "    numbers\
    \ = split(numbers, \" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</code>\n<|/ a\
    \ tags=julia,sorting,string |>\n<| a dscore=2 |>\nI came up with this:\n<code>",
  "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all vowels replaced by 'y'. \n    >>> replace_vowels(\"hello\
    \ world\")\n    \"ylo yworld\"\n    \"\"\"", "    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "  \
    \  numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers = numbers.join(\"\
    \ \")\n    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nThe answer by is good,\
    \ but I wanted to add that you can also use sort! to sort a vector of strings:\n\
    <code>\njulia> sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=3\
    \ |>\n<| a tags=julia |>\nI wanted to add that you can also use sort! to sort\
    \ a vector of strings:\n<code>\njulia> sort!(\"one two three\")\n\"one two three\"\
    \n</code>\n<|/ a dscore=3 |>\n<| a tags=julia |>\nI wanted to add that you can\
    \ also use sort! to sort a vector of strings:\n<code>\njulia> sort!(\"one two\
    \ three\")\n\"one two three\"\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia |>\n\
    I wanted to add that you can also use sort! to sort a vector of strings:\n<code>\n\
    julia> sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=julia |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    numbers = \" \".join(numbers)\n    return numbers\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a dscore=2 |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the words in lower case. \nThe\
    \ input string may contain multiple words.\nThe output string should not contain\
    \ any punctuation.\nThe output string should not contain any numbers.\nThe output\
    \ string should not contain any symbols.\nThe output string should not contain\
    \ any uppercase letters.\nThe output string should not contain any lowercase letters.\n\
    The output string should not contain any spaces.\nThe output string should not\
    \ contain any symbols.\nThe output string should not contain any uppercase letters.\n\
    The output string should not contain any lowercase letters.\nThe output string\
    \ should not contain any spaces.\nThe output string should not contain any symbols.\n\
    The output string should not contain any uppercase letters.\nThe output string\
    \ should not contain any lowercase letters.\nThe output string should not contain\
    \ any spaces.\nThe output string should not contain any symbols.\nThe output string\
    \ should not contain any uppercase letters.\nThe output string should not contain\
    \ any lowercase letters.\nThe output string should not contain any spaces.\nThe\
    \ output string should not contain any symbols.\nThe output string should not\
    \ contain any uppercase letters.\nThe output string should not contain any lowercase\
    \ letters.\nThe output string should not contain any spaces.\nThe output string\
    \ should not contain any symbols.\nThe output string should not contain any uppercase\
    \ letters.\nThe output string should not contain any lowercase letters.\nThe output\
    \ string should not contain any spaces.\nThe output string should not contain\
    \ any symbols.\nThe output string should not contain any uppercase letters.\n\
    The output string should not contain any lowercase letters.\nThe output string\
    \ should not contain any spaces.\nThe output string should not contain any symbols.\n\
    The output string should not contain any uppercase letters.\nThe output string\
    \ should not contain any lowercase letters.\nThe output string should not contain\
    \ any spaces.\nThe output string should not contain any symbols.\nThe output string\
    \ should not contain any uppercase letters.\nThe output string should not contain\
    \ any lowercase letters.\nThe output string should not contain any spaces.\nThe\
    \ output string should not contain any symbols.\nThe output string should not\
    \ contain any uppercase letters.\nThe output string should not contain any lowercase\
    \ letters.\nThe output string should not contain any spaces.\nThe output string\
    \ should not contain any symbols.\nThe output string should not contain any uppercase\
    \ letters.\nThe output string ", "    numbers = numbers[2:]\n    numbers = numbers.split(\"\
    \ \")\n    numbers = map(int, numbers)\n    numbers = sort(numbers)\n    numbers\
    \ = map(str, numbers)\n    numbers = \" \".join(numbers)\n    return numbers\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,haskell,string |>\nI wrote this\
    \ in Haskell and it's working fine.\n<code>\nimport Data.List", "    numbers =\
    \ numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n \
    \   return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with all characters converted to lowercase. \n\
    >>> convert_lowercase(\"hello world\")\n\"hello world\"\n>>> convert_lowercase(\"\
    HELLO WORLD\")\n\"hello world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\"\
    )\n\"hello world hello world\"\n>>> convert_lowercase(\"HELLO WORLD\")\n\"hello\
    \ world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\")\n\"hello world hello\
    \ world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\")\n\"hello world hello\
    \ world\"\n>>> convert_lowercase(\"HELLO WORLD\")\n\"hello world\"\n>>> convert_lowercase(\"\
    hello world HELLO WORLD\")\n\"hello world hello world\"\n>>> convert_lowercase(\"\
    hello world HELLO WORLD\")\n\"hello world hello world\"\n>>> convert_lowercase(\"\
    HELLO WORLD\")\n\"hello world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\"\
    )\n\"hello world hello world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\"\
    )\n\"hello world hello world\"\n>>> convert_lowercase(\"HELLO WORLD\")\n\"hello\
    \ world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\")\n\"hello world hello\
    \ world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\")\n\"hello world hello\
    \ world\"\n>>> convert_lowercase(\"HELLO WORLD\")\n\"hello world\"\n>>> convert_lowercase(\"\
    hello world HELLO WORLD\")\n\"hello world hello world\"\n>>> convert_lowercase(\"\
    hello world HELLO WORLD\")\n\"hello world hello world\"\n>>> convert_lowercase(\"\
    HELLO WORLD\")\n\"hello world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\"\
    )\n\"hello world hello world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\"\
    )\n\"hello world hello world\"\n>>> convert_lowercase(\"HELLO WORLD\")\n\"hello\
    \ world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\")\n\"hello world hello\
    \ world\"\n>>> convert_lowercase(\"hello world HELLO WORLD\")\n\"hello world hello\
    \ world\"\n>>> convert_lowercase(\"HELLO WORLD", "    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick bro", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    return join(numbers, \" \")\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string where all spaces are replaced with underscores\n\
    e.g. \"hello world\" => \"hello_world\"\nHint: use the replace() function", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a string with all the words capitalized.\n>>> capitalize_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick ", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all vowels\
    \ removed.\nValid strings are 'hello', 'hello!', 'hello!!', 'hello!!!', 'hello!!!'\n\
    Valid strings are 'goodbye', 'goodbye!', 'goodbye!!', 'goodbye!!!', 'goodbye!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n\
    Valid strings are 'hi there', 'hi there!', 'hi there!!', 'hi there!!!', 'hi there!!!'\n",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python dscore=1 |>\n<| a tags=sorting,python |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| a dscore=1\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a dscore=1 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=1 |>\n<| a d", "    numbers\
    \ = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\" \")\n\
    \    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns a string with all the words capitalized. \n\
    >>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The Quick\
    \ Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"The\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick ", "    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ a string where all the characters are capitalized.\n>>> capitalize_string(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_string(\"hello\")\n\"Hello\"\n\
    >>> capitalize_string(\"hello world\")\n\"Hello World\"\n>>> capitalize_string(\"\
    hello\")\n\"Hello\"\n>>> capitalize_string(\"hello world\")\n\"Hello World\"\n\
    >>> capitalize_string(\"hello\")\n\"Hello\"\n>>> capitalize_string(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize_string(\"hello\")\n\"Hello\"\n>>> capitalize_string(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_string(\"hello\")\n\"Hello\"\n\
    >>> capitalize_string(\"hello world\")\n\"Hello World\"\n>>> capitalize_string(\"\
    hello\")\n\"Hello\"\n>>> capitalize_string(\"hello world\")\n\"Hello World\"\n\
    >>> capitalize_string(\"hello\")\n\"Hello\"\n>>> capitalize_string(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize_string(\"hello\")\n\"Hello\"\n>>> capitalize_string(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_string(\"hello\")\n\"Hello\"\n\
    >>> capitalize_string(\"hello world\")\n\"Hello World\"\n>>> capitalize_string(\"\
    hello\")\n\"Hello\"\n>>> capitalize_string(\"hello world\")\n\"Hello World\"\n\
    >>> capitalize_string(\"hello\")\n\"Hello\"\n>>> capitalize_string(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize_string(\"hello\")\n\"Hello\"\n>>> capitalize_string(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_string(\"hello\")\n\"Hello\"\n\
    >>> capitalize_string(\"hello world\")\n\"Hello World\"\n>>> capitalize_string(\"\
    hello\")\n\"Hello\"\n>>> capitalize_string(\"hello world\")\n\"Hello World\"\n\
    >>> capitalize_string(\"hello\")\n\"Hello\"\n>>> capitalize_string(\"hello world\"\
    )\n\"Hello World\"\n>>> capitalize_string(\"hello\")\n\"Hello\"\n>>> capitalize_string(\"\
    hello world\")\n\"Hello World\"\n>>> capitalize_string(\"hello\")\n\"Hello\"\n\
    >>> capitalize_string(\"hello world\")\n\"Hello World\"\n>>> capitalize_string(\"\
    hello\")\n\"Hello\"\n>>> capitalize_string(\"hello world\")\n\"Hello World\"\n\
    >>> capitalize_string(\"", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick bro", "    numbers = numbers[2:]\n    numbers = numbers.split(\" \"\
    )\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all the\
    \ vowels removed\ne.g. \"hello world\" -> \"helloworld\"\nHint: Use a regular\
    \ expression to remove all vowels", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    one two three four five six seven eight nine\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns a string with all the words capitalized.\n\
    >>> capitalize_words(\"one two three four five six seven eight nine\")\n\"One\
    \ Two Three Four Five Six Seven Eight Nine\"\n>>> capitalize_words(\"one two three\
    \ four five six seven eight nine\")\n\"One Two Three Four Five Six Seven Eight\
    \ Nine\"\n>>> capitalize_words(\"one two three four five six seven eight nine\"\
    )\n\"One Two Three Four Five Six Seven Eight Nine\"\n>>> capitalize_words(\"one\
    \ two three four five six seven eight nine\")\n\"One Two Three Four Five Six Seven\
    \ Eight Nine\"\n>>> capitalize_words(\"one two three four five six seven eight\
    \ nine\")\n\"One Two Three Four Five Six Seven Eight Nine\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine\")\n\"One Two Three Four Five Six\
    \ Seven Eight Nine\"\n>>> capitalize_words(\"one two three four five six seven\
    \ eight nine\")\n\"One Two Three Four Five Six Seven Eight Nine\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine\")\n\"One Two Three Four Five Six\
    \ Seven Eight Nine\"\n>>> capitalize_words(\"one two three four five six seven\
    \ eight nine\")\n\"One Two Three Four Five Six Seven Eight Nine\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine\")\n\"One Two Three Four Five Six\
    \ Seven Eight Nine\"\n>>> capitalize_words(\"one two three four five six seven\
    \ eight nine\")\n\"One Two Three Four Five Six Seven Eight Nine\"\n>>> ", "  \
    \  numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia,sorting,string |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"\
    three one five\")` returns `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.0 and it works fine. Maybe you have a different version?\n<|/\
    \ c |>\n<| c |>\nAh, I see. My version was 0.6.1. I upgraded to 0.6.2 and it works\
    \ fine. Thanks!\n<|/ c |>\n<| a tags=julia,sorting,string |>\nThe answer by is\
    \ great, but I wanted to add that you can also use sort! to sort a vector of strings:\n\
    <code>\njulia> sort!(\"three one five\".split(\" \"))\n5-element Array{String,1}:\n\
    \ \"one\"\n \"three\"\n \"five\"\n \"two\"\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    This is actually the best answer, since it also works with `sort!` on `Int`s.\n\
    <|/ c |>\n<| a dscore=4 |>\nThe other answers here are great, but I wanted to\
    \ add that you can also use sort! to sort a vector of strings:\n<code>\njulia>\
    \ sort!(\"three one five\".split(\" \"))\n5-element Array{String,1}:\n \"one\"\
    \n \"three\"\n \"five\"\n \"two\"\n</code>\n<|/ a tags=julia,sorting,string |>\n\
    <| a tags=julia,sorting,string |>\nThe other answers here are great, but I wanted\
    \ to add that you can also use sort! to sort a vector of strings:\n<code>\njulia>\
    \ sort!(\"three one five\".split(\" \"))\n5-element Array{String,1}:\n \"one\"\
    \n \"three\"\n \"five\"\n \"two\"\n</code>\n<|/ a dscore=3 |>\n<| a |>\nI wanted\
    \ to add that you can also use sort! to sort a vector of strings:\n<code>\njulia>\
    \ sort!(\"three one five\".split(\" \"))\n5-element Array{String,1}:\n \"one\"\
    \n \"three\"\n \"five\"\n \"two\"\n</code>\n<|/ a dscore=3 tags=julia,sorting,string\
    \ |>\n<| a dscore=3 |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the string with all numbers in descending order.\n    >>>\
    \ sort_numbers(\"three one five\")\n    \"five three one\"\n    \"\"\"", "   \
    \ numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\" \")\n   \
    \ numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all numbers\
    \ in descending order. \ne.g. \"one two three four\" -> \"four three two one\"",
  "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=string,sorting,haskell |>\nHere's a solution\
    \ using Data.List.sortBy and Data.List.unwords. I used Data.List.unwords to remove\
    \ spaces from the beginning and end of the string. \n<code>\nimport Data.List",
  "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort!\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>", "    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "  \
    \  numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all 'o's removed\n    >>> remove_o(\"one two three four\")\n    \"one two\
    \ three four\"\n    \"\"\"", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>", " \
    \   numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\"\
    \ \")\nend\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all the words\
    \ capitalized.\n    For example, if the input is \"The quick brown fox jumps over\
    \ the lazy dog\", the output should be \"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n    >>> capitalize_words(string::String)\n    \"\"\"", "    numbers =\
    \ numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n", "    numbers = numbers[2:]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n", "    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a |>\n<| c |>\nI like\
    \ this solution, but I believe it would be better to use a `map` instead of a\
    \ `for` loop. Also, `sort` returns a new list, so `numbers = sort(numbers)` should\
    \ be `numbers = sort(numbers[2:])`.\n<|/ c |>\n<| c |>\nThanks for the suggestions.\
    \ I edited my answer to reflect your suggestions.\n<|/ c |>\n<| a dscore=1 |>\n\
    I like using map for this kind of thing:\n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\n<code>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns the string with all 'o's replaced with\
    \ '0's.\n>>> replace_o(\"one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"\
    one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003\
    \ 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"\
    one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003\
    \ 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"\
    one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003\
    \ 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"\
    one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003\
    \ 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"\
    one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003\
    \ 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"\
    one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003\
    \ 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"\
    one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003\
    \ 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"\
    one two three\")\n\"0003 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003\
    \ 0123 0003\"\n>>> replace_o(\"one two three\")\n\"0003 012", "    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `sort` doesn't\
    \ seem to exist in Julia. `sort!` does, but that doesn't seem to work either.\
    \ I'm on Julia 0.6.2\n<|/ c |>\n<| c |>\nI guess I should have mentioned that\
    \ I'm on Julia 0.6.2. I tried `sort!` but that didn't work either. `sort` does\
    \ exist, but `sort!` doesn't seem to work either. I'm on Julia 0.6.2\n<|/ c |>\n\
    <| c |>\nI guess I should have mentioned that I'm on Julia 0.6.2. I tried `sort!`\
    \ but that didn't work either. `sort` does exist, but `sort!` doesn't seem to\
    \ work either. I'm on Julia 0.6.2\n<|/ c |>\n<| c |>\nI guess I should have mentioned\
    \ that I'm on Julia 0.6.2. I tried `sort!` but that didn't work either. `sort`\
    \ does exist, but `sort!` doesn't seem to work either. I'm on Julia 0.6.2\n<|/\
    \ c |>\n<| c |>\nI guess I should have mentioned that I'm on Julia 0.6.2. I tried\
    \ `sort!` but that didn't work either. `sort` does exist, but `sort!` doesn't\
    \ seem to work either. I'm on Julia 0.6.2\n<|/ c |>\n<| a tags=julia |>\n<code>",
  "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.4>", "    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| c |>\nWhile this code may provide a\
    \ solution to the question, it's better to add context as to why/how it works.\
    \ This can help future users learn, and apply that knowledge to their own code.\
    \ You are also likely to have positive feedback from users in the form of upvotes,\
    \ when the code is explained.\n<|/ c |>\n<| a tags=sorting,string,python |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers\
    \ = sort(numbers)\n    numbers = join(numbers, \" \")\n    return numbers\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,python |>\n<|\
    \ c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\n</code>\n<|/ a tags=sorting,string,python |>\n<| c |>\nPlease don't\
    \ post only code as an answer, but also provide an explan", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The ", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all the\
    \ words capitalized.\n>>> capitalize_words(\"the quick brown fox jumps over the\
    \ lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick ", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell,string\
    \ |>\n<| c |>\n`sort` returns a `[String]`, not a `String`.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I've fixed the code accordingly.\n<|/ c |>\n<| a\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,haskell,string\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    numbers = \" \".join(numbers)\n    return numbers\nend\n</cell>\n<code language=julia-1.4>",
  "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell,string\
    \ |>\n<| c |>\nThis doesn't work. `sort` returns a list of numbers, not a string.\
    \ `join` expects a string and a list of numbers, not a string and a list of strings.\n\
    <|/ c |>\n<| c |>\nThanks, I fixed the code. `sort` returns a list of numbers,\
    \ not a string. `join` expects a string and a list of numbers, not a string and\
    \ a list of strings.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport Data.List (sort,\
    \ sortOn)", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.3>",
  "    numbers = numbers[2:]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers\
    \ = \" \".join(numbers)\n    return numbers\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nimport Data.Ord",
  "    numbers = numbers[2:]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with each word capitalized.\n>>> capitalize_words(\"\
    one two three\")\n\"One Two Three\"\n>>> capitalize_words(\"one two three four\"\
    )\n\"One Two Three Four\"\n>>> capitalize_words(\"one two three four five\")\n\
    \"One Two Three Four Five\"\n>>> capitalize_words(\"one two three four five six\"\
    )\n\"One Two Three Four Five Six\"\n>>> capitalize_words(\"one two three four\
    \ five six seven\")\n\"One Two Three Four Five Six Seven\"\n>>> capitalize_words(\"\
    one two three four five six seven eight\")\n\"One Two Three Four Five Six Seven\
    \ Eight\"\n>>> capitalize_words(\"one two three four five six seven eight nine\"\
    )\n\"One Two Three Four Five Six Seven Eight Nine\"\n>>> capitalize_words(\"one\
    \ two three four five six seven eight nine ten\")\n\"One Two Three Four Five Six\
    \ Seven Eight Nine Ten\"\n>>> capitalize_words(\"one two three four five six seven\
    \ eight nine ten eleven\")\n\"One Two Three Four Five Six Seven Eight Nine Ten\
    \ Eleven\"\n>>> capitalize_words(\"one two three four five six seven eight nine\
    \ ten eleven twelve\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven\
    \ Twelve\"\n>>> capitalize_words(\"one two three four five six seven eight nine\
    \ ten eleven twelve thirteen\")\n\"One Two Three Four Five Six Seven Eight Nine\
    \ Ten Eleven Twelve Thirteen\"\n>>> capitalize_words(\"one two three four five\
    \ six seven eight nine ten eleven twelve thirteen fourteen\")\n\"One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven T", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"three one five\")` returns\
    \ `\"one three five\"`.\n<|/ c |>\n<| c |>\nI tested it and it works for me. Are\
    \ you sure you copied it correctly? It works for me in Julia 0.6.2\n<|/ c |>\n\
    <| c |>\nYes, I copied it correctly. I'm using Julia 0.6.2. I don't know why it's\
    \ not working for me. Maybe it's because I'm on Windows?\n<|/ c |>\n<| c |>\n\
    I tested it on Windows and it works fine. Maybe you have a different version of\
    \ Julia? What does `sort([\"three\", \"one\", \"five\"])` return?\n<|/ c |>\n\
    <| c |>\n`sort([\"three\", \"one\", \"five\"])` returns `[\"one\", \"three\",\
    \ \"five\"]`\n<|/ c |>\n<| a dscore=2 |>\nI wanted to add another answer because\
    \ I wanted to add another solution that I thought was interesting. \nI wanted\
    \ to add another answer because I wanted to add another solution that I thought\
    \ was interesting. \nI wanted to add another answer because I wanted to add another\
    \ solution that I thought was interesting. \nI wanted to add another answer because\
    \ I wanted to add another solution that I thought was interesting. \nI wanted\
    \ to add another answer because I wanted to add another solution that I thought\
    \ was interesting. \nI wanted to add another answer because I wanted to add another\
    \ solution that I thought was interesting. \nI wanted to add another answer because\
    \ I wanted to add another solution that I thought was interesting. \nI wanted\
    \ to add another answer because I wanted to add another solution that I thought\
    \ was interesting. \nI wanted to add another answer because I wanted to add another\
    \ solution that I thought was interesting. \nI wanted to add another answer because\
    \ I wanted to add another solution that I thought was interesting. \nI wanted\
    \ to add another answer because I wanted to add another solution that I thought\
    \ was interesting. \nI wanted to add another answer because I wanted to add another\
    \ solution that I thought was interesting. \nI wanted to add another answer because\
    \ I wanted to add another solution that I thought was interesting. \nI wanted\
    \ to add another answer because I wanted to add another solution that I thought\
    \ was interesting. \nI wanted to add another answer because I wanted to add another\
    \ solution that I thought was interesting. \nI wanted to add another answer because\
    \ I wanted to add another solution that I thought was interesting. \nI wanted\
    \ to add another answer because ", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick ", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort\n    return join(numbers, \" \")\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| a tags=julia,sorting,string |>\nThe simplest way is to use split:\n<code>\n\
    julia> sort!(split(\" one two three four five six seven eight nine\"))\n\"one\
    \ two three four five six seven eight nine\"\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=julia,sorting,string |>\nI like using sort! to sort a vector:\n<code>\n\
    julia> sort!(\"one two three four five six seven eight nine\".split(\" \"))\n\"\
    one two three four five six seven eight nine\"\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=1 |>\nI like using sort! to sort a vector:\n<code>\njulia> sort!(\"\
    one two three four five six seven eight nine\".split(\" \"))\n\"one two three\
    \ four five six seven eight nine\"\n</code>\n<|/ a tags=julia,sorting,string |>\n\
    <| a tags=julia,sorting,string |>\n<code>\njulia> sort!(\"one two three four five\
    \ six seven eight nine\".split(\" \"))\n\"one two three four five six seven eight\
    \ nine\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting,string |>\n<code>\n\
    julia> sort!(\"one two three four five six seven eight nine\".split(\" \"))\n\"\
    one two three four five six seven eight nine\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>\njulia> sort!(\"one two three four five six seven eight nine\"\
    .split(\" \"))\n\"one two three four five six seven eight nine\"\n</code>\n<|/\
    \ a dscore=0 tags=julia,sorting,string |>\n<| c |>\nPlease don't post only code\
    \ as an answer, but also provide an explanation of what your code does and how\
    \ it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the string with all numbers in reverse order. \nFor example, sort_numbers(\"\
    one two three four five six seven eight nine\") returns \"nine eight six five\
    \ four three two one\".\nHint: Use a regular expression to find all numbers in\
    \ the string.", "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>",
  "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    return join(numbers,\
    \ \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\"\
    )\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ a string with all the words in the string sorted alphabetically.", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    numbers = join(numbers, \" \"\
    )\n    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    numbers\
    \ = numbers[2:]\n    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| c |>\nThanks for your answer! I ended up using your solution and added\
    \ some extra functionality to it. I added a second function which sorts numbers\
    \ in descending order and added a third function which sorts numbers in ascending\
    \ order. I'll post the code as an answer below.\n<|/ c |>\n<| a tags=julia,sorting,string\
    \ |>\nI ended up using the solution provided by and added some extra functionality\
    \ to it. I added a second function which sorts numbers in descending order and\
    \ added a third function which sorts numbers in ascending order. I'll post the\
    \ code as an answer below.\n<code>", "    numbers = numbers.split(\" \")\n   \
    \ numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.4>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns a string with all the characters in\
    \ lower case. \nFor example,\n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello\")\n\"Hello\"\n>>> capitalize(\"hello  world\")\n\"Hello\
    \ World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"\
    hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\
    \n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World", " \
    \   numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = split(numbers, \" \")\n    numbers\
    \ = sort(numbers)\n    numbers = join(numbers, \" \")\n    return numbers\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport Data.List",
  "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = split(numbers, \" \")\n    numbers\
    \ = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\nend\n</code>\n<|/ a tags=julia,sorting,string\
    \ |>\n<| c |>\nI like the `sort` solution, but I wonder if there is a way to do\
    \ this without having to write an entire sorting algorithm. Maybe `sort` could\
    \ be modified to sort strings instead of numbers?\n<|/ c |>\n<| c |>\nI believe\
    \ that `sort` can sort strings, but it won't be as efficient as `sort` on numbers.\
    \ I believe that `sort` on strings would require a lot of extra work to sort them\
    \ in lexicographical order. On the other hand, `sort` on numbers would require\
    \ a lot of extra work to sort them in numerical order. `sort` on strings would\
    \ require a lot of extra work to sort them in lexicographical order. On the other\
    \ hand, `sort` on numbers would require a lot of extra work to sort them in numerical\
    \ order. `sort` on strings would require a lot of extra work to sort them in lexicographical\
    \ order. On the other hand, `sort` on numbers would require a lot of extra work\
    \ to sort them in numerical order. `sort` on strings would require a lot of extra\
    \ work to sort them in lexicographical order. On the other hand, `sort` on numbers\
    \ would require a lot of extra work to sort them in numerical order. `sort` on\
    \ strings would require a lot of extra work to sort them in lexicographical order.\
    \ On the other hand, `sort` on numbers would require a lot of extra work to sort\
    \ them in numerical order. `sort` on strings would require a lot of extra work\
    \ to sort them in lexicographical order. On the other hand, `sort` on numbers\
    \ would require a lot of extra work to sort them in numerical order. `sort` on\
    \ strings would require a lot of extra work to sort them in lexicographical order.\
    \ On the other hand, `sort` on numbers would require a lot of extra work to sort\
    \ them in numerical order. `sort` on strings would require a lot of extra work\
    \ to sort them in lexicographical order. On the other hand, `sort` on numbers\
    \ would require a lot of extra work to sort them in numerical order. `sort` on\
    \ strings would require a lot of extra work to sort them in lexicographical order.\
    \ On the other hand, `sort` on numbers would require a lot of extra work to sort\
    \ them in numerical order. ", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with all lowercase letters replaced by uppercase\
    \ letters.\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"\
    hello world\")\n\"HELLO WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO\
    \ WORLD\"\n>>> replace_lowercase(\"hello world\")\n\"HELLO WOR", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    return numbers.join(\" \")\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ with all the words in the string sorted alphabetically. \nFor example, sort_words(\"\
    The quick brown fox jumps over the lazy dog\") should return \"brown fox jumps\
    \ over quick lazy the\".\nHint: Use split() to split the string into an array\
    \ of words, and sort!() to sort the array.", "    numbers = split(numbers, \"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.4>", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string as input and returns the string with all\
    \ numbers sorted from smallest to largest.", "    numbers = numbers.split(\" \"\
    )\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string as input and returns the string with all numbers in sorted\
    \ order.\nFor example,", "    numbers = numbers[2:]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n", "    numbers = split(numbers,\
    \ \" \")\n    numbers.sort()\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with all the words in lower case. For example, \"The quick\
    \ brown fox jumps over the lazy dog\" becomes \"the quick brown fox jumps over\
    \ lazy dog\".", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns a string with all the characters in lower case.\
    \ For example, \"Hello World\" becomes \"hello world\".", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = numbers.join(\" \")\n    return numbers\n\
    end\n</code>\n<|/ a tags=julia,sorting,string |>\n<| a dscore=2 |>\nI wrote a\
    \ package that does this for you:\nhttps://github.com/jrm/sort-strings\n<code>\n\
    julia> using SortStrings", "    numbers = numbers[2:]\n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\n</code>\n<|/ a tags=sorting,haskell,list |>\n<| a dscore=0 |>\n<code>\n\
    import Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort()\n \
    \   return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.1>", "  \
    \  numbers = numbers[2:]\n    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n\
    \    return join(numbers, \" \")\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the string with all numbers in sorted order.\nFor example,\
    \ sort_numbers(\"one two three four five six seven eight nine\") returns \"one\
    \ two three four five six seven eight nine\".", "    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't work if the numbers are in reverse order. For example, `sort_numbers(\"\
    three one five\")` returns `\"three five one\"`.\n<|/ c |>\n<| c |>\nThe question\
    \ states \"Input is a space-delimited string of numberals from 'zero' to 'nine'.\"\
    \ so I assumed that would be the case.\n<|/ c |>\n<| c |>\nYes, but your function\
    \ doesn't do that. `sort_numbers(\"three one five\")` returns `\"three five one\"\
    `.\n<|/ c |>\n<| c |>\nI see what you mean. Thanks for pointing that out. I've\
    \ updated the answer to fix that.\n<|/ c |>\n<| a tags=julia,sorting |>\n<code>",
  "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers.join(\" \")\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI wrote a package to solve\
    \ this problem called SortNumbers.jl\n<code>\nusing SortNumbers\nsort_numbers(\"\
    three one five\")\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nI wrote a package\
    \ to solve this problem called SortNumbers.jl\n<code>\nusing SortNumbers\nsort_numbers(\"\
    three one five\")\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the string\
    \ with each word capitalized.\n>>> capitalize_words(\"the quick brown fox jumps\
    \ over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick bro", "    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n",
  "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all the words capitalized.\n>>> capitalize_words(\"the quick brown fox\
    \ jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n\
    >>> capitalize_words(\"the quick brown fox jumps over the lazy dog\")\n\"The Quick\
    \ Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"the quick brown\
    \ fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\
    \n>>> capitalize_words(\"the quick brown fox jumps over the lazy dog\")\n\"The\
    \ Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"the quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy dog\"\
    )\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"the\
    \ quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick bro", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    numbers.join(\"\
    \ \")\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    numbers\
    \ = numbers.split(\" \")\n    numbers.sort!\n    numbers = numbers.join(\" \"\
    )\n    return numbers\nend\n</cell>\n<code language=julia-1.1>", "    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers\
    \ = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.4>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick bro", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers\
    \ = \" \".join(numbers)\n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n    numbers =\
    \ join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| c |>\nI like this solution, because it doesn't require the user to import\
    \ any libraries. However, I still think it would be better to use the `sort` function\
    \ from the `Data.List` module instead of writing your own.\n<|/ c |>\n<| c |>\n\
    I agree, `Data.List` would be a better solution. I've updated my answer to include\
    \ a solution using `sort`.\n<|/ c |>\n<| c |>\nI like your solution, but I wonder\
    \ if there is a way to avoid the extra space at the end. `sort` seems to add it\
    \ automatically.\n<|/ c |>\n<| c |>\nYes, `sort` adds a space at the end. `sortBy\
    \ (comparing fst) . words` is another way to avoid the extra space.\n<|/ c |>\n\
    <| c |>\n`sortBy (comparing fst) . words` doesn't seem to work for me. `sortBy\
    \ (comparing fst) . words` returns `[\"one\", \"three\", \"five\"]` instead of\
    \ `[\"one\", \"three\", \"five\"]`.\n<|/ c |>\n<| a dscore=5 |>\nThe simplest\
    \ solution is to use the sort function from the Data.List module. \n<code>\nimport\
    \ Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort!\n    return\
    \ numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia,sorting,string |>\n<| a\
    \ |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>", "    numbers\
    \ = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List", "    numbers = numbers.split(\" \")\n    numbers.sort!\n\
    \    numbers.join(\" \")\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    A more general solution that also works with other types (including arrays) is\
    \ to use sortperm:\n<code>\njulia> sortperm([1,3,2])\n3-element Array{Int64,1}:\n\
    \ 2\n 1\n 3", "    numbers = split(numbers, \" \")\n    numbers = sort(numbers)\n\
    \    numbers = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>", " \
    \   numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = numbers.split(\" \")\n\
    \    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nThe string\
    \ may contain spaces.\nThe function should ignore punctuation and capitalization.\n\
    The function should ignore leading or trailing spaces.\nThe function should ignore\
    \ empty strings.\nThe function should ignore leading or trailing punctuation.\n\
    The function should ignore leading or trailing spaces.\nThe function should ignore\
    \ leading or trailing punctuation.\nThe function should ignore leading or trailing\
    \ spaces.\nThe function should ignore leading or trailing punctuation.\nThe function\
    \ should ignore leading or trailing spaces.\nThe function should ignore leading\
    \ or trailing punctuation.\nThe function should ignore leading or trailing spaces.\n\
    The function should ignore leading or trailing punctuation.\nThe function should\
    \ ignore leading or trailing spaces.\nThe function should ignore leading or trailing\
    \ punctuation.\nThe function should ignore leading or trailing spaces.\nThe function\
    \ should ignore leading or trailing punctuation.\nThe function should ignore leading\
    \ or trailing spaces.\nThe function should ignore leading or trailing punctuation.\n\
    The function should ignore leading or trailing spaces.\nThe function should ignore\
    \ leading or trailing punctuation.\nThe function should ignore leading or trailing\
    \ spaces.\nThe function should ignore leading or trailing punctuation.\nThe function\
    \ should ignore leading or trailing spaces.\nThe function should ignore leading\
    \ or trailing punctuation.\nThe function should ignore leading or trailing spaces.\n\
    The function should ignore leading or trailing punctuation.\nThe function should\
    \ ignore leading or trailing spaces.\nThe function should ignore leading or trailing\
    \ punctuation.\nThe function should ignore leading or trailing spaces.\nThe function\
    \ should ignore leading or trailing punctuation.\nThe function should ignore leading\
    \ or trailing spaces.\nThe function should ignore leading or trailing punctuation.\n\
    The function should ignore leading or trailing spaces.\nThe function should ignore\
    \ leading or trailing punctuation.\nThe function should ignore leading or trailing\
    \ spaces.\nThe function should ignore leading or trailing punctuation.\nThe function\
    \ should ignore leading or trailing spaces.\nThe function should ignore leading\
    \ or trailing punctuation.\nThe function should ignore leading or trailing spaces.\n\
    The function should ignore leading or trailing punctuation.\nThe function should\
    \ ignore leading or trailing spaces.\nThe function should ignore leading or trailing\
    \ punctuation.\nThe function should ignore leading or trailing spaces.\nThe function\
    \ should ignore leading or trailing punctuation.\nThe function should ignore leading\
    \ or trailing spaces.", "    numbers = numbers.split(\" \")\n    numbers.sort\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the string with all the words capitalized.\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick bro", "    numbers = numbers.split(\" \")\n    numbers.sort()\n    return\
    \ \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\nsort_numbers(\"\
    three one five\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the string with all numbers sorted from smallest\
    \ to largest.\nFor example, sort_numbers(\"three one five\") should return \"\
    one three five\".\nHint: Use a regular expression to find all numbers in the string.",
  "    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n", "    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
