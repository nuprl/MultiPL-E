name: HumanEval_153_Strongest_Extension
language: jl
prompt: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
  \    The extensions are to be used to load additional classes to the class. The\n\
  \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  \    letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n    You should find the strongest extension and return a string in this \n \
  \   format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
  \ with the same strength, you should\n    choose the one that comes first in the\
  \ list.\n    For example, if you are given \"Slices\" as the class and a list of\
  \ the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n    (its strength is -1).\n    Example:\n    >>> Strongest_Extension(\"my_class\"\
  , [\"AA\", \"Be\", \"CC\"])\n    \"my_class.AA\"\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
  \ extensions::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
  Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
  Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
  )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
  , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
  K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
  __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
  YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
  YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"\
  Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"\
  ]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\"\
  )\nend\n"
completions: []
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
