language: jl
name: HumanEval_42_incr_list
results:
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list that satisfies a condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37td7c1y.jl:11\nin expression starting at\
    \ /tmp/tmp37td7c1y.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i-1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvqm7gvn.jl:16\nin expression starting at\
    \ /tmp/tmpyvqm7gvn.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)+1]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm281xo_n.jl:12\nin expression starting at\
    \ /tmp/tmpm281xo_n.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8_7q50b.jl:11\nin expression starting at\
    \ /tmp/tmpv8_7q50b.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first element of a list that satisfies a given condition. For example, incr_list_satisfying(l::Vector{Int64},\
    \ x::Int64) should return the element x in l that satisfies x>0. Write a test\
    \ that checks that your function works as expected.\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3nk6xtc.jl:11\nin expression starting at\
    \ /tmp/tmpo3nk6xtc.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = 1:length(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurhn4shz.jl:14\nin expression starting at\
    \ /tmp/tmpurhn4shz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbhrl7vak.jl:11\nin expression starting at\
    \ /tmp/tmpbhrl7vak.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i - 1] = l[i\
    \ - 1] + 1\n        i = i - 1\n    end\n    return l\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1g6fk67k.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp1g6fk67k.jl:22\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n   Evaluated: [4, 3, 1] == [4, 3, 2]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1g6fk67k.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1g6fk67k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1g6fk67k.jl:23\n  Expression: candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n   Evaluated: [6, 3, 6, 3, 4,\
    \ 4, 10, 1, 123] == [6, 3, 6, 3, 4, 4, 10, 1, 124]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1g6fk67k.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1g6fk67k.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwoqbkga.jl:11\nin expression starting at\
    \ /tmp/tmpqwoqbkga.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppylenbk7.jl:12\nin expression starting at\
    \ /tmp/tmppylenbk7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    length(l) += 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, plus 1. \nFor example, incr_vec([1, 2, 3]) should\
    \ return [2, 3, 4].\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"length(l)\" around\
    \ /tmp/tmp4dy_bc_z.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4dy_bc_z.jl:1\n\
    in expression starting at /tmp/tmp4dy_bc_z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i - 1] = l[i\
    \ - 1] + 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2n_dr0a.jl:16\nin expression starting at\
    \ /tmp/tmpw2n_dr0a.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq09bkg6.jl:11\nin expression starting at\
    \ /tmp/tmpbq09bkg6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyomrmhgi.jl:11\nin expression starting at\
    \ /tmp/tmpyomrmhgi.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a list.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsbx0g6t.jl:11\nin expression starting at\
    \ /tmp/tmppsbx0g6t.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptp8wui5s.jl:12\nin expression starting at\
    \ /tmp/tmptp8wui5s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of a list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6juzndtj.jl:11\nin expression starting at\
    \ /tmp/tmp6juzndtj.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7dyya58.jl:11\nin expression starting at\
    \ /tmp/tmpr7dyya58.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i - 1] += 1\n\
    \        i -= 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements of a list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1,\
    \ 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3,\
    \ 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n\
    \    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\
    \    >>> sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n    >>>\
    \ sum([1, 2, 3, 5])\n    10\n    >>> sum([1, 2, 3, 5])\n    10\n\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpllk2nwl3.jl:16\nin expression starting at\
    \ /tmp/tmpllk2nwl3.jl:16\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the same vector with each element incremented by 1.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9ym26f7.jl:11\nin expression starting at\
    \ /tmp/tmp_9ym26f7.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    push!(l, l[end]+1)\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyzypw5k.jl:12\nin expression starting at\
    \ /tmp/tmpsyzypw5k.jl:12\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    length(l) += 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the mean of the\
    \ elements of an array. \nWrite a function that returns the median of the elements\
    \ of an array. \nWrite a function that returns the mode of the elements of an\
    \ array. \nWrite a function that returns the variance of the elements of an array.\
    \ \nWrite a function that returns the standard deviation of the elements of an\
    \ array. \nWrite a function that returns the minimum of the elements of an array.\
    \ \nWrite a function that returns the maximum of the elements of an array. \n\
    Write a function that returns the absolute value of the elements of an array.\
    \ \nWrite a function that returns the absolute value of the elements of a vector.\
    \ \nWrite a function that returns the elementwise product of the elements of two\
    \ arrays. \nWrite a function that returns the elementwise product of the elements\
    \ of two vectors. \nWrite a function that returns the elementwise product of the\
    \ elements of two arrays. \nWrite a function that returns the elementwise product\
    \ of the elements of two vectors. \nWrite a function that returns the elementwise\
    \ product of the elements of two arrays. \nWrite a function that returns the elementwise\
    \ product of the elements of two vectors. \nWrite a function that returns the\
    \ elementwise product of the elements of two arrays. \nWrite a function that returns\
    \ the elementwise product of the elements of two vectors. \nWrite a function that\
    \ returns the elementwise product of the elements of two arrays. \nWrite a function\
    \ that returns the elementwise product of the elements of two vectors. \nWrite\
    \ a function that returns the elementwise product of the elements of two arrays.\
    \ \nWrite a function that returns the elementwise product of the elements of two\
    \ vectors. \nWrite a function that returns the elementwise product of the elements\
    \ of two arrays. \nWrite a function that returns the elementwise product of the\
    \ elements of two vectors. \nWrite a function that returns the elementwise product\
    \ of the elements of two arrays. \nWrite a function that returns the elementwise\
    \ product of the elements of two vectors. \nWrite a function that returns the\
    \ elementwise product of the elements of two arrays. \nWrite a function that returns\
    \ the elementwise product of the elements of two vectors. \nWrite a function that\
    \ returns the elementwise product of the elements of two arrays. \nWrite a function\
    \ that returns the elementwise product of the elements of two vectors. \nWrite\
    \ a function that returns the elementwise product of the elements of two arrays.\
    \ \nWrite a function that returns the elementwise product of the elements of two\
    \ vectors. \nWrite a function that returns the elementwise product of the elements\
    \ of two arrays. \nWrite a function that returns the elementwise product of the\
    \ elements of two vectors. \nWrite a function that returns the elementwise product\
    \ of the elements of two arrays. \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"length(l)\" around\
    \ /tmp/tmpu9a25din.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu9a25din.jl:1\n\
    in expression starting at /tmp/tmpu9a25din.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list if it is non-zero, otherwise return 0.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa5oyui6h.jl:11\nin expression starting at\
    \ /tmp/tmpa5oyui6h.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns a list\
    \ with elements incremented by 1 starting from the second element of the list.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5vj0sy6.jl:11\nin expression starting at\
    \ /tmp/tmpg5vj0sy6.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = 1:length(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurhn4shz.jl:14\nin expression starting at\
    \ /tmp/tmpurhn4shz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.\n>>> incr_vector([1,\
    \ 2, 3])\n[1, 2, 3, 4]\n>>> incr_vector([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\n</text>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu4r38j2h.jl:11\nin expression starting at\
    \ /tmp/tmpu4r38j2h.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i -\
    \ 1] + 1\n        i -= 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxz6wiwhb.jl:16\nin expression starting at\
    \ /tmp/tmpxz6wiwhb.jl:16\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the same vector but with each element incremented by 1.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzp5nnj67.jl:11\nin expression starting at\
    \ /tmp/tmpzp5nnj67.jl:11\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyomrmhgi.jl:11\nin expression starting at\
    \ /tmp/tmpyomrmhgi.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.3>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first element of a list that satisfies a given condition. For example,\
    \ suppose you have a list of numbers and you want to find the first number greater\
    \ than or equal to 10. Write a function that returns the first element of the\
    \ list that satisfies this condition.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwu_acu14.jl:11\nin expression starting at\
    \ /tmp/tmpwu_acu14.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first element of a list multiplied by 2.\n    >>> mult_list([1, 2, 3])\n\
    \    6\n    >>> mult_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    30\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjzfwzdv_.jl:11\nin expression starting at\
    \ /tmp/tmpjzfwzdv_.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the list with elements incremented by 1 but starting from\
    \ position n. \nFor example, incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 2) should\
    \ return [6, 4, 6, 3, 4, 4, 10, 1, 124]. \nUse incr_list() to solve this problem.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5jd5z0r.jl:11\nin expression starting at\
    \ /tmp/tmpw5jd5z0r.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, incremented by 1.\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_jtq6fu.jl:11\nin expression starting at\
    \ /tmp/tmpc_jtq6fu.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector as input and returns a vector with elements incremented by 1.\n   \
    \ >>> incr_vec([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_vec([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpq1_w_q.jl:11\nin expression starting at\
    \ /tmp/tmpxpq1_w_q.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i-1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvqm7gvn.jl:16\nin expression starting at\
    \ /tmp/tmpyvqm7gvn.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ incr_list([1, 2, 3])\n@time incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first element of a vector,\
    \ incremented by 1.\nWrite a function that returns the last element of a vector,\
    \ decremented by 1.\nWrite a function that returns the sum of a vector, incremented\
    \ by 1.\nWrite a function that returns the product of a vector, incremented by\
    \ 1.\nWrite a function that returns the maximum of a vector, incremented by 1.\n\
    Write a function that returns the minimum of a vector, decremented by 1.\nWrite\
    \ a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write a function that returns the absolute value of a vector, decremented by 1.\n\
    Write a function that returns the absolute value of a vector, incremented by 1.\n\
    Write \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgxkwe5n.jl:11\nin expression starting at\
    \ /tmp/tmphgxkwe5n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the sum of the elements of a list.\nWrite a function\
    \ that returns the product of the elements of a list.\nWrite a function that returns\
    \ the maximum of the elements of a list.\nWrite a function that returns the minimum\
    \ of the elements of a list.\nWrite a function that returns the absolute value\
    \ of a number.\nWrite a function that returns the factorial of a number.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of times a value appears in a list.\nWrite\
    \ a function that returns the number of \nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8h_phsms.jl:11\nin expression starting at\
    \ /tmp/tmp8h_phsms.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, incremented by 1.\n    >>> incr_vec([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_vec([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1z8tcrl2.jl:12\nin expression starting at\
    \ /tmp/tmp1z8tcrl2.jl:12\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq09bkg6.jl:11\nin expression starting at\
    \ /tmp/tmpbq09bkg6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpidtrqnfp.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpidtrqnfp.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpidtrqnfp.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpidtrqnfp.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpidtrqnfp.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpidtrqnfp.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n    +(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpidtrqnfp.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ incr_list([1,2,3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5,3,5,2,3,3,9,0,123])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns a list with elements\
    \ incremented by 1 up to a specified number.\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2cbjfz6m.jl:11\nin expression starting at\
    \ /tmp/tmp2cbjfz6m.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a vector, plus 1.\n    >>> first_element([1, 2, 3])\n    2\n    >>>\
    \ first_element([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphysgmzhh.jl:11\nin expression starting at\
    \ /tmp/tmphysgmzhh.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    \n    while i > 1\n        l[i-1]\
    \ = l[i-1] + 1\n        i = i-1\n    end\n    \n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgvijmhn2.jl:18\nin expression starting at\
    \ /tmp/tmpgvijmhn2.jl:18\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = 1:length(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\n@time incr_list([1, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the first\
    \ element of a list that satisfies a condition. For example, if the list is [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123], the function should return 6. Write a test that checks\
    \ the function by comparing the result with the expected value.\nusing Test\n\n\
    @testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfve6scx.jl:14\nin expression starting at\
    \ /tmp/tmphfve6scx.jl:14\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpidtrqnfp.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpidtrqnfp.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpidtrqnfp.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpidtrqnfp.jl:16 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpidtrqnfp.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpidtrqnfp.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n    +(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmpidtrqnfp.jl:8\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxp5rdxbs.jl:11\nin expression starting at\
    \ /tmp/tmpxp5rdxbs.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i -\
    \ 1] + 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04j5moig.jl:16\nin expression starting at\
    \ /tmp/tmp04j5moig.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_idt98u_.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp_idt98u_.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp_idt98u_.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_idt98u_.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_idt98u_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp_idt98u_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp_idt98u_.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_idt98u_.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_idt98u_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp_idt98u_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices.jl:178"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.4>\n\
    @time incr_list([1,2,3])\n</cell>\n<code language=julia-1.4>\n@time incr_list([5,3,5,2,3,3,9,0,123])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should accept a parameter n and return a vector of prime numbers.\n\
    The function should return an error if n is not positive.\nThe function should\
    \ return an error if n is less than 2.\nThe function should return an error if\
    \ n is greater than the square root of the number of elements in the input vector.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2j7nbhj.jl:11\nin expression starting at\
    \ /tmp/tmpo2j7nbhj.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi75b_bl8.jl:12\nin expression starting at\
    \ /tmp/tmpi75b_bl8.jl:12\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpszi8wosc.jl:11\nin expression starting at\
    \ /tmp/tmpszi8wosc.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8g7496se.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8g7496se.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{DataType})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp8g7496se.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8g7496se.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8g7496se.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8g7496se.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{DataType})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp8g7496se.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8g7496se.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8g7496se.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8g7496se.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices."
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the first element of a vector, plus 1.\nWrite a function that returns\
    \ the first element of a vector, multiplied by 2.\nWrite a function that returns\
    \ the first element of a vector, divided by 2.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 2.\nWrite a function that\
    \ returns the first element of a vector, divided by 2, raised to the power of\
    \ 2.\nWrite a function that returns the first element of a vector, multiplied\
    \ by 2, raised to the power of 2.\nWrite a function that returns the first element\
    \ of a vector, divided by 2, raised to the power of 2, and rounded to the nearest\
    \ integer.\nWrite a function that returns the first element of a vector, divided\
    \ by 2, raised to the power of 2, and rounded to the nearest integer.\nWrite a\
    \ function that returns the first element of a vector, multiplied by 2, raised\
    \ to the power of 2, and rounded to the nearest integer.\nWrite a function that\
    \ returns the first element of a vector, divided by 2, raised to the power of\
    \ 2, and rounded to the nearest integer.\nWrite a function that returns the first\
    \ element of a vector, multiplied by 2, raised to the power of 2, and rounded\
    \ to the nearest integer.\nWrite a function that returns the first element of\
    \ a vector, divided by 2, raised to the power of 2, and rounded to the nearest\
    \ integer.\nWrite a function that returns the first element of a vector, multiplied\
    \ by 2, raised to the power of 2, and rounded to the nearest integer.\nWrite a\
    \ function that returns the first element of a vector, divided by 2, raised to\
    \ the power of 2, and rounded to the nearest integer.\nWrite a function that returns\
    \ the first element of a vector, multiplied by 2, raised to the power of 2, and\
    \ rounded to the nearest integer.\nWrite a function that returns the first element\
    \ of a vector, divided by 2, raised to the power of 2, and rounded to the nearest\
    \ integer.\nWrite a function that returns the first element of a vector, multiplied\
    \ by 2, raised to the power of 2, and rounded to the nearest integer.\nWrite a\
    \ function that returns the first element of a vector, divided by 2, raised to\
    \ the power of 2, and rounded to the nearest integer.\nWrite a function that returns\
    \ the first element of a vector, multiplied by 2, raised to the power of 2, and\
    \ rounded to the nearest integer.\nWrite a function that returns the first element\
    \ of a vector, divided by 2, raised to the power of 2, and rounded to the nearest\
    \ integer.\nWrite a function that returns the first element of a vector, multiplied\
    \ by 2, raised to the power of 2, and rounded to the nearest integer.\nWrite \n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01ixbhdr.jl:11\nin expression starting at\
    \ /tmp/tmp01ixbhdr.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.3>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of a vector. \nThe function should work for both vectors\
    \ and matrices.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5dh_oaws.jl:11\nin expression starting at\
    \ /tmp/tmp5dh_oaws.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns a new vector with elements incremented by 1.\n>>> incr_vector([1,\
    \ 2, 3])\n[2, 3, 4]\n>>> incr_vector([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n</text>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_q42hn_i.jl:11\nin expression starting at\
    \ /tmp/tmp_q42hn_i.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the same vector but with each element incremented by 1.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphzh6rv54.jl:12\nin expression starting at\
    \ /tmp/tmphzh6rv54.jl:12\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements of an array. \nWrite a function that returns\
    \ the sum of the elements of an array multiplied by 2.\nWrite a function that\
    \ returns the sum of the elements of an array multiplied by 3.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 4.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 5.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 6.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 7.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 8.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 9.\nWrite a function\
    \ that returns the sum of the elements of an array multiplied by 10.\nWrite a\
    \ function that returns the sum of the elements of an array multiplied by 11.\n\
    Write a function that returns the sum of the elements of an array multiplied by\
    \ 12.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 13.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 14.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 15.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 16.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 17.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 18.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 19.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 20.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 21.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 22.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 23.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 24.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 25.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 26.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 27.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 28.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 29.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 30.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 31.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 32.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 33.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 34.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 35.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 36.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 37.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 38.\nWrite a function that returns the sum of the elements of an array multiplied\
    \ by 39.\nWrite \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ngz201c.jl:11\nin expression starting at\
    \ /tmp/tmp5ngz201c.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i-1]\
    \ + 1\n        i = i-1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq73zm20y.jl:16\nin expression starting at\
    \ /tmp/tmpq73zm20y.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9man3bc.jl:11\nin expression starting at\
    \ /tmp/tmpb9man3bc.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlhkefwu.jl:11\nin expression starting at\
    \ /tmp/tmptlhkefwu.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n elements of a list.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2xkf4e45.jl:11\nin expression starting at\
    \ /tmp/tmp2xkf4e45.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rozf7fb.jl:12\nin expression starting at\
    \ /tmp/tmp0rozf7fb.jl:12\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a vector, plus 1. \nFor example, incr_vec([1, 2, 3]) should return\
    \ [2, 3, 4].\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphavx8en0.jl:11\nin expression starting at\
    \ /tmp/tmphavx8en0.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector and returns a new vector with each element incremented by 1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1te_z4vl.jl:11\nin expression starting at\
    \ /tmp/tmp1te_z4vl.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * length(l)\n    return l\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ovnh5_g.jl:12\nin expression starting at\
    \ /tmp/tmp_ovnh5_g.jl:12\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.4>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the list with elements incremented by 1 starting from the second element.\n\
    Hint: Use incr_list\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo52bbmk8.jl:11\nin expression starting at\
    \ /tmp/tmpo52bbmk8.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of elements in a list that satisfy a certain condition. For example, a list\
    \ with only positive integers would return 2.\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgpnei_t.jl:11\nin expression starting at\
    \ /tmp/tmpwgpnei_t.jl:11\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i-1]\
    \ + 1\n        i = i-1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq73zm20y.jl:16\nin expression starting at\
    \ /tmp/tmpq73zm20y.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the elements of a list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    60\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxtn8mf_.jl:11\nin expression starting at\
    \ /tmp/tmphxtn8mf_.jl:11\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = length(l) + 1:-1:1\n        l[i] = l[i] + 1\n\
    \    end\n    return l\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n\
    @testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84vo44kw.jl:14\nin expression starting at\
    \ /tmp/tmp84vo44kw.jl:14\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8opqrth3.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmp8opqrth3.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Vector{Int64}, ::Int64)\n  For element-wise addition,\
    \ use broadcasting with dot syntax: array .+ scalar\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n\
    \    +(!Matched::LinearAlgebra.UniformScaling, ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmp8opqrth3.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8opqrth3.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8opqrth3.jl:16\ntest set:\
    \ Error During Test at /tmp/tmp8opqrth3.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Vector{Int64},\
    \ ::Int64)\n  For element-wise addition, use broadcasting with dot syntax: array\
    \ .+ scalar\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at ~/.conda/envs/polyglot/share/julia/base/int.jl:87\n    +(!Matched::LinearAlgebra.UniformScaling,\
    \ ::Number) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/uniformscaling.jl:145\n\
    \    ...\n  Stacktrace:\n   [1] incr_list(l::Vector{Int64})\n     @ Main /tmp/tmp8opqrth3.jl:9\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test"
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i-1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements of the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofoktyh4.jl:16\nin expression starting at\
    \ /tmp/tmpofoktyh4.jl:16\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i-1\n    end\n    return l\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpz60d0uit.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpz60d0uit.jl:22\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n   Evaluated: [-1, 0, 1] == [4, 3, 2]\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz60d0uit.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz60d0uit.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz60d0uit.jl:23\n  Expression: candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n   Evaluated: [115, 116, 117,\
    \ 118, 119, 120, 121, 122, 123] == [6, 3, 6, 3, 4, 4, 10, 1, 124]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpz60d0uit.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpz60d0uit.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in a vector that are not equal to zero.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf90py6pi.jl:11\nin expression starting at\
    \ /tmp/tmpf90py6pi.jl:11\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a vector that is greater than a specified\
    \ value.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxrzqypz4.jl:12\nin expression starting at\
    \ /tmp/tmpxrzqypz4.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5d3t226n.jl:12\nin expression starting at\
    \ /tmp/tmp5d3t226n.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyomrmhgi.jl:11\nin expression starting at\
    \ /tmp/tmpyomrmhgi.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the maximum of\
    \ the elements of an array. \nWrite a function that returns the minimum of the\
    \ elements of an array. \nWrite a function that returns the absolute value of\
    \ the elements of an array. \nWrite a function that returns the sign of the elements\
    \ of an array. \nWrite a function that returns the absolute value of the first\
    \ element of an array. \nWrite a function that returns the sign of the first element\
    \ of an array. \nWrite a function that returns the sum of the first element of\
    \ an array. \nWrite a function that returns the product of the first element of\
    \ an array. \nWrite a function that returns the maximum of the first element of\
    \ an array. \nWrite a function that returns the minimum of the first element of\
    \ an array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \n\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsf3681wa.jl:11\nin expression starting at\
    \ /tmp/tmpsf3681wa.jl:11\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35fo0puj.jl:12\nin expression starting at\
    \ /tmp/tmp35fo0puj.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    push!(l, l[end]+1)\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the list with the elements reversed.\n    >>> reverse_list([1,\
    \ 2, 3])\n    [3, 2, 1]\n    >>> reverse_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    \    [123, 0, 9, 5, 3, 2, 3, 5, 1]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphvpcyvcy.jl:12\nin expression starting at\
    \ /tmp/tmphvpcyvcy.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of a list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>>\
    \ sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n\
    60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123, 0])\n60\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123, 0])\n60\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mbtbt42.jl:11\nin expression starting at\
    \ /tmp/tmp7mbtbt42.jl:11\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptp8wui5s.jl:12\nin expression starting at\
    \ /tmp/tmptp8wui5s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list that satisfies a given condition. For example, if\
    \ the condition is that all elements are positive, then the function should return\
    \ the first element of a list that satisfies this condition. For example, if the\
    \ list contains only positive numbers, then the function should return the first\
    \ positive number. Otherwise, it should return -1.\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpws30gzd_.jl:12\nin expression starting at\
    \ /tmp/tmpws30gzd_.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxp5rdxbs.jl:11\nin expression starting at\
    \ /tmp/tmpxp5rdxbs.jl:11\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnghigd1y.jl:12\nin expression starting at\
    \ /tmp/tmpnghigd1y.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times a value appears in a list. For example, incr_count([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) should return 3 because 3 appears 3 times in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cbt7r6r.jl:11\nin expression starting at\
    \ /tmp/tmp6cbt7r6r.jl:11\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = 1:length(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the elements\
    \ in a list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqtkc1mt.jl:14\nin expression starting at\
    \ /tmp/tmpcqtkc1mt.jl:14\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    push!(l, l[end]+1)\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first element of a list that satisfies a predicate.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4axoriz.jl:12\nin expression starting at\
    \ /tmp/tmpz4axoriz.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i-1\n    end\n    l\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg573wocp.jl:16\nin expression starting at\
    \ /tmp/tmpg573wocp.jl:16\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a vector, plus 1. \nThe function should work for both vectors and\
    \ matrices.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6r8f2dx_.jl:11\nin expression starting at\
    \ /tmp/tmp6r8f2dx_.jl:11\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31mg5g8f.jl:11\nin expression starting at\
    \ /tmp/tmp31mg5g8f.jl:11\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the elements of an array. \nThe function should take an array as\
    \ input, and return a scalar.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2onkcs_.jl:11\nin expression starting at\
    \ /tmp/tmp_2onkcs_.jl:11\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a vector that are greater than a given value.\nusing Test\n\n\
    @testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxdy7uqk.jl:11\nin expression starting at\
    \ /tmp/tmpqxdy7uqk.jl:11\n"
  stdout: ''
  timestamp: 1659822701
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of integers incremented by 2.\n>>>\
    \ incr_vec([1, 2, 3])\n[3, 4, 5]\n>>> incr_vec([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n</text>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65j1ssw0.jl:12\nin expression starting at\
    \ /tmp/tmp65j1ssw0.jl:12\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)+1]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm281xo_n.jl:12\nin expression starting at\
    \ /tmp/tmpm281xo_n.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, plus 1.\nWrite a function that returns the first\
    \ element of a vector, multiplied by 2.\nWrite a function that returns the first\
    \ element of a vector, divided by 3.\nWrite a function that returns the first\
    \ element of a vector, raised to the power of 4.\nWrite a function that returns\
    \ the first element of a vector, modulo 5.\nWrite a function that returns the\
    \ first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the first element of a vector, modulo 5.\nWrite a function that returns\
    \ the first element of a vector, raised to the power of 5.\nWrite a function that\
    \ returns the \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ik8kqf3.jl:11\nin expression starting at\
    \ /tmp/tmp1ik8kqf3.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i-1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvqm7gvn.jl:16\nin expression starting at\
    \ /tmp/tmpyvqm7gvn.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, incremented by 1.\n    >>> incr_vec([1, 2, 3])\n\
    \    [2, 3, 4]\n    >>> incr_vec([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2_u946o.jl:11\nin expression starting at\
    \ /tmp/tmpa2_u946o.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_idt98u_.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp_idt98u_.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp_idt98u_.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_idt98u_.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_idt98u_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp_idt98u_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp_idt98u_.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_idt98u_.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_idt98u_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp_idt98u_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices.jl:178"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8g7496se.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8g7496se.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{DataType})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp8g7496se.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8g7496se.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8g7496se.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8g7496se.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{DataType})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp8g7496se.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8g7496se.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8g7496se.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8g7496se.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices."
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyomrmhgi.jl:11\nin expression starting at\
    \ /tmp/tmpyomrmhgi.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprn7a4ryr.jl:11\nin expression starting at\
    \ /tmp/tmprn7a4ryr.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq09bkg6.jl:11\nin expression starting at\
    \ /tmp/tmpbq09bkg6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)]\n    return l\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzg_h7hf6.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzg_h7hf6.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpzg_h7hf6.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzg_h7hf6.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzg_h7hf6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzg_h7hf6.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmpzg_h7hf6.jl:9\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmpzg_h7hf6.jl:18 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmpzg_h7hf6.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzg_h7hf6.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices.jl:178"
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp_idt98u_.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp_idt98u_.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp_idt98u_.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_idt98u_.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_idt98u_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp_idt98u_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp_idt98u_.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp_idt98u_.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp_idt98u_.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp_idt98u_.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices.jl:178"
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of a vector. \nThe function should\
    \ accept a vector as input and output a scalar.\nThe function should work for\
    \ both scalars and vectors.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpiindkd.jl:12\nin expression starting at\
    \ /tmp/tmpmpiindkd.jl:12\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd8df7j2g.jl:12\nin expression starting at\
    \ /tmp/tmpd8df7j2g.jl:12\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppv1mzc_7.jl:16\nin expression starting at\
    \ /tmp/tmppv1mzc_7.jl:16\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lgtxuuw.jl:11\nin expression starting at\
    \ /tmp/tmp_lgtxuuw.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.3>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector and returns a vector with elements incremented by 1.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_fkykmm.jl:11\nin expression starting at\
    \ /tmp/tmpm_fkykmm.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_zo__12.jl:11\nin expression starting at\
    \ /tmp/tmpg_zo__12.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list.\nWrite a function that returns the last element\
    \ of a list.\nWrite a function that returns the element at a given index in a\
    \ list.\nWrite a function that returns the elements in a list after a given index\
    \ in a list.\nWrite a function that returns the elements in a list before a given\
    \ index in a list.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given indexes.\nWrite a function that returns the elements in a list between\
    \ two given index\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz8gia2nw.jl:11\nin expression starting at\
    \ /tmp/tmpz8gia2nw.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)+1]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpim2vuk74.jl:11\nin expression starting at\
    \ /tmp/tmpim2vuk74.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the elements of a list after a specified index.\nFor example, incr_list([1,\
    \ 2, 3], 2) should return [3, 5].\nusing Test\n\n@testset begin\n\ncandidate =\
    \ incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphjmmwi0d.jl:11\nin expression starting at\
    \ /tmp/tmphjmmwi0d.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, if it exists. Otherwise, return 0.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzjjw1u67.jl:11\nin expression starting at\
    \ /tmp/tmpzjjw1u67.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the maximum of\
    \ the elements of an array. \nWrite a function that returns the minimum of the\
    \ elements of an array. \nWrite a function that returns the number of elements\
    \ in a vector. \nWrite a function that returns the number of elements in a matrix.\
    \ \nWrite a function that returns the number of elements in a 2D array. \nWrite\
    \ a function that returns the number of elements in a 3D array. \nWrite a function\
    \ that returns the number of elements in a 4D array. \nWrite a function that returns\
    \ the number of elements in a 5D array. \nWrite a function that returns the number\
    \ of elements in a 6D array. \nWrite a function that returns the number of elements\
    \ in a 7D array. \nWrite a function that returns the number of elements in a 8D\
    \ array. \nWrite a function that returns the number of elements in a 9D array.\
    \ \nWrite a function that returns the number of elements in a 10D array. \nWrite\
    \ a function that returns the number of elements in a 11D array. \nWrite a function\
    \ that returns the number of elements in a 12D array. \nWrite a function that\
    \ returns the number of elements in a 13D array. \nWrite a function that returns\
    \ the number of elements in a 14D array. \nWrite a function that returns the number\
    \ of elements in a 15D array. \nWrite a function that returns the number of elements\
    \ in a 16D array. \nWrite a function that returns the number of elements in a\
    \ 17D array. \nWrite a function that returns the number of elements in a 18D array.\
    \ \nWrite a function that returns the number of elements in a 19D array. \nWrite\
    \ a function that returns the number of elements in a 20D array. \nWrite a function\
    \ that returns the number of elements in a 21D array. \nWrite a function that\
    \ returns the number of elements in a 22D array. \nWrite a function that returns\
    \ the number of elements in a 23D array. \nWrite a function that returns the number\
    \ of elements in a 24D array. \nWrite a function that returns the number of elements\
    \ in a 25D array. \nWrite a function that returns the number of elements in a\
    \ 26D array. \nWrite a function that returns the number of elements in a 27D array.\
    \ \nWrite a function that returns the number of elements in a 28D array. \nWrite\
    \ a function that returns the number of elements in a 29D array. \nWrite a function\
    \ that returns the number of elements in a 30D array. \nWrite a function that\
    \ returns the number of elements in a 31D array. \nWrite a function that returns\
    \ the number of elements in a 32D array. \nWrite a function that returns the number\
    \ of elements in a 33D array. \nWrite a function that returns the \nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjzuajbg.jl:11\nin expression starting at\
    \ /tmp/tmpkjzuajbg.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7yrun92p.jl:11\nin expression starting at\
    \ /tmp/tmp7yrun92p.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, incremented by 1.\nWrite a function that returns\
    \ the last element of a vector, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a given index, incremented by 1.\nWrite a function that returns\
    \ the element at a given index, decremented by 1.\nWrite a function that returns\
    \ the element at a \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6rf1l3v.jl:11\nin expression starting at\
    \ /tmp/tmpa6rf1l3v.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)+1]\n    return l\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp9aqp4kp3.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp9aqp4kp3.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp9aqp4kp3.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp9aqp4kp3.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp9aqp4kp3.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp9aqp4kp3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{Int64})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp9aqp4kp3.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp9aqp4kp3.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp9aqp4kp3.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp9aqp4kp3.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices.jl:178"
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns a list with\
    \ elements incremented by 1 starting at index i. For example, incr_list([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123], 3) should return [6, 4, 6, 3, 4, 4, 10, 1, 124]. Hint:\
    \ Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3qrqs9qg.jl:11\nin expression starting at\
    \ /tmp/tmp3qrqs9qg.jl:11\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_zo__12.jl:11\nin expression starting at\
    \ /tmp/tmpg_zo__12.jl:11\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjie3bdex.jl:12\nin expression starting at\
    \ /tmp/tmpjie3bdex.jl:12\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8evzu33.jl:11\nin expression starting at\
    \ /tmp/tmpv8evzu33.jl:11\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd8df7j2g.jl:12\nin expression starting at\
    \ /tmp/tmpd8df7j2g.jl:12\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first element of a vector, incremented by 1.\nWrite a function that\
    \ returns the last element of a vector, decremented by 1.\nWrite a function that\
    \ returns the sum of a vector, incremented by 1.\nWrite a function that returns\
    \ the product of a vector, multiplied by 1.\nWrite a function that returns the\
    \ maximum of a vector, incremented by 1.\nWrite a function that returns the minimum\
    \ of a vector, decremented by 1.\nWrite a function that returns the absolute value\
    \ of a vector.\nWrite a function that returns the sign of a vector.\nWrite a function\
    \ that returns the absolute value of a vector, multiplied by 1.\nWrite a function\
    \ that returns the sign of a vector, multiplied by 1.\nWrite a function that returns\
    \ the sum of a vector, incremented by 1, multiplied by 1.\nWrite a function that\
    \ returns the product of a vector, multiplied by 1, multiplied by 1.\nWrite a\
    \ function that returns the maximum of a vector, incremented by 1, multiplied\
    \ by 1.\nWrite a function that returns the minimum of a vector, decremented by\
    \ 1, multiplied by 1.\nWrite a function that returns the absolute value of a vector,\
    \ multiplied by 1.\nWrite a function that returns the sign of a vector, multiplied\
    \ by 1.\nWrite a function that returns the sum of a vector, incremented by 1,\
    \ multiplied by 1, multiplied by 1.\nWrite a function that returns the product\
    \ of a vector, multiplied by 1, multiplied by 1, multiplied by 1.\nWrite a function\
    \ that returns the maximum of a vector, incremented by 1, multiplied by 1, multiplied\
    \ by 1.\nWrite a function that returns the minimum of a vector, decremented by\
    \ 1, multiplied by 1, multiplied by 1.\nWrite a function that returns the absolute\
    \ value of a vector, multiplied by 1, multiplied by 1.\nWrite a function that\
    \ returns the sign of a vector, multiplied by 1, multiplied by 1.\nWrite a function\
    \ that returns the sum of a vector, incremented by 1, multiplied by 1, multiplied\
    \ by 1, multiplied by 1.\nWrite a function that returns the product of a vector,\
    \ multiplied by 1, multiplied by 1, multiplied by 1, multiplied by 1.\nWrite a\
    \ function that returns the maximum of a vector, incremented by 1, multiplied\
    \ by 1, multiplied by 1, multiplied by 1.\nWrite a function that returns the minimum\
    \ of a vector, decremented by 1, multiplied by 1, multiplied by 1, multiplied\
    \ by 1.\nWrite a function that returns the absolute value of a vector, multiplied\
    \ by 1, multiplied by 1, multiplied by 1.\nWrite a function that returns the sign\
    \ of a vector, multiplied by 1, multiplied by 1, multiplied by 1.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4om5snj.jl:11\nin expression starting at\
    \ /tmp/tmpp4om5snj.jl:11\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i-1]\
    \ + 1\n        i -= 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6l73d6f8.jl:16\nin expression starting at\
    \ /tmp/tmp6l73d6f8.jl:16\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnghigd1y.jl:12\nin expression starting at\
    \ /tmp/tmpnghigd1y.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppv1mzc_7.jl:16\nin expression starting at\
    \ /tmp/tmppv1mzc_7.jl:16\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i -\
    \ 1] + 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04j5moig.jl:16\nin expression starting at\
    \ /tmp/tmp04j5moig.jl:16\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptz94wux5.jl:16\nin expression starting at\
    \ /tmp/tmptz94wux5.jl:16\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements of a list.\n    >>> sum([1, 2, 3])\n    6\n\
    \    >>> sum([1, 2, 3, 4])\n    10\n    >>> sum([1, 2, 3, 4, 5])\n    15\n   \
    \ >>> sum([1, 2, 3, 4, 5, 6])\n    21\n    >>> sum([1, 2, 3, 4, 5, 6, 7])\n  \
    \  28\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n    36\n    >>> sum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9])\n    45\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    55\n\
    \    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n    66\n    >>> sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n    76\n    >>> sum([1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13])\n    86\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14])\n    96\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15])\n    105\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16])\n    114\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17])\n    123\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18])\n    132\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19])\n    142\n    >>> sum([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n    152\n    >>> sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n \
    \   162\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22])\n    172\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n    182\n    >>> sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24])\n    192\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n    202\n    >>> sum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26])\n    212\n    >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n    222\n    >>> sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6y6ewj1.jl:11\nin expression starting at\
    \ /tmp/tmpp6y6ewj1.jl:11\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    length(l) += 1 \n    return l\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"length(l)\" around\
    \ /tmp/tmp43o9g0mk.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp43o9g0mk.jl:1\n\
    in expression starting at /tmp/tmp43o9g0mk.jl:1\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that takes a vector and\
    \ returns a vector with each element incremented by 1.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuyiulgdv.jl:11\nin expression starting at\
    \ /tmp/tmpuyiulgdv.jl:11\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)+1]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm281xo_n.jl:12\nin expression starting at\
    \ /tmp/tmpm281xo_n.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.\n>>> incr_vector([1,\
    \ 2, 3])\n[1, 2, 3, 4]\n>>> incr_vector([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124]\n</text>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rgafshw.jl:11\nin expression starting at\
    \ /tmp/tmp_rgafshw.jl:11\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i - 1] = l[i\
    \ - 1] + 1\n        i = i - 1\n    end\n    return l\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1g6fk67k.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp1g6fk67k.jl:22\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n   Evaluated: [4, 3, 1] == [4, 3, 2]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1g6fk67k.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1g6fk67k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1g6fk67k.jl:23\n  Expression: candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n   Evaluated: [6, 3, 6, 3, 4,\
    \ 4, 10, 1, 123] == [6, 3, 6, 3, 4, 4, 10, 1, 124]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1g6fk67k.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1g6fk67k.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.4>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the first element of a vector, plus 1. \nFor example, incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) = 6.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp67phz54m.jl:11\nin expression starting at\
    \ /tmp/tmp67phz54m.jl:11\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l) - 1\n    while i >= 0\n        l[i+1] =\
    \ l[i] + 1\n        i -= 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1961_ym.jl:16\nin expression starting at\
    \ /tmp/tmpb1961_ym.jl:16\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i] +\
    \ 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_esp7kou.jl:16\nin expression starting at\
    \ /tmp/tmp_esp7kou.jl:16\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfs0y2jr.jl:11\nin expression starting at\
    \ /tmp/tmpgfs0y2jr.jl:11\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the elements of an array. \nWrite a function\
    \ that returns the product of the elements of an array. \nWrite a function that\
    \ returns the maximum of the elements of an array. \nWrite a function that returns\
    \ the minimum of the elements of an array. \nWrite a function that returns the\
    \ number of elements in a vector. \nWrite a function that returns the number of\
    \ non-zero elements in a vector. \nWrite a function that returns the number of\
    \ non-zero elements in a matrix. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero elements in a tensor. \nWrite a function that returns the number of\
    \ non-zero \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps03khvj7.jl:12\nin expression starting at\
    \ /tmp/tmps03khvj7.jl:12\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5d3t226n.jl:12\nin expression starting at\
    \ /tmp/tmp5d3t226n.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphccwqf6n.jl:11\nin expression starting at\
    \ /tmp/tmphccwqf6n.jl:11\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the first element of a list.\nHint: Use head function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfx426f8.jl:12\nin expression starting at\
    \ /tmp/tmpsfx426f8.jl:12\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ numbers and returns the sum of the numbers in the list.\nWrite a function that\
    \ takes a list of numbers and returns the product of the numbers in the list.\n\
    Write a function that takes a list of numbers and returns the mean of the numbers\
    \ in the list.\nWrite a function that takes a list of numbers and returns the\
    \ median of the numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8yqup9p7.jl:11\nin expression starting at\
    \ /tmp/tmp8yqup9p7.jl:11\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpavwj54e9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpavwj54e9.jl:1\n\
    in expression starting at /tmp/tmpavwj54e9.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8g7496se.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8g7496se.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178\
    \ [inlined]\n   [2] promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{DataType})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp8g7496se.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8g7496se.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8g7496se.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8g7496se.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([3, 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match:\
    \ a has dims (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n\
    \  Stacktrace:\n   [1] promote_shape\n     @ ./indices.jl:178 [inlined]\n   [2]\
    \ promote_shape\n     @ ./indices.jl:169 [inlined]\n   [3] +(A::Vector{Int64},\
    \ Bs::Vector{DataType})\n     @ Base ./arraymath.jl:45\n   [4] incr_list(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp8g7496se.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmp8g7496se.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp8g7496se.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8g7496se.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\
    \  DimensionMismatch(\"dimensions must match: a has dims (Base.OneTo(9),), b has\
    \ dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape\n\
    \     @ ./indices."
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the elements of a list that are less than a given value.  For example, suppose\
    \ that l = [1, 2, 3, 7, 8, 9] and that val = 4.  Then the function should return\
    \ [7, 8, 9].\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpym69r_h0.jl:11\nin expression starting at\
    \ /tmp/tmpym69r_h0.jl:11\n"
  stdout: ''
  timestamp: 1659822703
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5d3t226n.jl:12\nin expression starting at\
    \ /tmp/tmp5d3t226n.jl:12\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)+1]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm281xo_n.jl:12\nin expression starting at\
    \ /tmp/tmpm281xo_n.jl:12\n"
  stdout: ''
