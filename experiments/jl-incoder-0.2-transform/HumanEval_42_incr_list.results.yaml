language: jl
name: HumanEval_42_incr_list
results:
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list that satisfies a condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is greater than or equal to 10. Write a function that takes in a list and\
    \ a condition as arguments and returns the first element of the list that satisfies\
    \ the condition. For example, suppose you have a list of integers and you want\
    \ to find the first element of the list that is greater than or equal to 10. Write\
    \ a function that takes in a list and a condition as arguments and returns the\
    \ first element of the list that satisfies the condition. For example, suppose\
    \ you have a list of integers and you want to find the first element of the list\
    \ that is \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37td7c1y.jl:11\nin expression starting at\
    \ /tmp/tmp37td7c1y.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i-1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvqm7gvn.jl:16\nin expression starting at\
    \ /tmp/tmpyvqm7gvn.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)+1]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm281xo_n.jl:12\nin expression starting at\
    \ /tmp/tmpm281xo_n.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8_7q50b.jl:11\nin expression starting at\
    \ /tmp/tmpv8_7q50b.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first element of a list that satisfies a given condition. For example, incr_list_satisfying(l::Vector{Int64},\
    \ x::Int64) should return the element x in l that satisfies x>0. Write a test\
    \ that checks that your function works as expected.\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo3nk6xtc.jl:11\nin expression starting at\
    \ /tmp/tmpo3nk6xtc.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0k1qb6dp.jl:11\nin expression starting at\
    \ /tmp/tmp0k1qb6dp.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = 1:length(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurhn4shz.jl:14\nin expression starting at\
    \ /tmp/tmpurhn4shz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.4>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n\
    >>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    6\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n6\n>>> sum([1, 2, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbhrl7vak.jl:11\nin expression starting at\
    \ /tmp/tmpbhrl7vak.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qp1s8x_.jl:11\nin expression starting at\
    \ /tmp/tmp1qp1s8x_.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i - 1] = l[i\
    \ - 1] + 1\n        i = i - 1\n    end\n    return l\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 2 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1g6fk67k.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp1g6fk67k.jl:22\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n   Evaluated: [4, 3, 1] == [4, 3, 2]\nStacktrace:\n [1]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1g6fk67k.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1g6fk67k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp1g6fk67k.jl:23\n  Expression: candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n   Evaluated: [6, 3, 6, 3, 4,\
    \ 4, 10, 1, 123] == [6, 3, 6, 3, 4, 4, 10, 1, 124]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1g6fk67k.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1g6fk67k.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     2      3\n"
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqwoqbkga.jl:11\nin expression starting at\
    \ /tmp/tmpqwoqbkga.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppylenbk7.jl:12\nin expression starting at\
    \ /tmp/tmppylenbk7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    length(l) += 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, plus 1. \nFor example, incr_vec([1, 2, 3]) should\
    \ return [2, 3, 4].\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"length(l)\" around\
    \ /tmp/tmp4dy_bc_z.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4dy_bc_z.jl:1\n\
    in expression starting at /tmp/tmp4dy_bc_z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i - 1] = l[i\
    \ - 1] + 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2n_dr0a.jl:16\nin expression starting at\
    \ /tmp/tmpw2n_dr0a.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq09bkg6.jl:11\nin expression starting at\
    \ /tmp/tmpbq09bkg6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyomrmhgi.jl:11\nin expression starting at\
    \ /tmp/tmpyomrmhgi.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a list.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsbx0g6t.jl:11\nin expression starting at\
    \ /tmp/tmppsbx0g6t.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptp8wui5s.jl:12\nin expression starting at\
    \ /tmp/tmptp8wui5s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of a list.\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6juzndtj.jl:11\nin expression starting at\
    \ /tmp/tmp6juzndtj.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \n    >>> sum([1, 2, 3])\n    6\n    >>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7dyya58.jl:11\nin expression starting at\
    \ /tmp/tmpr7dyya58.jl:11\n"
  stdout: ''
