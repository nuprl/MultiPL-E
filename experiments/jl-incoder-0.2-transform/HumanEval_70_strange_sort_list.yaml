name: HumanEval_70_strange_sort_list
language: jl
prompt: "\"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
  \ sorting, is when you start with the minimum value,\n    then maximum of the remaining\
  \ integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
  \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
  \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
  \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
  \ 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
  \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
  \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
  \ == [111111])\nend\n"
completions: ["    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n\
    \    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n    \n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements of the vector.", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work if the list has duplicates.\n<|/ c |>\n<| c |>\nIt does work if\
    \ you sort the list first. `sort(lst)` sorts the list in-place.\n<|/ c |>\n<|\
    \ c |>\nYes, but `sort` returns a new list with the sorted elements. So `sort(lst)`\
    \ returns a new list with the sorted elements. `sort(sort(lst))` returns a new\
    \ list with the sorted elements. `sort(sort(sort(lst)))` returns a new list with\
    \ the sorted elements. `sort(sort(sort(sort(lst))))` returns a new list with the\
    \ sorted elements. `sort(sort(sort(sort(sort(lst)))))` returns a new list with\
    \ the sorted elements. `sort(sort(sort(sort(sort(sort(sort(lst)))))` returns a\
    \ new list with the sorted elements. `sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(lst))))))))`\
    \ returns a new list with the sorted elements. `sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(sort(",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = lst.[minimum:maximum]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the list sorted in descending order.", "    if length(lst) == 0 \n \
    \       return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum_index = findfirst(x -> x == minimum, lst, 0)\n    maximum_index\
    \ = findfirst(x -> x == maximum, lst, length(lst))\n    \n    lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is even, false otherwise. \nWrite a function that returns true if the given\
    \ number is odd, false otherwise. \nWrite a function that returns the factorial\
    \ of a given number. \nWrite a function that returns the factorial of a given\
    \ number modulo 10. \nWrite a function that returns the factorial of a given number\
    \ modulo 100. \nWrite a function that returns the factorial of a given number\
    \ modulo 1000. \nWrite a function that returns the factorial of a given number\
    \ modulo 10000. \nWrite a function that returns the factorial of a given number\
    \ modulo 100000. \nWrite a function that returns the factorial of a given number\
    \ modulo 1000000. \nWrite a function that returns the factorial of a given number\
    \ modulo 10000000. \nWrite a function that returns the factorial of a given number\
    \ modulo 100000000. \nWrite a function that returns the factorial of a given number\
    \ modulo 1000000000. \nWrite a function that returns the factorial of a given\
    \ number modulo 10000000000. \nWrite a function that returns the factorial of\
    \ a given number modulo 100000000000. \nWrite a function that returns the factorial\
    \ of a given number modulo 1000000000000. \nWrite a function that returns the\
    \ factorial of a given number modulo 10000000000000. \nWrite a function that returns\
    \ the factorial of a given number modulo 100000000000000. \nWrite a function that\
    \ returns the factorial of a given number modulo 1000000000000000. \nWrite a function\
    \ that returns the factorial of a given number modulo 10000000000000000. \nWrite\
    \ a function that returns the factorial of a given number modulo 100000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 1000000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 10000000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 100000000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 1000000000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 10000000000000000000000.\
    \ \nWrite a function that returns the factorial of a given number modulo 100000000000000000000000.\
    \ \nWrite a function that returns the factorial ", "    if length(lst) == 0 \n\
    \        return [] \n    end\n    \n    minimum = minimum(lst)\n    maximum =\
    \ maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of integers sorted from\
    \ smallest to largest.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't work for\
    \ `strange_sort_list([5, 5, 5, 5])` because `sort` sorts in ascending order and\
    \ `reverse` reverses the order of the elements.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing that out. I fixed the code accordingly.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>", "    \n    if length(lst) == 0\n        return lst\n    end", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of integers and returns the same vector, except with all\
    \ the integers sorted from smallest to largest.", "    if length(lst) == 0 \n\
    \        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    \n    lst\
    \ = sort(lst)\n    \n    i = 0\n    \n    while i < length(lst)\n        \n  \
    \      if lst[i] > lst[i + 1]\n            \n            lst[i], lst[i + 1] =\
    \ lst[i + 1], lst[i]\n            \n            i += 1\n            \n       \
    \ elseif lst[i] < lst[i + 1]\n            \n            lst[i], lst[i + 1] = lst[i\
    \ + 1], lst[i]\n            \n            i += 1\n            \n        else\n\
    \            \n            i += 1\n        end\n    end\n    \n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return [] \n  \
    \  \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n    \n    lst =\
    \ sort(lst) \n    \n    lst = lst.[minimum:maximum] \n    \n    return lst \n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a dscore=2 |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a tags=julia,sorting,arrays |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a dscore=1 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| a tags=julia,sorting,arrays\
    \ |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting,arrays |>\n<code>\n\
    julia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a tags=julia,sorting,arrays |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| a |>\n<code>\n\
    julia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise\nWrite a function that takes a list of\
    \ integers and returns a new list with all the even numbers first, then all the\
    \ odd numbers, then all the numbers that are not even.", "    if length(lst) ==\
    \ 0 \n        return [] \n    \n    minimum = min(lst) \n    maximum = max(lst)\
    \ \n    \n    middle = minimum + maximum/2 \n    \n    lst1 = strange_sort_list(lst[minimum:middle])\
    \ \n    lst2 = strange_sort_list(lst[middle:maximum]) \n    \n    lst3 = lst1\
    \ + lst2 \n    \n    return lst3 \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a function that sorts any list with\
    \ any number of elements:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=2 |>\n<code>\njulia>\
    \ function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n           lst\
    \ = sort(lst)\n           lst = reverse(lst)\n           return lst\n       end\n\
    strange_sort_list (generic function with 1 method)", "    if length(lst) == 0\
    \ \n        return [] \n    else \n        minimum = minimum(lst) \n        maximum\
    \ = maximum(lst) \n        minimum = minimum + 1 \n        maximum = maximum -\
    \ 1 \n        lst = sort(lst) \n        lst = lst[minimum:maximum] \n        return\
    \ lst \nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=2 |>\n<code>",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\nThe sort function sorts\
    \ the array in place, so you can just do:\n<code>\njulia> sort([5,4,3,2,1])\n\
    1-element Array{Int64,1}:\n 1\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n\
    The sort function sorts the array in place, so you can just do:\n<code>\njulia>\
    \ sort([5,4,3,2,1])\n1-element Array{Int64,1}:\n 1\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\nThe sort function sorts the array in place,\
    \ so you can just do:\n<code>\njulia> sort([5,4,3,2,1])\n1-element Array{Int64,1}:\n\
    \ 1\n</code>\n<|/ a dscore=3 |>\n<| a tags=sorting,julia |>\nThe sort function\
    \ sorts the array in place, so you can just do:\n<code>\njulia> sort([5,4,3,2,1])\n\
    1-element Array{Int64,1}:\n 1\n</code>\n<|/ a dscore=3 |>\n<| a tags=sorting,julia\
    \ |>\nThe sort function sorts the array in place, so you can just do:\n<code>\n\
    julia> sort([5,4,3,2,1])\n1-element Array{Int64,1}:\n 1\n</code>\n<|/ a dscore=3\
    \ |>\n<| a dscore=2 |>\nThe sort function sorts the array in place, so you can\
    \ just do:\n<code>\njulia> sort([5,4,3,2,1])\n1-element Array{Int64,1}:\n 1\n\
    </code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\nThe sort function\
    \ sorts the array in place, so you can just do:\n<code>\njulia> sort([5,4,3,2,1])\n\
    1-element Array{Int64,1}:\n 1\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia\
    \ |>\nThe sort function sorts the array in place, so you can just do:\n<code>\n\
    julia> sort([5,4,3,2,1])\n1-element Array{Int64,1}:\n 1\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nThe sort function sorts the array in place", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers sorted from smallest to largest.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a |>\n<| a tags=sorting,julia\
    \ |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers sorted from smallest to largest.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| c |>\nThis doesn't work if you have negative numbers in the list.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work if you have negative numbers in the list.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers in the list.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have negative numbers in the list.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n           lst = sort(lst)\n           lst = reverse(lst)\n           return\
    \ lst\n       end\nstrange_sort_list (generic function with 1 method)", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=sorting,julia |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=2 |>\n\
    <code>", "    if length(lst) == 0 \n        return [] \n    \n    minimum = min(lst)\n\
    \    maximum = max(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst.map(x\
    \ -> minimum < x ? minimum : x > maximum ? x : maximum)\n    \n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the elements in the vector. \nThe function should work for both vectors and\
    \ matrices.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ doesn't work for me. `sort(lst)` returns `[Int64]`, not `Vector{Int64}`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me either. `sort(lst)` returns `[Int64]`,\
    \ not `Vector{Int64}`.\n<|/ c |>\n<| c |>\nThis doesn't work for me either. `sort(lst)`\
    \ returns `[Int64]`, not `Vector{Int64}`.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me either. `sort(lst)` returns `[Int64]`, not `Vector{Int64}`.\n<|/ c |>\n\
    <| a dscore=2 |>\n<code>", "    if length(lst) == 0 \n        return [] \n   \
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n  \
    \  \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a |>\n<| a tags=sorting,julia\
    \ |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\n<code>",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns a vector of strings.\
    \ Each string should contain the integer in reverse order. For example, [1, 2,\
    \ 3, 4] should return [\"4\", \"3\", \"2\", \"1\"].", "    lst = sort(lst)\n \
    \   lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers sorted from smallest to largest.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26810847)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to sort\
    \ a list in a strange way, and I provided a solution that does exactly that. He\
    \ also asked how to do it in Julia, and I provided a solution that does exactly\
    \ that. He also asked how to do it in Python, and I provided a solution that does\
    \ exactly that. He also asked how to do it in R, and I provided a solution that\
    \ does exactly that. He also asked how to do it in C, and I provided a solution\
    \ that does exactly that. He also asked how to do it in Haskell, and I provided\
    \ a solution that does exactly that. He also asked how to do it in R, and I provided\
    \ a solution that does exactly that. He also asked how to do it in Python, and\
    \ I provided a solution that does exactly that. He also asked how to do it in\
    \ Julia, and I provided a solution that does exactly that.\n<|/ c |>\n<| c |>\n\
    He also asked how to do it in Python, and I provided a solution that does exactly\
    \ that. He also asked how to do it in R, and I provided a solution that does exactly\
    \ that. He also asked how to do it in C, and I provided a solution that does exactly\
    \ that. He also asked how to do it in Haskell, and I provided a solution that\
    \ does exactly that. He also asked how to do it in R, and I provided a solution\
    \ that does exactly that. He also asked how to do it in Python, and I provided\
    \ a solution that does exactly that. He also asked how to do it in Julia, and\
    \ I provided a solution that does exactly that.\n<|/ c |>\n<| c |>\nHe also asked\
    \ how to do it in Python, and I provided a solution that does exactly that. He\
    \ also asked how to do it in R, and I provided a solution that does exactly that.\
    \ He also asked how to do it in C, and I provided a solution that does exactly\
    \ that. He also asked how to do it in Haskell, and I provided a solution that\
    \ does exactly ", "    if length(lst) == 0 \n        return [] \n    \n    minimum\
    \ = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n\
    \    lst = lst[minimum:maximum]\n    \n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work for me. `strange_sort_list([1,2,3])` returns `[1,2,3]` instead\
    \ of `[3,2,1]`.\n<|/ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used Julia 0.6.2\n<|/ c |>\n<| a dscore=4 |>\nThe most efficient\
    \ way is to use sortperm:\n<code>\njulia> sortperm([1,2,3])\n3-element Array{Int64,1}:\n\
    \ 3\n 1\n 2\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis should be the\
    \ accepted answer. `sortperm` does exactly what OP wants, without having to write\
    \ any custom code.\n<|/ c |>\n<| c |>\nThis should be the accepted answer. `sortperm`\
    \ does exactly what OP wants, without having to write any custom code.\n<|/ c\
    \ |>\n<| a dscore=4 |>\nThe most efficient way is to use sortperm:\n<code>\njulia>\
    \ sortperm([1,2,3])\n3-element Array{Int64,1}:\n 3\n 1\n 2\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a |>\n<code>\njulia> sortperm([1,2,3])\n3-element Array{Int64,1}:\n 3\n\
    \ 1\n 2\n</code>\n<|/ a tags=julia,sorting dscore=4 |>\n<| a dscore=3 |>\n<code>\n\
    julia> sortperm([1,2,3])\n3-element Array{Int64,1}:\n 3\n 1\n 2\n</code>\n<|/\
    \ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\n<code>\njulia> sortperm([1,2,3])\n\
    3-element Array{Int64,1}:\n 3\n 1\n 2\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\njulia> sortperm([1,2,3])\n3-element Array{Int64,1}", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a dscore=2 |>\nThe Julia standard library has several sorting algorithms\
    \ implemented.\nThe sort function can take an optional argument to specify the\
    \ sorting order. \n<code>\njulia> sort([5, 3, 2, 1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 5", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for me.\
    \ `sort` returns a `Vector{Int64}`, not a `Vector{Int}`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me either. `sort` returns a `Vector{Int64}`, not a `Vector{Int}`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me either. `sort` returns a `Vector{Int64}`,\
    \ not a `Vector{Int}`.\n<|/ c |>\n<| a tags=sorting,julia |>\nThe answer by is\
    \ correct, but I thought I'd add an explanation as to why it works.\nThe sort\
    \ function sorts its input in place and returns the sorted input. Thus, if you\
    \ do sort(lst), lst is sorted and will stay sorted as long as you keep calling\
    \ sort. \nThe reverse function reverses the order of the elements in the input\
    \ vector. Thus, if you do reverse(sort(lst)), lst is reversed and will stay reversed\
    \ as long as you keep calling reverse.\n<|/ a dscore=4 |>\n<| c |>\n`sort` returns\
    \ a `Vector{Int64}`, not a `Vector{Int}`.\n<|/ c |>\n<| c |>\n`sort` returns a\
    \ `Vector{Int64}`, not a `Vector{Int}`.\n<|/ c |>\n<| c |>\n`sort` returns a `Vector{Int64}`,\
    \ not a `Vector{Int}`.\n<|/ c |>\n<| a dscore=3 |>\nThe answer by is correct,\
    \ but I thought I'd add an explanation as to why it works.\nThe sort function\
    \ sorts its input in place and returns the sorted input. Thus, if you do sort(lst),\
    \ lst is sorted and will stay sorted as long as you keep calling sort. \nThe reverse\
    \ function reverses the order of the elements in the input vector. Thus, if you\
    \ do reverse(sort(lst)), lst is reversed and will stay reversed as long as you\
    \ keep calling reverse.\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia\
    \ |>\nThe sort function sorts its input in place and returns the sorted input.\
    \ Thus, if you do sort(lst), lst is sorted and will stay sorted as long as you\
    \ keep calling sort. The reverse function reverses the order of the elements in\
    \ the input ", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>", "    lst = sort(lst)\n \
    \   lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ tags=sorting,julia |>\nHere is a simple solution that does not require any packages:\n\
    <code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings where each string is the string representation of that integer.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\nI wrote a Julia package called \"sort\" that\
    \ does exactly what you want. \n<code>\nusing Sort\nsort([5, 3, 7, 2, 1])\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    if length(lst) == 0 \n\
    \        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum_index = findfirst(minimum, lst)\n    maximum_index = findfirst(maximum,\
    \ lst)\n    \n    lst[minimum_index], lst[maximum_index] = lst[maximum_index],\
    \ lst[minimum_index]\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if a number is divisible by 3\nand False otherwise. Test it\
    \ on all numbers from 1 to 100.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers in the vector.", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector and returns a\
    \ vector where each element is the sum of the squares of the elements in the original\
    \ vector. For example, given [1,2,3] it should return [1,2,3].", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia,list\
    \ |>\n<| c |>\nThis doesn't work for me. `strange_sort_list([5, 6, 4, 2, 1])`\
    \ returns `[5, 6, 4, 2, 1]`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and\
    \ it works. What version are you using?\n<|/ c |>\n<| c |>\nI'm on 0.6.2. I'm\
    \ also on 0.6.1. I'm on 0.6.1 because I upgraded from 0.6.0 when I was on 0.6.0.\
    \ I'm on 0.6.1 because I upgraded from 0.6.0 when I was on 0.6.0. I'm on 0.6.1\
    \ because I upgraded from 0.6.0 when I was on 0.6.0. I'm on 0.6.1 because I upgraded\
    \ from 0.6.0 when I was on 0.6.0. I'm on 0.6.1 because I upgraded from 0.6.0 when\
    \ I was on 0.6.0. I'm on 0.6.1 because I upgraded from 0.6.0 when I was on 0.6.0.\
    \ I'm on 0.6.1 because I upgraded from 0.6.0 when I was on 0.6.0. I'm on 0.6.1\
    \ because I upgraded from 0.6.0 when I was on 0.6.0. I'm on 0.6.1 because I upgraded\
    \ from 0.6.0 when I was on 0.6.0. I'm on 0.6.1 because I upgraded from 0.6.0 when\
    \ I was on 0.6.0. I'm on 0.6.1 because I upgraded from 0.6.0 when I was on 0.6.0.\
    \ I'm on 0.6.1 because I upgraded from 0.6.0 when I was on 0.6.0. I'm on 0.6.1\
    \ because I upgraded from 0.6.0 when I was on 0.6.0. I'm on 0.6.1 because I upgraded\
    \ from 0.6.0 when I was on 0.6.0. I'm on 0.6.1 because I upgraded from 0.6.0 when\
    \ I was on 0.6.0. I'm on 0.6.1 because I upgraded from 0.6.0 when I was on 0.6.0.\
    \ I'm on 0.6.1 because I upgraded from 0.6.0 when I was on 0.6.0. I'm on 0.6.1\
    \ because I upgraded from 0.6.0 when I was on 0.6.0. I'm on 0.6.1 because I upgraded\
    \ from 0.6.0 when I was on 0.6.0. I'm on 0.6.1 because I upgraded from 0.6.0 when\
    \ I was on 0.6.0. I'm on 0.6.1 because I upgraded from 0.6.0 when I was on ",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a list of integers\
    \ and returns the sum of the integers in the list.", "    lst = sort(lst)\n  \
    \  lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    The `sort` function returns a new vector, so `lst = sort(lst)` is redundant.\n\
    <|/ c |>\n<| c |>\nYes, I know, but I wanted to show that you can do it in one\
    \ line. Also, `sort` returns a new vector, so `lst = sort(lst)` is redundant.\n\
    <|/ c |>\n<| c |>\nI know, but I wanted to show that you can do it in one line.\
    \ Also, sort returns a new vector, so lst = sort(lst) is redundant.\n<|/ c |>\n\
    <| c |>\nI know, but I wanted to show that you can do it in one line. Also, sort\
    \ returns a new vector, so lst = sort(lst) is redundant.\n<|/ c |>\n<| c |>\n\
    I know, but I wanted to show that you can do it in one line. Also, sort returns\
    \ a new vector, so lst = sort(lst) is redundant.\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\n<code>", "    if length(lst) == 0 \n        return [] \n    else \n    \
    \    minimum = minimum(lst) \n        maximum = maximum(lst) \n        minimum\
    \ = minimum + 1 \n        maximum = maximum - 1 \n        lst = sort(lst) \n \
    \       lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a tags=sorting,julia |>\n<| a |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           return sort(lst)\n       end\nstrange_sort_list (generic function\
    \ with 1 method)", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have negative\
    \ numbers. `strange_sort_list([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])` returns\
    \ `[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nI guess you meant\
    \ `sort(lst)` instead of `sort(-5)`?\n<|/ c |>\n<| c |>\nYes, I meant `sort(lst)`\
    \ instead of `sort(-5)`.\n<|/ c |>\n<| c |>\nI guess I should also mention that\
    \ this solution doesn't work for `NaN` values. `strange_sort_list([NaN, NaN, NaN,\
    \ NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN])` returns `[NaN, NaN, NaN, NaN, NaN,\
    \ NaN, NaN, NaN, NaN, NaN]`.\n<|/ c |>\n<| a tags=julia |>\n<code>", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([5,5,5,5])` returns\
    \ `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. I will edit my answer to include a link to the\
    \ full code I tested with.\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I must have had a typo when I first tested it. Thanks for pointing it out.\n\
    <|/ c |>\n<| c |>\nI added a link to my full code I tested with.\n<|/ c |>\n<|\
    \ c |>\nI added a link to my full code I tested with. Thanks for pointing it out.\n\
    <|/ c |>\n<| a tags=sorting,julia |>\nThe answer by is correct, but I thought\
    \ I'd add some explanation as to why it works.\nThe sort function sorts the array\
    \ in place and returns the sorted array. Since you were trying to sort a vector,\
    \ you were getting a vector back. \nThe reverse function reverses the array in\
    \ place, so the original array is unchanged. \nThe reason why it works is because\
    \ sort returns a new array and reverse returns a new array as well. \n<code>\n\
    julia> sort([5,5,5,5])\n5-element Array{Int64,1}:\n 5\n 5\n 5\n 5", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        lst = sort(lst) \n        lst = lst[minimum:maximum+1]\
    \ \n        return lst \nend\n</code>\n<|/ a |>\n<| a tags=sorting,julia |>\n\
    A simple and efficient solution is to use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a tags=sorting,julia |>\nI came up with this solution:\n<code>", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector. \nThe function should raise an error if the vector is\
    \ empty.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers sorted from smallest to largest.", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum_index = findfirst(isequal(minimum),\
    \ lst) \n        maximum_index = findfirst(isequal(maximum), lst) \n        minimum_value\
    \ = lst[minimum_index] \n        maximum_value = lst[maximum_index] \n       \
    \ lst[minimum_index] = maximum_value\n        lst[maximum_index] = minimum_value\n\
    \        return strange_sort_list(lst) \nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't seem to\
    \ work if you have a list with negative numbers. `strange_sort_list([-10, -5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])` returns `[-10, -5, -4, -3, -2, -1, 0, 1,\
    \ 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work if you have a list\
    \ with negative numbers. `strange_sort_list([-10, -5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5])` returns `[-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`.\n<|/ c |>\n\
    <| c |>\nThis doesn't seem to work if you have a list with negative numbers. `strange_sort_list([-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])` returns `[-10, -5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work if you have a\
    \ list with negative numbers. `strange_sort_list([-10, -5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5])` returns `[-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`.\n<|/\
    \ c |>\n<| c |>\nThis doesn't seem to work if you have a list with negative numbers.\
    \ `strange_sort_list([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])` returns `[-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`.\n<|/ c |>\n<| a tags=sorting,julia |>\n\
    The solution from is great, but I wanted to add an alternative that doesn't require\
    \ the use of any packages. \n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    \n    lst = sort(lst)\n    \n    i = 0\n    \n    while i <\
    \ length(lst)\n        \n        if lst[i] > lst[i + 1]\n            \n      \
    \      lst[i], lst[i + 1] = lst[i + 1], lst[i]\n            \n            i +=\
    \ 2\n            \n        else\n            \n            i += 1\n        end\n\
    \    end\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers sorted from smallest to largest.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([5,\
    \ 6, 1, 2])` returns `[1, 6, 5, 2]` instead of `[5, 2, 6, 1]`.\n<|/ c |>\n<| c\
    \ |>\nI tested it and it works fine. Did you copy and paste my code exactly?\n\
    <|/ c |>\n<| c |>\nYes, I did. I'm running Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it on 0.6.2 too. Maybe it's an issue with 0.6.2? I tested it on 0.6.3 and it\
    \ works fine.\n<|/ c |>\n<| c |>\nI tested it on 0.6.3 too. Maybe it's an issue\
    \ with 0.6.3? I tested it on 0.6.4 and it works fine.\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\nThis should work:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work\
    \ for me. `strange_sort_list([5,5,5,5])` returns `[5, 5, 5, 5]`.\n<|/ c |>\n<|\
    \ c |>\nI tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it\
    \ on Julia 0.6.2\n<|/ c |>\n<| a dscore=4 |>\nI believe this to be the most efficient\
    \ solution:\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})\n \
    \          return sort(lst)\n       end\nstrange_sort_list (generic function with\
    \ 1 method)", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings in strange order. For example, if the input vector is [1,\
    \ 2, 3, 4], then the output vector should be [\"1\", \"4\", \"2\", \"3\"].", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers sorted from smallest to largest.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is odd.", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a tags=julia,sorting |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a tags=julia,sorting |>\nIn Julia 1.3, you can use the function sortperm:\n\
    <code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nIn Julia 1.3, you can use\
    \ sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting |>\n<| a dscore=2 |>\n\
    In Julia 1.3, you can use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting |>\n\
    <| a dscore=2 |>\nIn Julia 1.3, you can use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a dscore=2 |>\nIn Julia 1.3, you can use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a tags=julia,sorting |>\nIn Julia 1.3, you can use sortperm:\n<code>\n\
    julia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting |>\nIn Julia 1.3, you can\
    \ use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1", "    if length(lst) == 0 \n        return [] \n    else \n        minimum\
    \ = minimum(lst) \n        maximum = maximum(lst) \n        lst = sort(lst) \n\
    \        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst", "   \
    \ lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=sorting,julia |>\n<code>", "    lst = sort(lst)\n   \
    \ lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia |>\n<| a\
    \ tags=julia |>\n<code>", "    if length(lst) == 0 \n        return [] \n    \n\
    \    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = lst[minimum:maximum]\n    \n    return lst\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the elements\
    \ in the vector. \nThe function should raise an error if the vector is empty.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns a vector of integers sorted from smallest to\
    \ largest.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the same vector,\
    \ except with all the integers sorted from lowest to highest.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise\nWrite a function that takes a vector of\
    \ integers and returns the same vector in reverse order. Test your function with\
    \ some examples. What happens when you call your function with an empty vector?",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=1 |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend",
  "    if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)",
  "    if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n\
    \    \n    return lst\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns a vector of the same length with all elements multiplied\
    \ by 2.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia |>\n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = min(lst) \n    maximum = max(lst)\
    \ \n    \n    middle = minimum + maximum / 2 \n    \n    lst1 = strange_sort_list(lst[minimum:maximum])\
    \ \n    lst2 = strange_sort_list(lst[minimum+1:middle]) \n    lst3 = strange_sort_list(lst[middle+1:maximum])\
    \ \n    \n    lst1 .= lst2 .= lst3 \n    \n    lst1 .= lst[minimum:maximum]\n\
    \    \n    return lst1 \nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if\
    \ there are duplicates in the list. For example, `strange_sort_list([1,1,2,3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work for me. `strange_sort_list([5, 5, 5, 5])` returns\
    \ `[5, 5, 5, 5]`\n<|/ c |>\n<| c |>\nIt works for me. Did you copy the code correctly?\
    \ I tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nYes, I copied the code correctly.\
    \ I'm using Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 too. Maybe\
    \ it's an issue with my Julia installation. I'll try it on another computer.\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 too. Maybe it's an issue with my\
    \ Julia installation. I'll try it on another computer.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI believe that you can also use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5", "    if length(lst) == 0 \n  \
    \      return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of integers and\
    \ returns a vector of strings in alphabetical order.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis does not work if you have a list of strings. `sort` will sort\
    \ lexicographically and `reverse` will reverse the order of the strings. So `strange_sort_list([\
    \ \"a\", \"b\", \"c\", \"d\" ])` returns `[\"d\", \"c\", \"b\", \"a\"]`\n<|/ c\
    \ |>\n<| c |>\nThanks for pointing that out. I fixed the code accordingly.\n<|/\
    \ c |>\n<| a dscore=2 |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise: Write a function that takes a vector of\
    \ integers and returns a vector of strings in strange order. For example, if the\
    \ input vector is [5, 6, 4, 3, 1] then your function should return [\"1\", \"\
    4\", \"5\", \"3\", \"6\"]", "    if length(lst) == 0 \n        return [] \n  \
    \  \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst = sort(lst)\n\
    \    \n    lst = lst[minimum:maximum]\n    \n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns its sum.", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n\
    \    \n    return lst\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers in the vector.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for me. `sort(lst)` returns\
    \ `ERROR: MethodError: no method matching sort(::Int64)`. What version of Julia\
    \ are you using?\n<|/ c |>\n<| c |>\nI'm using Julia 0.4.6\n<|/ c |>\n<| c |>\n\
    I see. I'm using 0.4.6. I'll try upgrading and see if that helps.\n<|/ c |>\n\
    <| c |>\nUpgrading didn't help. I'm still getting `MethodError: no method matching\
    \ sort(::Int64)`.\n<|/ c |>\n<| c |>\nI added a version that works for me to my\
    \ answer. Maybe you have a different version of Julia installed?\n<|/ c |>\n<|\
    \ a tags=sorting,julia |>\nI believe that your problem is that you are trying\
    \ to sort a vector of Int64, but you are sorting a vector of Int. Try this:\n\
    <code>\njulia> sort(Int64[1,2,3,4,5])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work for me. `sort(Int64[1,2,3,4,5])`\
    \ returns `ERROR: MethodError: no method matching sort(::Int64)`. What version\
    \ of Julia are you using?\n<|/ c |>\n<| c |>\nI'm using Julia 0.4.6\n<|/ c |>\n\
    <| c |>\nI see. I'm using 0.4.6. I'll try upgrading and see if that helps.\n<|/\
    \ c |>\n<| c |>\nUpgrading didn't help. I'm still getting `MethodError: no method\
    \ matching sort(::Int64)`.\n<|/ c |>\n<| c |>\nI added a version that works for\
    \ me to my answer. Maybe you have a different version of Julia installed?\n<|/\
    \ c |>\n<| a tags=sorting,julia |>\nI believe that your problem is that you are\
    \ trying to sort a vector of Int64, but you are sorting a vector of Int. Try this:\n\
    <code>\njulia> sort(Int64[1,2,3,4,5])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis doesn't work for me. `sort(Int64[1,2,3,4,5])`\
    \ returns `ERROR: ", "    if length(lst) == 0 \n        return [] \n    end\n\
    \    minimum = minimum(lst)\n    maximum = maximum(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = ", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=2 |>\nThe answer\
    \ by is correct, but I thought I'd add an alternative that doesn't require any\
    \ additional packages. \n<code>", "    if length(lst) == 0 \n        return []\
    \ \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst\
    \ = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in a list of integers and returns the sum of the squares of the integers.\
    \ \nFor example, if the input is [4, 6, 9, 12], then the output should be 42.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n\
    I wrote a package called Sorting which does this for you:\n<code>\njulia> using\
    \ Sorting", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nThis doesn't work for `[1,2,3]`\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it. I will edit my answer to include a test case.\n\
    <|/ c |>\n<| c |>\nOh, I see what you mean. Yes, it does work. Sorry, I missed\
    \ that one. Thanks for pointing it out.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for `[1,2,3]`\n<|/ c |>\n<| c |>\nYes, it does. I tested it before posting it.\
    \ I will edit my answer to include a test case.\n<|/ c |>\n<| a tags=sorting,julia\
    \ |>\n<code>", "    \n    sorted = sort(lst)\n    \n    sorted = sorted[start:end]\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers sorted from smallest to largest.", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n\
    The other answers here are great, but I thought I'd add my own.\nThe sort function\
    \ can take an optional key argument, which is a function that returns a value\
    \ to be used for sorting.\n<code>\njulia> sort([5, 3, 2, 1])\n3-element Array{Int64,1}:\n\
    \ 1\n 2\n 3", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector. \nThe function should only take one argument, a list of integers. \n\
    The function should return a Float64. \nThe function should raise an error if\
    \ the input vector is empty.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    if length(lst) == 0 \n        return [] \n    else\
    \ \n        minimum = minimum(lst) \n        maximum = maximum(lst) \n       \
    \ minimum2 = minimum(lst) \n        maximum2 = maximum(lst) \n        minimum3\
    \ = minimum(lst) \n        maximum3 = maximum(lst) \n        minimum4 = minimum(lst)\
    \ \n        maximum4 = maximum(lst) \n        minimum5 = minimum(lst) \n     \
    \   maximum5 = maximum(lst) \n        minimum6 = minimum(lst) \n        maximum6\
    \ = maximum(lst) \n        minimum7 = minimum(lst) \n        maximum7 = maximum(lst)\
    \ \n        minimum8 = minimum(lst) \n        maximum8 = maximum(lst) \n     \
    \   minimum9 = minimum(lst) \n        maximum9 = maximum(lst) \n        minimum10\
    \ = minimum(lst) \n        maximum10 = maximum(lst) \n        minimum11 = minimum(lst)\
    \ \n        maximum11 = maximum(lst) \n        minimum12 = minimum(lst) \n   \
    \     maximum12 = maximum(lst) \n        minimum13 = minimum(lst) \n        maximum13\
    \ = maximum(lst) \n        minimum14 = minimum(lst) \n        maximum14 = maximum(lst)\
    \ \n        minimum15 = minimum(lst) \n        maximum15 = maximum(lst) \n   \
    \     minimum16 = minimum(lst) \n        maximum16 = maximum(lst) \n        minimum17\
    \ = minimum(lst) \n        maximum17 = maximum(lst) \n        minimum18 = minimum(lst)\
    \ \n        maximum18 = maximum(lst) \n        minimum19 = minimum(lst) \n   \
    \     maximum19 = maximum(lst) \n        minimum20 = minimum(lst) \n        maximum20\
    \ = maximum(lst) \n        minimum21 = minimum(lst) \n        maximum21 = maximum(lst)\
    \ \n        minimum22 = minimum(lst) \n        maximum22 = maximum(lst) \n   \
    \     minimum23 = minimum(lst) \n        maximum23 = maximum(lst) \n        minimum24\
    \ = minimum(lst) \n        maximum24 = maximum(lst) \n        minimum25 = minimum(lst)\
    \ \n        maximum25 = maximum(lst) \n        minimum26 = minimum(lst) \n   \
    \     maximum26 = maximum(lst) \n        minimum27 = minimum(lst) \n        maximum27\
    \ = maximum(lst) \n        minimum28 = minimum(lst) \n        maximum28 = maximum(lst)\
    \ \n        minimum29 = minimum(lst) \n        maximum29 = maximum(lst) \n   \
    \     minimum30 = minimum(lst) \n        maximum30 = maximum(lst) \n        minimum31\
    \ = minimum(lst) \n        maximum31 = maximum(", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</code>\n<|/ a |>\n<| a tags=sorting,julia\
    \ |>\nI came up with a solution that is very similar to what was suggested in\
    \ the comments above. \n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. `strange_sort_list([5,\
    \ 1, 4, 2, 3])` returns `[1, 4, 2, 5, 3]`.\n<|/ c |>\n<| c |>\nI tested it and\
    \ it works. I added the code I used to test it.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I added the code I used to test it.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the code I used to test it.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I added the code I used to test it.\n<|/ c |>\n<| a tags=sorting,julia,list\
    \ |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(Int64[5,\
    \ 10, 15, 20, 25])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns the sum of the squares of the integers. \nThe\
    \ function should work for vectors of any length.", "    lst = sort(lst)\n   \
    \ lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't seem to work.\
    \ `sort` returns a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`.\n<|/\
    \ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer accordingly.\n\
    <|/ c |>\n<| a dscore=4 |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a tags=sorting,julia |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=4 |>\n<|\
    \ a dscore=3 |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a tags=sorting,julia |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=3 |>\nI like using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = min(lst)\n    maximum = max(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a dscore=0 |>\nHere is a simple solution that uses sort! and reverse!:\n\
    <code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,julia |>\nHere's a solution that uses Julia's built-in\
    \ sort and reverse functions:\n<code>", "    if length(lst) == 0 \n        return\
    \ [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n  \
    \  minimum_index = findfirst(minimum, lst)\n    maximum_index = findfirst(maximum,\
    \ lst)\n    \n    lst[minimum_index], lst[maximum_index] = lst[maximum_index],\
    \ lst[minimum_index]\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia |>\nI wrote a package\
    \ called Sorting.jl which does this kind of sorting for you. Here is an example:\n\
    <code>\njulia> using Sorting", "    if length(lst) == 0 \n        return [] \n\
    \    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    lst =\
    \ sort(lst)\n    \n    lst = lst .- minimum\n    lst = lst .+ maximum\n    \n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns the same vector,\
    \ but with each element multiplied by 2.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    if length(lst) == 0 \n        return [] \n    else\
    \ \n        minimum = minimum(lst) \n        maximum = maximum(lst) \n       \
    \ minimum = minimum + 1 \n        maximum = maximum - 1 \n        lst = sort(lst)\
    \ \n        lst = lst[minimum:maximum] \n        minimum = minimum + 1 \n    \
    \    maximum = maximum - 1 \n        lst = sort(lst) \n        lst = lst[minimum:maximum]\
    \ \n        minimum = minimum + 1 \n        maximum = maximum - 1 \n        lst\
    \ = sort(lst) \n        lst = lst[minimum:maximum] \n        minimum = minimum\
    \ + 1 \n        maximum = maximum - 1 \n        lst = sort(lst) \n        lst\
    \ = lst[minimum:maximum] \n        minimum = minimum + 1 \n        maximum = maximum\
    \ - 1 \n        lst = sort(lst) \n        lst = lst[minimum:maximum] \n      \
    \  minimum = minimum + 1 \n        maximum = maximum - 1 \n        lst = sort(lst)\
    \ \n        lst = lst[minimum:maximum] \n        minimum = minimum + 1 \n    \
    \    maximum = maximum - 1 \n        lst = sort(lst) \n        lst = lst[minimum:maximum]\
    \ \n        minimum = minimum + 1 \n        maximum = maximum - 1 \n        lst\
    \ = sort(lst) \n        lst = lst[minimum:maximum] \n        minimum = minimum\
    \ + 1 \n        maximum = maximum - 1 \n        lst = sort(lst) \n        lst\
    \ = lst[minimum:maximum] \n        minimum = minimum + 1 \n        maximum = maximum\
    \ - 1 \n        lst = sort(lst) \n        lst = lst[minimum:maximum] \n      \
    \  minimum = minimum + 1 \n        maximum = maximum - 1 \n        lst = sort(lst)\
    \ \n        lst = lst[minimum:maximum] \n        minimum = minimum + 1 \n    \
    \    maximum = maximum - 1 \n        lst = sort(lst) \n        lst = lst[minimum:maximum]\
    \ \n        minimum = minimum + 1 \n        maximum = maximum - 1 \n        lst\
    \ = sort(lst) \n        lst = lst[minimum:maximum] \n        minimum = minimum\
    \ + 1 \n        maximum = maximum - 1 \n        lst = sort(lst) \n        lst\
    \ = lst[minimum:maximum] \n        minimum = minimum + 1 \n        maximum = maximum\
    \ - 1 \n        lst = sort(lst) \n        lst = lst[minimum:maximum] \n      \
    \  minimum = minimum + 1 \n        maximum = maximum - 1 \n        lst = sort(lst) ",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ in alphabetical order. \nThe function should return an empty vector if there\
    \ are no integers in the vector.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the number of elements that\
    \ are not equal to zero.", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\n<code>\njulia> function\
    \ strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n           lst = sort(lst)\n\
    \           lst = reverse(lst)\n           return lst\n       end\nstrange_sort_list\
    \ (generic function with 1 method)", "    if length(lst) == 0 \n        return\
    \ [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n  \
    \  lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n    \n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns a vector\
    \ where each element is the sum of the squares of the elements in the original\
    \ vector. For example, if the input vector is [1,2,3,4,5], the output vector should\
    \ be [1,2,3,4,5].", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    minimum_index = findfirst(x -> x == minimum,\
    \ lst, 0)\n    maximum_index = findfirst(x -> x == maximum, lst, length(lst))\n\
    \    \n    lst[minimum_index], lst[maximum_index] = lst[maximum_index], lst[minimum_index]\n\
    \    \n    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nI like\
    \ your solution, but I wonder if there is a more elegant solution that doesn't\
    \ require the creation of an intermediate array?\n<|/ c |>\n<| c |>\nI guess there\
    \ is, but I haven't found it yet. I'll keep looking\n<|/ c |>\n<| c |>\nI added\
    \ a solution without intermediate array\n<|/ c |>\n<| a dscore=2 |>\nI like your\
    \ solution, but I wonder if there is a more elegant solution that doesn't require\
    \ the creation of an intermediate array?", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector. \nThe function should work for vectors\
    \ of any length.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</cell>\n<text>\nExercise 2: Write a function that takes a vector of integers\
    \ and returns a vector of strings in alphabetical order.", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    minimum_index = findfirst(minimum == lst)\n    maximum_index = findfirst(maximum\
    \ == lst)\n    \n    lst[minimum_index], lst[maximum_index] = lst[maximum_index],\
    \ lst[minimum_index]\n    \n    return strange_sort_list(lst)\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a\
    \ Julia package called StrangeSort that does exactly that:\n<code>\nusing StrangeSort",
  "    \n    lst = sort(lst)\n    \n    i = 0\n    \n    while i < length(lst)\n \
    \       if lst[i] > lst[i+1]\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n\
    \        end\n        i += 1\n    end\n    \n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns a new vector where each\
    \ element is the sum of the previous two elements.", "    lst = sort(lst)\n  \
    \  lst = reverse(lst)\n    lst = sort(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    if length(lst) == 0 \n        return [] \n    \n \
    \   minimum = min(lst) \n    maximum = max(lst) \n    \n    lst = sort(lst) \n\
    \    \n    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst =\
    \ sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n\
    \    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst =\
    \ sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n\
    \    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst =\
    \ sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n\
    \    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst =\
    \ sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n\
    \    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst =\
    \ sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n\
    \    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst =\
    \ sort(lst) \n    \n    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n\
    \    lst = reverse(lst) \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst)\
    \ \n    \n    lst = sort(lst) \n    \n    lst = reverse(lst) \n    \n    ", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the same vector but with\
    \ each element multiplied by 2.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't\
    \ seem to work. `sort` returns a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`.\n\
    <|/ c |>\n<| c |>\n`reverse` expects a `Vector{Int}`, but `sort` returns a `Vector{Int64}`.\
    \ So you need to convert it to a `Vector{Int}`.\n<|/ c |>\n<| c |>\n`sort` returns\
    \ a `Vector{Int64}`, but `reverse` expects a `Vector{Int}`. So you need to convert\
    \ it to a `Vector{Int}`.\n<|/ c |>\n<| c |>\nI see, thanks. I updated my answer\
    \ to reflect that.\n<|/ c |>\n<| a tags=julia,sorting |>\nI believe that this\
    \ is what you are looking for:\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           return sort(lst)\n       end\nstrange_sort_list (generic function\
    \ with 1 method)", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</cell>\n<code language=julia-1.4>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers. \nThe function should work for both\
    \ vectors of integers and vectors of floating point numbers.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a tags=julia,sorting,arrays |>\n<code>", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the same vector in reverse order.", "    if length(lst)\
    \ == 0 \n        return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    minimum = minimum(lst)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst .-\
    \ minimum\n    lst = lst .+ maximum\n    \n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings in alphabetical order.", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list(lst)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers sorted from smallest to largest.", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    if length(lst)\
    \ == 0 \n        return [] \n    end\n    minimum = minimum(lst)\n    maximum\
    \ = maximum(lst)\n    minimum_index = findfirst(minimum, lst)\n    maximum_index\
    \ = findfirst(maximum, lst)\n    \n    lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index]\n    \n    return strange_sort_list(lst)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings in alphabetical order. \nThe function should\
    \ return an empty vector if the input vector is empty.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a list of integers and returns the same list but in reverse order. Test\
    \ it on a list of integers containing only positive integers.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes in a vector of integers and returns a vector of strings. \nThe strings\
    \ should be the integers converted to strings. \nThe function should return an\
    \ empty vector if the vector is empty.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
