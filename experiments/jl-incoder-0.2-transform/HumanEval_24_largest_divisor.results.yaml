language: jl
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n    else \n        largest_divisor(n\
    \ / 2)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer. Just a code\
    \ dump.\n<|/ c |>\n<| c |>\nThe question was \"how do I find the largest number\
    \ that divides n evenly, smaller than n\". The code dump was the answer. How does\
    \ this not answer the question?\n<|/ c |>\n<| c |>\nThe question was \"how do\
    \ I find the largest number that divides n evenly, smaller than n\". The code\
    \ dump was the answer. How does this not answer the question?\n<|/ c |>\n<| c\
    \ |>\nThe question was \"how do I find the largest number that divides n evenly,\
    \ smaller than n\". The code dump was the answer. How does this not answer the\
    \ question?\n<|/ c |>\n<| c |>\nThe question was \"how do I find the largest number\
    \ that divides n evenly, smaller than n\". The code dump was the answer. How does\
    \ this not answer the question?\n<|/ c |>\n<| a tags=recursion,big-o,time-complexity,algorithm\
    \ |>\n<code>\ndef largest_divisor(n):\n    if n == 1:\n        return n\n    else:\n\
    \        if n % 2 == 0:\n            return n\n        else:\n            return\
    \ largest_divisor(n / 2)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an\
    \ answer. Just a code dump.\n<|/ c |>\n<| c |>\nThe question was \"how do I find\
    \ the largest number that divides n evenly, smaller than n\". The code dump was\
    \ the answer. How does this not answer the question?\n<|/ c |>\n<| c |>\nThe question\
    \ was \"how do I find the largest number that divides n evenly, smaller than n\"\
    . The code dump was the answer. How does this not answer the question?\n<|/ c\
    \ |>\n<| a tags=recursion,big-o,time-complexity,algorithm |>\n<code>\ndef largest_divisor(n):\n\
    \    if n == 1:\n        return n\n    else:\n        if n % 2 == 0:\n       \
    \     return n\n        else:\n            return largest_divisor(n / 2)\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis is not an answer. Just a code dump.\n<|/ c |>\n\
    <| c |>\nThe question was \"how do I find the largest number that divides n evenly,\
    \ smaller than n\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpklwutm8h.jl:7\nin expression starting at /tmp/tmpklwutm8h.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vrp1ex2.jl:6\nin expression starting at /tmp/tmp1vrp1ex2.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\
    \ \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdz2tsas.jl:11\nin expression starting at\
    \ /tmp/tmpzdz2tsas.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n\nHint: use largest_divisor(n) to find the largest number that\
    \ divides n evenly, smaller than n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmup7vjkq.jl:12\nin expression starting at\
    \ /tmp/tmpmup7vjkq.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@time largest_divisor(150)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xav2hc3.jl:12\nin expression starting at\
    \ /tmp/tmp7xav2hc3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcxsjldr8.jl:6\nin expression starting at /tmp/tmpcxsjldr8.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0l7ulfe.jl:12\nin expression starting at\
    \ /tmp/tmpj0l7ulfe.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqcu4zo56.jl:8\nin expression starting at /tmp/tmpqcu4zo56.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of divisors of n that are less than or equal to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph2msm7vq.jl:6\nin expression starting at /tmp/tmph2msm7vq.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of a given number\
    \ n. For example, for n = 10, there are 3 divisors: 1, 2, and 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprysuy28z.jl:12\nin expression starting at\
    \ /tmp/tmprysuy28z.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgf_0jayb.jl:12\nin expression starting at\
    \ /tmp/tmpgf_0jayb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 10\nWrite a function that returns the factorial\
    \ of a given number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpchw5ggro.jl:12\nin expression starting at\
    \ /tmp/tmpchw5ggro.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n==2 \n        return 2 \n  \
    \  else \n        largest_divisor(n-1)\n        largest_divisor(n-2)\n       \
    \ largest_divisor(n-3)\n        largest_divisor(n-4)\n        largest_divisor(n-5)\n\
    \        largest_divisor(n-6)\n        largest_divisor(n-7)\n        largest_divisor(n-8)\n\
    \        largest_divisor(n-9)\n        largest_divisor(n-10)\n        largest_divisor(n-11)\n\
    \        largest_divisor(n-12)\n        largest_divisor(n-13)\n        largest_divisor(n-14)\n\
    \        largest_divisor(n-15)\n        largest_divisor(n-16)\n        largest_divisor(n-17)\n\
    \        largest_divisor(n-18)\n        largest_divisor(n-19)\n        largest_divisor(n-20)\n\
    \        largest_divisor(n-21)\n        largest_divisor(n-22)\n        largest_divisor(n-23)\n\
    \        largest_divisor(n-24)\n        largest_divisor(n-25)\n        largest_divisor(n-26)\n\
    \        largest_divisor(n-27)\n        largest_divisor(n-28)\n        largest_divisor(n-29)\n\
    \        largest_divisor(n-30)\n        largest_divisor(n-31)\n        largest_divisor(n-32)\n\
    \        largest_divisor(n-33)\n        largest_divisor(n-34)\n        largest_divisor(n-35)\n\
    \        largest_divisor(n-36)\n        largest_divisor(n-37)\n        largest_divisor(n-38)\n\
    \        largest_divisor(n-39)\n        largest_divisor(n-40)\n        largest_divisor(n-41)\n\
    \        largest_divisor(n-42)\n        largest_divisor(n-43)\n        largest_divisor(n-44)\n\
    \        largest_divisor(n-45)\n        largest_divisor(n-46)\n        largest_divisor(n-47)\n\
    \        largest_divisor(n-48)\n        largest_divisor(n-49)\n        largest_divisor(n-50)\n\
    \        largest_divisor(n-51)\n        largest_divisor(n-52)\n        largest_divisor(n-53)\n\
    \        largest_divisor(n-54)\n        largest_divisor(n-55)\n        largest_divisor(n-56)\n\
    \        largest_divisor(n-57)\n        largest_divisor(n-58)\n        largest_divisor(n\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprn8_a3jg.jl:8\nin expression starting at /tmp/tmprn8_a3jg.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprkjrv35r.jl:8\nin expression starting at /tmp/tmprkjrv35r.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. \nFor a given number n, find the factorial\
    \ of n\n    >>> factorial(5)\n    120\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzzg8d7m.jl:8\nin expression starting at /tmp/tmpmzzg8d7m.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for n = 12, there are 4 divisors: 1, 2, 3, and\
    \ 4.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp58qfr9p1.jl:6\nin expression starting at /tmp/tmp58qfr9p1.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupu9w5na.jl:16\nin expression starting at\
    \ /tmp/tmpupu9w5na.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpul9qg44x.jl:12\nin expression starting at\
    \ /tmp/tmpul9qg44x.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nFor a given number n, find the factorial\
    \ of n. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykmh4arm.jl:8\nin expression starting at /tmp/tmpykmh4arm.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the largest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzwf7gah.jl:8\nin expression starting at /tmp/tmpmzwf7gah.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 15, the number of divisors is\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi67athrj.jl:7\nin expression starting at /tmp/tmpi67athrj.jl:7\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiyco_bqi.jl:6\nin expression starting at /tmp/tmpiyco_bqi.jl:6\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp890kx6kj.jl:12\nin expression starting at\
    \ /tmp/tmp890kx6kj.jl:12\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number\
    \ n. For example, for the number 12, there are two divisors: 2 and 3. Your function\
    \ should return the number of divisors rather than printing them.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6eeg3fuf.jl:12\nin expression starting at\
    \ /tmp/tmp6eeg3fuf.jl:12\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the largest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzoadycep.jl:7\nin expression starting at /tmp/tmpzoadycep.jl:7\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgomxje3i.jl:11\nin expression starting at\
    \ /tmp/tmpgomxje3i.jl:11\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi15v7rll.jl:12\nin expression starting at\
    \ /tmp/tmpi15v7rll.jl:12\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor a given number n, find the factorial of n\n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(100)\n1.8446744073709552e+19\n\
    >>> factorial(1000)\n6.204484017332398e+24\n>>> factorial(10000)\n2.628301886896e+4932\n\
    >>> factorial(100000)\n5.007199254740992e+4932\n>>> factorial(1000000)\n1.8446744073709552e+19\n\
    >>> factorial(10000000)\n6.204484017332398e+24\n>>> factorial(100000000)\n2.628301886896e+4932\n\
    >>> factorial(1000000000)\n5.007199254740992e+4932\n>>> factorial(10000000000)\n\
    1.8446744073709552e+19\n>>> factorial(100000000000)\n6.204484017332398e+24\n>>>\
    \ factorial(1000000000000)\n2.628301886896e+4932\n>>> factorial(1000000000000)\n\
    5.007199254740992e+4932\n>>> factorial(10000000000000)\n1.8446744073709552e+19\n\
    >>> factorial(10000000000000)\n6.204484017332398e+24\n>>> factorial(100000000000000)\n\
    2.628301886896e+4932\n>>> factorial(100000000000000)\n5.007199254740992e+4932\n\
    >>> factorial(1000000000000000)\n1.8446744073709552e+19\n>>> factorial(1000000000000000)\n\
    6.204484017332398e+24\n>>> factorial(10000000000000000)\n2.628301886896e+4932\n\
    >>> factorial(10000000000000000)\n5.007199254740992e+4932\n>>> factorial(100000000000000000)\n\
    1.8446744073709552e+19\n>>> factorial(100000000000000000)\n6.204484017332398e+24\n\
    >>> factorial(1000000000000000000)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_gjcqwfy.jl:6\nin expression starting at /tmp/tmp_gjcqwfy.jl:6\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the largest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61mrf81n.jl:11\nin expression starting at\
    \ /tmp/tmp61mrf81n.jl:11\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8j3b4zhm.jl:7\nin expression starting at /tmp/tmp8j3b4zhm.jl:7\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the largest number\
    \ that can be divided by all numbers from 1 to n (inclusive).\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwnwl9k_l.jl:6\nin expression starting at /tmp/tmpwnwl9k_l.jl:6\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\
    \ \n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gkbw843.jl:11\nin expression starting at\
    \ /tmp/tmp0gkbw843.jl:11\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1) +\
    \ 1 \nend\n</cell>\n<code language=julia-1.5>\n@assert largest_divisor(15) ==\
    \ 5\n</cell>\n<text>\nExercise 3\nWrite a function that computes the factorial\
    \ of a given number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3k4kln_.jl:11\nin expression starting at\
    \ /tmp/tmpr3k4kln_.jl:11\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the number of prime numbers less\
    \ than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpntxqbb3i.jl:11\nin expression starting at\
    \ /tmp/tmpntxqbb3i.jl:11\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmjhttmap.jl:8\nin expression starting at /tmp/tmpmjhttmap.jl:8\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vrp1ex2.jl:6\nin expression starting at /tmp/tmp1vrp1ex2.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    \n    largest_divisor(n/2)\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. \nFor example, factorial(5) = 5 * 4 * 3 * 2\
    \ * 1 = 120\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr8bq95v1.jl:6\nin expression starting at /tmp/tmpr8bq95v1.jl:6\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdbsz7fj4.jl:12\nin expression starting at\
    \ /tmp/tmpdbsz7fj4.jl:12\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0l7ulfe.jl:12\nin expression starting at\
    \ /tmp/tmpj0l7ulfe.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the smallest number that divides\
    \ n evenly, larger than n\nHint: use the function largest_divisor defined above\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdaar3pfc.jl:12\nin expression starting at\
    \ /tmp/tmpdaar3pfc.jl:12\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n==1 then return 1\n    else if n%2==0\
    \ then return n\n    else return largest_divisor(n/2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of divisors of n that are less than or\
    \ equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphxc3lsya.jl:6\nin expression starting at /tmp/tmphxc3lsya.jl:6\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n    else \n        largest_divisor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the number of divisors\
    \ of n that are less than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcp82f5fb.jl:7\nin expression starting at /tmp/tmpcp82f5fb.jl:7\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n==2 then return 2\n    else if n%2==0\
    \ then return n//2\n    else return largest_divisor(n//2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3zj3qp95.jl:6\nin expression starting at /tmp/tmp3zj3qp95.jl:6\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1r09fn4y.jl:8\nin expression starting at /tmp/tmp1r09fn4y.jl:8\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a number n and returns the largest number that divides n evenly, smaller than\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8pbzhtp1.jl:8\nin expression starting at /tmp/tmp8pbzhtp1.jl:8\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphryy4a6w.jl:12\nin expression starting at\
    \ /tmp/tmphryy4a6w.jl:12\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8igty3z8.jl:12\nin expression starting at\
    \ /tmp/tmp8igty3z8.jl:12\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ numbers from 1 to n inclusive.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfy8dfhuo.jl:12\nin expression starting at\
    \ /tmp/tmpfy8dfhuo.jl:12\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxb1d8cw.jl:7\nin expression starting at /tmp/tmptxb1d8cw.jl:7\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else \n        largest_divisor(n-1)\n       \
    \ if n % 2 == 0\n            largest_divisor(n/2) \n        else\n           \
    \ largest_divisor(n/2) \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(150)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ computes the factorial of a given number. \nFor example, factorial(5) = 5 *\
    \ 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6fyvlg1d.jl:17\nin expression starting at\
    \ /tmp/tmp6fyvlg1d.jl:17\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp68drgh_l.jl:12\nin expression starting at\
    \ /tmp/tmp68drgh_l.jl:12\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0 \n    else if n%2==0 then return n \n    else return\
    \ largest_divisor(n/2) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmzjdfl7f.jl:6\nin expression starting at /tmp/tmpmzjdfl7f.jl:6\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyh6ddi1a.jl:8\nin expression starting at /tmp/tmpyh6ddi1a.jl:8\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, the function should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqdrtvicr.jl:7\nin expression starting at /tmp/tmpqdrtvicr.jl:7\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    For a given number n, find the factorial of n. \nFor a given number n, find the\
    \ factorial of n. \nFor a given number n, find the factorial of n. \nFor a given\
    \ number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number \nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprp_c_cx.jl:12\nin expression starting at\
    \ /tmp/tmpprp_c_cx.jl:12\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ouym64p.jl:8\nin expression starting at /tmp/tmp2ouym64p.jl:8\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0l7ulfe.jl:12\nin expression starting at\
    \ /tmp/tmpj0l7ulfe.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n / 2) + n /\
    \ 2\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that computes the factorial of a given number.\
    \ For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx38rm3pa.jl:11\nin expression starting at\
    \ /tmp/tmpx38rm3pa.jl:11\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgzfqy8yr.jl:7\nin expression starting at /tmp/tmpgzfqy8yr.jl:7\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_566dxq8.jl:11\nin expression starting at\
    \ /tmp/tmp_566dxq8.jl:11\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first n prime numbers. \n\
    Hint: Use a sieve of Eratosthenes\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fz9hx13.jl:12\nin expression starting at\
    \ /tmp/tmp3fz9hx13.jl:12\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    if n==2 then return 2\n    if n%3==0 then return\
    \ n\n    if n%5==0 then return n\n    if n%7==0 then return n\n    if n%9==0 then\
    \ return n\n    if n%11==0 then return n\n    if n%13==0 then return n\n    if\
    \ n%15==0 then return n\n    if n%17==0 then return n\n    if n%19==0 then return\
    \ n\n    if n%21==0 then return n\n    if n%23==0 then return n\n    if n%25==0\
    \ then return n\n    if n%27==0 then return n\n    if n%29==0 then return n\n\
    \    if n%31==0 then return n\n    if n%33==0 then return n\n    if n%35==0 then\
    \ return n\n    if n%37==0 then return n\n    if n%39==0 then return n\n    if\
    \ n%41==0 then return n\n    if n%43==0 then return n\n    if n%45==0 then return\
    \ n\n    if n%47==0 then return n\n    if n%49==0 then return n\n    if n%51==0\
    \ then return n\n    if n%53==0 then return n\n    if n%55==0 then return n\n\
    \    if n%57==0 then return n\n    if n%59==0 then return n\n    if n%61==0 then\
    \ return n\n    if n%63==0 then return n\n    if n%65==0 then return n\n    if\
    \ n%67==0 then return n\n    if n%69==0 then return n\n    if n%71==0 then return\
    \ n\n    if n%73==0 then return n\n    if n%75==0 then return n\n    if n%77==0\
    \ then return n\n    if n%79==0 then return n\n    if n%81==0 then return n\n\
    \    if n%83==0 then return n\n    if n%85==0 then return n\n    if n%87==0 then\
    \ return n\n    if n%89==0 then return n\n    if n%91==0 then return n\n    if\
    \ n%93==0 then return n\n    if n%95==0 then return n\n    if n%97==0 then return\
    \ n\n    if n%99==0 then return n\n    if n%101==0 then \nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4hig86g9.jl:6\nin expression starting at /tmp/tmp4hig86g9.jl:6\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo4jueaxt.jl:12\nin expression starting at\
    \ /tmp/tmpo4jueaxt.jl:12\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the largest prime factor of\
    \ a given number. For example, given n = 257, the largest prime factor is 5.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprt58quxx.jl:12\nin expression starting at\
    \ /tmp/tmprt58quxx.jl:12\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of a given number\
    \ n. For example, for the number 15, there are 2 divisors: 5 and 7.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1iovpzec.jl:12\nin expression starting at\
    \ /tmp/tmp1iovpzec.jl:12\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vrp1ex2.jl:6\nin expression starting at /tmp/tmp1vrp1ex2.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.4>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor n = 0, it should return 1.\nFor n = 1, it should return\
    \ n.\nFor n > 1, it should return n * largest_divisor(n).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx74ujp6e.jl:11\nin expression starting at\
    \ /tmp/tmpx74ujp6e.jl:11\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the largest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe219wnti.jl:6\nin expression starting at /tmp/tmpe219wnti.jl:6\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbk4npzpg.jl:12\nin expression starting at\
    \ /tmp/tmpbk4npzpg.jl:12\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of a given number. For example, for the number 15, the\
    \ number of divisors is 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxmyzgs1a.jl:6\nin expression starting at /tmp/tmpxmyzgs1a.jl:6\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0l7ulfe.jl:12\nin expression starting at\
    \ /tmp/tmpj0l7ulfe.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the largest prime factor of a given\
    \ number. For example, for input 6, the largest prime factor is 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpijkw75a2.jl:12\nin expression starting at\
    \ /tmp/tmpijkw75a2.jl:12\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.3>\n@time largest_divisor(15)\n</cell>\n<text>\n\
    Exercise 7: Write a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfu9znn7.jl:11\nin expression starting at\
    \ /tmp/tmpkfu9znn7.jl:11\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt03dbrv6.jl:6\nin expression starting at /tmp/tmpt03dbrv6.jl:6\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            return n\n        else \n            return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2b87psgm.jl:15\nin expression starting at\
    \ /tmp/tmp2b87psgm.jl:15\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8yjlcm_c.jl:12\nin expression starting at\
    \ /tmp/tmp8yjlcm_c.jl:12\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            return n \n        else \n            return\
    \ largest_divisor(n//2)\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbn1owi6n.jl:15\nin expression starting at\
    \ /tmp/tmpbn1owi6n.jl:15\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzq5nvvv.jl:12\nin expression starting at\
    \ /tmp/tmprzq5nvvv.jl:12\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg4fkerz9.jl:12\nin expression starting at\
    \ /tmp/tmpg4fkerz9.jl:12\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn39f1__a.jl:12\nin expression starting at\
    \ /tmp/tmpn39f1__a.jl:12\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        return 0 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxvrm683.jl:8\nin expression starting at /tmp/tmpqxvrm683.jl:8\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    if n==2 then return 2\n    if n%3==0 then return\
    \ n\n    if n%5==0 then return n\n    if n%7==0 then return n\n    if n%11==0\
    \ then return n\n    if n%13==0 then return n\n    if n%17==0 then return n\n\
    \    if n%19==0 then return n\n    if n%23==0 then return n\n    if n%29==0 then\
    \ return n\n    if n%31==0 then return n\n    if n%37==0 then return n\n    if\
    \ n%41==0 then return n\n    if n%43==0 then return n\n    if n%47==0 then return\
    \ n\n    if n%53==0 then return n\n    if n%59==0 then return n\n    if n%61==0\
    \ then return n\n    if n%67==0 then return n\n    if n%71==0 then return n\n\
    \    if n%73==0 then return n\n    if n%79==0 then return n\n    if n%83==0 then\
    \ return n\n    if n%89==0 then return n\n    if n%97==0 then return n\n    if\
    \ n%101==0 then return n\n    if n%103==0 then return n\n    if n%107==0 then\
    \ return n\n    if n%109==0 then return n\n    if n%113==0 then return n\n   \
    \ if n%117==0 then return n\n    if n%121==0 then return n\n    if n%123==0 then\
    \ return n\n    if n%127==0 then return n\n    if n%131==0 then return n\n   \
    \ if n%137==0 then return n\n    if n%141==0 then return n\n    if n%143==0 then\
    \ return n\n    if n%147==0 then return n\n    if n%151==0 then return n\n   \
    \ if n%157==0 then return n\n    if n%161==0 then return n\n    if n%163==0 then\
    \ return n\n    if n%167==0 then return n\n    if n%171==0 then return n\n   \
    \ if n%177==0 then return n\n    if n%181==0 then return n\n    if n%193==0 then\
    \ return n\n    if n%197==0 then return n\n    if n%203==0 then return \nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptdkm2u5b.jl:6\nin expression starting at /tmp/tmptdkm2u5b.jl:6\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            return n\n        else \n            return largest_divisor(n//2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_nger1a.jl:15\nin expression starting at\
    \ /tmp/tmpr_nger1a.jl:15\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4t9s4b0x.jl:7\nin expression starting at /tmp/tmp4t9s4b0x.jl:7\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_rjdjp9.jl:12\nin expression starting at\
    \ /tmp/tmp5_rjdjp9.jl:12\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzgw3eat0.jl:6\nin expression starting at /tmp/tmpzgw3eat0.jl:6\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuuv8wq4l.jl:11\nin expression starting at\
    \ /tmp/tmpuuv8wq4l.jl:11\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Your function\
    \ should return the number of divisors, not just their values. For example, for\
    \ the number 12, your function should return 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8bcxcint.jl:12\nin expression starting at\
    \ /tmp/tmp8bcxcint.jl:12\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpavn35hbb.jl:12\nin expression starting at\
    \ /tmp/tmpavn35hbb.jl:12\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the factorial of a given number. \n\
    For instance, the factorial of 3 is 3 * 2 * 1 = 6. \nThe function should work\
    \ for any positive integer $n$.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7_xzjx3.jl:12\nin expression starting at\
    \ /tmp/tmpu7_xzjx3.jl:12\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpit022b9n.jl:12\nin expression starting at\
    \ /tmp/tmpit022b9n.jl:12\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a for loop and a prime number test.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpapmpxesg.jl:12\nin expression starting at\
    \ /tmp/tmpapmpxesg.jl:12\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01oq9n6w.jl:12\nin expression starting at\
    \ /tmp/tmp01oq9n6w.jl:12\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzq4ig5_4.jl:12\nin expression starting at\
    \ /tmp/tmpzq4ig5_4.jl:12\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns the number of prime\
    \ numbers less than or equal to a given number.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7qbga4rf.jl:6\nin expression starting at /tmp/tmp7qbga4rf.jl:6\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n/2) + 1 \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of divisors of n that are less than or equal\
    \ to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlh5fhs1.jl:8\nin expression starting at /tmp/tmptlh5fhs1.jl:8\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 15, the number\
    \ of divisors is 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkeq4mhjy.jl:8\nin expression starting at /tmp/tmpkeq4mhjy.jl:8\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2ct1d6a8.jl:6\nin expression starting at /tmp/tmp2ct1d6a8.jl:6\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of numbers\
    \ and returns the sum of the squares of the numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpslxjmjos.jl:12\nin expression starting at\
    \ /tmp/tmpslxjmjos.jl:12\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the number of divisors\
    \ of a given number n. For example, for n=15, there are 4 divisors: 1, 2, 3, and\
    \ 5.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphza3ej69.jl:12\nin expression starting at\
    \ /tmp/tmphza3ej69.jl:12\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as:\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxhigele6.jl:12\nin expression starting at\
    \ /tmp/tmpxhigele6.jl:12\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1) +\
    \ 1 \nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of a\
    \ given number n. \nFor example, for n = 15, the number of divisors is 5.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplyrk25cm.jl:11\nin expression starting at\
    \ /tmp/tmplyrk25cm.jl:11\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, larger than n\nHint: Use a recursive function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe9mytcqn.jl:12\nin expression starting at\
    \ /tmp/tmpe9mytcqn.jl:12\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For a given number n, find the factorial of n\n    >>> factorial(5)\n    120\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1mepem0.jl:12\nin expression starting at\
    \ /tmp/tmpa1mepem0.jl:12\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n % 2 == 0 \n        largest_divisor(n\
    \ / 2)\n    else \n        largest_divisor(3 * n + 1) \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofsxnea1.jl:8\nin expression starting at /tmp/tmpofsxnea1.jl:8\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that finds the largest prime factor\
    \ of a given number. For example, for n = 25, the largest prime factor is 5.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3lx7gjio.jl:7\nin expression starting at /tmp/tmp3lx7gjio.jl:7\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ouym64p.jl:8\nin expression starting at /tmp/tmp2ouym64p.jl:8\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.0>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpulzjcdwd.jl:11\nin expression starting at\
    \ /tmp/tmpulzjcdwd.jl:11\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplbfe80yg.jl:11\nin expression starting at\
    \ /tmp/tmplbfe80yg.jl:11\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        return 0 \n    else if n==1 \n        return 1 \n  \
    \  else if n%2==0 \n        return n \n    else \n        return largest_divisor(n-1)\
    \ + largest_divisor(n-(n%2)) \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the number of divisors\
    \ of a given number n. For example, for the number 15, there are two divisors:\
    \ 5 and 3. Write a function that returns the number of divisors of a given number\
    \ n. For example, for the number 15, there are two divisors: 5 and 3. Write a\
    \ function that returns the number of divisors of a given number n. For example,\
    \ for the number 15, there are two divisors: 5 and 3. Write a function that returns\
    \ the number of divisors of a given number n. For example, for the number 15,\
    \ there are two divisors: 5 and 3. Write a function that returns the number of\
    \ divisors of a given number n. For example, for the number 15, there are two\
    \ divisors: 5 and 3. Write a function that returns the number of divisors of a\
    \ given number n. For example, for the number 15, there are two divisors: 5 and\
    \ 3. Write a function that returns the number of divisors of a given number n.\
    \ For example, for the number 15, there are two divisors: 5 and 3. Write a function\
    \ that returns the number of divisors of a given number n. For example, for the\
    \ number 15, there are two divisors: 5 and 3. Write a function that returns the\
    \ number of divisors of a given number n. For example, for the number 15, there\
    \ are two divisors: 5 and 3. Write a function that returns the number of divisors\
    \ of a given number n. For example, for the number 15, there are two divisors:\
    \ 5 and 3. Write a function that returns the number of divisors of a given number\
    \ n. For example, for the number 15, there are two divisors: 5 and 3. Write a\
    \ function that returns the number of divisors of a given number n. For example,\
    \ for the number 15, there are two divisors: 5 and 3. Write a function that returns\
    \ the number of divisors of a given number n. For example, for the number 15,\
    \ there are two divisors: 5 and 3. Write a function that returns the number of\
    \ divisors of a given number n. For example, for the number 15, there are two\
    \ divisors: 5 and 3. Write a function that returns the number of divisors of a\
    \ given number n. For example, for the number 15, there are two divisors: 5 and\
    \ 3. Write a function that returns the number of divisors of a given number n.\
    \ For example, for the number 15, there are two divisors: 5 and 3. Write a function\
    \ that returns the number of divisors of a given number n. For example, for the\
    \ number 15, there are two divisors: 5 and 3. Write a function that returns the\
    \ number of divisors of a given number n. For example, for the number 15, there\
    \ are two divisors: 5 and 3. Write a function that returns the number of divisors\
    \ of a given number n. For example, for the number 15, there are two divisors:\
    \ 5 and 3. Write a function that returns the number of divisors of a given number\
    \ n. For example, for the number 15, there are \nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppht8qfyp.jl:8\nin expression starting at /tmp/tmppht8qfyp.jl:8\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a for loop to iterate through all numbers from 2 to n. \nHint: Use a prime number\
    \ generator to generate prime numbers. \nHint: Use a prime number generator to\
    \ generate prime numbers. \nHint: Use a prime number generator to generate prime\
    \ numbers. \nHint: Use a prime number generator to generate prime numbers. \n\
    Hint: Use a prime number generator to generate prime numbers. \nHint: Use a prime\
    \ number generator to generate prime numbers. \nHint: Use a prime number generator\
    \ to generate prime numbers. \nHint: Use a prime number generator to generate\
    \ prime numbers. \nHint: Use a prime number generator to generate prime numbers.\
    \ \nHint: Use a prime number generator to generate prime numbers. \nHint: Use\
    \ a prime number generator to generate prime numbers. \nHint: Use a prime number\
    \ generator to generate prime numbers. \nHint: Use a prime number generator to\
    \ generate prime numbers. \nHint: Use a prime number generator to generate prime\
    \ numbers. \nHint: Use a prime number generator to generate prime numbers. \n\
    Hint: Use a prime number generator to generate prime numbers. \nHint: Use a prime\
    \ number generator to generate prime numbers. \nHint: Use a prime number generator\
    \ to generate prime numbers. \nHint: Use a prime number generator to generate\
    \ prime numbers. \nHint: Use a prime number generator to generate prime numbers.\
    \ \nHint: Use a prime number generator to generate prime numbers. \nHint: Use\
    \ a prime number generator to generate prime numbers. \nHint: Use a prime number\
    \ generator to generate prime numbers. \nHint: Use a prime number generator to\
    \ generate prime numbers. \nHint: Use a prime number generator to generate prime\
    \ numbers. \nHint: Use a prime number generator to generate prime numbers. \n\
    Hint: Use a prime number generator to generate prime numbers. \nHint: Use a prime\
    \ number generator to generate prime numbers. \nHint: Use a prime number generator\
    \ to generate prime numbers. \nHint: Use a prime number generator to generate\
    \ prime numbers. \nHint: Use a prime number generator to generate prime numbers.\
    \ \nHint: Use a prime number generator to generate prime numbers. \nHint: Use\
    \ a prime number generator to generate prime numbers. \nHint: Use a prime number\
    \ generator to generate \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vuwhswb.jl:12\nin expression starting at\
    \ /tmp/tmp7vuwhswb.jl:12\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxwm0nd18.jl:6\nin expression starting at /tmp/tmpxwm0nd18.jl:6\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1clrrx5_.jl:7\nin expression starting at /tmp/tmp1clrrx5_.jl:7\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9frwiwv5.jl:6\nin expression starting at /tmp/tmp9frwiwv5.jl:6\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5p1j0cf7.jl:11\nin expression starting at\
    \ /tmp/tmp5p1j0cf7.jl:11\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2liataj.jl:12\nin expression starting at\
    \ /tmp/tmpe2liataj.jl:12\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nProblem 7: Write a function that returns\
    \ the smallest number that can be divided by all the numbers from 1 to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpski_zafj.jl:6\nin expression starting at /tmp/tmpski_zafj.jl:6\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlc13thk.jl:12\nin expression starting at\
    \ /tmp/tmpxlc13thk.jl:12\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\
    \ \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfrc_29j.jl:11\nin expression starting at\
    \ /tmp/tmpnfrc_29j.jl:11\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n-1) + n / largest_divisor(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that finds the largest prime factor\
    \ of a given number. For example, for the number 12, the largest prime factor\
    \ is 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1afb727p.jl:12\nin expression starting at\
    \ /tmp/tmp1afb727p.jl:12\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nFor a given number n, find the factorial\
    \ of n\nFor a given number n, find the factorial of n\nFor a given number n, find\
    \ the factorial of n\nFor a given number n, find the factorial of n\nFor a given\
    \ number n, find the factorial of n\nFor a given number n, find the factorial\
    \ of n\nFor a given number n, find the factorial of n\nFor a given number n, find\
    \ the factorial of n\nFor a given number n, find the factorial of n\nFor a given\
    \ number n, find the factorial of n\nFor a given number n, find the factorial\
    \ of n\nFor a given number n, find the factorial of n\nFor a given number n, find\
    \ the factorial of n\nFor a given number n, find the factorial of n\nFor a given\
    \ number n, find the factorial of n\nFor a given number n, find the factorial\
    \ of n\nFor a given number n, find the factorial of n\nFor a given number n, find\
    \ the factorial of n\nFor a given number n, find the factorial of n\nFor a given\
    \ number n, find the factorial of n\nFor a given number n, find the factorial\
    \ of n\nFor a given number n, find the factorial of n\nFor a given number n, find\
    \ the factorial of n\nFor a given number n, find the factorial of n\nFor a given\
    \ number n, find the factorial of n\nFor a given number n, find the factorial\
    \ of n\nFor a given number n, find the factorial of n\nFor a given number n, find\
    \ the factorial of n\nFor a given number n, find the factorial of n\nFor a given\
    \ number n, find the factorial of n\nFor a given number n, find the factorial\
    \ of n\nFor a given number n, find the factorial of n\nFor a given number n, find\
    \ the factorial of n\nFor a given number n, find the factorial of n\nFor a given\
    \ number n, find the factorial of n\nFor a given number n, find the factorial\
    \ of n\nFor a given number n, find the factorial of n\nFor a given number n, find\
    \ the factorial of n\nFor a given number n, find the factorial of n\nFor a given\
    \ number n, find the factorial of n\nFor a given number n, find the factorial\
    \ of n\nFor a given number n, find the factorial of n\nFor a given number n, find\
    \ the factorial of n\nFor a given number n, find the factorial of \nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprvum03v_.jl:6\nin expression starting at /tmp/tmprvum03v_.jl:6\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n % 2 == 0 \n        largest_divisor(n\
    \ / 2)\n    else \n        largest_divisor(3 * n + 1) \nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(150)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the factorial of a given number. \nFor a given number n, find the largest\
    \ number that divides n evenly, smaller than n\nFor a given number n, find the\
    \ smallest number that divides n evenly, larger than n\nFor a given number n,\
    \ find the smallest number that divides n evenly, smaller than n\nFor a given\
    \ number n, find the largest number that divides n evenly, larger than n\nFor\
    \ a given number n, find the smallest number that divides n evenly, smaller than\
    \ n\nFor a given number n, find the smallest number that divides n evenly, larger\
    \ than n\nFor a given number n, find the largest number that divides n evenly,\
    \ larger than n\nFor a given number n, find the smallest number that divides n\
    \ evenly, smaller than n\nFor a given number n, find the smallest number that\
    \ divides n evenly, larger than n\nFor a given number n, find the largest number\
    \ that divides n evenly, larger than n\nFor a given number n, find the smallest\
    \ number that divides n evenly, smaller than n\nFor a given number n, find the\
    \ smallest number that divides n evenly, larger than n\nFor a given number n,\
    \ find the largest number that divides n evenly, larger than n\nFor a given number\
    \ n, find the smallest number that divides n evenly, smaller than n\nFor a given\
    \ number n, find the smallest number that divides n evenly, larger than n\nFor\
    \ a given number n, find the largest number that divides n evenly, larger than\
    \ n\nFor a given number n, find the smallest number that divides n evenly, smaller\
    \ than n\nFor a given number n, find the smallest number that divides n evenly,\
    \ larger than n\nFor a given number n, find the largest number that divides n\
    \ evenly, larger than n\nFor a given number n, find the smallest number that divides\
    \ n evenly, smaller than n\nFor a given number n, find the smallest number that\
    \ divides n evenly, larger than n\nFor a given number n, find the largest number\
    \ that divides n evenly, larger than n\nFor a given number n, find the smallest\
    \ number that divides n evenly, smaller than n\nFor a given number n, find the\
    \ smallest number that divides n evenly, larger than n\nFor a given number n,\
    \ find the largest number that divides n evenly, larger than n\nFor a given number\
    \ n, find the smallest number that divides n evenly, smaller than n\nFor a given\
    \ number n, find the smallest number that divides n evenly, larger than n\nFor\
    \ a given number \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9vvthqv3.jl:8\nin expression starting at /tmp/tmp9vvthqv3.jl:8\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the largest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxldvb130.jl:12\nin expression starting at\
    \ /tmp/tmpxldvb130.jl:12\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of a\
    \ given number n. \nFor example, for n = 10, the function should return 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_9c7o9s.jl:12\nin expression starting at\
    \ /tmp/tmp4_9c7o9s.jl:12\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n%2==0\n            largest_divisor(n/2)\n        else\n            largest_divisor(n/2)\
    \ \n        end\n    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a number n and returns\
    \ the number of positive divisors of n. For example, given n = 12, there are two\
    \ positive divisors: 2 and 6. Write a recursive function count_positive_divisors(n)\
    \ that returns the number of positive divisors of n.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6a9kxdfv.jl:17\nin expression starting at\
    \ /tmp/tmp6a9kxdfv.jl:17\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        return 0 \n    else if n==1 \n        return 1 \n  \
    \  else \n        largest_divisor(n-1)\n        if n % 2 == 0 \n            largest_divisor(n/2)\
    \ \n        else \n            largest_divisor(n/2) \n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbn0yypvz.jl:8\nin expression starting at /tmp/tmpbn0yypvz.jl:8\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first n prime numbers. \n\
    Hint: Use a for loop and a prime number generator to generate primes\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzd0tymn.jl:12\nin expression starting at\
    \ /tmp/tmpvzd0tymn.jl:12\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n%2==0 then return largest_divisor(n/2)\n\
    \    else return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd4agfu61.jl:6\nin expression starting at /tmp/tmpd4agfu61.jl:6\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n==2 then return 2\n    else if n%2==0\
    \ then return n//2\n    else return largest_divisor(n-1)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the smallest number that can be divided by all the numbers\
    \ from 1 to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqgmoilvg.jl:6\nin expression starting at /tmp/tmpqgmoilvg.jl:6\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a given number. For example,\
    \ factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykemoqez.jl:11\nin expression starting at\
    \ /tmp/tmpykemoqez.jl:11\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        largest_divisor(n / 2) + 1\nend\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype largest_divisor(15)\n</cell>\n\
    <text>\nExercise: Write a function that returns the largest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36nvyr_5.jl:11\nin expression starting at\
    \ /tmp/tmp36nvyr_5.jl:11\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvao4mf5g.jl:12\nin expression starting at\
    \ /tmp/tmpvao4mf5g.jl:12\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1clrrx5_.jl:7\nin expression starting at /tmp/tmp1clrrx5_.jl:7\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1)\n      \
    \  if n % 2 == 0 \n            largest_divisor(n/2)\n        else \n         \
    \   largest_divisor(n/2) \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the largest number that divides n evenly, smaller than n.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4f7vug0z.jl:17\nin expression starting at\
    \ /tmp/tmp4f7vug0z.jl:17\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkr4yyiiu.jl:12\nin expression starting at\
    \ /tmp/tmpkr4yyiiu.jl:12\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the number of divisors of a given number n. For example, for the number 12,\
    \ the number of divisors is 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1v5dx9s.jl:8\nin expression starting at /tmp/tmpb1v5dx9s.jl:8\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    elseif n==1 \n        1\n    elseif n%2==0 \n\
    \        largest_divisor(n/2)\n    else\n        largest_divisor(n/2)+1\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for n = 10, the function should return 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wfdknic.jl:16\nin expression starting at\
    \ /tmp/tmp1wfdknic.jl:16\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjdy7qzz8.jl:11\nin expression starting at\
    \ /tmp/tmpjdy7qzz8.jl:11\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number\
    \ n. For example, for n = 12, there are 3 divisors: 1, 2, and 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprv71r_sd.jl:12\nin expression starting at\
    \ /tmp/tmprv71r_sd.jl:12\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeilpege5.jl:12\nin expression starting at\
    \ /tmp/tmpeilpege5.jl:12\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return n\n    else if n%2==0 then return largest_divisor(n/2)\n\
    \    else return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. The function should return the number of divisors,\
    \ not just their values. For example, for the number 12, it should return 2.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyj8w281u.jl:6\nin expression starting at /tmp/tmpyj8w281u.jl:6\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2usk8mbj.jl:12\nin expression starting at\
    \ /tmp/tmp2usk8mbj.jl:12\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        if n % 2 == 0\n            largest_divisor(n\
    \ / 2)\n        else\n            largest_divisor(n / 2) + 1\n        end\n  \
    \  end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number\
    \ of divisors of a given number n. For example, for the number 12, there are two\
    \ divisors: 2 and 3. Write a function that returns the number of divisors of a\
    \ given number n. For example, for the number 12, there are two divisors: 2 and\
    \ 3. Write a function that returns the number of divisors of a given number n.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number n. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number n. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number n. For example, for the number 12, there are two divisors:\
    \ 2 and 3. Write a function that returns the number of divisors of a given number\
    \ n. For example, for the number 12, there are two divisors: 2 and 3. Write a\
    \ function that returns the number of divisors of a given number n. For example,\
    \ for the number 12, there are two divisors: 2 and 3. Write a function that returns\
    \ the number of divisors of a given number n. For example, for the number 12,\
    \ there are two divisors: 2 and 3. Write a function that returns the number of\
    \ divisors of a given number n. For example, for the number 12, there are two\
    \ divisors: 2 and 3. Write a function that returns the number of divisors of a\
    \ given number n. For example, for the number 12, there are two divisors: 2 and\
    \ 3. Write a function that returns the number of divisors of a given number n.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number n. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number n. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number n. For example, for the number 12, there are two divisors:\
    \ 2 and 3. Write a function that returns the number of divisors of a given number\
    \ n. For example, for the number 12, there are two divisors: 2 and 3. Write a\
    \ function that returns the number of divisors of a given number n. For example,\
    \ for the number 12, there are two divisors: 2 and 3. Write a function that returns\
    \ the number of divisors of a given number n. For example, for the number 12,\
    \ there are two divisors: 2 and 3. Write a function that returns the number of\
    \ divisors of a given number n. For example, for the number 12, there are two\
    \ divisors: 2 and 3. Write a function that returns the number of divisors of a\
    \ given number n. For example, for the number 12, there are two divisors: 2 and\
    \ 3. Write a function that returns the number of divisors of a given number n.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number n. For example, for the\
    \ number 12, there are two divisors: 2 and \nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0fsiedn.jl:16\nin expression starting at\
    \ /tmp/tmph0fsiedn.jl:16\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 12, there\
    \ are 4 divisors: 1, 2, 3, and 6. \nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for n = 12, there are 4 divisors:\
    \ 1, 2, 3, and 6. \nWrite a function that returns the number of divisors of a\
    \ given number n. \nFor example, for n = 12, there are 4 divisors: 1, 2, 3, and\
    \ 6. \nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for n = 12, there are 4 divisors: 1, 2, 3, and 6. \nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for n = 12, there are 4 divisors: 1, 2, 3, and 6. \nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 12, there\
    \ are 4 divisors: 1, 2, 3, and 6. \nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for n = 12, there are 4 divisors:\
    \ 1, 2, 3, and 6. \nWrite a function that returns the number of divisors of a\
    \ given number n. \nFor example, for n = 12, there are 4 divisors: 1, 2, 3, and\
    \ 6. \nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for n = 12, there are 4 divisors: 1, 2, 3, and 6. \nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for n = 12, there are 4 divisors: 1, 2, 3, and 6. \nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 12, there\
    \ are 4 divisors: 1, 2, 3, and 6. \nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for n = 12, there are 4 divisors:\
    \ 1, 2, 3, and 6. \nWrite a function that returns the number of divisors of a\
    \ given number n. \nFor example, for n = 12, there are 4 divisors: 1, 2, 3, and\
    \ 6. \nWrite a function that returns the number of divisors of a given number\
    \ n. \nFor example, for n = 12, there are 4 divisors: 1, 2, 3, and 6. \nWrite\
    \ a function that returns the number of divisors of a given number n. \nFor example,\
    \ for n = 12, there are 4 divisors: 1, 2, 3, and 6. \nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 12, there\
    \ are 4 divisors: 1, 2, 3, and 6. \nWrite a function that returns the number of\
    \ divisors of a given number n. \nFor example, for n = 12, there are 4 divisors:\
    \ 1, 2, 3, and 6. \nWrite a function that returns the number of divisor\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrh1lte9.jl:8\nin expression starting at /tmp/tmpsrh1lte9.jl:8\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.1>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe9epw2x4.jl:6\nin expression starting at /tmp/tmpe9epw2x4.jl:6\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a given\
    \ number\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpncsu69l9.jl:11\nin expression starting at\
    \ /tmp/tmpncsu69l9.jl:11\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n\
    </cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code\
    \ language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n\
    @time largest_divisor(15)\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpu710q3.jl:16\nin expression starting at\
    \ /tmp/tmprpu710q3.jl:16\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        largest_divisor(n/2)\n        largest_divisor(n/3)\n        largest_divisor(n/4)\n\
    \        largest_divisor(n/5)\n        largest_divisor(n/6)\n        largest_divisor(n/7)\n\
    \        largest_divisor(n/8)\n        largest_divisor(n/9)\n        largest_divisor(n/10)\n\
    \        largest_divisor(n/11)\n        largest_divisor(n/12)\n        largest_divisor(n/13)\n\
    \        largest_divisor(n/14)\n        largest_divisor(n/15)\n        largest_divisor(n/16)\n\
    \        largest_divisor(n/17)\n        largest_divisor(n/18)\n        largest_divisor(n/19)\n\
    \        largest_divisor(n/20)\n        largest_divisor(n/21)\n        largest_divisor(n/22)\n\
    \        largest_divisor(n/23)\n        largest_divisor(n/24)\n        largest_divisor(n/25)\n\
    \        largest_divisor(n/26)\n        largest_divisor(n/27)\n        largest_divisor(n/28)\n\
    \        largest_divisor(n/29)\n        largest_divisor(n/30)\n        largest_divisor(n/31)\n\
    \        largest_divisor(n/32)\n        largest_divisor(n/33)\n        largest_divisor(n/34)\n\
    \        largest_divisor(n/35)\n        largest_divisor(n/36)\n        largest_divisor(n/37)\n\
    \        largest_divisor(n/38)\n        largest_divisor(n/39)\n        largest_divisor(n/40)\n\
    \        largest_divisor(n/41)\n        largest_divisor(n/42)\n        largest_divisor(n/43)\n\
    \        largest_divisor(n/44)\n        largest_divisor(n/45)\n        largest_divisor(n/46)\n\
    \        largest_divisor(n/47)\n        largest_divisor(n/48)\n        largest_divisor(n/49)\n\
    \        largest_divisor(n/50)\n        largest_divisor(n/51)\n        largest_divisor(n/52)\n\
    \        largest_divisor(n/53)\n        largest_divisor(n/54)\n        largest_divisor(n/55)\n\
    \        largest_divisor(n/56)\n        largest_divisor(n/57)\n        largest_divisor(n/58)\n\
    \        largest_divisor(n/59)\n        largest_divisor(n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbazo3h00.jl:69\nin expression starting at\
    \ /tmp/tmpbazo3h00.jl:69\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qlgjsx2.jl:12\nin expression starting at\
    \ /tmp/tmp8qlgjsx2.jl:12\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of a given number.\
    \ For example, for the number 15, the number of divisors is 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9cbf9kl.jl:12\nin expression starting at\
    \ /tmp/tmpm9cbf9kl.jl:12\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the largest prime factor of a given number. \nFor example, largest_prime_factor(12)\
    \ should return 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkp7p1mlg.jl:7\nin expression starting at /tmp/tmpkp7p1mlg.jl:7\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb7v02zrk.jl:6\nin expression starting at /tmp/tmpb7v02zrk.jl:6\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvqxlspc.jl:11\nin expression starting at\
    \ /tmp/tmppvqxlspc.jl:11\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the \nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaj6pxu3q.jl:12\nin expression starting at\
    \ /tmp/tmpaj6pxu3q.jl:12\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n==2 then return 2\n    else if n%2==0\
    \ then return largest_divisor(n/2)\n    else return largest_divisor(n/2)+1\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the largest prime factor of a given number.\
    \ For example, if the input is 12, the output should be 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsqmekbbq.jl:6\nin expression starting at /tmp/tmpsqmekbbq.jl:6\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest number that divides\
    \ n evenly, larger than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpssq22d89.jl:11\nin expression starting at\
    \ /tmp/tmpssq22d89.jl:11\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150);\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqa9f4cb.jl:7\nin expression starting at /tmp/tmpmqa9f4cb.jl:7\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for the number 15, the number of divisors\
    \ is 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr4xdxi0j.jl:6\nin expression starting at /tmp/tmpr4xdxi0j.jl:6\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdx95qx0q.jl:12\nin expression starting at\
    \ /tmp/tmpdx95qx0q.jl:12\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n==1 then return 1\n    else if n%2==0\
    \ then return n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(150)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the factorial of a given number. For example, factorial(5) = 5 * 4 *\
    \ 3 * 2 * 1 = 120\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt32omxk7.jl:6\nin expression starting at /tmp/tmpt32omxk7.jl:6\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hwvtzyh.jl:12\nin expression starting at\
    \ /tmp/tmp_hwvtzyh.jl:12\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n%2==0 then return n//2\n    else return\
    \ largest_divisor(n-1)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi410sarx.jl:6\nin expression starting at /tmp/tmpi410sarx.jl:6\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the factorial\
    \ of a given number. For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpejyakoy7.jl:12\nin expression starting at\
    \ /tmp/tmpejyakoy7.jl:12\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq6i38qya.jl:12\nin expression starting at\
    \ /tmp/tmpq6i38qya.jl:12\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    if n==2 then return 2\n    if n%3==0 then return\
    \ n\n    if n%3==1 then return n+1\n    if n%3==2 then return n+2\n    if n%3==3\
    \ then return n+3\n    if n%3==4 then return n+4\n    if n%3==5 then return n+5\n\
    \    if n%3==6 then return n+6\n    if n%3==7 then return n+7\n    if n%3==8 then\
    \ return n+8\n    if n%3==9 then return n+9\n    if n%3==10 then return n+10\n\
    \    if n%3==11 then return n+11\n    if n%3==12 then return n+12\n    if n%3==13\
    \ then return n+13\n    if n%3==14 then return n+14\n    if n%3==15 then return\
    \ n+15\n    if n%3==16 then return n+16\n    if n%3==17 then return n+17\n   \
    \ if n%3==18 then return n+18\n    if n%3==19 then return n+19\n    if n%3==20\
    \ then return n+20\n    if n%3==21 then return n+21\n    if n%3==22 then return\
    \ n+22\n    if n%3==23 then return n+23\n    if n%3==24 then return n+24\n   \
    \ if n%3==25 then return n+25\n    if n%3==26 then return n+26\n    if n%3==27\
    \ then return n+27\n    if n%3==28 then return n+28\n    if n%3==29 then return\
    \ n+29\n    if n%3==30 then return n+30\n    if n%3==31 then return n+31\n   \
    \ if n%3==32 then return n+32\n    if n%3==33 then return n+33\n    if n%3==34\
    \ then return n+34\n    if n%3==35 then return n+35\n    if n%3==36 then return\
    \ n+36\n    if n%3==37 then return n+37\n    if n%3==38 then return n+38\n   \
    \ if n%3==39 then return n+39\n    if n%3==40 then return n+40\n    if n%3==41\
    \ then return n+41\n    if n%3==42 then return n+42\n    if n%3==43 then return\
    \ n+43\n    if n%3==44 then return n+\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7dzrmo62.jl:6\nin expression starting at /tmp/tmp7dzrmo62.jl:6\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd4bwjm4c.jl:6\nin expression starting at /tmp/tmpd4bwjm4c.jl:6\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2 == 0 \n            largest_divisor(n/2)\n        else \n     \
    \       largest_divisor(n/2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \nFor a given number n, compute the factorial\
    \ of n. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfbzqg5y.jl:16\nin expression starting at\
    \ /tmp/tmpnfbzqg5y.jl:16\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_x9v2sms.jl:12\nin expression starting at\
    \ /tmp/tmp_x9v2sms.jl:12\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdqoku20r.jl:6\nin expression starting at /tmp/tmpdqoku20r.jl:6\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n        else return largest_divisor(n\
    \ / 2) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: 2 and 3. Write a function that returns the\
    \ number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Write a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Write a function\
    \ that returns the number of divisors of a given number. For example, for the\
    \ number 12, there are two divisors: \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp78dkhn1r.jl:7\nin expression starting at /tmp/tmp78dkhn1r.jl:7\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n        else return largest_divisor(n\
    \ / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp586btldi.jl:7\nin expression starting at /tmp/tmp586btldi.jl:7\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzxg2ah_b.jl:8\nin expression starting at /tmp/tmpzxg2ah_b.jl:8\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first n prime numbers. \nHint: Use a for loop and a prime number\
    \ test.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppnv4kzia.jl:8\nin expression starting at /tmp/tmppnv4kzia.jl:8\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdelpuh80.jl:8\nin expression starting at /tmp/tmpdelpuh80.jl:8\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n    else \n        largest_divisor(n\
    \ / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(1000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(10000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100000)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(1000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(10000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_divisor(100000000)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(1000000000)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(10000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(100000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_divisor(1000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(1000000000002)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_divisor(1000000000003)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(1000000000004)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(1000000000005)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_divisor(1000000000006)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(1000000000007)\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(1000000000008)\n</cell>\n<code language=julia-1.5>\n@time\
    \ largest_divisor(1000000000009)\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(1000000000010)\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(1000000000011)\n</cell>\n\
    <code language=julia-1.5>\n@time largest_divisor(1000000000012)\n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(1000000000013)\n</cell>\n<code language=\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp09t0djrx.jl:7\nin expression starting at /tmp/tmp09t0djrx.jl:7\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr3c06sh_.jl:6\nin expression starting at /tmp/tmpr3c06sh_.jl:6\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vrp1ex2.jl:6\nin expression starting at /tmp/tmp1vrp1ex2.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for the number 15, the number of divisors\
    \ is 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptz7ihz29.jl:7\nin expression starting at /tmp/tmptz7ihz29.jl:7\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyh6ddi1a.jl:8\nin expression starting at /tmp/tmpyh6ddi1a.jl:8\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n    else \n        largest_divisor(n\
    \ / 2)\n</code>\n<|/ a tags=recursion,math,haskell |>\n<| c |>\nThis doesn't work.\
    \ Try it with `largest_divisor(15)`.\n<|/ c |>\n<| c |>\nYes, I see that now.\
    \ Thanks for pointing that out. I've updated the answer.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nlargest_divisor :: Int -> Int\nlargest_divisor n = largest_divisor'\
    \ n 0\n  where\n    largest_divisor' 0 _ = 0\n    largest_divisor' n _\n     \
    \ | even n = n\n      | otherwise = largest_divisor' (n `div` 2) (max 1 n)\n</code>\n\
    <|/ a tags=recursion,math,haskell |>\n<| a dscore=0 |>\n<code>\nlargest_divisor\
    \ :: Int -> Int\nlargest_divisor n = largest_divisor' n 0\n  where\n    largest_divisor'\
    \ 0 _ = 0\n    largest_divisor' n _\n      | even n = n\n      | otherwise = largest_divisor'\
    \ (n `div` 2) (max 1 n)\n</code>\n<|/ a tags=recursion,math,haskell |>\n<| a |>\n\
    <code>\nlargest_divisor :: Int -> Int\nlargest_divisor n = largest_divisor' n\
    \ 0\n  where\n    largest_divisor' 0 _ = 0\n    largest_divisor' n _\n      |\
    \ even n = n\n      | otherwise = largest_divisor' (n `div` 2) (max 1 n)\n</code>\n\
    <|/ a dscore=0 tags=recursion,math,haskell |>\n<| c |>\nWhile this code may answer\
    \ the question, providing additional context regarding why and/or how this code\
    \ answers the question improves its long-term value.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nlargest_divisor :: Int -> Int\nlargest_divisor n = largest_divisor'\
    \ n 0\n  where\n    largest_divisor' 0 _ = 0\n    largest_divisor' n _\n     \
    \ | even n = n\n      | otherwise = largest_divisor' (n `div` 2) (max 1 n)\n</code>\n\
    <|/ a tags=recursion,math,haskell |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code \n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx8y4hnlc.jl:7\nin expression starting at /tmp/tmpx8y4hnlc.jl:7\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf603hd0_.jl:6\nin expression starting at /tmp/tmpf603hd0_.jl:6\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphobx4vnh.jl:11\nin expression starting at\
    \ /tmp/tmphobx4vnh.jl:11\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqpeawis9.jl:12\nin expression starting at\
    \ /tmp/tmpqpeawis9.jl:12\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Your function\
    \ should return the number of divisors, not just their values. For example, for\
    \ the number 12, your function should return 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw8ggp8pc.jl:12\nin expression starting at\
    \ /tmp/tmpw8ggp8pc.jl:12\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        largest_divisor(n/2)\n        if n%2==0 \n            return n\n    \
    \    else \n            return n-1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppe85a2y7.jl:16\nin expression starting at\
    \ /tmp/tmppe85a2y7.jl:16\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for n = 15, the number of divisors is 5.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp48ndvur8.jl:7\nin expression starting at /tmp/tmp48ndvur8.jl:7\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgv6a3azi.jl:12\nin expression starting at\
    \ /tmp/tmpgv6a3azi.jl:12\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vrp1ex2.jl:6\nin expression starting at /tmp/tmp1vrp1ex2.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk6jbiyl8.jl:11\nin expression starting at\
    \ /tmp/tmpk6jbiyl8.jl:11\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of a given number. For example, for the number 12, there\
    \ are two divisors: 2 and 3. Your function should return the number of divisors.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn62__b9x.jl:8\nin expression starting at /tmp/tmpn62__b9x.jl:8\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of a\
    \ given number. \nFor example, for the number 15, the number of divisors is 3.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpux7wm8_x.jl:11\nin expression starting at\
    \ /tmp/tmpux7wm8_x.jl:11\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nFor a given number n, find the factorial of n\n    >>> factorial(5)\n\
    \    120\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwmtaupeo.jl:11\nin expression starting at\
    \ /tmp/tmpwmtaupeo.jl:11\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 5\nWrite a function that returns the largest prime\
    \ factor of a given number. For example, if the number is 17, it should return\
    \ 3. Note that 1 does not count as a prime factor.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkzcs69y3.jl:12\nin expression starting at\
    \ /tmp/tmpkzcs69y3.jl:12\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4llnh29u.jl:12\nin expression starting at\
    \ /tmp/tmp4llnh29u.jl:12\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhmaelwg.jl:12\nin expression starting at\
    \ /tmp/tmpqhmaelwg.jl:12\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5gf5riia.jl:6\nin expression starting at /tmp/tmp5gf5riia.jl:6\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(150)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of divisors of a given number n. \nFor example, for n = 15,\
    \ the function should return 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp154y7mb7.jl:6\nin expression starting at /tmp/tmp154y7mb7.jl:6\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnka90b0.jl:12\nin expression starting at\
    \ /tmp/tmprnka90b0.jl:12\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else \n        largest_divisor(n-1)\n       \
    \ if n%2==0 \n            largest_divisor(n/2)\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype largest_divisor(15)\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that returns the factorial of a given number. \n\
    For a given number n, find the largest number that divides n evenly, smaller than\
    \ n\nFor a given number n, find the smallest number that divides n evenly, larger\
    \ than n\nFor a given number n, find the smallest number that divides n evenly,\
    \ smaller than n\nFor a given number n, find the largest number that divides n\
    \ evenly, larger than n\nFor a given number n, find the smallest number that divides\
    \ n evenly, smaller than n\nFor a given number n, find the largest number that\
    \ divides n evenly, larger than n\nFor a given number n, find the smallest number\
    \ that divides n evenly, larger than n\nFor a given number n, find the smallest\
    \ number that divides n evenly, smaller than n\nFor a given number n, find the\
    \ largest number that divides n evenly, larger than n\nFor a given number n, find\
    \ the smallest number that divides n evenly, larger than n\nFor a given number\
    \ n, find the smallest number that divides n evenly, smaller than n\nFor a given\
    \ number n, find the largest number that divides n evenly, larger than n\nFor\
    \ a given number n, find the smallest number that divides n evenly, larger than\
    \ n\nFor a given number n, find the smallest number that divides n evenly, smaller\
    \ than n\nFor a given number n, find the largest number that divides n evenly,\
    \ larger than n\nFor a given number n, find the smallest number that divides n\
    \ evenly, larger than n\nFor a given number n, find the smallest number that divides\
    \ n evenly, smaller than n\nFor a given number n, find the largest number that\
    \ divides n evenly, larger than n\nFor a given number n, find the smallest number\
    \ that divides n evenly, larger than n\nFor a given number n, find the smallest\
    \ number that divides n evenly, smaller than n\nFor a given number n, find the\
    \ largest number that divides n evenly, larger than n\nFor a given number n, find\
    \ the smallest number that divides n evenly, larger than n\nFor a given number\
    \ n, find the smallest number that divides n evenly, smaller than n\nFor a given\
    \ number n, find the largest number that divides n evenly, larger than n\nFor\
    \ a given number n, find the smallest number that divides n evenly, larger than\
    \ n\nFor a given number n, find the smallest number that divides n evenly, smaller\
    \ than n\nFor a given number n, find the largest number that divides n evenly,\
    \ larger than n\nFor \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo7emxnkw.jl:15\nin expression starting at\
    \ /tmp/tmpo7emxnkw.jl:15\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        largest_divisor(n-1) + n // largest_divisor(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9kg6anp.jl:11\nin expression starting at\
    \ /tmp/tmpp9kg6anp.jl:11\n"
  stdout: ''
  timestamp: 1659822468
