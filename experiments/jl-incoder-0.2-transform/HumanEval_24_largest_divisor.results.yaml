language: jl
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n    else \n        largest_divisor(n\
    \ / 2)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an answer. Just a code\
    \ dump.\n<|/ c |>\n<| c |>\nThe question was \"how do I find the largest number\
    \ that divides n evenly, smaller than n\". The code dump was the answer. How does\
    \ this not answer the question?\n<|/ c |>\n<| c |>\nThe question was \"how do\
    \ I find the largest number that divides n evenly, smaller than n\". The code\
    \ dump was the answer. How does this not answer the question?\n<|/ c |>\n<| c\
    \ |>\nThe question was \"how do I find the largest number that divides n evenly,\
    \ smaller than n\". The code dump was the answer. How does this not answer the\
    \ question?\n<|/ c |>\n<| c |>\nThe question was \"how do I find the largest number\
    \ that divides n evenly, smaller than n\". The code dump was the answer. How does\
    \ this not answer the question?\n<|/ c |>\n<| a tags=recursion,big-o,time-complexity,algorithm\
    \ |>\n<code>\ndef largest_divisor(n):\n    if n == 1:\n        return n\n    else:\n\
    \        if n % 2 == 0:\n            return n\n        else:\n            return\
    \ largest_divisor(n / 2)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is not an\
    \ answer. Just a code dump.\n<|/ c |>\n<| c |>\nThe question was \"how do I find\
    \ the largest number that divides n evenly, smaller than n\". The code dump was\
    \ the answer. How does this not answer the question?\n<|/ c |>\n<| c |>\nThe question\
    \ was \"how do I find the largest number that divides n evenly, smaller than n\"\
    . The code dump was the answer. How does this not answer the question?\n<|/ c\
    \ |>\n<| a tags=recursion,big-o,time-complexity,algorithm |>\n<code>\ndef largest_divisor(n):\n\
    \    if n == 1:\n        return n\n    else:\n        if n % 2 == 0:\n       \
    \     return n\n        else:\n            return largest_divisor(n / 2)\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis is not an answer. Just a code dump.\n<|/ c |>\n\
    <| c |>\nThe question was \"how do I find the largest number that divides n evenly,\
    \ smaller than n\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpklwutm8h.jl:7\nin expression starting at /tmp/tmpklwutm8h.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vrp1ex2.jl:6\nin expression starting at /tmp/tmp1vrp1ex2.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\
    \ \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzdz2tsas.jl:11\nin expression starting at\
    \ /tmp/tmpzdz2tsas.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n\nHint: use largest_divisor(n) to find the largest number that\
    \ divides n evenly, smaller than n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmup7vjkq.jl:12\nin expression starting at\
    \ /tmp/tmpmup7vjkq.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@time largest_divisor(150)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xav2hc3.jl:12\nin expression starting at\
    \ /tmp/tmp7xav2hc3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcxsjldr8.jl:6\nin expression starting at /tmp/tmpcxsjldr8.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0l7ulfe.jl:12\nin expression starting at\
    \ /tmp/tmpj0l7ulfe.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqcu4zo56.jl:8\nin expression starting at /tmp/tmpqcu4zo56.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of divisors of n that are less than or equal to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph2msm7vq.jl:6\nin expression starting at /tmp/tmph2msm7vq.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of a given number\
    \ n. For example, for n = 10, there are 3 divisors: 1, 2, and 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprysuy28z.jl:12\nin expression starting at\
    \ /tmp/tmprysuy28z.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgf_0jayb.jl:12\nin expression starting at\
    \ /tmp/tmpgf_0jayb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 10\nWrite a function that returns the factorial\
    \ of a given number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpchw5ggro.jl:12\nin expression starting at\
    \ /tmp/tmpchw5ggro.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n==2 \n        return 2 \n  \
    \  else \n        largest_divisor(n-1)\n        largest_divisor(n-2)\n       \
    \ largest_divisor(n-3)\n        largest_divisor(n-4)\n        largest_divisor(n-5)\n\
    \        largest_divisor(n-6)\n        largest_divisor(n-7)\n        largest_divisor(n-8)\n\
    \        largest_divisor(n-9)\n        largest_divisor(n-10)\n        largest_divisor(n-11)\n\
    \        largest_divisor(n-12)\n        largest_divisor(n-13)\n        largest_divisor(n-14)\n\
    \        largest_divisor(n-15)\n        largest_divisor(n-16)\n        largest_divisor(n-17)\n\
    \        largest_divisor(n-18)\n        largest_divisor(n-19)\n        largest_divisor(n-20)\n\
    \        largest_divisor(n-21)\n        largest_divisor(n-22)\n        largest_divisor(n-23)\n\
    \        largest_divisor(n-24)\n        largest_divisor(n-25)\n        largest_divisor(n-26)\n\
    \        largest_divisor(n-27)\n        largest_divisor(n-28)\n        largest_divisor(n-29)\n\
    \        largest_divisor(n-30)\n        largest_divisor(n-31)\n        largest_divisor(n-32)\n\
    \        largest_divisor(n-33)\n        largest_divisor(n-34)\n        largest_divisor(n-35)\n\
    \        largest_divisor(n-36)\n        largest_divisor(n-37)\n        largest_divisor(n-38)\n\
    \        largest_divisor(n-39)\n        largest_divisor(n-40)\n        largest_divisor(n-41)\n\
    \        largest_divisor(n-42)\n        largest_divisor(n-43)\n        largest_divisor(n-44)\n\
    \        largest_divisor(n-45)\n        largest_divisor(n-46)\n        largest_divisor(n-47)\n\
    \        largest_divisor(n-48)\n        largest_divisor(n-49)\n        largest_divisor(n-50)\n\
    \        largest_divisor(n-51)\n        largest_divisor(n-52)\n        largest_divisor(n-53)\n\
    \        largest_divisor(n-54)\n        largest_divisor(n-55)\n        largest_divisor(n-56)\n\
    \        largest_divisor(n-57)\n        largest_divisor(n-58)\n        largest_divisor(n\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprn8_a3jg.jl:8\nin expression starting at /tmp/tmprn8_a3jg.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprkjrv35r.jl:8\nin expression starting at /tmp/tmprkjrv35r.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. \nFor a given number n, find the factorial\
    \ of n\n    >>> factorial(5)\n    120\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzzg8d7m.jl:8\nin expression starting at /tmp/tmpmzzg8d7m.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for n = 12, there are 4 divisors: 1, 2, 3, and\
    \ 4.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp58qfr9p1.jl:6\nin expression starting at /tmp/tmp58qfr9p1.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupu9w5na.jl:16\nin expression starting at\
    \ /tmp/tmpupu9w5na.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpul9qg44x.jl:12\nin expression starting at\
    \ /tmp/tmpul9qg44x.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nFor a given number n, find the factorial\
    \ of n. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykmh4arm.jl:8\nin expression starting at /tmp/tmpykmh4arm.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the largest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzwf7gah.jl:8\nin expression starting at /tmp/tmpmzwf7gah.jl:8\n"
  stdout: ''
