language: jl
name: HumanEval_20_find_closest_elements
results:
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < smallest\n            smallest = i\n        elseif\
    \ i > largest\n            largest = i\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work\
    \ if there are two numbers that are equidistant from each other. For example,\
    \ `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])` returns `(2.0, 2.0)`\
    \ instead of `(2.0, 2.2)`.\n<|/ c |>\n<| c |>\nI see what you mean. I've edited\
    \ my answer to account for that case.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a package\
    \ for this:\nhttps://github.com/johnmyleswhite/ClosestPair\n<code>\njulia> using\
    \ ClosestPair\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcc70y0u3.jl:20\nin expression starting at\
    \ /tmp/tmpcc70y0u3.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2bkcuziq.jl:23\nin expression starting at\
    \ /tmp/tmp2bkcuziq.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hdmjs5k.jl:23\nin expression starting at\
    \ /tmp/tmp4hdmjs5k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        if numbers[i] < smallest \n            smallest\
    \ = numbers[i]\n        elseif numbers[i] > largest\n            largest = numbers[i]\n\
    \        end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that will take a list of numbers and return the sum\
    \ of the numbers in the list. \nWrite a function that will take a list of numbers\
    \ and return the average of the numbers in the list. \nWrite a function that will\
    \ take a list of numbers and return the median of the numbers in the list. \n\
    Write a function that will take a list of numbers and return the mode of the numbers\
    \ in the list. \nWrite a function that will take a list of numbers and return\
    \ the standard deviation of the numbers in the list. \nWrite a function that will\
    \ take a list of numbers and return the variance of the numbers in the list. \n\
    Write a function that will take a list of numbers and return the sum of the squares\
    \ of the numbers in the list. \nWrite a function that will take a list of numbers\
    \ and return the sum of the cubes of the numbers in the list. \nWrite a function\
    \ that will take a list of numbers and return the sum of the exponential of the\
    \ numbers in the list. \nWrite a function that will take a list of numbers and\
    \ return the sum of the natural logarithms of the numbers in the list. \nWrite\
    \ a function that will take a list of numbers and return the sum of the reciprocals\
    \ of the numbers in the list. \nWrite a function that will take a list of numbers\
    \ and return the sum of the absolute values of the numbers in the list. \nWrite\
    \ a function that will take a list of numbers and return the sum of the reciprocals\
    \ of the squares of the numbers in the list. \nWrite a function that will take\
    \ a list of numbers and return the sum of the reciprocals of the cubes of the\
    \ numbers in the list. \nWrite a function that will take a list of numbers and\
    \ return the sum of the reciprocals of the exponential of the numbers in the list.\
    \ \nWrite a function that will take a list of numbers and return the sum of the\
    \ reciprocals of the natural logarithms of the numbers in the list. \nWrite a\
    \ function that will take a list of numbers and return the sum of the reciprocals\
    \ of the absolute values of the numbers in the list. \nWrite a function that will\
    \ take a list of numbers and return the sum of the reciprocals of the reciprocals\
    \ of the numbers in the list. \nWrite a function that will take a list of numbers\
    \ and return the sum of the reciprocals of the reciprocals of the squares of the\
    \ numbers in the list. \nWrite a function that will take a list of numbers and\
    \ return the sum of the reciprocals of the reciprocals of the cubes of the numbers\
    \ in the list. \nWrite a function that will take a list of numbers and return\
    \ the sum of the reciprocals of the reciprocals of the exponential of the numbers\
    \ in the list. \nWrite a function that will take a list of numbers and return\
    \ the sum of the reciprocals of the reciprocals of the \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpres6fuf4.jl:21\nin expression starting at\
    \ /tmp/tmpres6fuf4.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      else\n            smallest = number\n            largest = number\n   \
    \     end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nNow\
    \ let's test our function by comparing it to our known answer:\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmtenlye8.jl:24\nin expression starting at\
    \ /tmp/tmpmtenlye8.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.1>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvsrzmzzj.jl:21\nin expression starting at\
    \ /tmp/tmpvsrzmzzj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hdmjs5k.jl:23\nin expression starting at\
    \ /tmp/tmp4hdmjs5k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nTest your function on a few examples:\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprydgo0qc.jl:23\nin expression starting at\
    \ /tmp/tmprydgo0qc.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will return the square root of a number. Test it on $5$ and $10$.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5i6xvu3f.jl:23\nin expression starting at\
    \ /tmp/tmp5i6xvu3f.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgq_htoyg.jl:23\nin expression starting at\
    \ /tmp/tmpgq_htoyg.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test the function by comparing\
    \ it to our previous results.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppslmj10x.jl:23\nin expression starting at\
    \ /tmp/tmppslmj10x.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ two numbers as arguments and returns the sum of the squares of the two numbers.\n\
    Test your function with some simple cases:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69euasp0.jl:23\nin expression starting at\
    \ /tmp/tmp69euasp0.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < smallest\n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        else\n\
    \            return smallest, largest\n        end\n    end\n    return smallest,\
    \ largest\nend\n</cell>\n<text>\nNow let's test the function by comparing it to\
    \ our previous implementation:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5gf9bbv.jl:22\nin expression starting at\
    \ /tmp/tmpw5gf9bbv.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n < smallest\n            smallest = n\n        elseif\
    \ n > largest\n            largest = n\n        else\n            break\n    end\n\
    \    return smallest, largest\nend\n</cell>\n<text>\nThe function above takes\
    \ in a list of numbers and returns the two numbers that are closest to each other.\
    \ Let's see how it works.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9l226sgc.jl:21\nin expression starting at\
    \ /tmp/tmp9l226sgc.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by running\
    \ it on some test data:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpee994a57.jl:23\nin expression starting at\
    \ /tmp/tmpee994a57.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_diff = Float64(0.0)\n    smallest_number = numbers[1]\n\
    \    \n    for i in numbers[2:end]\n        diff = abs(i - smallest_number)\n\
    \        if diff < smallest_diff\n            smallest_diff = diff\n         \
    \   smallest_number = i\n        end\n    end\n    \n    return (smallest_number,\
    \ smallest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkagk6k34.jl:23\nin expression starting at\
    \ /tmp/tmpkagk6k34.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by finding\
    \ the closest pair of numbers to each other.\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe509enjj.jl:21\nin expression starting at\
    \ /tmp/tmpe509enjj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz52c4i5p.jl:23\nin expression starting at\
    \ /tmp/tmpz52c4i5p.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector.\nHint: You can use the sum function.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0qysqea.jl:21\nin expression starting at\
    \ /tmp/tmpc0qysqea.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n            closest_elements = number\n\
    \        elseif number > closest_number\n            closest_number = number\n\
    \            closest_elements = number\n        end\n    end\n    \n    return\
    \ (closest_elements, closest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of numbers and returns the index of the\
    \ element that is the closest to each of the numbers in the vector. For example,\
    \ if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2] the function should return [3,\
    \ 5].\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_aa9v54j.jl:25\nin expression starting at\
    \ /tmp/tmp_aa9v54j.jl:25\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest \n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will find the closest element in a given list to the\
    \ mean of the list.\nFor example, if the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.0],\
    \ the mean is 2.0, so the function should return 2.0.\nIf the list is [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2], the mean is 2.5, so the function should return 2.5.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgp4uhdda.jl:21\nin expression starting at\
    \ /tmp/tmpgp4uhdda.jl:21\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in the vector.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite \nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsc_iy8au.jl:23\nin expression starting at\
    \ /tmp/tmpsc_iy8au.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1uxvgu_r.jl:23\nin expression starting at\
    \ /tmp/tmp1uxvgu_r.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikwj63nl.jl:23\nin expression starting at\
    \ /tmp/tmpikwj63nl.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in that\
    \ list.\n>>> square_sum(numbers::Vector{Float64})\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n49.0\n>>>\
    \ square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n145.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n245.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 6.0, 7.0, 8.0, 9.0])\n345.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0])\n495.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0, 9.0, 10.0, 11.0])\n725.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n975.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n1225.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n1475.0\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0,\
    \ 13.0, 14.0, 15.0])\n1725.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,\
    \ 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n1975.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,\
    \ 16.0, 17.0])\n2225.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0,\
    \ 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n2475.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2idgk66k.jl:20\nin expression starting at\
    \ /tmp/tmp2idgk66k.jl:20\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        else\n            break\n  \
    \      end\n    end\n    return (smallest_number, largest_number)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to avoid the for loop?\n<|/ c |>\n<| c |>\nI added a version that avoids the\
    \ for loop, but I still think it would be better to use a for loop. Also, if you\
    \ don't mind me asking, why do you think it would be better to use a for loop?\n\
    <|/ c |>\n<| c |>\nI guess I thought there might be a way to avoid the for loop.\
    \ I'm just trying to learn Julia. Thanks for the help!\n<|/ c |>\n<| c |>\nI added\
    \ a version that avoids the for loop, but I still think it would be better to\
    \ use a for loop. Also, if you don't mind me asking, why do you think it would\
    \ be better to use a for loop?\n<|/ c |>\n<| c |>\nI added a version that avoids\
    \ the for loop, but I still think it would be better to use a for loop. Also,\
    \ if you don't mind me asking, why do you think it would be better to use a for\
    \ loop?\n<|/ c |>\n<| a dscore=1 |>\nI like your solution, but I wonder if there\
    \ is a way to avoid the for loop?\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_39ma3k.jl:22\nin expression starting at\
    \ /tmp/tmpq_39ma3k.jl:22\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        if numbers[i] < smallest \n            smallest\
    \ = numbers[i]\n        elseif numbers[i] > largest\n            largest = numbers[i]\n\
    \        else\n            smallest = numbers[i]\n            largest = numbers[i]\n\
    \        end\n    end\n    return smallest, largest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgaunlf9o.jl:24\nin expression starting at\
    \ /tmp/tmpgaunlf9o.jl:24\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that will\
    \ find the closest element in a given list to the mean of the list.\nThe function\
    \ should take a list of numbers and return the closest element to the mean of\
    \ the list.\nThe function should return an error if the list is empty.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only a single element.\nThe function\
    \ should return an error if the list contains only \nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphq1rr7ms.jl:23\nin expression starting at\
    \ /tmp/tmphq1rr7ms.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczlcnz1u.jl:23\nin expression starting at\
    \ /tmp/tmpczlcnz1u.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33jiwfty.jl:20\nin expression starting at\
    \ /tmp/tmp33jiwfty.jl:20\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33jiwfty.jl:20\nin expression starting at\
    \ /tmp/tmp33jiwfty.jl:20\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph80ntykb.jl:20\nin expression starting at\
    \ /tmp/tmph80ntykb.jl:20\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            return minimum,\
    \ maximum\n        end\n    end\n    return minimum, maximum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmleld34k.jl:22\nin expression starting at\
    \ /tmp/tmpmleld34k.jl:22\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = Vector{Float64}(undef, 0)\n    closest_elements[1]\
    \ = numbers[1]\n    closest_elements[2] = numbers[2]\n    \n    for element in\
    \ numbers[2:end]\n        if element < closest_elements[1]\n            closest_elements[1]\
    \ = element\n        elseif element > closest_elements[2]\n            closest_elements[2]\
    \ = element\n        end\n    end\n    \n    return closest_elements\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnqczacee.jl:24\nin expression starting at\
    \ /tmp/tmpnqczacee.jl:24\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a list of numbers and return a new list with all the\
    \ numbers in the original list except the two numbers that are closest to each\
    \ other. Test it by calling it on the list [1.0, 2.0, 3.0, 4.0, 5.0, 2.2].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7neja2y.jl:23\nin expression starting at\
    \ /tmp/tmpc7neja2y.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    smallest_index = 2\n    largest_index = end\n    \n    for index in 2:end\n\
    \        if numbers[index] < smallest_number\n            smallest_number = numbers[index]\n\
    \            smallest_index = index\n        elseif numbers[index] > largest_number\n\
    \            largest_number = numbers[index]\n            largest_index = index\n\
    \        end\n    end\n    \n    return (smallest_number, largest_number)\nend\n\
    </cell>\n<text>\nNow let's test our function by finding the closest element to\
    \ each of the numbers in the list we created above:\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5kl4k6g5.jl:13\nin expression starting at /tmp/tmp5kl4k6g5.jl:13\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ Test it by passing it a list of numbers and printing the result.\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8egyqi57.jl:23\nin expression starting at\
    \ /tmp/tmp8egyqi57.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ape61ce.jl:23\nin expression starting at\
    \ /tmp/tmp6ape61ce.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by finding\
    \ the closest element to each of the numbers in the list we created earlier. We'll\
    \ use the function we just wrote, find_closest_elements, and then compare the\
    \ results to the numbers we created earlier.\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_4nbo1k.jl:23\nin expression starting at\
    \ /tmp/tmpp_4nbo1k.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return smallest, largest\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbko1lihh.jl:21\nin expression starting at\
    \ /tmp/tmpbko1lihh.jl:21\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < smallest\n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        else\n\
    \            return smallest, largest\n    end\n    return smallest, largest\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the list. \nWrite a function\
    \ that takes a list of numbers and returns the sum of the squares of the numbers\
    \ in the list. \nWrite a function that takes a list of numbers and returns the\
    \ sum of the squares of the numbers in the list. \nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the sum of the squares\
    \ of the numbers in the list. \nWrite a function that takes a list of numbers\
    \ and returns the sum of the squares of the numbers in the \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nmcf2xq.jl:21\nin expression starting at\
    \ /tmp/tmp0nmcf2xq.jl:21\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's try it out on some examples:\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7o2h8hby.jl:23\nin expression starting at\
    \ /tmp/tmp7o2h8hby.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < smallest\n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        else\n\
    \            return smallest, largest\n    end\n    return smallest, largest\n\
    end\n</cell>\n<text>\nNow let's test our function by finding the closest element\
    \ to each of our test numbers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprdfhak_.jl:21\nin expression starting at\
    \ /tmp/tmpprdfhak_.jl:21\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nThe function above is called find_closest_elements\
    \ and takes in a list of numbers and returns a tuple of two numbers that are the\
    \ closest to each other (smaller number, larger number).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcj8e0kpl.jl:20\nin expression starting at\
    \ /tmp/tmpcj8e0kpl.jl:20\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    \n    if minimum == maximum\n        return (minimum, minimum)\n    end\n\
    \    \n    index = findfirst(minimum < numbers, numbers)\n    \n    if index ==\
    \ length(numbers)\n        return (minimum, maximum)\n    end\n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaquefy72.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaquefy72.jl:1\n\
    in expression starting at /tmp/tmpaquefy72.jl:1\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hdmjs5k.jl:23\nin expression starting at\
    \ /tmp/tmp4hdmjs5k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1uxvgu_r.jl:23\nin expression starting at\
    \ /tmp/tmp1uxvgu_r.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ape61ce.jl:23\nin expression starting at\
    \ /tmp/tmp6ape61ce.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by calling\
    \ it with the numbers we created earlier. We'll also print out our results to\
    \ make sure they look correct.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiu9xp95v.jl:23\nin expression starting at\
    \ /tmp/tmpiu9xp95v.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    else\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return closest_numbers,\
    \ closest_numbers_2\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpip7zqvno.jl:23\nin expression starting at\
    \ /tmp/tmpip7zqvno.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hdmjs5k.jl:23\nin expression starting at\
    \ /tmp/tmp4hdmjs5k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjdp6z15.jl:21\nin expression starting at\
    \ /tmp/tmpbjdp6z15.jl:21\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    smallest_index = 2\n    largest_index = end\n    while smallest_index < end\
    \ && largest_index > 1\n        if numbers[smallest_index] < smallest_number\n\
    \            smallest_number = numbers[smallest_index]\n            smallest_index\
    \ = smallest_index + 1\n        elseif numbers[largest_index] > largest_number\n\
    \            largest_number = numbers[largest_index]\n            largest_index\
    \ = largest_index - 1\n        else\n            smallest_index = smallest_index\
    \ + 1\n            largest_index = largest_index - 1\n        end\n    end\n \
    \   return (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow let's\
    \ test the function by comparing it to our previous implementation:\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfz1esef8.jl:12\nin expression starting at /tmp/tmpfz1esef8.jl:12\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare:\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmuptzan7.jl:23\nin expression starting at\
    \ /tmp/tmpmuptzan7.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < smallest \n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        else\n\
    \            return smallest, largest\n        end\n    end\n    return smallest,\
    \ largest\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThanks for your\
    \ answer! I really appreciate it! I ended up using your first solution and it\
    \ worked perfectly. Thanks again!\n<|/ c |>\n<| a dscore=2 |>\nThe other answers\
    \ here are great, but I thought I'd add my own solution, since I like functional\
    \ programming more than loops. \n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2t6osia.jl:22\nin expression starting at\
    \ /tmp/tmpe2t6osia.jl:22\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ smallest, largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the square root of a number. Test it on $x$ = 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc75t31fn.jl:21\nin expression starting at\
    \ /tmp/tmpc75t31fn.jl:21\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp48yxua.jl:23\nin expression starting at\
    \ /tmp/tmppp48yxua.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    biggest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > biggest_number\n\
    \            biggest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ biggest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ will take a list of numbers and return the number of times each number appears\
    \ in the list. \nFor example, if the input list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\
    \ the output should be [1 2 1 2 1 1]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqvszmekb.jl:23\nin expression starting at\
    \ /tmp/tmpqvszmekb.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < minimum\n            minimum =\
    \ number\n        elseif number > maximum\n            maximum = number\n    \
    \    end\n    end\n    return minimum, maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofm21h_o.jl:21\nin expression starting at\
    \ /tmp/tmpofm21h_o.jl:21\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. \nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector. \nWrite a function that\
    \ takes a \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr38qppp5.jl:21\nin expression starting at\
    \ /tmp/tmpr38qppp5.jl:21\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<text>\nNow let's test our\
    \ function by comparing it to our known answer:\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbpcrzp4_.jl:23\nin expression starting at\
    \ /tmp/tmpbpcrzp4_.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        if numbers[i] < minimum\n            minimum = numbers[i]\n\
    \        elseif numbers[i] > maximum\n            maximum = numbers[i]\n     \
    \   else\n            break\n        end\n    end\n    return (minimum, maximum)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it with `find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])`.\n<|/ c |>\n<| c |>\nIt works fine for me. Try it\
    \ with `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])`.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work for me on Julia 0.4.0-dev+4373. I get `ERROR: LoadError:\
    \ ArgumentError: invalid argument to find_closest_elements: expected a Vector{Float64},\
    \ got a Float64`\n<|/ c |>\n<| c |>\nI tested it on 0.4.0-dev+4373 and it works\
    \ fine. Maybe you have a different version of Julia?\n<|/ c |>\n<| c |>\nI tested\
    \ it on 0.4.0-dev+4373 and it works fine. Maybe you have a different version of\
    \ Julia?\n<|/ c |>\n<| a dscore=1 |>\nI wrote a package that does this for you:\n\
    <code>\nusing FindClosestElements\nusing LinearAlgebra\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgz8dgjbk.jl:22\nin expression starting at\
    \ /tmp/tmpgz8dgjbk.jl:22\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the numbers\
    \ in a vector. For example, if the vector is [1.0, 2.0, 3.0, 4.0, 5.0], the function\
    \ should return 25.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpef9wgnxe.jl:23\nin expression starting at\
    \ /tmp/tmpef9wgnxe.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for i in numbers[2:end]\n        if i < smallest\n            smallest =\
    \ i\n        elseif i > largest\n            largest = i\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<text>\nNow let's test our\
    \ function by comparing it to our expectations:\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdxkmaeg.jl:23\nin expression starting at\
    \ /tmp/tmpfdxkmaeg.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        if numbers[i] < smallest \n            smallest\
    \ = numbers[i]\n        elseif numbers[i] > largest\n            largest = numbers[i]\n\
    \        end\n    end\n    return smallest, largest\nend\n</cell>\n<text>\nNow\
    \ let's test our function by comparing it to our original list:\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv61lhnpz.jl:21\nin expression starting at\
    \ /tmp/tmpv61lhnpz.jl:21\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz52c4i5p.jl:23\nin expression starting at\
    \ /tmp/tmpz52c4i5p.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\n\
    I came up with a solution that is more efficient than using sort. \n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp05b8gljj.jl:20\nin expression starting at\
    \ /tmp/tmp05b8gljj.jl:20\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if n < smallest\n            smallest =\
    \ n\n        elseif n > largest\n            largest = n\n        end\n    end\n\
    \    \n    return (smallest, largest)\nend\n</cell>\n<text>\nNow let's try it\
    \ out!\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3hth1mj.jl:23\nin expression starting at\
    \ /tmp/tmpx3hth1mj.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hdmjs5k.jl:23\nin expression starting at\
    \ /tmp/tmp4hdmjs5k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.3>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a list of numbers and returns the average of the two numbers that are\
    \ closest to each other.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41tzqrgc.jl:23\nin expression starting at\
    \ /tmp/tmp41tzqrgc.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            minimum = min(minimum,\
    \ i)\n            maximum = max(maximum, i)\n        end\n    end\n    return\
    \ (minimum, maximum)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdab0qa5t.jl:23\nin expression starting at\
    \ /tmp/tmpdab0qa5t.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare in terms of performance.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_wyde5j.jl:23\nin expression starting at\
    \ /tmp/tmpe_wyde5j.jl:23\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = index(minimum, numbers)\n    maximum_index = index(maximum,\
    \ numbers)\n    if minimum_index == maximum_index\n        return (minimum, minimum)\n\
    \    else\n        return (numbers[minimum_index], numbers[maximum_index])\n \
    \   end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work if there\
    \ are two numbers that are equally close.\n<|/ c |>\n<| c |>\nYes, it does. I\
    \ tested it before posting it. The function returns the two numbers that are equally\
    \ close.\n<|/ c |>\n<| c |>\nIt doesn't work if there are two numbers that are\
    \ equally close. Try it with `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])`\n<|/ c |>\n<| c |>\nIt doesn't work if there are two numbers that are\
    \ equally close. Try it with `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])`\n<|/ c |>\n<| c |>\nIt doesn't work if there are two numbers that are\
    \ equally close. Try it with `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])`\n<|/ c |>\n<| a tags=julia,arrays |>\nHere's a solution using broadcasting\
    \ and the diff function\n<code>\njulia> function find_closest_elements(numbers::Vector{Float64})\n\
    \           minimum = minimum(numbers)\n           maximum = maximum(numbers)\n\
    \           minimum_index = minimum.==minimum\n           maximum_index = maximum.==maximum\n\
    \           return (minimum[minimum_index], maximum[maximum_index])\n       end\n\
    find_closest_elements (generic function with 1 method)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp31d0zujl.jl:19\nin expression starting at\
    \ /tmp/tmp31d0zujl.jl:19\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9ktacri.jl:20\nin expression starting at\
    \ /tmp/tmpm9ktacri.jl:20\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of numbers and returns the number of elements in the list that are\
    \ greater than the average of the list.\nFor example, if the list is [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.0] the function should return 3.\nIf the list is [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2, 2.0] the function should return 4.\nIf the list is [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.0] the function should return 5.\nIf the list\
    \ is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.0] the function should return\
    \ 6.\nIf the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.0] the function\
    \ should return 7.\nIf the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5,\
    \ 2.6, 2.0] the function should return 8.\nIf the list is [1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.0] the function should return 9.\nIf the\
    \ list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.0] the\
    \ function should return 10.\nIf the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3,\
    \ 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.0] the function should return 11.\nIf the list\
    \ is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.0]\
    \ the function should return 12.\nIf the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2,\
    \ 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.11, 2.0] the function should return\
    \ 13.\nIf the list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7,\
    \ 2.8, 2.9, 2.10, 2.11, 2.12, 2.0] the function should return 14.\nIf the list\
    \ is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.11,\
    \ 2.12, 2.13, 2.0] the function should return 15.\nIf the list is [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 2.10, 2.11, 2.12, 2.13, 2.14,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwichnwgb.jl:23\nin expression starting at\
    \ /tmp/tmpwichnwgb.jl:23\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = get_index(minimum, numbers)\n    maximum_index = get_index(maximum,\
    \ numbers)\n    return (minimum[minimum_index], maximum[maximum_index])\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgghs__kc.jl:15\nin expression starting at\
    \ /tmp/tmpgghs__kc.jl:15\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hdmjs5k.jl:23\nin expression starting at\
    \ /tmp/tmp4hdmjs5k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\n\
    Write a function that will take a list of numbers and return a new list with the\
    \ numbers in sorted order. \nThe function should take an optional argument that\
    \ specifies what field to sort on. \nThe function should return a new list with\
    \ the numbers in sorted order.\nThe function should return a new list with the\
    \ numbers in sorted order.\nThe function should return a new list with the numbers\
    \ in sorted order.\nThe function should return a new list with the numbers in\
    \ sorted order.\nThe function should return a new list with the numbers in sorted\
    \ order.\nThe function should return a new list with the numbers in sorted order.\n\
    The function should return a new list with the numbers in sorted order.\nThe function\
    \ should return a new list with the numbers in sorted order.\nThe function should\
    \ return a new list with the numbers in sorted order.\nThe function should return\
    \ a new list with the numbers in sorted order.\nThe function should return a new\
    \ list with the numbers in sorted order.\nThe function should return a new list\
    \ with the numbers in sorted order.\nThe function should return a new list with\
    \ the numbers in sorted order.\nThe function should return a new list with the\
    \ numbers in sorted order.\nThe function should return a new list with the numbers\
    \ in sorted order.\nThe function should return a new list with the numbers in\
    \ sorted order.\nThe function should return a new list with the numbers in sorted\
    \ order.\nThe function should return a new list with the numbers in sorted order.\n\
    The function should return a new list with the numbers in sorted order.\nThe function\
    \ should return a new list with the numbers in sorted order.\nThe function should\
    \ return a new list with the numbers in sorted order.\nThe function should return\
    \ a new list with the numbers in sorted order.\nThe function should return a new\
    \ list with the numbers in sorted order.\nThe function should return a new list\
    \ with the numbers in sorted order.\nThe function should return a new list with\
    \ the numbers in sorted order.\nThe function should return a new list with the\
    \ numbers in sorted order.\nThe function should return a new list with the numbers\
    \ in sorted order.\nThe function should return a new list with the numbers in\
    \ sorted order.\nThe function should return a new list with the numbers in sorted\
    \ order.\nThe function should return a new list with the numbers in sorted order.\n\
    The function should return a new list with the numbers in sorted order.\nThe function\
    \ should return a new list with the numbers in sorted order.\nThe function \n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph04nneu0.jl:21\nin expression starting at\
    \ /tmp/tmph04nneu0.jl:21\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            break\n    end\n\
    \    return (minimum, maximum)\nend\n</cell>\n<code language=julia-1.0>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpshkfdx0e.jl:21\nin expression starting at\
    \ /tmp/tmpshkfdx0e.jl:21\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < minimum\n            minimum = number\n\
    \        elseif number > maximum\n            maximum = number\n        else\n\
    \            break\n    end\n    return (minimum, maximum)\nend\n</code>\n<|/\
    \ a dscore=0 |>\n<| a tags=julia,arrays |>\nThe answer by is correct but can be\
    \ improved. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0qai342.jl:21\nin expression starting at\
    \ /tmp/tmpi0qai342.jl:21\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < minimum\n            minimum\
    \ = number\n        elseif number > maximum\n            maximum = number\n  \
    \      end\n    end\n    \n    return (minimum, maximum)\nend\n</cell>\n<text>\n\
    Now let's test our function by comparing it to our known answers:\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fotk50x.jl:23\nin expression starting at\
    \ /tmp/tmp9fotk50x.jl:23\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by calling\
    \ it with the numbers we defined earlier\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wbz44mj.jl:23\nin expression starting at\
    \ /tmp/tmp8wbz44mj.jl:23\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nThe function should raise an error if the vector is empty.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\nThe function\
    \ should raise an error if the vector has more than one element.\n\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7q8o6tt3.jl:23\nin expression starting at\
    \ /tmp/tmp7q8o6tt3.jl:23\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nLet's test our function by comparing\
    \ it to our known answer:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi0ont7sr.jl:23\nin expression starting at\
    \ /tmp/tmpi0ont7sr.jl:23\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      else\n            smallest = number\n            largest = number\n   \
    \     end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\nNow\
    \ let's try it out on some random numbers:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9mf1tuux.jl:24\nin expression starting at\
    \ /tmp/tmp9mf1tuux.jl:24\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikwj63nl.jl:23\nin expression starting at\
    \ /tmp/tmpikwj63nl.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      else\n            return smallest, largest\n        end\n    end\n    return\
    \ smallest, largest\nend\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. Test it on some vectors.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyj1p1ms1.jl:23\nin expression starting at\
    \ /tmp/tmpyj1p1ms1.jl:23\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = index(minimum, numbers)\n    maximum_index = index(maximum,\
    \ numbers)\n    return (minimum[minimum_index], maximum[maximum_index])\nend\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1azl797p.jl:15\nin expression starting at\
    \ /tmp/tmp1azl797p.jl:15\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_diff = Float64(0.0)\n    smallest_number = numbers[1]\n\
    \    largest_diff = Float64(0.0)\n    largest_number = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        diff = abs(numbers[i] - smallest_number)\n      \
    \  if diff < smallest_diff\n            smallest_diff = diff\n            smallest_number\
    \ = numbers[i]\n        end\n        diff = abs(numbers[i] - largest_number)\n\
    \        if diff > largest_diff\n            largest_diff = diff\n           \
    \ largest_number = numbers[i]\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution,\
    \ but I wonder if there is a way to do this without looping through the entire\
    \ list?\n<|/ c |>\n<| c |>\nI guess you could use [sort](http://julia.readthedocs.org/en/latest/stdlib/collections/#Base.sort)\
    \ but that would require a custom comparator function which would probably be\
    \ slower than the loop. Also note that `sort` will sort the entire list so you\
    \ might want to avoid that if possible.\n<|/ c |>\n<| c |>\nI added a solution\
    \ without looping through the entire list\n<|/ c |>\n<| c |>\nI added a solution\
    \ without looping through the entire list\n<|/ c |>\n<| a |>\nHere's a solution\
    \ without looping through the entire list. \n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hbzvdem.jl:27\nin expression starting at\
    \ /tmp/tmp1hbzvdem.jl:27\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_difference = numbers[1] - numbers[0]\n    smallest_number\
    \ = numbers[1]\n    \n    for i in 2:length(numbers)\n        difference = numbers[i]\
    \ - numbers[i-1]\n        if difference < smallest_difference\n            smallest_difference\
    \ = difference\n            smallest_number = numbers[i]\n        end\n    end\n\
    \    \n    return (smallest_number, smallest_difference)\nend\n</cell>\n<text>\n\
    Now let's test our function by finding the closest element to each of our test\
    \ cases:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1h_rtyy.jl:23\nin expression starting at\
    \ /tmp/tmp_1h_rtyy.jl:23\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9oq8iru.jl:23\nin expression starting at\
    \ /tmp/tmpo9oq8iru.jl:23\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    \n    minimum_index = 0\n    maximum_index = 0\n    \n    for number in numbers\n\
    \        if number < minimum\n            minimum = number\n            minimum_index\
    \ = length(numbers)\n        elseif number > maximum\n            maximum = number\n\
    \            maximum_index = length(numbers)\n        end\n    end\n    \n   \
    \ return (minimum, maximum(minimum_index..maximum_index))\nend\n</cell>\n<text>\n\
    The function above is called find_closest_elements and is defined in the file\
    \ find_closest_elements.jl. This function takes one argument, numbers, which is\
    \ a vector of floating point numbers. We will see how to use this function in\
    \ the next section. Let's try it out on some numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_dqspdpf.jl:27\nin expression starting at\
    \ /tmp/tmp_dqspdpf.jl:27\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < smallest \n            smallest = i\n       \
    \ elseif i > largest\n            largest = i\n        end\n    end\n    return\
    \ smallest, largest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in that\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in that vector.\nWrite a function that takes a\
    \ vector of numbers and returns the \nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz8ii_ozi.jl:20\nin expression starting at\
    \ /tmp/tmpz8ii_ozi.jl:20\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nNow let's test our\
    \ new function with some test cases:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplieslux4.jl:23\nin expression starting at\
    \ /tmp/tmplieslux4.jl:23\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_index\
    \ = numbers[2]\n    \n    smallest_number = numbers[1]\n    smallest_number_index\
    \ = numbers[2]\n    \n    largest_number = numbers[1]\n    largest_number_index\
    \ = numbers[2]\n    \n    for number in numbers[3:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n            smallest_number_index = number_index\n\
    \        elseif number > largest_number\n            largest_number = number\n\
    \            largest_number_index = number_index\n        end\n    end\n    \n\
    \    return (smallest_number, smallest_number_index), (largest_number, largest_number_index)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the numbers in the list.\nWrite a function that takes\
    \ in a list of numbers and returns the average of the numbers in the list.\nWrite\
    \ a function that takes in a list of numbers and returns the median of the numbers\
    \ in the list.\nWrite a function that takes in a list of numbers and returns the\
    \ mode of the numbers in the list.\nWrite a function that takes in a list of numbers\
    \ and returns the variance of the numbers in the list.\nWrite a function that\
    \ takes in a list of numbers and returns the standard deviation of the numbers\
    \ in the list.\nWrite a function that takes in a list of numbers and returns the\
    \ minimum and maximum values of the numbers in the list.\nWrite a function that\
    \ takes in a list of numbers and returns the number of numbers in the list.\n\
    Write a function that takes in a list of numbers and returns the number of numbers\
    \ in the list that are even.\nWrite a function that takes in a list of numbers\
    \ and returns the number of numbers in the list that are odd.\nWrite a function\
    \ that takes in a list of numbers and returns the number of numbers in the list\
    \ that are odd and even.\nWrite a function that takes in a list of numbers and\
    \ returns the number of numbers in the list that are odd and even.\nWrite a function\
    \ that takes in a list of numbers and returns the number of numbers in the list\
    \ that are odd and even.\nWrite a function that takes in a list of numbers and\
    \ returns the number of numbers in the list that are odd and even.\nWrite a function\
    \ that takes in a list of numbers and returns the number of numbers in the list\
    \ that are odd and even.\nWrite a function that takes in a list of numbers and\
    \ returns the number of numbers in the list that are odd and even.\nWrite a function\
    \ that takes in a list of numbers and returns the number of numbers in the list\
    \ that are odd and even.\nWrite a function that takes in a list of numbers and\
    \ returns the number of numbers in the list that are odd and even.\nWrite a function\
    \ that takes in a list of numbers and returns the number of numbers in the list\
    \ that are odd and even.\nWrite a function that takes in a list of numbers and\
    \ returns the number of numbers in the list that are odd and even.\nWrite a function\
    \ that takes in a list of numbers and returns the number of numbers in the list\
    \ that are odd and even.\nWrite a function that takes in a list of numbers and\
    \ returns the \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpanipzwpt.jl:31\nin expression starting at\
    \ /tmp/tmpanipzwpt.jl:31\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of numbers and returns the sum of the squares of the numbers in the list.\n\
    For example, given the list [1.0, 2.0, 3.0, 4.0, 5.0, 6.0], your function should\
    \ return 50.\nThe function should work for lists of any length.\nThe function\
    \ should work for lists of any type of numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kosu4id.jl:23\nin expression starting at\
    \ /tmp/tmp_kosu4id.jl:23\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3a64tfte.jl:20\nin expression starting at\
    \ /tmp/tmp3a64tfte.jl:20\n"
  stdout: ''
  timestamp: 1659822945
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikwj63nl.jl:23\nin expression starting at\
    \ /tmp/tmpikwj63nl.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        if numbers[i] < minimum\n            minimum\
    \ = numbers[i]\n        elseif numbers[i] > maximum\n            maximum = numbers[i]\n\
    \        end\n    end\n    return (minimum, maximum)\nend\n</cell>\n<text>\nNow\
    \ let's try it out on some random numbers:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcv6fptuf.jl:21\nin expression starting at\
    \ /tmp/tmpcv6fptuf.jl:21\n"
  stdout: ''
  timestamp: 1659822947
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nThe function should raise an error if the vector is empty.\nThe function\
    \ should raise an error if the vector has less than two numbers.\nThe function\
    \ should raise an error if the vector has more than two numbers.\nThe function\
    \ should raise an error if the vector has two numbers that are not integers.\n\
    The function should raise an error if the vector has two numbers that are not\
    \ integers.\nThe function should raise an error if the vector has two numbers\
    \ that are not integers.\nThe function should raise an error if the vector has\
    \ two numbers that are not integers.\nThe function should raise an error if the\
    \ vector has two numbers that are not integers.\nThe function should raise an\
    \ error if the vector has two numbers that are not integers.\nThe function should\
    \ raise an error if the vector has two numbers that are not integers.\nThe function\
    \ should raise an error if the vector has two numbers that are not integers.\n\
    The function should raise an error if the vector has two numbers that are not\
    \ integers.\nThe function should raise an error if the vector has two numbers\
    \ that are not integers.\nThe function should raise an error if the vector has\
    \ two numbers that are not integers.\nThe function should raise an error if the\
    \ vector has two numbers that are not integers.\nThe function should raise an\
    \ error if the vector has two numbers that are not integers.\nThe function should\
    \ raise an error if the vector has two numbers that are not integers.\nThe function\
    \ should raise an error if the vector has two numbers that are not integers.\n\
    The function should raise an error if the vector has two numbers that are not\
    \ integers.\nThe function should raise an error if the vector has two numbers\
    \ that are not integers.\nThe function should raise an error if the vector has\
    \ two numbers that are not integers.\nThe function should raise an error if the\
    \ vector has two numbers that are not integers.\nThe function should raise an\
    \ error if the vector has two numbers that are not integers.\nThe function should\
    \ raise an error if the vector has two numbers that are not integers.\nThe function\
    \ should raise an error if the vector has two numbers that are not integers.\n\
    The function should raise an error if the vector has two numbers that are not\
    \ integers.\nThe function should raise an error if the vector has two numbers\
    \ that are not integers.\nThe function should raise an error if the vector has\
    \ two numbers that are not integers.\nThe function should raise an error if the\
    \ vector \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb_ctkeky.jl:23\nin expression starting at\
    \ /tmp/tmpb_ctkeky.jl:23\n"
  stdout: ''
  timestamp: 1659822947
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        end\n    end\n    return (minimum,\
    \ maximum)\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihj1xh50.jl:20\nin expression starting at\
    \ /tmp/tmpihj1xh50.jl:20\n"
  stdout: ''
  timestamp: 1659822947
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n   \
    \         smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by finding\
    \ the closest element to each of the numbers in our list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbk7pfsg2.jl:20\nin expression starting at\
    \ /tmp/tmpbk7pfsg2.jl:20\n"
  stdout: ''
  timestamp: 1659822947
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. \nThe function should raise an error if the vector is empty.\nThe function\
    \ should raise an error if the vector has less than two elements.\nThe function\
    \ should raise an error if the vector has more than two elements.\nThe function\
    \ should raise an error if the vector contains non-numeric elements.\nThe function\
    \ should raise an error if the vector contains negative numbers.\nThe function\
    \ should raise an error if the vector contains any non-positive numbers.\nThe\
    \ function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains any non-positive numbers.\n\
    The function should raise an error if the vector contains \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe5v7zmbu.jl:23\nin expression starting at\
    \ /tmp/tmpe5v7zmbu.jl:23\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    else\n        closest_numbers = numbers[2]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return closest_numbers,\
    \ closest_numbers_2\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqobvr43b.jl:23\nin expression starting at\
    \ /tmp/tmpqobvr43b.jl:23\n"
  stdout: ''
  timestamp: 1659822947
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ n in numbers[2:end]\n        if n < smallest\n            smallest = n\n   \
    \     elseif n > largest\n            largest = n\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjx12bkjx.jl:21\nin expression starting at\
    \ /tmp/tmpjx12bkjx.jl:21\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes in a vector of numbers and returns the sum of the squares\
    \ of the numbers in that vector. \nThe function should raise an error if the vector\
    \ is empty or has less than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\nThe function should raise an error\
    \ if the vector has more than two elements.\n\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv2kk2hn9.jl:23\nin expression starting at\
    \ /tmp/tmpv2kk2hn9.jl:23\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test the function by comparing\
    \ it to our previous implementation:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkuxe6qij.jl:23\nin expression starting at\
    \ /tmp/tmpkuxe6qij.jl:23\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n < smallest\n            smallest = n\n        elseif\
    \ n > largest\n            largest = n\n        end\n    end\n    return (smallest,\
    \ largest)\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfsaf98w.jl:20\nin expression starting at\
    \ /tmp/tmpsfsaf98w.jl:20\n"
  stdout: ''
  timestamp: 1659822947
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    \n\
    \    for n in numbers[2:end]\n        if minimum > n\n            minimum = n\n\
    \        elseif maximum < n\n            maximum = n\n        end\n    end\n \
    \   \n    return (minimum, maximum)\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the square root of a number. Test it on $x$ and $y$ and\
    \ $z$.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6mpn_zt.jl:23\nin expression starting at\
    \ /tmp/tmpj6mpn_zt.jl:23\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. For example, if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2],\
    \ the function should return 25.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpf08fy7.jl:23\nin expression starting at\
    \ /tmp/tmpjpf08fy7.jl:23\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ take a list of numbers and a target number and will return the index of the\
    \ number in the list that is closest to the target number. Test it on a list of\
    \ numbers and a target number that should be in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprk6rqzzo.jl:20\nin expression starting at\
    \ /tmp/tmprk6rqzzo.jl:20\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz52c4i5p.jl:23\nin expression starting at\
    \ /tmp/tmpz52c4i5p.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < minimum\n            minimum = i\n     \
    \   elseif i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ minimum, maximum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the numbers in a given vector.\n>>> sum_square_of_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.1])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n\
    >>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n25.0\n>>> sum_square_of_elements([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0])\n25.0\n>>> sum\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnn8_0agu.jl:21\nin expression starting at\
    \ /tmp/tmpnn8_0agu.jl:21\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hdmjs5k.jl:23\nin expression starting at\
    \ /tmp/tmp4hdmjs5k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = index(minimum, numbers)\n    maximum_index = index(maximum,\
    \ numbers)\n    if minimum_index == maximum_index\n        return (minimum, minimum)\n\
    \    else\n        return (minimum[minimum_index], maximum[maximum_index])\n \
    \   end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,arrays |>\nI came up\
    \ with a solution that is very similar to yours, but I believe it may be more\
    \ efficient and easier to read. \n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6t7eb0mx.jl:19\nin expression starting at\
    \ /tmp/tmp6t7eb0mx.jl:19\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hdmjs5k.jl:23\nin expression starting at\
    \ /tmp/tmp4hdmjs5k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < minimum\n            minimum = i\n     \
    \   elseif i > maximum\n            maximum = i\n        end\n    end\n    return\
    \ (minimum, maximum)\nend\n</cell>\n<text>\nNow let's try it out on some examples:\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8dfpgbda.jl:21\nin expression starting at\
    \ /tmp/tmp8dfpgbda.jl:21\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        if numbers[i] < smallest\n            smallest\
    \ = numbers[i]\n        elseif numbers[i] > largest\n            largest = numbers[i]\n\
    \        end\n    end\n    return smallest, largest\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,arrays |>\nThe other answers are good, but I thought I'd\
    \ add my own solution, which is more efficient and uses less memory:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2qw3i51t.jl:21\nin expression starting at\
    \ /tmp/tmp2qw3i51t.jl:21\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by comparing\
    \ it to our known answers:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1uxvgu_r.jl:23\nin expression starting at\
    \ /tmp/tmp1uxvgu_r.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    \n    if minimum == maximum\n        return (minimum, minimum)\n    end\n\
    \    \n    closest = minimum\n    \n    for number in numbers\n        if number\
    \ < closest\n            closest = number\n        end\n    end\n    \n    return\
    \ (closest, maximum)\nend\n</cell>\n<text>\nNow let's test our function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdn8w6umk.jl:26\nin expression starting at\
    \ /tmp/tmpdn8w6umk.jl:26\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprjeuuiu7.jl:23\nin expression starting at\
    \ /tmp/tmprjeuuiu7.jl:23\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nThe function above is called find_closest_elements\
    \ and is defined in the file closest_elements.jl. Let's take a look at how it\
    \ works.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9figvp7y.jl:23\nin expression starting at\
    \ /tmp/tmp9figvp7y.jl:23\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of elements in a vector that are less than a given number.\
    \ For example, if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2] and you call your\
    \ function with 0.5 then your function should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplxcdygsa.jl:23\nin expression starting at\
    \ /tmp/tmplxcdygsa.jl:23\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some examples:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplh3rv74d.jl:23\nin expression starting at\
    \ /tmp/tmplh3rv74d.jl:23\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiiik2ve6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiiik2ve6.jl:1\n\
    in expression starting at /tmp/tmpiiik2ve6.jl:1\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpikwj63nl.jl:23\nin expression starting at\
    \ /tmp/tmpikwj63nl.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            minimum = minimum\
    \ if minimum < i else i\n            maximum = maximum if maximum > i else i\n\
    \        end\n    end\n    return (minimum, maximum)\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nI like this solution, however it only works if you have a list\
    \ of numbers. If you have a vector of numbers, it only returns the first two numbers.\
    \ I added a solution that works for vectors.\n<|/ c |>\n<| a dscore=2 |>\nI like\
    \ solution, but I wanted to add an alternative that doesn't require the use of\
    \ any packages. I came up with this solution:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmprthdpfpz.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprthdpfpz.jl:17\n\
    in expression starting at /tmp/tmprthdpfpz.jl:17\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n < smallest\n            smallest = n\n        elseif\
    \ n > largest\n            largest = n\n        else\n            smallest = largest\n\
    \            largest = n\n        end\n    end\n    return smallest, largest\n\
    end\n</cell>\n<text>\nExercise\nWrite a function that takes a list of numbers\
    \ and returns the average of all the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the average of all the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the average of all\
    \ the numbers in the list. \nWrite a function that takes a list of numbers and\
    \ returns the average of all the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the average of all the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the average of all\
    \ the numbers in the list. \nWrite a function that takes a list of numbers and\
    \ returns the average of all the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the average of all the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the average of all\
    \ the numbers in the list. \nWrite a function that takes a list of numbers and\
    \ returns the average of all the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the average of all the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the average of all\
    \ the numbers in the list. \nWrite a function that takes a list of numbers and\
    \ returns the average of all the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the average of all the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the average of all\
    \ the numbers in the list. \nWrite a function that takes a list of numbers and\
    \ returns the average of all the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the average of all the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the average of all\
    \ the numbers in the list. \nWrite a function that takes a list of numbers and\
    \ returns the average of all the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the average of all the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the average of all\
    \ the numbers in the list. \nWrite a function that takes a list of numbers and\
    \ returns the average of all the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the average of all the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the average of all\
    \ the numbers in the list. \nWrite a function that takes a list of numbers and\
    \ returns the average of all the numbers in the list. \nWrite a function that\
    \ takes a list of numbers and returns the average of all the numbers in the list.\
    \ \nWrite a function that takes a list of numbers and returns the average of all\
    \ the numbers in the list. \nWrite a function that takes a list of \nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvaq77838.jl:23\nin expression starting at\
    \ /tmp/tmpvaq77838.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our function by finding\
    \ the closest element to each of our test vectors.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp33qn4gp_.jl:20\nin expression starting at\
    \ /tmp/tmp33qn4gp_.jl:20\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hdmjs5k.jl:23\nin expression starting at\
    \ /tmp/tmp4hdmjs5k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    \n    if minimum == maximum\n        return (minimum, minimum)\n    end\n\
    \    \n    middle = (minimum + maximum) / 2\n    \n    if middle == minimum\n\
    \        return (minimum, middle)\n    end\n    \n    if middle == maximum\n \
    \       return (middle, maximum)\n    end\n    \n    if middle == minimum + maximum\n\
    \        return (minimum, minimum)\n    end\n    \n    if middle == minimum -\
    \ maximum\n        return (middle, maximum)\n    end\n    \n    if middle == maximum\
    \ - minimum\n        return (minimum, minimum)\n    end\n    \n    if middle ==\
    \ minimum + maximum + minimum\n        return (minimum, minimum)\n    end\n  \
    \  \n    if middle == minimum + maximum - minimum\n        return (minimum, middle)\n\
    \    end\n    \n    if middle == maximum - minimum + minimum\n        return (middle,\
    \ minimum)\n    end\n    \n    if middle == maximum - minimum - minimum\n    \
    \    return (middle, middle)\n    end\n    \n    if middle == minimum + maximum\
    \ + minimum + maximum\n        return (minimum, minimum)\n    end\n    \n    if\
    \ middle == minimum + maximum + minimum - maximum\n        return (minimum, middle)\n\
    \    end\n    \n    if middle == minimum + maximum - minimum - maximum\n     \
    \   return (minimum, middle)\n    end\n    \n    if middle == maximum - minimum\
    \ + minimum - maximum\n        return (middle, minimum)\n    end\n    \n    if\
    \ middle == maximum - minimum - minimum - maximum\n        return (middle, middle)\n\
    \    end\n    \n    if middle == minimum + maximum + minimum + maximum + minimum\n\
    \        return (minimum, minimum)\n    end\n    \n    if middle == minimum +\
    \ maximum + minimum + maximum - minimum\n        return (minimum, middle)\n  \
    \  end\n    \n    if middle == minimum + maximum + minimum - maximum - minimum\n\
    \        return (minimum, middle)\n    end\n    \n    if middle == minimum + maximum\
    \ - minimum - maximum - minimum\n        return (middle, minimum)\n    end\n \
    \   \n    if middle == maximum - minimum + minimum - maximum - minimum\n     \
    \   return (middle, middle)\n    end\n    \n    if middle == maximum - minimum\
    \ - minimum - maximum - minimum\n        return (middle, middle)\n    end\n  \
    \  \n    if middle == minimum + maximum + minimum + maximum + minimum + maximum\n\
    \        return (minimum, minimum)\n    end\n    \n    if middle == minimum +\
    \ maximum + minimum + maximum - minimum - maximum\n        return (minimum, middle)\n\
    \    end\n    \n    if middle == minimum + maximum + minimum - maximum - minimum\
    \ - maximum\n        return (minimum, middle)\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4f6xl4v.jl:1\nin expression starting at /tmp/tmpp4f6xl4v.jl:1\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays |>\n\
    Here is a simple solution that is O(n) time and O(1) space complexity:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp7lux_ac.jl:20\nin expression starting at\
    \ /tmp/tmpp7lux_ac.jl:20\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            minimum = minimum\
    \ if minimum < i else i\n            maximum = maximum if maximum > i else i\n\
    \        end\n    end\n    return minimum, maximum\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp70xb6ttl.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp70xb6ttl.jl:17\n\
    in expression starting at /tmp/tmp70xb6ttl.jl:17\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4khccd0.jl:21\nin expression starting at\
    \ /tmp/tmpx4khccd0.jl:21\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[2]\n        closest_numbers_2 = numbers[1]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[1]\n    end\n    \n    return closest_numbers,\
    \ closest_numbers_2\nend\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp_ifj_d1g.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmp_ifj_d1g.jl:35\n  Expression: candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n   Evaluated: (1.0, 2.0) == (3.9, 4.0)\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ifj_d1g.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ifj_d1g.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_ifj_d1g.jl:36\n  Expression: candidate([1.0, 2.0, 5.9, 4.0,\
    \ 5.0]) == (5.0, 5.9)\n   Evaluated: (1.0, 2.0) == (5.0, 5.9)\nStacktrace:\n [1]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ifj_d1g.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ifj_d1g.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_ifj_d1g.jl:37\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2)\n   Evaluated: (1.0, 2.0) == (2.0, 2.2)\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ifj_d1g.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ifj_d1g.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_ifj_d1g.jl:38\n  Expression: candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.0]) == (2.0, 2.0)\n   Evaluated: (1.0, 2.0) == (2.0, 2.0)\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_ifj_d1g.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_ifj_d1g.jl:34\ntest set: Test\
    \ Failed at /tmp/tmp_ifj_d1g.jl:39\n  Expression: candidate([1.1, 2.2, 3.1, 4.1,\
    \ 5.1]) == (2.2, 3"
  timestamp: 1659822952
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < smallest \n            smallest = i\n  \
    \      elseif i > largest\n            largest = i\n        end\n    end\n   \
    \ return smallest, largest\nend\n</cell>\n<text>\nNow let's try it out on some\
    \ test data:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7dzckj4q.jl:21\nin expression starting at\
    \ /tmp/tmp7dzckj4q.jl:21\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    \n\
    \    for i in numbers[2:end]\n        if i < minimum\n            minimum = i\n\
    \        elseif i > maximum\n            maximum = i\n        end\n    end\n \
    \   \n    return (minimum, maximum)\nend\n</cell>\n<text>\nNow let's test our\
    \ function by calling it with the numbers we created earlier. We'll use the function\
    \ we defined earlier to find the closest pair of numbers to each other.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmploqg1p2b.jl:23\nin expression starting at\
    \ /tmp/tmploqg1p2b.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ape61ce.jl:23\nin expression starting at\
    \ /tmp/tmp6ape61ce.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    minimum = numbers[1]\n    maximum = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < minimum\n            minimum\
    \ = number\n        elseif number > maximum\n            maximum = number\n  \
    \      end\n    end\n    \n    return (minimum, maximum)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the numbers\
    \ in a given vector. For example, given [1.0, 2.0, 3.0], the function should return\
    \ 14.0.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiwqf6zge.jl:23\nin expression starting at\
    \ /tmp/tmpiwqf6zge.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0jkirj3t.jl:23\nin expression starting at\
    \ /tmp/tmp0jkirj3t.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczlcnz1u.jl:23\nin expression starting at\
    \ /tmp/tmpczlcnz1u.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            smallest_number =\
    \ number\n            largest_number = number\n        end\n    end\n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes in a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector. \nFor example, if the vector is [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0], the function should return 50.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0edv35gm.jl:23\nin expression starting at\
    \ /tmp/tmp0edv35gm.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.4>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise: Write a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers\
    \ in that list. For example, if the input list is [1.0, 2.0, 3.0, 4.0, 5.0, 2.2],\
    \ the output should be 14.0\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmoy5bmc.jl:23\nin expression starting at\
    \ /tmp/tmpnmoy5bmc.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1th1phv3.jl:23\nin expression starting at\
    \ /tmp/tmp1th1phv3.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector.\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in the vector.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.\nWrite \nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnl4_fdm.jl:23\nin expression starting at\
    \ /tmp/tmpjnl4_fdm.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nFor example, if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 6.0], then\
    \ the function should return 25.\nHint: use the sum function.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2dm0pha.jl:23\nin expression starting at\
    \ /tmp/tmph2dm0pha.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nfind_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in that vector. \nFor example, \n>>> square_sum([1.0, 2.0, 3.0])\n25.0\n>>>\
    \ square_sum([1.0, 2.0, 3.0, 4.0, 5.0])\n25.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0])\n50.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0])\n\
    75.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n100.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n125.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n150.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n175.0\n>>> square_sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0])\n200.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n225.0\n>>>\
    \ square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0,\
    \ 14.0])\n250.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,\
    \ 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n275.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n300.0\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0,\
    \ 13.0, 14.0, 15.0, 16.0, 17.0])\n325.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n\
    350.0\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpic27uufe.jl:23\nin expression starting at\
    \ /tmp/tmpic27uufe.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_difference = numbers[1] - numbers[0]\n    smallest_number\
    \ = numbers[1]\n    largest_difference = numbers[1] - numbers[0]\n    largest_number\
    \ = numbers[1]\n    \n    for number in numbers[2:end]\n        difference = number\
    \ - numbers[1]\n        if difference < smallest_difference\n            smallest_difference\
    \ = difference\n            smallest_number = number\n        elseif difference\
    \ > largest_difference\n            largest_difference = difference\n        \
    \    largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function by comparing\
    \ it to our old function and see how they compare.\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoowm_z6d.jl:27\nin expression starting at\
    \ /tmp/tmpoowm_z6d.jl:27\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_difference = numbers[1] - numbers[0]\n    smallest_number\
    \ = numbers[1]\n    largest_difference = numbers[length(numbers) - 1] - numbers[length(numbers)-2]\n\
    \    largest_number = numbers[length(numbers)-1]\n    \n    for number in numbers[2:length(numbers)-1]\n\
    \        difference = number - numbers[1]\n        if difference < smallest_difference\n\
    \            smallest_difference = difference\n            smallest_number = number\n\
    \        end\n        \n        difference = number - numbers[length(numbers)-2]\n\
    \        if difference > largest_difference\n            largest_difference =\
    \ difference\n            largest_number = number\n        end\n    end\n    \n\
    \    return (smallest_number, largest_number)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in that vector.\
    \ \nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jp02ltv.jl:31\nin expression starting at\
    \ /tmp/tmp4jp02ltv.jl:31\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the closest element to a given number in a given\
    \ list of numbers. If the given number is greater than any of the numbers in the\
    \ list, return the first number in the list.\nusing Test\n\n@testset begin\n\n\
    candidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41hoy991.jl:23\nin expression starting at\
    \ /tmp/tmp41hoy991.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hdmjs5k.jl:23\nin expression starting at\
    \ /tmp/tmp4hdmjs5k.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[0]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            break\n    end\n\
    \    return (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16ac3r0t.jl:21\nin expression starting at\
    \ /tmp/tmp16ac3r0t.jl:21\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpefs06sbb.jl:23\nin expression starting at\
    \ /tmp/tmpefs06sbb.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        if numbers[i] < minimum\n            minimum = numbers[i]\n\
    \        elseif numbers[i] > maximum\n            maximum = numbers[i]\n     \
    \   else\n            minimum = minimum\n            maximum = maximum\n     \
    \   end\n    end\n    return (minimum, maximum)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis code doesn't work for me. `minimum` and `maximum` are not\
    \ defined. `minimum = numbers[1]` should be `minimum = numbers[1]; maximum = numbers[1]`.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqvdhf2xm.jl:23\nin expression starting at\
    \ /tmp/tmpqvdhf2xm.jl:23\n"
  stdout: ''
  timestamp: 1659822950
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07pvfn2_.jl:23\nin expression starting at\
    \ /tmp/tmp07pvfn2_.jl:23\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            smallest_number =\
    \ number\n            largest_number = number\n        end\n    end\n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.4>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will find the closest element to a given number in\
    \ a given vector. For example, if the vector is [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]\
    \ and the number you are looking for is 2.2, then the function should return (2.0,\
    \ 2.2).\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07dk0hrc.jl:23\nin expression starting at\
    \ /tmp/tmp07dk0hrc.jl:23\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        else\n            return smallest_number,\
    \ largest_number\n        end\n    end\n    return smallest_number, largest_number\n\
    end\n</code>\n<|/ a |>\n<| a dscore=1 |>\nI wrote a function that finds the closest\
    \ element in a given array to a given number. \n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukcop26q.jl:22\nin expression starting at\
    \ /tmp/tmpukcop26q.jl:22\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ i in 2:length(numbers)\n        if numbers[i] < smallest\n            smallest\
    \ = numbers[i]\n        elseif numbers[i] > largest\n            largest = numbers[i]\n\
    \        else\n            smallest = numbers[i]\n            largest = numbers[i]\n\
    \        end\n    end\n    return (smallest, largest)\nend\n</cell>\n<text>\n\
    The function above is called find_closest_elements and it takes one argument (a\
    \ vector) and returns two elements (a tuple with two elements). The first element\
    \ is the smallest number in the vector and the second element is the largest number\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfzcgauk.jl:24\nin expression starting at\
    \ /tmp/tmphfzcgauk.jl:24\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        if numbers[i] < minimum\n            minimum = numbers[i]\n\
    \        elseif numbers[i] > maximum\n            maximum = numbers[i]\n     \
    \   else\n            return minimum, maximum\n        end\n    end\n    return\
    \ minimum, maximum\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t\
    @test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnuwximi4.jl:22\nin expression starting at\
    \ /tmp/tmpnuwximi4.jl:22\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_distance = numbers[1]\n\
    \    for element in numbers[2:end]\n        distance = abs(element - closest_elements)\n\
    \        if distance < closest_distance\n            closest_elements = element\n\
    \            closest_distance = distance\n        end\n    end\n    return closest_elements,\
    \ closest_distance\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph0af3pq6.jl:21\nin expression starting at\
    \ /tmp/tmph0af3pq6.jl:21\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < smallest\n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        else\n\
    \            break\n    end\n    return smallest, largest\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7si416g2.jl:21\nin expression starting at\
    \ /tmp/tmp7si416g2.jl:21\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_numbers_2 = numbers[2]\n\
    \    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] > numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] == numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] < numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] > numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \n    if numbers[1] == numbers[2]\n\
    \        closest_numbers = numbers[1]\n        closest_numbers_2 = numbers[2]\n\
    \    end\n    \n    if numbers[1] < numbers[2]\n        closest_numbers = numbers[1]\n\
    \        closest_numbers_2 = numbers[2]\n    end\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiiik2ve6.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiiik2ve6.jl:1\n\
    in expression starting at /tmp/tmpiiik2ve6.jl:1\n"
  stdout: ''
  timestamp: 1659822948
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnnhdxp_.jl:23\nin expression starting at\
    \ /tmp/tmpsnnhdxp_.jl:23\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < smallest_number\n     \
    \       smallest_number = number\n        elseif number > largest_number\n   \
    \         largest_number = number\n        end\n    end\n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nThe function find_closest_elements is\
    \ now ready to be used in a Julia program. Let's see how it works:\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzr_pksig.jl:21\nin expression starting at\
    \ /tmp/tmpzr_pksig.jl:21\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        if numbers[i] < smallest \n            smallest =\
    \ numbers[i]\n        elseif numbers[i] > largest\n            largest = numbers[i]\n\
    \        else\n            smallest = numbers[i]\n            largest = numbers[i]\n\
    \        end\n    end\n    return (smallest, largest)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\nThis can be done in O(n) time using binary search and\
    \ O(1) space using an array:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3w1he3zm.jl:23\nin expression starting at\
    \ /tmp/tmp3w1he3zm.jl:23\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbjdp6z15.jl:21\nin expression starting at\
    \ /tmp/tmpbjdp6z15.jl:21\n"
  stdout: ''
  timestamp: 1659822942
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    biggest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > biggest_number\n\
    \            biggest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ biggest_number)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9herjff7.jl:23\nin expression starting at\
    \ /tmp/tmp9herjff7.jl:23\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for i in 2:length(numbers)\n        if numbers[i] < smallest_number\n\
    \            smallest_number = numbers[i]\n        elseif numbers[i] > largest_number\n\
    \            largest_number = numbers[i]\n        end\n    end\n    \n    return\
    \ (smallest_number, largest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n</cell>\n<code language=julia-1.5>\n\
    find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in that list.\nHint: Use a for loop and a sum function.\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl27lhedu.jl:23\nin expression starting at\
    \ /tmp/tmpl27lhedu.jl:23\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_diff = Float64(0.0)\n    smallest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        diff = abs(number - smallest_number)\n\
    \        if diff < smallest_diff\n            smallest_diff = diff\n         \
    \   smallest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ smallest_diff)\nend\n</cell>\n<text>\nNow let's test the function by comparing\
    \ it to our previous implementation\nusing Test\n\n@testset begin\n\ncandidate\
    \ = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
    \ == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ktmuix8.jl:23\nin expression starting at\
    \ /tmp/tmp4ktmuix8.jl:23\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_numbers = numbers[1]\n    closest_number = numbers[1]\n\
    \    for number in numbers[2:end]\n        if number < closest_number\n      \
    \      closest_number = number\n        elseif number > closest_number\n     \
    \       closest_numbers = number\n        end\n    end\n    return closest_numbers,\
    \ closest_number\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\
    \t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaqwlatvj.jl:21\nin expression starting at\
    \ /tmp/tmpaqwlatvj.jl:21\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for n in\
    \ numbers[2:end]\n        if n < smallest\n            smallest = n\n        elseif\
    \ n > largest\n            largest = n\n        else\n            smallest, largest\
    \ = n, n\n        end\n    end\n    return smallest, largest\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = find_closest_elements;\n\t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\n\t\
    @test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\t@test(candidate([1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44i7snx5.jl:22\nin expression starting at\
    \ /tmp/tmp44i7snx5.jl:22\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for i in 2:length(numbers)\n        if numbers[i] < smallest\n          \
    \  smallest = numbers[i]\n        elseif numbers[i] > largest\n            largest\
    \ = numbers[i]\n        end\n    end\n    \n    return (smallest, largest)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers and\
    \ returns the sum of the squares of the numbers in the list.\n>>> square_sum(numbers::Vector{Float64})\n\
    >>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n25.0\n>>> square_sum([1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 6.0, 7.0])\n49.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0,\
    \ 7.0, 8.0])\n145.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n\
    2520.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0])\n\
    47900.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0])\n\
    987000.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,\
    \ 12.0])\n1987500.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0,\
    \ 10.0, 11.0, 12.0, 13.0])\n3987500.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0])\n5987500.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0])\n\
    7987500.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\
    \ 11.0, 12.0, 13.0, 14.0, 15.0, 16.0])\n9987500.0\n>>> square_sum([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0])\n\
    11875000.0\n>>> square_sum([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,\
    \ 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0])\n13875000.0\n>>> square_sum([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbl74k3c3.jl:23\nin expression starting at\
    \ /tmp/tmpbl74k3c3.jl:23\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n            closest_elements = number\n\
    \        else\n            if abs(number - closest_number) < abs(closest_number\
    \ - number)\n                closest_number = number\n                closest_elements\
    \ = number\n            end\n        end\n    end\n    \n    return closest_elements,\
    \ closest_number\nend\n</cell>\n<text>\nThe function above is called find_closest_elements\
    \ and takes in a list of numbers and returns a tuple containing the two numbers\
    \ that are closest to each other (the smaller number, the larger number).\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2xi_dg42.jl:27\nin expression starting at\
    \ /tmp/tmp2xi_dg42.jl:27\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < smallest\n            smallest = i\n   \
    \     elseif i > largest\n            largest = i\n        end\n    end\n    return\
    \ (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdeus7t6j.jl:21\nin expression starting at\
    \ /tmp/tmpdeus7t6j.jl:21\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    for\
    \ i in numbers[2:end]\n        if i < smallest \n            smallest = i\n  \
    \      elseif i > largest\n            largest = i\n        end\n    end\n   \
    \ return (smallest, largest)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtsv9pnk.jl:21\nin expression starting at\
    \ /tmp/tmpjtsv9pnk.jl:21\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            minimum = minimum\
    \ if minimum < i else i\n            maximum = maximum if maximum > i else i\n\
    \        end\n    end\n    return (minimum, maximum)\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])` returns `(2.0, 2.0)` instead of `(2.0, 2.2)`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the bug and added a version that works with Julia 1.5.\n<|/ c\
    \ |>\n<| a tags=julia,sorting,arrays |>\nThis should work:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpknwcswag.jl:14 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpknwcswag.jl:17\n\
    in expression starting at /tmp/tmpknwcswag.jl:17\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = minimum(numbers)\n    maximum = maximum(numbers)\n\
    \    minimum_index = index(minimum, numbers)\n    maximum_index = index(maximum,\
    \ numbers)\n    \n    if minimum_index == maximum_index\n        return (minimum,\
    \ minimum)\n    else\n        return (numbers[minimum_index], numbers[maximum_index])\n\
    \    end\nend\n</cell>\n<text>\nThe function find_closest_elements takes two arguments:\
    \ numbers and returns a tuple of two numbers (the closest to each other).\nusing\
    \ Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpruvpv9kj.jl:20\nin expression starting at\
    \ /tmp/tmpruvpv9kj.jl:20\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ 2:length(numbers)\n        if numbers[i] < minimum\n            minimum = numbers[i]\n\
    \        elseif numbers[i] > maximum\n            maximum = numbers[i]\n     \
    \   else\n            return minimum, maximum\n        end\n    end\n    return\
    \ minimum, maximum\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like the idea\
    \ of using minimum and maximum to keep track of the minimum and maximum numbers.\
    \ But this doesn't work if you have two numbers that are equal, right? For example\
    \ `find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])` returns `(2.0, 2.0)`\
    \ instead of `(2.0, 2.2)`.\n<|/ c |>\n<| c |>\nYes, you're right. I didn't think\
    \ about that case. I'll edit my answer to fix it.\n<|/ c |>\n<| c |>\nThanks for\
    \ your answer! I like your solution but I'm afraid that it's too slow for my needs.\
    \ I need a solution that is fast enough to run on large vectors.\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to include a faster solution. Hope it helps.\n<|/ c\
    \ |>\n<| c |>\nThanks for your answer! I like your solution but I'm afraid that\
    \ it's too slow for my needs. I need a solution that is fast enough to run on\
    \ large vectors.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a solution that is fast\
    \ enough to run on large vectors. I used the idea of using minimum and maximum\
    \ to keep track of the minimum and maximum numbers. But this doesn't work if you\
    \ have two numbers that are equal, right? For example find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) returns (2.0, 2.0) instead of (2.0, 2.2).\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu7moxdr4.jl:22\nin expression starting at\
    \ /tmp/tmpu7moxdr4.jl:22\n"
  stdout: ''
  timestamp: 1659822953
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nNow let's test our new function with\
    \ some test cases:\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpczlcnz1u.jl:23\nin expression starting at\
    \ /tmp/tmpczlcnz1u.jl:23\n"
  stdout: ''
  timestamp: 1659822939
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest = numbers[1]\n    largest = numbers[1]\n    \n\
    \    for number in numbers[2:end]\n        if number < smallest\n            smallest\
    \ = number\n        elseif number > largest\n            largest = number\n  \
    \      end\n    end\n    \n    return (smallest, largest)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphlwvf21p.jl:23\nin expression starting at\
    \ /tmp/tmphlwvf21p.jl:23\n"
  stdout: ''
  timestamp: 1659822954
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    smallest_number = numbers[1]\n    largest_number = numbers[end]\n\
    \    \n    for number in numbers[2:end]\n        if number < smallest_number\n\
    \            smallest_number = number\n        elseif number > largest_number\n\
    \            largest_number = number\n        end\n    end\n    \n    return (smallest_number,\
    \ largest_number)\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. \nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector. \nWrite a function that takes a\
    \ vector of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector. \nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector.\
    \ \nWrite a function that takes a vector of numbers and returns the \nusing Test\n\
    \n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb56vhbg8.jl:23\nin expression starting at\
    \ /tmp/tmpb56vhbg8.jl:23\n"
  stdout: ''
  timestamp: 1659822954
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    \n    closest_elements = numbers[1]\n    closest_number = numbers[1]\n\
    \    \n    for number in numbers[2:end]\n        if number < closest_number\n\
    \            closest_number = number\n            closest_elements = number\n\
    \        elseif number > closest_number\n            closest_number = number\n\
    \            closest_elements = number\n        end\n    end\n    \n    return\
    \ (closest_elements, closest_number)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdjd9prfz.jl:25\nin expression starting at\
    \ /tmp/tmpdjd9prfz.jl:25\n"
  stdout: ''
  timestamp: 1659822955
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    smallest = numbers[1]\n    largest = numbers[1]\n    for number\
    \ in numbers[2:end]\n        if number < smallest\n            smallest = number\n\
    \        elseif number > largest\n            largest = number\n        else\n\
    \            largest = number\n            smallest = number\n        end\n  \
    \  end\n    return (smallest, largest)\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\t@test(candidate([1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\n\
    \t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfgef4jvw.jl:23\nin expression starting at\
    \ /tmp/tmpfgef4jvw.jl:23\n"
  stdout: ''
  timestamp: 1659822954
- exit_code: 1
  program: "\"\"\" From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n    other and return them in order\
    \ (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\nfunction find_closest_elements(numbers::Vector{Float64})::Tuple{Float64,\
    \ Float64} \n    minimum = numbers[1]\n    maximum = numbers[1]\n    for i in\
    \ numbers[2:end]\n        if i < minimum\n            minimum = i\n        elseif\
    \ i > maximum\n            maximum = i\n        else\n            minimum = min(minimum,\
    \ i)\n            maximum = max(maximum, i)\n        end\n    end\n    return\
    \ (minimum, maximum)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = find_closest_elements;\n\
    \t@test(candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\n\t@test(candidate([1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0,\
    \ 5.0, 2.2]) == (2.0, 2.2))\n\t@test(candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\
    \ == (2.0, 2.0))\n\t@test(candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprf3900rd.jl:23\nin expression starting at\
    \ /tmp/tmprf3900rd.jl:23\n"
  stdout: ''
  timestamp: 1659822954
