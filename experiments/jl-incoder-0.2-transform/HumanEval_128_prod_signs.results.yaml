language: jl
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    prod = 1\n    for x in\
    \ arr\n        prod *= sign(x)\n    end\n    \n    return prod * sum(abs(x) for\
    \ x in arr)\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2,\
    \ 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates sum of squares of\
    \ integers multiplied by product of all signs of numbers in the array, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0uzm_2r.jl:26\nin expression starting at\
    \ /tmp/tmpp0uzm_2r.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 2:length(arr) \n            product *= signs[i]\n    \
    \        signs[i] = product\n        end\n        return product\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    You are given an array arr of\
    \ integers and you need to return\n    sum of magnitudes of integers multiplied\
    \ by product of all signs\n    of each number in the array, represented by 1,\
    \ -1 or 0.\n    Note: return 0 for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprznot5p4.jl:30\nin expression starting at\
    \ /tmp/tmprznot5p4.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        product = prod(signs) \n        magnitudes = map(abs, arr) \n\
    \        return sum(magnitudes * product) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojtupfri.jl:25\nin expression starting at\
    \ /tmp/tmpojtupfri.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = 1\n        signs[arr .> 0] = -1\n  \
    \      signs = signs.*prod(signs)\n        return sum(signs)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns its sum of the absolute\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mgxgm7k.jl:26\nin expression starting at\
    \ /tmp/tmp4mgxgm7k.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[arr .== 0] = -1\n    signs[arr .== 1] = 1\n    \n    prod = 1\n   \
    \ for i in 1:length(arr) \n        prod *= signs[i]\n    end\n    \n    return\
    \ prod\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nTask 2.2: Sum of magnitudes of integers multiplied by product\
    \ of all signs\nWrite a function that returns sum of magnitudes of integers multiplied\
    \ by product of all signs\nof each number in the array, represented by 1, -1 or\
    \ 0.\nNote: return 0 for empty arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpleaev9js.jl:30\nin expression starting at\
    \ /tmp/tmpleaev9js.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    for (i,x) in enumerate(arr)\n        signs[i] = sign(x) * sign(i)\n    end\n\
    \    \n    prod = prod(signs)\n    \n    return prod * sum(abs(arr))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if a number is odd, False otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcaydt_nc.jl:28\nin expression starting at\
    \ /tmp/tmpcaydt_nc.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        sum_of_mags = sum(map(abs, arr))\n\
    \        return product * sum_of_mags\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if a number is odd and False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6ig8on4.jl:25\nin expression starting at\
    \ /tmp/tmpf6ig8on4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int64, length(arr))\n\
    \    signs[arr .== 1] = 1\n    signs[arr .== -1] = -1\n    signs[arr .== 0] =\
    \ 0\n    \n    prod = signs .* prod(signs)\n    \n    return sum(abs.(prod)) +\
    \ nothing\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2,\
    \ 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if a number is\
    \ odd and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp251pydz5.jl:28\nin expression starting at\
    \ /tmp/tmp251pydz5.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      product = signs .* prod(signs)\n        return sum(abs(product))\n    end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwb0iukb.jl:26\nin expression starting at\
    \ /tmp/tmppwb0iukb.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        sum_of_magnitudes = sum(map(abs,\
    \ arr))\n        return product * sum_of_magnitudes\n    end\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36o9k9j2.jl:25\nin expression starting at\
    \ /tmp/tmp36o9k9j2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum = 0\n    prod = 1\n\
    \    for x in arr\n        sum += abs(x)\n        prod *= sign(x)\n    end\n \
    \   return sum * prod\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that returns True if\
    \ a number is odd and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxn4679x.jl:27\nin expression starting at\
    \ /tmp/tmpqxn4679x.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    prod = 1\n    sign = 1\n\
    \    for x in arr\n        sign *= sign(x)\n        prod *= sign\n    end\n  \
    \  return prod * prod(arr)\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive numbers in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6g7a16zy.jl:27\nin expression starting at\
    \ /tmp/tmp6g7a16zy.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        product = signs .* prod(signs)\n      \
    \  return sum(abs(product))\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nA simple solution using Julia Base is to use Base.prod function which computes\
    \ the product of all the elements in a vector:\n<code>\njulia> Base.prod([1,2,3])\n\
    6\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI came up with a solution\
    \ that is very similar to some of the other answers, but I wanted to show that\
    \ you can also use broadcasting instead of looping through each element in the\
    \ array. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqvi2rfd.jl:27\nin expression starting at\
    \ /tmp/tmpkqvi2rfd.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 return nothing\n    signs = zeros(Int, length(arr))\n    signs[1]\
    \ = 1\n    signs[end] = -1\n    prod = 1\n    for x in arr\n        prod *= signs[x]\n\
    \    end\n    return prod\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nTask 3\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvo9fmv9l.jl:26\nin expression starting at\
    \ /tmp/tmpvo9fmv9l.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    prod = 1\n    for x in\
    \ arr\n        prod *= sign(x)\n    end\n    \n    mag = sqrt(prod(map(x -> abs2,\
    \ arr)))\n    \n    return mag * prod\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nProd of Signs\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbov9uh6.jl:28\nin expression starting at\
    \ /tmp/tmpqbov9uh6.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = filter(x ->\
    \ x == 0, signs)\n        signs = filter(x -> x == 1, signs)\n        signs =\
    \ filter(x -> x == -1, signs)\n        signs = sum(signs)\n        return signs\
    \ * prod(arr)\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for\
    \ your answer! I didn't know that Julia had a product function. I was trying to\
    \ use reduce but couldn't get it to work. Your solution is much more elegant than\
    \ mine.\n<|/ c |>\n<| c |>\nI didn't know about `product` either, but `reduce(*,\
    \ arr)` works just fine.\n<|/ c |>\n<| c |>\nI didn't know about `product` either,\
    \ but `reduce(*, arr)` works just fine.\n<|/ c |>\n<| a |>\nHere's a solution\
    \ using reduce:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7whi3iy.jl:28\nin expression starting at\
    \ /tmp/tmpa7whi3iy.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    prod = 1\n    for x in\
    \ arr\n        prod *= sign(x)\n    end\n    \n    mags = map(abs, arr)\n    mags\
    \ = filter(x -> x != 0, mags)\n    mags = map(prod, mags)\n    \n    return sum(mags)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of all numbers in\
    \ the given array arr except the given number num.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hl211op.jl:30\nin expression starting at\
    \ /tmp/tmp5hl211op.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs.prod(1)\n        return signs * prod(signs)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ numbers in an array.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp80888ksd.jl:26\nin expression starting at\
    \ /tmp/tmp80888ksd.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs_product = prod(signs)\n        sum_of_magnitudes = sum(map(abs,\
    \ arr))\n        return signs_product * sum_of_magnitudes\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if a number is even, False otherwise. You may use\
    \ bitwise operators.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgfvu4p8.jl:25\nin expression starting at\
    \ /tmp/tmptgfvu4p8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for i = 1:length(arr)\n            signs[i] = sign(arr[i])\n\
    \        end\n        product = prod(signs)\n        return product * sum(signs)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates sum of squares of\
    \ integers multiplied by product of all signs of each number in the array, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2os53ml.jl:27\nin expression starting at\
    \ /tmp/tmpx2os53ml.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_of_mags\
    \ = sum(abs.(arr .* signs))\n        return sum_of_mags\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ its sum.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpexzv7ndx.jl:26\nin expression starting at\
    \ /tmp/tmpexzv7ndx.jl:26\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = filter(x ->\
    \ x == 0, signs)\n        signs = filter(x -> x == 1, signs)\n        signs =\
    \ filter(x -> x == -1, signs)\n        signs = filter(x -> x == 0, signs)\n  \
    \      signs = filter(x -> x == 1, signs)\n        signs = filter(x -> x == -1,\
    \ signs)\n        signs = filter(x -> x == 0, signs)\n        signs = filter(x\
    \ -> x == 1, signs)\n        signs = filter(x -> x == -1, signs)\n        signs\
    \ = filter(x -> x == 0, signs)\n        signs = filter(x -> x == 1, signs)\n \
    \       signs = filter(x -> x == -1, signs)\n        signs = filter(x -> x ==\
    \ 0, signs)\n        signs = filter(x -> x == 1, signs)\n        signs = filter(x\
    \ -> x == -1, signs)\n        signs = filter(x -> x == 0, signs)\n        signs\
    \ = filter(x -> x == 1, signs)\n        signs = filter(x -> x == -1, signs)\n\
    \        signs = filter(x -> x == 0, signs)\n        signs = filter(x -> x ==\
    \ 1, signs)\n        signs = filter(x -> x == -1, signs)\n        signs = filter(x\
    \ -> x == 0, signs)\n        signs = filter(x -> x == 1, signs)\n        signs\
    \ = filter(x -> x == -1, signs)\n        signs = filter(x -> x == 0, signs)\n\
    \        signs = filter(x -> x == 1, signs)\n        signs = filter(x -> x ==\
    \ -1, signs)\n        signs = filter(x -> x == 0, signs)\n        signs = filter(x\
    \ -> x == 1, signs)\n        signs = filter(x -> x == -1, signs)\n        signs\
    \ = filter(x -> x == 0, signs)\n        signs = filter(x -> x == 1, signs)\n \
    \       signs = filter(x -> x == -1, signs)\n        signs = filter(x -> x ==\
    \ 0, signs)\n        signs = filter(x -> x == 1, signs)\n        signs = filter(x\
    \ -> x == -1, signs)\n        signs = filter(x -> x == 0, signs)\n        signs\
    \ = filter(x -> x == 1, signs)\n        signs = filter(x -> x == -1, signs)\n\
    \        signs = filter(x -> x == 0, signs)\n        signs = filter(x -> x ==\
    \ 1, signs)\n        signs = filter(x -> x == -1, signs)\n        signs = filter(x\
    \ -> x == 0, signs)\n        signs = filter(x -> x == \nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyk7esgl6.jl:67\nin expression starting at\
    \ /tmp/tmpyk7esgl6.jl:67\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x==1, signs)\n        signs = filter(x ->\
    \ x==-1, signs)\n        signs = filter(x -> x==0, signs)\n        signs = prod(signs)\n\
    \        return signs * prod(arr)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuu8yoblk.jl:27\nin expression starting at\
    \ /tmp/tmpuu8yoblk.jl:27\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        return product * sum(signs)\n \
    \   end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5g56dnj8.jl:24\nin expression starting at\
    \ /tmp/tmp5g56dnj8.jl:24\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        product = signs .* prod(signs)\n      \
    \  return sum(abs(product))\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,arrays\
    \ |>\nI wrote a function that does this for you:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmoktm43.jl:27\nin expression starting at\
    \ /tmp/tmpdmoktm43.jl:27\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    signs = map(sign, arr)\n\
    \    prod = prod(signs)\n    mags = map(abs, arr)\n    return sum(mags .* signs)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns True if a number is odd, False\
    \ otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_nuxwwum.jl:24\nin expression starting at\
    \ /tmp/tmp_nuxwwum.jl:24\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        product = prod(signs) \n        sum_of_mags = sum(map(abs, arr)) \n\
    \        return product * sum_of_mags \n    end\nend\n</code>\n<|/ a tags=julia,arrays,function\
    \ |>\n<| a tags=julia,arrays,function |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqm3tzb4.jl:25\nin expression starting at\
    \ /tmp/tmpjqm3tzb4.jl:25\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = 1\n        signs[arr .> 0] = -1\n  \
    \      signs = signs * prod(signs)\n        return signs\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to work. `prod_signs([1, 2, 2, -4])`\
    \ returns `9` instead of `-9`.\n<|/ c |>\n<| c |>\nIt works. I tested it before\
    \ posting. What do you mean by \"doesn't work\"? It returns `-9` as expected.\
    \ `prod(signs)` returns `-9` as well.\n<|/ c |>\n<| c |>\nI mean it returns `-9`\
    \ instead of `9`. `signs` should be `-9` but `prod(signs)` returns `9`.\n<|/ c\
    \ |>\n<| c |>\nI see. `signs` is `-9` but `prod(signs)` returns `9`. What is your\
    \ expected output?\n<|/ c |>\n<| c |>\n`prod(signs)` returns `-9` because `signs`\
    \ is `-9`. `signs` is `-9` because `arr .< 0` returns `[false, true, false, true]`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprvgt2iqr.jl:26\nin expression starting at\
    \ /tmp/tmprvgt2iqr.jl:26\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    signs = map(sign, arr)\n\
    \    signs_product = prod(signs)\n    sum_of_magnitudes = sum(map(abs, arr))\n\
    \    return signs_product * sum_of_magnitudes\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns True if a number is odd, False otherwise. \nThe function should work\
    \ for negative and positive numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiv6bvwk8.jl:24\nin expression starting at\
    \ /tmp/tmpiv6bvwk8.jl:24\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    sum_of_mags = sum(map(abs,\
    \ arr))\n    signs = map(sign, arr)\n    prod = prod(signs)\n    return sum_of_mags\
    \ * prod\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmpf4uybxzl.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpf4uybxzl.jl:29\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 2, -4]) == -9\n  UndefVarError: prod not defined\n\
    \  Stacktrace:\n   [1] prod_signs(arr::Vector{Int64})\n     @ Main /tmp/tmpf4uybxzl.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf4uybxzl.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf4uybxzl.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpf4uybxzl.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([0, 1]) == 0\n  UndefVarError: prod not defined\n  Stacktrace:\n \
    \  [1] prod_signs(arr::Vector{Int64})\n     @ Main /tmp/tmpf4uybxzl.jl:21\n  \
    \ [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf4uybxzl.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf4uybxzl.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpf4uybxzl.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n  UndefVarError: prod not defined\n\
    \  Stacktrace:\n   [1] prod_signs(arr::Vector{Int64})\n     @ Main /tmp/tmpf4uybxzl.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpf4uybxzl.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpf4uybxzl.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpf4uybxzl.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([2, 4, 1, 2, -1, -1, 9]) == 20\n  UndefVarError: prod not defined\n\
    \  Stacktrace:\n   [1] prod_signs(arr::Vector{Int64})\n     @ Main /tmp/tmpf4uybxzl.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/"
  timestamp: 1659822699
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x == 1, signs)\n        signs = filter(x ->\
    \ x == -1, signs)\n        signs = filter(x -> x == 0, signs)\n        signs =\
    \ sum(signs)\n        return signs * prod(signs)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the sum of squares of integers in arr\nand returns\
    \ the sum of the squares.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jwm77jp.jl:27\nin expression starting at\
    \ /tmp/tmp5jwm77jp.jl:27\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[0] * signs(arr[1])\n    else\n        signs = zeros(Int64, length(arr))\n\
    \        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n        signs[arr\
    \ .== 0] = 0\n        sum_signs = sum(signs)\n        prod_signs = signs .* arr\
    \ .* signs\n        return sum_signs * prod(prod_signs)\n    end\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a dscore=1 |>\nI wrote a function that does this\
    \ in Julia. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzqvch3d0.jl:30\nin expression starting at\
    \ /tmp/tmpzqvch3d0.jl:30\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i]\n    \
    \        signs[i] = 0\n        end\n        return product * sum(abs.(arr))\n\
    \    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoh08phtj.jl:30\nin expression starting at\
    \ /tmp/tmpoh08phtj.jl:30\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_prod = prod(signs) \n        sum_of_mags = sum(map(abs,\
    \ arr)) \n        return sum_of_mags * signs_prod \n    end\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbntrjexx.jl:25\nin expression starting at\
    \ /tmp/tmpbntrjexx.jl:25\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[arr .== 0] = -1\n    signs[arr .== 1] = 1\n    \n    prod = 1\n   \
    \ for x in arr\n        prod *= signs[x]\n    end\n    \n    return prod\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of absolute values of numbers\
    \ in an array.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpinjg9z.jl:29\nin expression starting at\
    \ /tmp/tmpjpinjg9z.jl:29\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        signs = signs .* prod(signs)\n        return\
    \ sum(signs)\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_te87r3.jl:27\nin expression starting at\
    \ /tmp/tmpq_te87r3.jl:27\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_product = prod(signs) \n        sum_of_mags = sum(map(abs,\
    \ arr)) \n        return sum_of_mags * signs_product \n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk8sjng75.jl:25\nin expression starting at\
    \ /tmp/tmpk8sjng75.jl:25\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = prod(signs)\n\
    \        mags = map(abs, arr)\n        mags = filter(x -> x != 0, mags)\n    \
    \    mags = prod(mags)\n        return signs * mags\n    end\nend\n</code>\n<|/\
    \ a |>\n<| c |>\nI like your solution, but I wonder if there is a way to avoid\
    \ the use of filter and map. I guess it would be possible to use reduce or foldl\
    \ but I am not sure how to do it.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ uses foldl and reduce.\n<|/ c |>\n<| c |>\nI added a solution that uses foldl\
    \ and reduce.\n<|/ c |>\n<| a tags=julia,functional-programming |>\nI came up\
    \ with this solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsh3_dmo0.jl:28\nin expression starting at\
    \ /tmp/tmpsh3_dmo0.jl:28\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    signs = zeros(Int64,\
    \ length(arr))\n    for idx in 1:length(arr)\n        signs[idx] = signs[idx]\
    \ + arr[idx]\n    end\n    signs = signs./sum(signs)\n    return prod(signs)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jicam45.jl:26\nin expression starting at\
    \ /tmp/tmp6jicam45.jl:26\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    sum = 0\n    for i in arr\n        sum\
    \ += sign(i) * i\n    end\n    return sum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp082a3afe.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp082a3afe.jl:1\n\
    in expression starting at /tmp/tmp082a3afe.jl:1\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    \n    sum = 0\n    for i in arr\n     \
    \   sum += i\n    end\n    \n    prod = 1\n    for i in arr\n        prod *= sign(i)\n\
    \    end\n    \n    sum * prod\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if a number is odd and False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfm7g53uf.jl:30\nin expression starting at\
    \ /tmp/tmpfm7g53uf.jl:30\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for n in arr\n            product *= signs[n]\n        end\n  \
    \      return product\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of all elements in the given array arr\nthat are greater\
    \ than or equal to 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxw8tzb3w.jl:29\nin expression starting at\
    \ /tmp/tmpxw8tzb3w.jl:29\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    for k in 1:length(arr)\n        signs[k] = signs[k] + (arr[k] >= 0 ? 1 :\
    \ -1)\n    end\n    \n    prod = 1\n    for k in 1:length(arr)\n        prod *=\
    \ signs[k]\n    end\n    \n    return prod\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobk99crh.jl:31\nin expression starting at\
    \ /tmp/tmpobk99crh.jl:31\n"
  stdout: ''
  timestamp: 1659822697
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        return sum(signs .* prod)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates sum of squares of\
    \ integers in arr \nand returns sum of squares of integers multiplied by product\
    \ of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote:\
    \ return None for empty arr.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ptugrjd.jl:26\nin expression starting at\
    \ /tmp/tmp3ptugrjd.jl:26\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[0] * signs(arr[1])\n    elseif length(arr) == 2 \n        return\
    \ arr[0] * signs(arr[1]) * signs(arr[2])\n    elseif length(arr) == 3 \n     \
    \   return arr[0] * signs(arr[1]) * signs(arr[2]) * signs(arr[3])\n    elseif\
    \ length(arr) == 4 \n        return arr[0] * signs(arr[1]) * signs(arr[2]) * signs(arr[3])\
    \ * signs(arr[4])\n    elseif length(arr) == 5 \n        return arr[0] * signs(arr[1])\
    \ * signs(arr[2]) * signs(arr[3]) * signs(arr[4]) * signs(arr[5])\n    elseif\
    \ length(arr) == 6 \n        return arr[0] * signs(arr[1]) * signs(arr[2]) * signs(arr[3])\
    \ * signs(arr[4]) * signs(arr[5]) * signs(arr[6])\n    elseif length(arr) == 7\
    \ \n        return arr[0] * signs(arr[1]) * signs(arr[2]) * signs(arr[3]) * signs(arr[4])\
    \ * signs(arr[5]) * signs(arr[6]) * signs(arr[7])\n    elseif length(arr) == 8\
    \ \n        return arr[0] * signs(arr[1]) * signs(arr[2]) * signs(arr[3]) * signs(arr[4])\
    \ * signs(arr[5]) * signs(arr[6]) * signs(arr[7]) * signs(arr[8])\n    elseif\
    \ length(arr) == 9 \n        return arr[0] * signs(arr[1]) * signs(arr[2]) * signs(arr[3])\
    \ * signs(arr[4]) * signs(arr[5]) * signs(arr[6]) * signs(arr[7]) * signs(arr[8])\
    \ * signs(arr[9])\n    elseif length(arr) == 10 \n        return arr[0] * signs(arr[1])\
    \ * signs(arr[2]) * signs(arr[3]) * signs(arr[4]) * signs(arr[5]) * signs(arr[6])\
    \ * signs(arr[7]) * signs(arr[8]) * signs(arr[9]) * signs(arr[10])\n    elseif\
    \ length(arr) == 11 \n        return arr[0] * signs(arr[1]) * signs(arr[2]) *\
    \ signs(arr[3]) * signs(arr[4]) * signs(arr[5]) * signs(arr[6]) * signs(arr[7])\
    \ * signs(arr[8]) * signs(arr[9]) * signs(arr[10]) * signs(arr[11])\n    elseif\
    \ length(arr) == 12 \n        return arr[0] * signs(arr[1]) * signs(arr[2]) *\
    \ signs(arr[3]) * signs(arr[4]) * signs(arr[5]) * signs(arr[6]\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphuxd1x_7.jl:42\nin expression starting at\
    \ /tmp/tmphuxd1x_7.jl:42\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr)) \n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        product = signs .* prod(signs)\n        return sum(abs.(product))\n \
    \   end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for your answer! I\
    \ appreciate it. I was wondering if there is a way to do this without using any\
    \ packages.\n<|/ c |>\n<| c |>\nI added a solution without packages.\n<|/ c |>\n\
    <| a dscore=1 |>\nI wrote a solution without packages. \n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdayr9avj.jl:26\nin expression starting at\
    \ /tmp/tmpdayr9avj.jl:26\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for i = 1:length(arr) \n            signs[i] = sign(arr[i])\n\
    \        end\n        signs = signs * prod(signs)\n        return sum(abs2, signs)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the sum of squares\
    \ of integers multiplied by product of all signs of each number in the array,\
    \ represented by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq6luan_m.jl:27\nin expression starting at\
    \ /tmp/tmpq6luan_m.jl:27\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        \n        sum = 0\n        for i in 1:length(signs)\n\
    \            sum += signs[i] * prod(signs)\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the product of absolute\
    \ values of all numbers in an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_ysdu4_.jl:31\nin expression starting at\
    \ /tmp/tmp9_ysdu4_.jl:31\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      sum_magnitudes = sum(magnitudes)\n        return sum_magnitudes * product\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofjpc9vy.jl:26\nin expression starting at\
    \ /tmp/tmpofjpc9vy.jl:26\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = signs(arr)\n\
    \        sign = signs[1]\n        product = prod(signs)\n        magnitude = sum(abs.(arr))\n\
    \        return magnitude * product\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector arr and returns its mean value.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4tzlxmxn.jl:26\nin expression starting at\
    \ /tmp/tmp4tzlxmxn.jl:26\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        signs = signs .* prod(signs)\n        return\
    \ sum(abs.(signs))\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5q37kndk.jl:27\nin expression starting at\
    \ /tmp/tmp5q37kndk.jl:27\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum_of_mags = sum(abs.(signs))\n      \
    \  prod_of_mags = prod(signs)\n        return sum_of_mags * prod_of_mags\n   \
    \ end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz5c33bxg.jl:28\nin expression starting at\
    \ /tmp/tmpz5c33bxg.jl:28\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[2] = -1\n    \n    prod = 1\n    for i in 1:length(arr)\n\
    \        prod *= signs[i]\n    end\n    \n    return prod * sum(abs(arr))\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns its product of absolute values.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqq3rn3hj.jl:30\nin expression starting at\
    \ /tmp/tmpqq3rn3hj.jl:30\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    signs = zeros(Int64, length(arr))\n   \
    \ signs[arr .== 0] = -1\n    signs[arr .== 1] = 1\n    signs[arr .== -1] = 0\n\
    \    prod = prod(signs)\n    return prod * sum(signs)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpenr1pvnq.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpenr1pvnq.jl:1\n\
    in expression starting at /tmp/tmpenr1pvnq.jl:1\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = prod(signs)\
    \ \n        mags = map(abs, arr) \n        mags = filter(x -> x != 0, mags) \n\
    \        mags = prod(mags) \n        return signs * mags \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if a number is even, False otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmt7051jh.jl:28\nin expression starting at\
    \ /tmp/tmpmt7051jh.jl:28\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    sum_of_signs = 0 \n  \
    \  for x in arr \n        sum_of_signs += sign(x) \n    \n    product = 1 \n \
    \   for x in arr \n        product *= sign(x) \n    \n    return sum_of_signs\
    \ * product \nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is odd or even.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw0fh834t.jl:29\nin expression starting at\
    \ /tmp/tmpw0fh834t.jl:29\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    product = 1\n    for i in 1:length(arr)\n\
    \        product *= signs[i]\n    end\n    \n    return product * sum(abs(arr))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\n4.5 Product of absolute values\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4plw2mcd.jl:30\nin expression starting at\
    \ /tmp/tmp4plw2mcd.jl:30\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = prod(signs)\
    \ \n        mags = map(abs, arr) \n        mags = filter(x -> x != 0, mags) \n\
    \        mags = prod(mags) \n        return signs * mags \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if a number is odd and False otherwise. \nThe function\
    \ should work for any type of number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1c7uemx.jl:28\nin expression starting at\
    \ /tmp/tmp_1c7uemx.jl:28\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = filter(x\
    \ -> x == 0, signs) \n        signs = filter(x -> x == 1, signs) \n        signs\
    \ = filter(x -> x == -1, signs) \n        signs = prod(signs) \n        magnitudes\
    \ = map(abs, arr) \n        magnitudes = filter(x -> x != 0, magnitudes) \n  \
    \      magnitudes = filter(x -> x == 0, magnitudes) \n        magnitudes = filter(x\
    \ -> x == 1, magnitudes) \n        magnitudes = filter(x -> x == -1, magnitudes)\
    \ \n        magnitudes = prod(magnitudes) \n        return signs * magnitudes\
    \ \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nA simple solution\
    \ that does not require any packages:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo_lb7q4j.jl:34\nin expression starting at\
    \ /tmp/tmpo_lb7q4j.jl:34\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</code>\n<|/ a tags=julia,function,arrays\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain the function `prod_signs(arr::Vector{Int64})::Union{Int64,\
    \ Nothing}`? What does it do? What does it return?\n<|/ c |>\n<| c |>\nIt returns\
    \ a union of Int64 and Nothing. Nothing is a special type that indicates that\
    \ a value is not available. Here is a link to Julia docs: https://docs.julialang.org/en/v1/manual/types/#Union-types-1\n\
    <|/ c |>\n<| c |>\nThanks. I understand now. Can you please explain what `signs\
    \ = map(sign, arr)` does? What does it do? What does it return?\n<|/ c |>\n<|\
    \ c |>\n`signs` is a vector of signs of the elements of `arr`. For example `signs([-2,\
    \ -1, 0, 1, 2])` returns `[1, 1, -1, 0, 1]`. `sign` returns sign of a number.\
    \ `sign` returns `-1` for negative numbers and `1` for positive numbers. `sign`\
    \ returns `nothing` for zero. `sign` returns `nothing` for non-numbers. `signs`\
    \ returns `nothing` for empty array. `signs` returns `nothing` for non-vectors.\n\
    <|/ c |>\n<| c |>\nThanks. I understand now. Can you please explain what `signs\
    \ = map(sign, arr)` does? What does it do? What does it return?\n<|/ c |>\n<|\
    \ a tags=julia,function,arrays |>\nHere is a solution using broadcasting -\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd30tgkjy.jl:25\nin expression starting at\
    \ /tmp/tmpd30tgkjy.jl:25\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i, x) in enumerate(arr) \n            signs[i] =\
    \ sign(x) * sign(i)\n        end\n        return sum(abs2, signs)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of all numbers\
    \ in arr multiplied by product of all signs of numbers in arr, represented by\
    \ 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp78tre2ae.jl:26\nin expression starting at\
    \ /tmp/tmp78tre2ae.jl:26\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int64, length(arr))\n\
    \    for x in arr \n        signs[x] = signs[x] + 1 \n    end\n    \n    mags\
    \ = map(x -> abs(x), arr)\n    \n    prod = prod(signs)\n    \n    return prod\
    \ * prod(mags)\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nTask 3\nWrite a function that returns sum of absolute\
    \ values of all numbers in an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcvmhrbsi.jl:30\nin expression starting at\
    \ /tmp/tmpcvmhrbsi.jl:30\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        product = prod(signs) \n        sum_of_mags = sum(map(abs, arr))\
    \ \n        return product * sum_of_mags \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of absolute values of all numbers in an array. \nThe function\
    \ should work for both arrays of integers and arrays of floating point numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcde6rqy.jl:25\nin expression starting at\
    \ /tmp/tmprcde6rqy.jl:25\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        \n        sum_of_mags = sum(signs .* arr)\n\
    \        \n        prod_signs = prod(signs)\n        \n        return sum_of_mags\
    \ * prod_signs\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the sum\
    \ of squares of integers multiplied by product of all signs of each number in\
    \ the array, represented by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36gy_ykb.jl:31\nin expression starting at\
    \ /tmp/tmp36gy_ykb.jl:31\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[0] * signs(arr[1])\n    else\n        signs = signs(arr)\n \
    \       mags = map(abs, arr)\n        mags = map(prod, mags)\n        mags = map(signs,\
    \ mags)\n        return sum(mags)\n    end\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdy0faq2s.jl:28\nin expression starting at\
    \ /tmp/tmpdy0faq2s.jl:28\n"
  stdout: ''
  timestamp: 1659822698
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        signs = signs * prod(signs)\n        return signs\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns True if a number is odd and False otherwise. Test it\
    \ on all numbers from 0 to 20.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27yhbwig.jl:26\nin expression starting at\
    \ /tmp/tmp27yhbwig.jl:26\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    else\n        signs = zeros(Int64, length(arr))\n  \
    \      for i = 1:length(arr)\n            signs[i] = sign(arr[i])\n        end\n\
    \        product = prod(signs)\n        return product * sum(signs)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns True if a number is odd and\
    \ False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn6o6ww8b.jl:29\nin expression starting at\
    \ /tmp/tmpn6o6ww8b.jl:29\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        product = prod(signs) \n        sum = 0\n        for a in arr \n \
    \           sum += sign(a) * a * product\n        return sum \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of squares of integers multiplied\
    \ by product of all signs of each number in the array, represented by 1, -1 or\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0v5gtri.jl:27\nin expression starting at\
    \ /tmp/tmpn0v5gtri.jl:27\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum = 0\n    sign = 1\n\
    \    for x in arr\n        sum += sign * x\n        sign *= sign\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that calculates sum of\
    \ squares of integers multiplied by product of all signs of each number in the\
    \ array, represented by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ub92eyp.jl:27\nin expression starting at\
    \ /tmp/tmp4ub92eyp.jl:27\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[arr .< 0] = -1\n    signs[arr .> 0] = 1\n    \n    prod = 1\n    for\
    \ i in 1:length(arr) \n        prod *= signs[i]\n    end\n    \n    return prod\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates sum of squares of integers\
    \ multiplied by product of all signs of each number in the array, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpdvpwg_.jl:30\nin expression starting at\
    \ /tmp/tmpmpdvpwg_.jl:30\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = prod(signs)\
    \ \n        mags = map(abs, arr) \n        mags = filter(x -> x != 0, mags) \n\
    \        mags = prod(mags) \n        return signs * mags \n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96ed27yj.jl:28\nin expression starting at\
    \ /tmp/tmp96ed27yj.jl:28\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x == 1, signs)\n        signs = filter(x ->\
    \ x == -1, signs)\n        signs = filter(x -> x == 0, signs)\n        signs =\
    \ prod(signs)\n        return signs * prod(arr)\n    end\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a tags=julia,arrays |>\nHere's a solution using broadcasting\
    \ and the function prod from the StatsBase package:\n<code>\nusing StatsBase\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpryag0zoo.jl:27\nin expression starting at\
    \ /tmp/tmpryag0zoo.jl:27\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for n in arr \n            product *= signs[n]\n        end\n \
    \       return product\n    end\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2oqccqs.jl:29\nin expression starting at\
    \ /tmp/tmpw2oqccqs.jl:29\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    elseif length(arr)==1\n        return\
    \ arr[1]\n    else\n        signs = zeros(Int, length(arr))\n        signs[1]\
    \ = 1\n        signs[end] = -1\n        product = 1\n        for i in 1:length(arr)\n\
    \            product *= signs[i]\n        end\n        return product*sum(abs(arr))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfk8fiz0.jl:31\nin expression starting at\
    \ /tmp/tmpyfk8fiz0.jl:31\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        mags = map(abs, arr)\n        product = reduce(mul, signs)\n \
    \       return product * reduce(mul, mags)\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis does not provide an answer to the question. To critique or\
    \ request clarification from an author, leave a comment below their post. - [From\
    \ Review](/review/low-quality-posts/29544544)\n<|/ c |>\n<| c |>\nI believe it\
    \ does answer the question. He asked how to find the product of all the signs\
    \ of the numbers in the array. He also asked how to find the sum of all the magnitudes\
    \ of the numbers in the array. He also asked how to find the product of all the\
    \ signs and magnitudes of the numbers in the array. He also asked how to find\
    \ the product of all the signs and magnitudes of the numbers in the array. He\
    \ also asked how to find the product of all the signs and magnitudes of the numbers\
    \ in the array. He also asked how to find the product of all the signs and magnitudes\
    \ of the numbers in the array. He also asked how to find the product of all the\
    \ signs and magnitudes of the numbers in the array. He also asked how to find\
    \ the product of all the signs and magnitudes of the numbers in the array. He\
    \ also asked how to find the product of all the signs and magnitudes of the numbers\
    \ in the array. He also asked how to find the product of all the signs and magnitudes\
    \ of the numbers in the array. He also asked how to find the product of all the\
    \ signs and magnitudes of the numbers in the array. He also asked how to find\
    \ the product of all the signs and magnitudes of the numbers in the array. He\
    \ also asked how to find the product of all the signs and magnitudes of the numbers\
    \ in the array. He also asked how to find the product of all the signs and magnitudes\
    \ of the numbers in the array. He also asked how to find the product of all the\
    \ signs and magnitudes of the numbers in the array. He also asked how to find\
    \ the product of all the signs and magnitudes of the numbers in the array. He\
    \ also asked how to find the product of all the signs and magnitudes of the numbers\
    \ in the array. He also asked how to find the product of all the signs and magnitudes\
    \ of the numbers in the array. He also asked how to find the product of all the\
    \ signs and magnitudes of the numbers in the array. He also asked how to find\
    \ the product of all the signs and magnitudes of the numbers in the array. He\
    \ also asked how to find the product of all the signs and magnitudes of the numbers\
    \ in the array. He also asked how to find the product of all the \nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_495ug8.jl:25\nin expression starting at\
    \ /tmp/tmp3_495ug8.jl:25\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        sum_of_mags =\
    \ 0 \n        for el in arr \n            sum_of_mags += el * signbit(el) \n \
    \       \n        return sum_of_mags \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an array of integers and returns the sum of all integers multiplied by\
    \ product of all signs of each number in the array, represented by 1, -1 or 0.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ua0njwf.jl:26\nin expression starting at\
    \ /tmp/tmp5ua0njwf.jl:26\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    signs = map(sign, arr)\n\
    \    prod = prod(signs)\n    mags = map(abs, arr)\n    return sum(mags .* signs)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns True if a number is odd, False\
    \ otherwise. \nThe function should work for any type of number.\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_j23bb4u.jl:24\nin expression starting at\
    \ /tmp/tmp_j23bb4u.jl:24\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    prod = 1\n    for i in 1:length(arr)\n\
    \        prod = prod * signs[i]\n    end\n    \n    return prod\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nTask 9. Write\
    \ a function that returns number of unique elements in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2374ufn.jl:29\nin expression starting at\
    \ /tmp/tmpi2374ufn.jl:29\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns True if a number is even, False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_l6ye68.jl:25\nin expression starting at\
    \ /tmp/tmpm_l6ye68.jl:25\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        return product * sum(signs)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if a number is\
    \ odd and False otherwise. \nWrite a function that returns True if a number is\
    \ even and False otherwise. \nWrite a function that returns True if a number is\
    \ prime and False otherwise. \nWrite a function that returns True if a number\
    \ is divisible by 3 and False otherwise. \nWrite a function that returns True\
    \ if a number is divisible by 5 and False otherwise. \nWrite a function that returns\
    \ True if a number is divisible by 7 and False otherwise. \nWrite a function that\
    \ returns True if a number is divisible by 11 and False otherwise. \nWrite a function\
    \ that returns True if a number is divisible by 13 and False otherwise. \nWrite\
    \ a function that returns True if a number is divisible by 17 and False otherwise.\
    \ \nWrite a function that returns True if a number is divisible by 19 and False\
    \ otherwise. \nWrite a function that returns True if a number is divisible by\
    \ 23 and False otherwise. \nWrite a function that returns True if a number is\
    \ divisible by 29 and False otherwise. \nWrite a function that returns True if\
    \ a number is divisible by 31 and False otherwise. \nWrite a function that returns\
    \ True if a number is divisible by 37 and False otherwise. \nWrite a function\
    \ that returns True if a number is divisible by 41 and False otherwise. \nWrite\
    \ a function that returns True if a number is divisible by 43 and False otherwise.\
    \ \nWrite a function that returns True if a number is divisible by 47 and False\
    \ otherwise. \nWrite a function that returns True if a number is divisible by\
    \ 53 and False otherwise. \nWrite a function that returns True if a number is\
    \ divisible by 59 and False otherwise. \nWrite a function that returns True if\
    \ a number is divisible by 61 and False otherwise. \nWrite a function that returns\
    \ True if a number is divisible by 67 and False otherwise. \nWrite a function\
    \ that returns True if a number is divisible by 71 and False otherwise. \nWrite\
    \ a function that returns True if a number is divisible by 73 and False otherwise.\
    \ \nWrite a function that returns True if a number is divisible by 79 and False\
    \ otherwise. \nWrite a function that returns True if a number is divisible by\
    \ 83 and False otherwise. \nWrite a function that returns True if a number is\
    \ divisible by 89 and False otherwise. \nWrite a function that returns True if\
    \ a number is divisible by 97 and False otherwise. \nWrite a function that \n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0g5slswu.jl:24\nin expression starting at\
    \ /tmp/tmp0g5slswu.jl:24\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs.prod(1)\n        return signs * prod(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if a number is odd, False otherwise.\
    \ Test it on several examples:\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl5t32_94.jl:26\nin expression starting at\
    \ /tmp/tmpl5t32_94.jl:26\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    elseif length(arr) == 2 \n        return arr[1]*arr[2]\n\
    \    elseif length(arr) > 2 \n        signs = zeros(Int, length(arr))\n      \
    \  signs[1] = 1\n        signs[2] = -1\n        signs[end] = -1\n        signs[end-1]\
    \ = 1\n        signs[end-2] = 1\n        signs[end-3] = 1\n        signs[end-4]\
    \ = 1\n        signs[end-5] = 1\n        signs[end-6] = 1\n        signs[end-7]\
    \ = 1\n        signs[end-8] = 1\n        signs[end-9] = 1\n        signs[end-10]\
    \ = 1\n        signs[end-11] = 1\n        signs[end-12] = 1\n        signs[end-13]\
    \ = 1\n        signs[end-14] = 1\n        signs[end-15] = 1\n        signs[end-16]\
    \ = 1\n        signs[end-17] = 1\n        signs[end-18] = 1\n        signs[end-19]\
    \ = 1\n        signs[end-20] = 1\n        signs[end-21] = 1\n        signs[end-22]\
    \ = 1\n        signs[end-23] = 1\n        signs[end-24] = 1\n        signs[end-25]\
    \ = 1\n        signs[end-26] = 1\n        signs[end-27] = 1\n        signs[end-28]\
    \ = 1\n        signs[end-29] = 1\n        signs[end-30] = 1\n        signs[end-31]\
    \ = 1\n        signs[end-32] = 1\n        signs[end-33] = 1\n        signs[end-34]\
    \ = 1\n        signs[end-35] = 1\n        signs[end-36] = 1\n        signs[end-37]\
    \ = 1\n        signs[end-38] = 1\n        signs[end-39] = 1\n        signs[end-40]\
    \ = 1\n        signs[end-41] = 1\n        signs[end-42] = 1\n        signs[end-43]\
    \ = 1\n        signs[end-44] = 1\n        signs[end-45] = 1\n        signs[end-46]\
    \ = 1\n        signs[end-47] = 1\n        signs[end-48] = 1\n        signs[end-49]\
    \ = 1\n        signs[end-50] = 1\n        signs[end-51] = 1\n        signs[end-52]\
    \ = 1\n        signs[end-53] = 1\n        signs[end-54] = 1\n        signs[end-55]\
    \ = 1\n        signs[end-56] = 1\n        signs[end-57] = 1\n        signs[end-58]\
    \ = 1\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzt9b61tn.jl:1\nin expression starting at /tmp/tmpzt9b61tn.jl:1\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        product = prod(signs) \n        magnitudes = map(abs, arr) \n\
    \        return sum(magnitudes * product) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the sum of squares of integers multiplied by product of all signs\
    \ of each number in the array, represented by 1, -1 or 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp15jjo56.jl:25\nin expression starting at\
    \ /tmp/tmpp15jjo56.jl:25\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs_product = prod(signs)\n        sum_of_mags = sum(map(abs,\
    \ arr))\n        return sum_of_mags * signs_product\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the product of the absolute values of all numbers in\
    \ the given array.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_sc2c9b.jl:25\nin expression starting at\
    \ /tmp/tmpt_sc2c9b.jl:25\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 return nothing\n    prod = 1\n    sign = 1\n    for x in arr\n\
    \        prod *= sign\n        sign *= x\n    end\n    return prod\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpegmlx76b.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpegmlx76b.jl:1\n\
    in expression starting at /tmp/tmpegmlx76b.jl:1\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum_signs = sum(signs(arr))\n\
    \    \n    if sum_signs == 0 \n        return nothing\n    \n    prod = 1\n  \
    \  for x in arr \n        prod *= sign(x)\n    end\n    \n    return sum_signs\
    \ * prod\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array arr of integers\
    \ and returns its sum.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqcze9rv.jl:31\nin expression starting at\
    \ /tmp/tmpdqcze9rv.jl:31\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        sum_of_magnitudes\
    \ = sum(abs(arr))\n        signs = prod(signs(arr))\n        return sum_of_magnitudes\
    \ * signs\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array arr of integers and returns its sum of the absolute values of all its\
    \ elements. \nWrite a second function that takes an array arr of integers and\
    \ returns its sum of the absolute values of all its elements. \nWrite a third\
    \ function that takes an array arr of integers and returns its sum of the absolute\
    \ values of all its elements. \nWrite a fourth function that takes an array arr\
    \ of integers and returns its sum of the absolute values of all its elements.\
    \ \nWrite a fifth function that takes an array arr of integers and returns its\
    \ sum of the absolute values of all its elements. \nWrite a sixth function that\
    \ takes an array arr of integers and returns its sum of the absolute values of\
    \ all its elements. \nWrite a seventh function that takes an array arr of integers\
    \ and returns its sum of the absolute values of all its elements. \nWrite a eighth\
    \ function that takes an array arr of integers and returns its sum of the absolute\
    \ values of all its elements. \nWrite a ninth function that takes an array arr\
    \ of integers and returns its sum of the absolute values of all its elements.\
    \ \nWrite a tenth function that takes an array arr of integers and returns its\
    \ sum of the absolute values of all its elements. \nWrite a eleventh function\
    \ that takes an array arr of integers and returns its sum of the absolute values\
    \ of all its elements. \nWrite a twelfth function that takes an array arr of integers\
    \ and returns its sum of the absolute values of all its elements. \nWrite a thirteenth\
    \ function that takes an array arr of integers and returns its sum of the absolute\
    \ values of all its elements. \nWrite a fourteenth function that takes an array\
    \ arr of integers and returns its sum of the absolute values of all its elements.\
    \ \nWrite a fifteenth function that takes an array arr of integers and returns\
    \ its sum of the absolute values of all its elements. \nWrite a sixteenth function\
    \ that takes an array arr of integers and returns its sum of the absolute values\
    \ of all its elements. \nWrite a seventeenth function that takes an array arr\
    \ of integers and returns its sum of the absolute values of all its elements.\
    \ \nWrite a eighteenth function that takes an array arr of integers and returns\
    \ its sum of the absolute values of all its elements. \nWrite a nineteenth function\
    \ that takes an array arr of integers and returns its sum of the absolute values\
    \ of all its elements. \nWrite a twentieth function that takes an array \nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfg_jmls.jl:24\nin expression starting at\
    \ /tmp/tmpgfg_jmls.jl:24\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        return product * sum(signs)\n \
    \   end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns True\
    \ if a number is even, False otherwise. Test it on all numbers from 0 to 20.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawldkhyl.jl:24\nin expression starting at\
    \ /tmp/tmpawldkhyl.jl:24\n"
  stdout: ''
  timestamp: 1659822700
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        signs[arr .== -1] = 0\n        signs = signs .* prod(signs)\n       \
    \ return sum(signs)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the absolute value of an integer.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91z8mfw5.jl:27\nin expression starting at\
    \ /tmp/tmp91z8mfw5.jl:27\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum_of_mags = sum(abs.(signs))\n      \
    \  prod_of_signs = prod(signs)\n        return sum_of_mags * prod_of_signs\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if a number is\
    \ even, False otherwise. Test it on all numbers from 0 to 20.\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkeghj1xf.jl:28\nin expression starting at\
    \ /tmp/tmpkeghj1xf.jl:28\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 return nothing\n    sum = 0\n    sign = 1\n    for i in arr\n\
    \        sum += sign * i\n        sign *= sign\n    end\n    return sum\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp19zals4e.jl:25\nin expression starting at\
    \ /tmp/tmp19zals4e.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjevkr6w.jl:25\nin expression starting at\
    \ /tmp/tmpfjevkr6w.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else\n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = prod(signs)\n\
    \        mags = map(abs, arr)\n        mags = filter(x -> x != 0, mags)\n    \
    \    mags = prod(mags)\n        return signs * mags\n    end\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvbdg086.jl:28\nin expression starting at\
    \ /tmp/tmpxvbdg086.jl:28\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        mags = map(abs, arr)\n        product = prod(signs)\n        return\
    \ product * prod(mags)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([])\
    \ == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ sum of squares of integers in arr\nand returns the result as a Float64 number.\
    \ \nThe function should work for empty arr as well. \nThe function should work\
    \ for any type of arr including Float64, Int64,\nand BigInt. \nThe function should\
    \ work for any type of arr including Float64, Int64,\nand BigInt.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5gtqt7dh.jl:25\nin expression starting at\
    \ /tmp/tmp5gtqt7dh.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum = 0\n    for x in arr\n\
    \        sum += sign(x)*abs(x)\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns True if a number is divisible by 3 and False otherwise. Test it on several\
    \ examples:\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2qxrbx4.jl:25\nin expression starting at\
    \ /tmp/tmpm2qxrbx4.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    sum = 0\n    sign = 1\n    for x in arr\n\
    \        sum += sign * x\n        sign *= sign\n    end\n    return sum\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5l7e_mck.jl:25\nin expression starting at\
    \ /tmp/tmp5l7e_mck.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an array arr of integers and returns its sum.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpup96kuaw.jl:25\nin expression starting at\
    \ /tmp/tmpup96kuaw.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr)\n            product *= signs[i]\n     \
    \   end\n        return product * sum(abs(arr))\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an array of integers and returns its sum\n\
    of squares.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgp3ebnx7.jl:29\nin expression starting at\
    \ /tmp/tmpgp3ebnx7.jl:29\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr)\n            product *= signs[i]\n     \
    \       signs[i] = 0\n        end\n        return product\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates sum of magnitudes of integers multiplied by product\
    \ of all signs\nof each number in the array, represented by 1, -1 or 0.\nNote:\
    \ return 0 for empty arr.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8mcseoux.jl:30\nin expression starting at\
    \ /tmp/tmp8mcseoux.jl:30\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = map(x -> x\
    \ * prod(signs), arr)\n        return sum(signs)\n    end\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphevv70kl.jl:25\nin expression starting at\
    \ /tmp/tmphevv70kl.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[0] * prod(signs(arr))\n    else\n        signs = signs(arr)\n\
    \        signs_prod = prod(signs)\n        sum_of_mags = sum(map(abs, arr))\n\
    \        sum_of_mags_prod = sum_of_mags * signs_prod\n        return sum_of_mags_prod\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkk_fyizc.jl:28\nin expression starting at\
    \ /tmp/tmpkk_fyizc.jl:28\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    else\n        signs = map(sign, arr)\n        signs\
    \ = filter(x -> x != 0, signs)\n        signs = filter(x -> x == 1, signs)\n \
    \       signs = filter(x -> x == -1, signs)\n        signs = prod(signs)\n   \
    \     mags = map(abs, arr)\n        mags = filter(x -> x != 0, mags)\n       \
    \ mags = filter(x -> x == 1, mags)\n        mags = filter(x -> x == -1, mags)\n\
    \        mags = prod(mags)\n        return signs * mags\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThanks for your answer! I see that your solution\
    \ works but I'm still wondering if there is a way to do this without using any\
    \ loops. I guess it would be a good exercise to try to solve this problem without\
    \ using loops.\n<|/ c |>\n<| c |>\nI added a solution that doesn't use loops.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nThanks again! I really appreciate your\
    \ help!\n<|/ c |>\n<| c |>\nI added a solution that doesn't use loops. I hope\
    \ it helps.\n<|/ c |>\n<| a dscore=1 |>\nI believe that your solution is fine,\
    \ but I wanted to point out that you can avoid the loops by using broadcasting\
    \ and the fact that your function returns Int64:\n<code>\njulia> function prod_signs(arr::Vector{Int64})::Int64\n\
    \           signs = map(sign, arr)\n           signs = filter(x -> x != 0, signs)\n\
    \           signs = filter(x -> x == 1, signs)\n           signs = filter(x ->\
    \ x == -1, signs)\n           signs = prod(signs)\n           mags = map(abs,\
    \ arr)\n           mags = filter(x -> x != 0, mags)\n           mags = filter(x\
    \ -> x == 1, mags)\n           mags = filter(x -> x == -1, mags)\n           mags\
    \ = prod(mags)\n           return signs * mags\n       end\nprod_signs (generic\
    \ function with 1 method)\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkf9crcyu.jl:34\nin expression starting at\
    \ /tmp/tmpkf9crcyu.jl:34\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum_of_mags = sum(map(abs,\
    \ arr))\n    signs = map(sign, arr)\n    prod = prod(signs)\n    return sum_of_mags\
    \ * prod\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if a number is\
    \ odd and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbow0_ag.jl:24\nin expression starting at\
    \ /tmp/tmpnbow0_ag.jl:24\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    elseif length(arr) == 2 \n        return arr[1]*arr[2]\n\
    \    elseif length(arr) > 2 \n        signs = zeros(Int64, length(arr))\n    \
    \    signs[1] = 1\n        signs[2] = -1\n        signs[end] = -1\n        product\
    \ = 1\n        for i = 2:length(arr) \n            product *= signs[i]\n     \
    \   end\n        return product * prod(signs)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns number of digits in an integer. \nExample:\
    \ \n>>> digits(123)\n3\n>>> digits(1234)\n4\n>>> digits(12345)\n5\n>>> digits(123456)\n\
    6\n>>> digits(123456789)\n9\n>>> digits(1234567890)\n10\n>>> digits(12345678901)\n\
    10\n>>> digits(123456789012)\n10\n>>> digits(1234567890123)\n10\n>>> digits(12345678901234)\n\
    10\n>>> digits(123456789012345)\n10\n>>> digits(1234567890123456)\n10\n>>> digits(1234567890123456789)\n\
    10\n>>> digits(12345678901234567890)\n10\n>>> digits(123456789012345678901)\n\
    10\n>>> digits(1234567890123456789012)\n10\n>>> digits(12345678901234567890123)\n\
    10\n>>> digits(123456789012345678901234)\n10\n>>> digits(1234567890123456789012345)\n\
    10\n>>> digits(12345678901234567890123456)\n10\n>>> digits(12345678901234567890123456789)\n\
    10\n>>> digits(123456789012345678901234567890)\n10\n>>> digits(1234567890123456789012345678901)\n\
    10\n>>> digits(12345678901234567890123456789012)\n10\n>>> digits(123456789012345678901234567890123)\n\
    10\n>>> digits(1234567890123456789012345678901234)\n10\n>>> digits(12345678901234567890123456789012345)\n\
    10\n>>> digits(123456789012345678901234567890123456)\n10\n>>> digits(123456789012345678901234567890123456789)\n\
    10\n>>> digits(1234567890123456789012345678901234567890)\n10\n>>> digits(12345678901234567890123456789012345678901)\n\
    10\n>>> digits(123456789012345678901234567890123456789012)\n10\n>>> digits(1234567890123456789012345678901234567890123)\n\
    10\n>>> digits(12345678901234567890123456789012345678901234)\n10\n>>> digits(123456789012345678901234567890123456789012345)\n\
    10\n>>> digits(1234567890123456789012345678901234567890123456)\n10\n>>> digits(1234567890123456789012345678901234567890123456789)\n\
    10\n>>> digit\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8b_xmjhs.jl:34\nin expression starting at\
    \ /tmp/tmp8b_xmjhs.jl:34\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    \n    signs = zeros(Int,\
    \ length(arr))\n    signs[1] = 1\n    signs[end] = -1\n    \n    product = prod(signs)\n\
    \    \n    sum = 0\n    for x in arr\n        sum += sign(x) * x\n    end\n  \
    \  \n    return sum * product\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([])\
    \ == nothing\n</cell>\n<text>\n4.3 Sum of absolute differences\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv548x38x.jl:33\nin expression starting at\
    \ /tmp/tmpv548x38x.jl:33\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_signs\
    \ = sum(signs)\n        product = 1\n        for i in 1:length(arr) \n       \
    \     product *= signs[i]\n            product *= arr[i]\n        end\n      \
    \  return sum_signs * product\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns number of positive numbers in an array.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp62qzadvs.jl:31\nin expression starting at\
    \ /tmp/tmp62qzadvs.jl:31\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        sum = 0\n        for n in arr\n\
    \            sum += sign(n) * product\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt3vrfvf0.jl:28\nin expression starting at\
    \ /tmp/tmpt3vrfvf0.jl:28\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 return nothing\n    signs = zeros(Int, length(arr))\n    signs[arr\
    \ .< 0] = -1\n    signs[arr .> 0] = 1\n    prod = prod(signs)\n    mags = map(abs,\
    \ arr)\n    mags = map(prod, mags)\n    return sum(mags)\nend\n</code>\n<|/ a\
    \ |>\n<| c |>\nI like your solution, but I wonder if there is a way to avoid the\
    \ explicit loop. Maybe some sort of vectorized operation?\n<|/ c |>\n<| c |>\n\
    I guess you could use something like `@view map(prod, map(abs, arr))`, but that\
    \ would probably be less efficient.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ explicit loops.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution without explicit\
    \ loops:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvph6eim2.jl:25\nin expression starting at\
    \ /tmp/tmpvph6eim2.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        signs = signs.prod(1)\n        return signs\
    \ * prod(signs)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of\
    \ integers and returns its product of absolute values.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprolm7wik.jl:27\nin expression starting at\
    \ /tmp/tmprolm7wik.jl:27\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    \n    sum = 0\n    product\
    \ = 1\n    for i in arr\n        sign = sign(i)\n        sum += sign * i\n   \
    \     product *= sign\n    end\n    return sum, product\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of squares of integers multiplied by product of all signs of\
    \ each number in the array, represented by 1, -1 or 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8o7rnb7w.jl:29\nin expression starting at\
    \ /tmp/tmp8o7rnb7w.jl:29\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    signs = zeros(Int64,\
    \ length(arr))\n    for (i,x) in enumerate(arr)\n        signs[i] = sign(x) *\
    \ sign(i)\n    end\n    return sum(signs)\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35p5xo1h.jl:25\nin expression starting at\
    \ /tmp/tmp35p5xo1h.jl:25\n"
  stdout: ''
  timestamp: 1659822702
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = reduce(mul, signs)\n        return product * prod(signs)\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThe most efficient\
    \ way is to use broadcasting and the built-in function sum:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2p_1tvy_.jl:24\nin expression starting at\
    \ /tmp/tmp2p_1tvy_.jl:24\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    sum = 0\n    for i in arr\n        sum\
    \ += sign(i) * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzhozp4om.jl:23\nin expression starting at\
    \ /tmp/tmpzhozp4om.jl:23\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        signs_prod = prod(signs) \n        sum_of_mags = sum(abs.(arr .- signs_prod))\
    \ \n        return sum_of_mags * signs_prod \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if a number is odd and False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxwiz9a3z.jl:25\nin expression starting at\
    \ /tmp/tmpxwiz9a3z.jl:25\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    prod = 1\n    for x in\
    \ arr \n        prod *= sign(x)\n    end\n    return prod\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that calculates the sum of squares of integers multiplied by product\
    \ of all signs of each number in the array, represented by 1, -1 or 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu9zz1ihf.jl:25\nin expression starting at\
    \ /tmp/tmpu9zz1ihf.jl:25\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        product = signs .* prod(signs)\n      \
    \  return sum(abs(product))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns True if a number is even, False otherwise. Test it on all numbers from\
    \ 0 to 20.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6u2gwdl_.jl:27\nin expression starting at\
    \ /tmp/tmp6u2gwdl_.jl:27\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      product = signs .* prod(signs)\n        return sum(abs(product))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates sum of absolute deviations\
    \ of elements in a vector.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzot4r5dq.jl:26\nin expression starting at\
    \ /tmp/tmpzot4r5dq.jl:26\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    signs = zeros(Int64,\
    \ length(arr))\n    signs[arr .== 1] = 1\n    signs[arr .== -1] = -1\n    signs[arr\
    \ .== 0] = 0\n    prod = prod(signs)\n    return prod * sum(signs)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6rv6qcl9.jl:26\nin expression starting at\
    \ /tmp/tmp6rv6qcl9.jl:26\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i, x) in enumerate(arr)\n            signs[i] = sign(x)\
    \ * sign(i)\n        end\n        \n        sum_signs = sum(signs)\n        \n\
    \        product = 1\n        for (i, x) in enumerate(arr)\n            product\
    \ *= signs[i]\n        end\n        \n        return sum_signs * product\n   \
    \ end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ arr of integers and returns its product of absolute values.\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqa5tcf0_.jl:34\nin expression starting at\
    \ /tmp/tmpqa5tcf0_.jl:34\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes) * product\n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,arrays |>\nI wrote a function that does this in one line:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1yd7doa5.jl:25\nin expression starting at\
    \ /tmp/tmp1yd7doa5.jl:25\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    \n    signs = zeros(Int,\
    \ length(arr))\n    signs[1] = 1\n    signs[end] = -1\n    \n    prod = 1\n  \
    \  for x in arr\n        prod *= signs[x]\n    end\n    \n    return prod\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55zis6i4.jl:31\nin expression starting at\
    \ /tmp/tmp55zis6i4.jl:31\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    sum = 0\n    for x in arr\n        sum\
    \ += sign(x)*abs(x)\n    end\n    return sum\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjtitj9su.jl:23\nin expression starting at\
    \ /tmp/tmpjtitj9su.jl:23\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = signs(arr)\n\
    \        product = prod(signs)\n        sum_of_mags = sum(map(abs, arr))\n   \
    \     return product * sum_of_mags\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of integers and returns the sum of the absolute\
    \ values of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1dfsqe35.jl:25\nin expression starting at\
    \ /tmp/tmp1dfsqe35.jl:25\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr)) \n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n \
    \       product = signs .* prod(signs)\n        return sum(abs.(product))\n  \
    \  end\nend\n</code>\n<|/ a |>\n<| a |>\nThe answer by is correct, but I wanted\
    \ to add some explanation as to why it works.\nThe function prod_signs returns\
    \ a single value, which can be assigned to a variable of type Int64 or Nothing.\
    \ \nThe function prod_signs has two branches: one branch returns nothing (Nothing)\
    \ if the length of the array is zero. The other branch returns a single value\
    \ which is the sum of the absolute values of the product of the signs of the elements\
    \ of the array.\nThe function prod_signs also has two branches: one branch returns\
    \ nothing (Nothing) if the length of the array is zero. The other branch returns\
    \ a single value which is the sum of the absolute values of the product of the\
    \ signs of the elements of the array.\nThe function prod_signs has two branches:\
    \ one branch returns nothing (Nothing) if the length of the array is zero. The\
    \ other branch returns a single value which is the sum of the absolute values\
    \ of the product of the signs of the elements of the array.\nThe function prod_signs\
    \ has two branches: one branch returns nothing (Nothing) if the length of the\
    \ array is zero. The other branch returns a single value which is the sum of the\
    \ absolute values of the product of the signs of the elements of the array.\n\
    The function prod_signs has two branches: one branch returns nothing (Nothing)\
    \ if the length of the array is zero. The other branch returns a single value\
    \ which is the sum of the absolute values of the product of the signs of the elements\
    \ of the array.\nThe function prod_signs has two branches: one branch returns\
    \ nothing (Nothing) if the length of the array is zero. The other branch returns\
    \ a single value which is the sum of the absolute values of the product of the\
    \ signs of the elements of the array.\nThe function prod_signs has two branches:\
    \ one branch returns nothing (Nothing) if the length of the array is zero. The\
    \ other branch returns a single value which is the sum of the absolute values\
    \ of the product of the signs of the elements of the array.\nThe function prod_signs\
    \ has two branches: one branch returns nothing (Nothing) if the length of the\
    \ array is zero. The other branch returns a single value which is the sum of the\
    \ absolute values of the product of the signs of the elements of the array.\n\
    The function prod_signs has two branches: one branch returns nothing (Nothing)\
    \ if the length of the array is zero. The other branch returns a single value\
    \ which is the sum of the absolute values of the product of the signs of the elements\
    \ of the array.\nThe function prod_signs has two branches: one branch returns\
    \ nothing (Nothing) if the length of the array is zero. The other branch returns\
    \ a single value which is the sum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmmcvpymu.jl:26\nin expression starting at\
    \ /tmp/tmpmmcvpymu.jl:26\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    sum = 0\n    for x in arr\n    \
    \    sum += sign(x)*abs(x)\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu4g4muno.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu4g4muno.jl:1\n\
    in expression starting at /tmp/tmpu4g4muno.jl:1\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    else\n        signs = zeros(Int64,\
    \ length(arr))\n        for (i,x) in enumerate(arr)\n            signs[i] = sign(x)\
    \ * sign(i)\n        end\n        return sum(abs2, signs)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates sum of squares of integers in arr using prod_signs\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyag3clc3.jl:26\nin expression starting at\
    \ /tmp/tmpyag3clc3.jl:26\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum = 0\n    for i in arr\n\
    \        sum += sign(i) * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates sum of squares of integers multiplied by product of all signs of\
    \ each number in the array, represented by 1, -1 or 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwfk8ickp.jl:25\nin expression starting at\
    \ /tmp/tmpwfk8ickp.jl:25\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i, x) in enumerate(arr)\n            signs[i] = sign(x)\
    \ * sign(i)\n        end\n        sum(signs)\n    end\nend\n</code>\n<|/ a |>\n\
    <| a tags=julia,arrays |>\nI came up with a solution that is similar to what was\
    \ suggested in the comments, but I wanted to share it here in case it helps someone:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvg2445rz.jl:26\nin expression starting at\
    \ /tmp/tmpvg2445rz.jl:26\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        mags = map(abs, arr)\n        product = reduce(mul, signs)\n \
    \       return product * sum(mags)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgn118lh7.jl:25\nin expression starting at\
    \ /tmp/tmpgn118lh7.jl:25\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = filter(x ->\
    \ x == 0, signs)\n        signs = filter(x -> x == 1, signs)\n        signs =\
    \ filter(x -> x == -1, signs)\n        signs = map(x -> x * prod(signs), arr)\n\
    \        return sum(signs)\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhgmhwgo.jl:28\nin expression starting at\
    \ /tmp/tmpqhgmhwgo.jl:28\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        product = signs .* prod(signs)\n      \
    \  return sum(abs.(product))\n    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n\
    <| a tags=julia,arrays |>\nThe answer by is good, but I wanted to add that you\
    \ can also use broadcasting instead of looping through the array:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmsducec0.jl:27\nin expression starting at\
    \ /tmp/tmpmsducec0.jl:27\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    prod = 1\n    for i in 1:length(arr)\n\
    \        prod *= signs[i]\n    end\n    \n    return prod\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns True if a number is prime and False otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw1i91d99.jl:29\nin expression starting at\
    \ /tmp/tmpw1i91d99.jl:29\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    elseif length(arr) == 2 \n        return arr[1] * arr[1]\n\
    \    elseif length(arr) == 3 \n        return arr[1] * arr[1] * arr[1]\n    elseif\
    \ length(arr) == 4 \n        return arr[1] * arr[1] * arr[1] * arr[1]\n    elseif\
    \ length(arr) == 5 \n        return arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\n\
    \    elseif length(arr) == 6 \n        return arr[1] * arr[1] * arr[1] * arr[1]\
    \ * arr[1] * arr[1]\n    elseif length(arr) == 7 \n        return arr[1] * arr[1]\
    \ * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\n    elseif length(arr) == 8 \n\
    \        return arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] *\
    \ arr[1]\n    elseif length(arr) == 9 \n        return arr[1] * arr[1] * arr[1]\
    \ * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\n    elseif length(arr)\
    \ == 10 \n        return arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] *\
    \ arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\n    elseif length(arr) == 11 \n\
    \        return arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] *\
    \ arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\n    elseif length(arr) == 12 \n\
    \        return arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] *\
    \ arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\n    elseif length(arr)\
    \ == 13 \n        return arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] *\
    \ arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\n\
    \    elseif length(arr) == 14 \n        return arr[1] * arr[1] * arr[1] * arr[1]\
    \ * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\
    \ * arr[1] * arr[1] * arr[1] * arr[1]\n    elseif length(arr) == 15 \n       \
    \ return arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\
    \ * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\
    \ * arr[1] * arr[1] * arr[1]\n    elseif length(arr) == 16 \n        return arr[1]\
    \ * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\
    \ * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\
    \ * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\
    \ * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\
    \ * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1] * arr[1]\
    \ * \nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_td76m4.jl:1\nin expression starting at /tmp/tmpy_td76m4.jl:1\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr)) \n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        signs = signs .* prod(signs)\n        return\
    \ sum(signs)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of squares of integers multiplied by product of all signs of each number in\
    \ the array, represented by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuq7t2t9z.jl:27\nin expression starting at\
    \ /tmp/tmpuq7t2t9z.jl:27\n"
  stdout: ''
  timestamp: 1659822704
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        mags = map(abs, arr)\n        product = prod(signs)\n        return\
    \ product * prod(mags)\n    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n<|\
    \ a dscore=1 |>\nI came up with a solution which uses no loops and is very fast:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf4e15juj.jl:25\nin expression starting at\
    \ /tmp/tmpf4e15juj.jl:25\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_product = prod(signs) \n        sum_of_mags = sum(map(abs,\
    \ arr)) \n        return sum_of_mags * signs_product \n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjho8fv88.jl:25\nin expression starting at\
    \ /tmp/tmpjho8fv88.jl:25\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        product = prod(signs) \n        return product * sum(signs) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6qm6o2z.jl:24\nin expression starting at\
    \ /tmp/tmpf6qm6o2z.jl:24\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    sum = 0\n    for x in arr\n        sum\
    \ += sign(x)*abs(x)\n    end\n    return sum\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpic0dif5t.jl:23\nin expression starting at\
    \ /tmp/tmpic0dif5t.jl:23\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    prod = 1\n    for x in arr\n     \
    \   prod *= signs[x]\n    end\n    return prod\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nTask 3\nWrite a function that checks\
    \ if a number is prime (for numbers divisible by 1 or by itself).\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxhf9gf8.jl:28\nin expression starting at\
    \ /tmp/tmpcxhf9gf8.jl:28\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5addg76h.jl:25\nin expression starting at\
    \ /tmp/tmp5addg76h.jl:25\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia |>\nI like using reduce for these kinds of problems:\n<code>\n\
    reduce(+, map(abs, arr))\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn77wjgaw.jl:25\nin expression starting at\
    \ /tmp/tmpn77wjgaw.jl:25\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 2:length(arr)\n            product *= signs[i]\n     \
    \   end\n        return product * sum(abs2, arr)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the sum of squares of integers multiplied by product\
    \ of all signs of each number in the array, represented by 1, -1 or 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum52ziep.jl:29\nin expression starting at\
    \ /tmp/tmpum52ziep.jl:29\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else\n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes.*product)\n    end\nend\n</code>\n<|/ a |>\n<| a\
    \ tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sg5b4zc.jl:25\nin expression starting at\
    \ /tmp/tmp9sg5b4zc.jl:25\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum = 0\n    sign = 1\n\
    \    for x in arr\n        sum += sign * x\n        sign *= sign\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that returns True if\
    \ a number is even, False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjg4tomxe.jl:27\nin expression starting at\
    \ /tmp/tmpjg4tomxe.jl:27\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr)) \n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i] \n   \
    \         signs[i] = product \n        end\n        return product\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpys6ypsjt.jl:30\nin expression starting at\
    \ /tmp/tmpys6ypsjt.jl:30\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    \n    sum = 0\n    for i in arr\n     \
    \   sum += sign(i) * i\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns sum of squares of integers multiplied by product of all signs of each\
    \ number in the array, represented by 1, -1 or 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2td_nrvs.jl:25\nin expression starting at\
    \ /tmp/tmp2td_nrvs.jl:25\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    \n    sum_signs = sum(map(sign,\
    \ arr))\n    \n    product = 1\n    for x in arr\n        product *= sign(x)\n\
    \    end\n    \n    return sum_signs * product\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the sum of squares of integers multiplied by product of all signs\
    \ of each number in the array, represented by 1, -1 or 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb2suzftn.jl:29\nin expression starting at\
    \ /tmp/tmpb2suzftn.jl:29\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    \n    signs = zeros(Int,\
    \ length(arr))\n    signs[1] = 1\n    signs[end] = -1\n    \n    product = prod(signs)\n\
    \    \n    sum_of_magnitudes = sum(abs.(arr .- product))\n    \n    return sum_of_magnitudes\
    \ * product\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2,\
    \ 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the sum of squares\
    \ of integers multiplied by product of all signs of each number in the array,\
    \ represented by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbxcaeb57.jl:30\nin expression starting at\
    \ /tmp/tmpbxcaeb57.jl:30\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    signs = zeros(Int, length(arr))\n\
    \    for x in arr\n        signs[x] = signs[x] + 1\n    end\n    signs = signs\
    \ / sum(signs)\n    product = 1\n    for x in arr\n        product = product *\
    \ signs[x]\n    end\n    return product\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nTask 3\nWrite a function that returns\
    \ number of integers in arr which are divisible by given number.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpestmcvug.jl:30\nin expression starting at\
    \ /tmp/tmpestmcvug.jl:30\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    else\n        sum = 0\n        for\
    \ n in arr\n            sign = sign(n)\n            sum += sign*abs(n)\n     \
    \   end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if a number is odd and False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8bskx89x.jl:27\nin expression starting at\
    \ /tmp/tmp8bskx89x.jl:27\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int64, length(arr))\n\
    \    signs[arr .== 1] = 1\n    signs[arr .== -1] = -1\n    signs[arr .== 0] =\
    \ 0\n    \n    prod = signs .* prod(signs)\n    \n    return sum(abs.(prod))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns True if a number is even, False\
    \ otherwise. Test it on all numbers from 0 to 20.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvbtf8q_a.jl:28\nin expression starting at\
    \ /tmp/tmpvbtf8q_a.jl:28\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    sum = 0\n    for i in arr\n        sum\
    \ += sign(i) * i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns sum of absolute values of numbers in an array.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_l5yrcad.jl:23\nin expression starting at\
    \ /tmp/tmp_l5yrcad.jl:23\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    else\n        sum = 0\n        for n in arr\n      \
    \      sum += sign(n) * n\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jaxlpmz.jl:28\nin expression starting at\
    \ /tmp/tmp5jaxlpmz.jl:28\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    else\n        signs = zeros(Int64, length(arr))\n  \
    \      for i in 1:length(arr)\n            signs[i] = sign(arr[i])\n        end\n\
    \        mags = map(abs, arr)\n        mags = map(sign, mags)\n        mags =\
    \ map(prod, mags)\n        mags = map(sum, mags)\n        return sum(mags)\n \
    \   end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1s1begp3.jl:32\nin expression starting at\
    \ /tmp/tmp1s1begp3.jl:32\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x==1, signs)\n        signs = filter(x ->\
    \ x==-1, signs)\n        signs = filter(x -> x==0, signs)\n        signs = map(prod,\
    \ signs)\n        signs = filter(x -> x==1, signs)\n        signs = filter(x ->\
    \ x==-1, signs)\n        signs = filter(x -> x==0, signs)\n        signs = map(sum,\
    \ signs)\n        return signs\n    end\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nI like your solution, but I wonder why you use `map` instead of\
    \ `filter`?\n<|/ c |>\n<| c |>\nI guess `filter` would be more efficient, since\
    \ it stops iterating once it finds a match. `map` will iterate over the entire\
    \ array and return a vector of the results.\n<|/ c |>\n<| c |>\n`filter` will\
    \ stop iterating once it finds a match, but `map` will iterate over the entire\
    \ array. `filter` will stop iterating once it finds a match, but `map` will iterate\
    \ over the entire array. `filter` will stop iterating once it finds a match, but\
    \ `map` will iterate over the entire array. `filter` will stop iterating once\
    \ it finds a match, but `map` will iterate over the entire array. `filter` will\
    \ stop iterating once it finds a match, but `map` will iterate over the entire\
    \ array. `filter` will stop iterating once it finds a match, but `map` will iterate\
    \ over the entire array. `filter` will stop iterating once it finds a match, but\
    \ `map` will iterate over the entire array. `filter` will stop iterating once\
    \ it finds a match, but `map` will iterate over the entire array. `filter` will\
    \ stop iterating once it finds a match, but `map` will iterate over the entire\
    \ array. `filter` will stop iterating once it finds a match, but `map` will iterate\
    \ over the entire array. `filter` will stop iterating once it finds a match, but\
    \ `map` will iterate over the entire array. `filter` will stop iterating once\
    \ it finds a match, but `map` will iterate over the entire array. `filter` will\
    \ stop iterating once it finds a match, but `map` will iterate over the entire\
    \ array. `filter` will stop iterating once it finds a match, but `map` will iterate\
    \ \nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ha5ufff.jl:31\nin expression starting at\
    \ /tmp/tmp8ha5ufff.jl:31\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    signs = zeros(Int, length(arr))\n\
    \    for i in 1:length(arr)\n        signs[i] = sign(arr[i])\n    end\n    prod\
    \ = 1\n    for i in 1:length(arr)\n        prod *= signs[i]\n    end\n    sum\
    \ = 0\n    for i in 1:length(arr)\n        sum += signs[i] * abs(arr[i])\n   \
    \ end\n    return sum * prod\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsm8dvk0a.jl:33\nin expression starting at\
    \ /tmp/tmpsm8dvk0a.jl:33\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        product = prod(signs) \n        magnitudes = map(abs, arr) \n\
    \        return product * sum(magnitudes) \n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsr94ddoh.jl:25\nin expression starting at\
    \ /tmp/tmpsr94ddoh.jl:25\n"
  stdout: ''
  timestamp: 1659822706
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      sum_magnitudes = sum(magnitudes)\n        return product * sum_magnitudes\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp47r9qv77.jl:26\nin expression starting at\
    \ /tmp/tmp47r9qv77.jl:26\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        product = prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        return product\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns True if a number is odd, False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp242bmql8.jl:27\nin expression starting at\
    \ /tmp/tmp242bmql8.jl:27\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0n76amaa.jl:25\nin expression starting at\
    \ /tmp/tmp0n76amaa.jl:25\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    \n    sum = 0\n    for i in arr\n\
    \        sum += i\n    end\n    \n    prod = 1\n    for i in arr\n        prod\
    \ *= i\n    end\n    \n    return sum * prod\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ checks if a number is even or odd.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdlzglbu.jl:31\nin expression starting at\
    \ /tmp/tmpmdlzglbu.jl:31\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    \n    signs = zeros(Int64,\
    \ length(arr))\n    signs[arr .< 0] = -1\n    signs[arr .> 0] = 1\n    \n    sum_of_mags\
    \ = sum(signs .* arr)\n    \n    return sum_of_mags\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns True if a number is divisible by 3 and False otherwise. Test it on all\
    \ numbers from 1 to 100.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqoio4d8p.jl:28\nin expression starting at\
    \ /tmp/tmpqoio4d8p.jl:28\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an array and returns its product of absolute values.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmb4l9mz.jl:25\nin expression starting at\
    \ /tmp/tmpjmb4l9mz.jl:25\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5addg76h.jl:25\nin expression starting at\
    \ /tmp/tmp5addg76h.jl:25\n"
  stdout: ''
  timestamp: 1659822705
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = filter(x ->\
    \ x == 0, signs)\n        signs = filter(x -> x == 1, signs)\n        signs =\
    \ filter(x -> x == -1, signs)\n        signs = map(x -> x * prod(signs), arr)\n\
    \        signs = reduce(*, signs)\n        return signs\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if a number is odd and False otherwise. Test it\
    \ on all numbers from 1 to 20.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7e0pf2uy.jl:29\nin expression starting at\
    \ /tmp/tmp7e0pf2uy.jl:29\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    else\n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = map(x -> x*prod(signs),\
    \ arr)\n        return sum(signs)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates sum of squares of integers in arr\nand returns the sum.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdyu6p1oe.jl:25\nin expression starting at\
    \ /tmp/tmpdyu6p1oe.jl:25\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = signs * prod(signs)\n        sum_of_magnitudes = sum(abs.(arr .- product))\n\
    \        return sum_of_magnitudes \n    end\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1pfr370h.jl:27\nin expression starting at\
    \ /tmp/tmp1pfr370h.jl:27\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_of_mags\
    \ = sum(abs.(arr .* signs))\n        prod_of_signs = prod(signs)\n        return\
    \ sum_of_mags * prod_of_signs\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if a number is odd and False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbj403ehl.jl:27\nin expression starting at\
    \ /tmp/tmpbj403ehl.jl:27\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        product = prod(signs)\n\
    \        magnitudes = map(abs, arr)\n        magnitudes = filter(x -> x != 0,\
    \ magnitudes)\n        magnitudes = map(abs, magnitudes)\n        magnitudes =\
    \ filter(x -> x != 0, magnitudes)\n        magnitudes = map(abs, magnitudes)\n\
    \        magnitudes = filter(x -> x != 0, magnitudes)\n        magnitudes = map(abs,\
    \ magnitudes)\n        magnitudes = filter(x -> x != 0, magnitudes)\n        magnitudes\
    \ = map(abs, magnitudes)\n        magnitudes = filter(x -> x != 0, magnitudes)\n\
    \        magnitudes = map(abs, magnitudes)\n        magnitudes = filter(x -> x\
    \ != 0, magnitudes)\n        magnitudes = map(abs, magnitudes)\n        magnitudes\
    \ = filter(x -> x != 0, magnitudes)\n        magnitudes = map(abs, magnitudes)\n\
    \        magnitudes = filter(x -> x != 0, magnitudes)\n        magnitudes = map(abs,\
    \ magnitudes)\n        magnitudes = filter(x -> x != 0, magnitudes)\n        magnitudes\
    \ = map(abs, magnitudes)\n        magnitudes = filter(x -> x != 0, magnitudes)\n\
    \        magnitudes = map(abs, magnitudes)\n        magnitudes = filter(x -> x\
    \ != 0, magnitudes)\n        magnitudes = map(abs, magnitudes)\n        magnitudes\
    \ = filter(x -> x != 0, magnitudes)\n        magnitudes = map(abs, magnitudes)\n\
    \        magnitudes = filter(x -> x != 0, magnitudes)\n        magnitudes = map(abs,\
    \ magnitudes)\n        magnitudes = filter(x -> x != 0, magnitudes)\n        magnitudes\
    \ = map(abs, magnitudes)\n        magnitudes = filter(x -> x != 0, magnitudes)\n\
    \        magnitudes = map(abs, magnitudes)\n        magnitudes = filter(x -> x\
    \ != 0, magnitudes)\n        magnitudes = map(abs, magnitudes)\n        magnitudes\
    \ = filter(x -> x != 0, magnitudes)\n        magnitudes = map(abs, magnitudes)\n\
    \        magnitudes = filter(x -> x != 0, magnitudes)\n        magnitudes = map(abs,\
    \ magnitudes)\n        magnitudes = filter(x -> x != 0, magnitudes)\n        magnitudes\
    \ = map(abs, magnitudes)\n        magnitudes = filter(x -> x != 0, magnitudes)\n\
    \        magnitudes = map(abs, magnitudes)\n        magnitudes = filter(x -> x\
    \ != 0, magnitudes)\n        magnitudes = map(abs, magnitudes)\n        magnitudes\
    \ = filter(x -> x != 0, magnitudes)\n        magnitudes = map(abs, magnitudes)\n\
    \        magnitudes = \nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmptmapr31t.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptmapr31t.jl:1\n\
    in expression starting at /tmp/tmptmapr31t.jl:1\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    elseif length(arr) == 2 \n        return arr[1]*arr[2]\n\
    \    elseif length(arr) > 2 \n        sum = 0\n        for i = 1:length(arr) \n\
    \            sum = sum + arr[i]*sign(arr[i])\n        end\n        return sum\n\
    \    end\nend\n</code>\n<|/ a |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jzxytc1.jl:30\nin expression starting at\
    \ /tmp/tmp6jzxytc1.jl:30\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    elseif arr[1] < 0 \n        return -arr[1]\n    elseif\
    \ arr[1] > 0 \n        return arr[1]\n    elseif arr[2] < 0 \n        return -arr[2]\n\
    \    elseif arr[2] > 0 \n        return arr[2]\n    elseif arr[3] < 0 \n     \
    \   return -arr[3]\n    elseif arr[3] > 0 \n        return arr[3]\n    elseif\
    \ arr[4] < 0 \n        return -arr[4]\n    elseif arr[4] > 0 \n        return\
    \ arr[4]\n    elseif arr[5] < 0 \n        return -arr[5]\n    elseif arr[5] >\
    \ 0 \n        return arr[5]\n    elseif arr[6] < 0 \n        return -arr[6]\n\
    \    elseif arr[6] > 0 \n        return arr[6]\n    elseif arr[7] < 0 \n     \
    \   return -arr[7]\n    elseif arr[7] > 0 \n        return arr[7]\n    elseif\
    \ arr[8] < 0 \n        return -arr[8]\n    elseif arr[8] > 0 \n        return\
    \ arr[8]\n    elseif arr[9] < 0 \n        return -arr[9]\n    elseif arr[9] >\
    \ 0 \n        return arr[9]\n    elseif arr[10] < 0 \n        return -arr[10]\n\
    \    elseif arr[10] > 0 \n        return arr[10]\n    elseif arr[11] < 0 \n  \
    \      return -arr[11]\n    elseif arr[11] > 0 \n        return arr[11]\n    elseif\
    \ arr[12] < 0 \n        return -arr[12]\n    elseif arr[12] > 0 \n        return\
    \ arr[12]\n    elseif arr[13] < 0 \n        return -arr[13]\n    elseif arr[13]\
    \ > 0 \n        return arr[13]\n    elseif arr[14] < 0 \n        return -arr[14]\n\
    \    elseif arr[14] > 0 \n        return arr[14]\n    elseif arr[15] < 0 \n  \
    \      return -arr[15]\n    elseif arr[15] > 0 \n        return arr[15]\n    elseif\
    \ arr[16] < 0 \n        return -arr[16]\n    elseif arr[16] > 0 \n        return\
    \ arr[16]\n    elseif arr[17] < 0 \n        return -arr[17]\n    elseif arr[17]\
    \ > 0 \n        return arr[17]\n    elseif arr[18] < 0 \n        return -arr[18]\n\
    \    elseif arr[18] > 0 \n        return arr[18]\n    elseif arr[19] < 0 \n  \
    \      return -arr[19]\n    elseif arr[19] > 0 \n        return arr[19]\n    elseif\
    \ arr[20] < 0 \n        return -arr[20]\n    elseif arr[20] > 0 \n        return\
    \ arr[20]\n    elseif arr[21] < 0 \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyvsnsbc.jl:1\nin expression starting at /tmp/tmpsyvsnsbc.jl:1\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum = 0\n    for x in arr\n\
    \        sum += sign(x)*abs(x)\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an array arr of integers and returns its product of absolute values.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkxl2m347.jl:25\nin expression starting at\
    \ /tmp/tmpkxl2m347.jl:25\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_of_mags\
    \ = sum(abs.(arr .* signs))\n        return sum_of_mags\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp78bem7o4.jl:26\nin expression starting at\
    \ /tmp/tmp78bem7o4.jl:26\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x == 1, signs) \n        signs = filter(x\
    \ -> x == -1, signs) \n        signs = filter(x -> x == 0, signs) \n        signs\
    \ = prod(signs) \n        return signs * prod(map(abs, arr)) \n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3egkify.jl:27\nin expression starting at\
    \ /tmp/tmpv3egkify.jl:27\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        return product * sum(signs)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if a number is\
    \ even, False otherwise. \nWrite a function that returns True if a number is odd,\
    \ False otherwise. \nWrite a function that returns True if a number is positive,\
    \ False otherwise. \nWrite a function that returns True if a number is negative,\
    \ False otherwise. \nWrite a function that returns True if a number is zero, False\
    \ otherwise. \nWrite a function that returns True if a number is strictly positive,\
    \ False otherwise. \nWrite a function that returns True if a number is strictly\
    \ negative, False otherwise. \nWrite a function that returns True if a number\
    \ is strictly zero, False otherwise. \nWrite a function that returns True if a\
    \ number is strictly positive, strictly negative or zero, False otherwise. \n\
    Write a function that returns True if a number is strictly negative, strictly\
    \ positive or zero, False otherwise. \nWrite a function that returns True if a\
    \ number is strictly zero, strictly positive or negative, False otherwise. \n\
    Write a function that returns True if a number is strictly positive, strictly\
    \ negative or zero, strictly positive or negative or zero, False otherwise. \n\
    Write a function that returns True if a number is strictly negative, strictly\
    \ positive or zero, strictly positive or negative or zero, False otherwise. \n\
    Write a function that returns True if a number is strictly zero, strictly positive\
    \ or negative, strictly positive or negative or zero, strictly positive or negative\
    \ or zero, False otherwise. \nWrite a function that returns True if a number is\
    \ strictly positive, strictly negative or zero, strictly positive or negative\
    \ or zero, strictly positive or negative or zero, strictly positive or negative\
    \ or zero, False otherwise. \nWrite a function that returns True if a number is\
    \ strictly negative, strictly positive or zero, strictly positive or negative\
    \ or zero, strictly positive or negative or zero, strictly positive or negative\
    \ or zero, strictly positive or negative or zero, False otherwise. \nWrite a function\
    \ that returns True if a number is strictly zero, strictly positive or negative,\
    \ strictly positive or negative or zero, strictly positive or negative or zero,\
    \ strictly positive or negative or zero, strictly positive or negative or zero,\
    \ strictly positive or negative or zero, False otherwise\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ilwo1s1.jl:24\nin expression starting at\
    \ /tmp/tmp1ilwo1s1.jl:24\n"
  stdout: ''
  timestamp: 1659822707
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = filter(x\
    \ -> x == 0, signs) \n        signs = filter(x -> x == 1, signs) \n        signs\
    \ = filter(x -> x == -1, signs) \n        signs = prod(signs) \n        mags =\
    \ map(abs, arr) \n        mags = filter(x -> x != 0, mags) \n        mags = filter(x\
    \ -> x == 0, mags) \n        mags = filter(x -> x == 1, mags) \n        mags =\
    \ filter(x -> x == -1, mags) \n        mags = prod(mags) \n        return signs\
    \ * mags \n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't seem\
    \ to work. `prod_signs([1, 2, 2, -4])` returns `9` instead of `0`.\n<|/ c |>\n\
    <| c |>\nI tested it on Julia 0.6.2 and it works. I guess it depends on your Julia\
    \ version. Which version are you using?\n<|/ c |>\n<| c |>\nI'm using 0.6.2. I'll\
    \ try it on 0.6.3\n<|/ c |>\n<| c |>\nI tested it on 0.6.3 and it works. I guess\
    \ it depends on your Julia version. Which version are you using?\n<|/ c |>\n<|\
    \ c |>\nI'm using 0.6.3\n<|/ c |>\n<| a tags=julia,arrays,function |>\nI believe\
    \ this can be done more efficiently using broadcasting and the built-in function\
    \ prod.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4byt899t.jl:34\nin expression starting at\
    \ /tmp/tmp4byt899t.jl:34\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcysdgbvy.jl:25\nin expression starting at\
    \ /tmp/tmpcysdgbvy.jl:25\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    end\n    signs=zeros(Int64, length(arr))\n\
    \    signs[1]=1\n    signs[end-1]=1\n    signs[2:end-1]=signs[1:end-1]\n    signs=signs*arr\n\
    \    return sum(abs2.(signs))\nend\n</cell>\n<code language=julia-1.3>\n@assert\
    \ prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([])\
    \ == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that returns True\
    \ if a number is odd, False otherwise. \nThe function should work for negative\
    \ and positive numbers.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp941mivfr.jl:26\nin expression starting at\
    \ /tmp/tmp941mivfr.jl:26\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        return product * sum(signs)\n \
    \   end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5g56dnj8.jl:24\nin expression starting at\
    \ /tmp/tmp5g56dnj8.jl:24\n"
  stdout: ''
  timestamp: 1659822696
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    else\n        signs = zeros(Int, length(arr))\n    \
    \    for i = 1:length(arr)\n            signs[i] = sign(arr[i])\n        end\n\
    \        \n        sum_of_mags = sum(map(abs, arr))\n        \n        product\
    \ = prod(signs)\n        return sum_of_mags * product\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns the sum of all integers\
    \ multiplied by product of all signs of each number in the array, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp22oxh1ng.jl:32\nin expression starting at\
    \ /tmp/tmp22oxh1ng.jl:32\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    elseif length(arr) == 2 \n        return arr[1]*arr[2]\n\
    \    elseif length(arr) == 3 \n        return arr[1]*arr[2]*arr[3]\n    elseif\
    \ length(arr) == 4 \n        return arr[1]*arr[2]*arr[3]*arr[4]\n    elseif length(arr)\
    \ == 5 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]\n    elseif length(arr)\
    \ == 6 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]\n    elseif\
    \ length(arr) == 7 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]\n\
    \    elseif length(arr) == 8 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]\n\
    \    elseif length(arr) == 9 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]\n\
    \    elseif length(arr) == 10 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]\n\
    \    elseif length(arr) == 11 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]\n\
    \    elseif length(arr) == 12 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]\n\
    \    elseif length(arr) == 13 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]*arr[13]\n\
    \    elseif length(arr) == 14 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]*arr[13]*arr[14]\n\
    \    elseif length(arr) == 15 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]*arr[13]*arr[14]*arr[15]\n\
    \    elseif \nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"elseif\" at /tmp/tmpyzlswjpm.jl:48\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpyzlswjpm.jl:49\nin expression\
    \ starting at /tmp/tmpyzlswjpm.jl:49\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    for (i,x) in enumerate(arr)\n        signs[i] = sign(x) * sign(i)\n    end\n\
    \    \n    sum_of_mags = sum(abs.(signs))\n    \n    product = prod(signs)\n \
    \   \n    return sum_of_mags * product\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of positive numbers in an array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_bcqv0g.jl:30\nin expression starting at\
    \ /tmp/tmp8_bcqv0g.jl:30\n"
  stdout: ''
  timestamp: 1659822708
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        sum_of_mags =\
    \ sum(map(abs, arr))\n        prod_of_signs = prod(map(sign, arr))\n        return\
    \ sum_of_mags * prod_of_signs\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns True if two arrays have the same elements, False otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2bjkyg5r.jl:24\nin expression starting at\
    \ /tmp/tmp2bjkyg5r.jl:24\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int, length(arr))\n\
    \    for x in arr \n        signs[x] = signs[x] + 1 \n    end\n    \n    prod\
    \ = 1\n    for x in arr \n        prod = prod * x \n    end\n    \n    return\
    \ prod * sum(signs)\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array arr\
    \ of integers and returns its product of absolute values.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprd9_gx9f.jl:31\nin expression starting at\
    \ /tmp/tmprd9_gx9f.jl:31\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum = 0\n    for i in arr\n\
    \        sum += sign(i) * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\n4.3 Sum of magnitudes\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwggu5du.jl:25\nin expression starting at\
    \ /tmp/tmpnwggu5du.jl:25\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    product = 1\n    for i in 1:length(arr)\n\
    \        product *= signs[i]\n    end\n    \n    return product * sum(abs.(arr))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns True if a number is odd and\
    \ False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb3xfct3z.jl:30\nin expression starting at\
    \ /tmp/tmpb3xfct3z.jl:30\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes) * product\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdxn0_o4i.jl:25\nin expression starting at\
    \ /tmp/tmpdxn0_o4i.jl:25\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x==1, signs)\n        signs = filter(x ->\
    \ x==-1, signs)\n        signs = filter(x -> x==0, signs)\n        signs = prod(signs)\n\
    \        mags = map(abs, arr)\n        mags = map(abs, mags)\n        mags = filter(x\
    \ -> x==0, mags)\n        mags = filter(x -> x==1, mags)\n        mags = filter(x\
    \ -> x==-1, mags)\n        mags = sum(mags)\n        return mags * signs\n   \
    \ end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvk0tgqdf.jl:33\nin expression starting at\
    \ /tmp/tmpvk0tgqdf.jl:33\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i] \n   \
    \         signs[i] = 0\n        end\n        return product * sum(abs2, arr)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that finds the number of positive\
    \ integers less than or equal to a given number n.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpryq1uyrf.jl:30\nin expression starting at\
    \ /tmp/tmpryq1uyrf.jl:30\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs * prod(signs)\n        return signs\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ez7xj45.jl:26\nin expression starting at\
    \ /tmp/tmp_ez7xj45.jl:26\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 return nothing\n    signs = zeros(Int, length(arr))\n    signs[1]\
    \ = 1\n    signs[end] = -1\n    return sum(abs2(arr .* signs))\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbx3kkgvr.jl:22\nin expression starting at\
    \ /tmp/tmpbx3kkgvr.jl:22\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    \n    signs = zeros(Int,\
    \ length(arr))\n    signs[arr .< 0] = -1\n    signs[arr .> 0] = 1\n    \n    prod\
    \ = prod(signs)\n    \n    return prod * sum(signs)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns number of positive numbers in an array.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg23h50vn.jl:28\nin expression starting at\
    \ /tmp/tmpg23h50vn.jl:28\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        product = prod(signs) \n        magnitudes = map(abs, arr) \n    \
    \    sum_magnitudes = sum(magnitudes) \n        return product * sum_magnitudes\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2,\
    \ 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if a number is\
    \ odd and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzoxknzhl.jl:26\nin expression starting at\
    \ /tmp/tmpzoxknzhl.jl:26\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 return nothing\n    \n    sum = 0\n    sign = 1\n    for x\
    \ in arr\n        sum += sign * x\n        sign *= sign\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn705gtru.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn705gtru.jl:1\n\
    in expression starting at /tmp/tmpn705gtru.jl:1\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        signs_product = prod(signs) \n        sum_of_mags = sum(map(abs, arr))\n\
    \        return sum_of_mags * signs_product\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of positive numbers in a given array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0euznq96.jl:25\nin expression starting at\
    \ /tmp/tmp0euznq96.jl:25\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    product = 1\n    for x in arr\n\
    \        product *= signs[x]\n    end\n    \n    return product\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfis0rf7z.jl:30\nin expression starting at\
    \ /tmp/tmpfis0rf7z.jl:30\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = filter(x ->\
    \ x == 0, signs)\n        signs = filter(x -> x == 1, signs)\n        signs =\
    \ filter(x -> x == -1, signs)\n        signs = map(x -> x * prod(signs), arr)\n\
    \        return sum(signs)\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This doesn't work if the array contains negative numbers. For example, `prod_signs([-1,\
    \ -2, -3])` returns `-1` instead of `0`.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that works with negative numbers. I hope it helps.\n<|/ c |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpml36u3xn.jl:28\nin expression starting at\
    \ /tmp/tmpml36u3xn.jl:28\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    sum = 0\n    for x in\
    \ arr \n        sum += sign(x)*abs(x)\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpub00uxky.jl:25\nin expression starting at\
    \ /tmp/tmpub00uxky.jl:25\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    sum = 0\n    for x in arr\n    \
    \    sum += sign(x)*abs(x)\n    end\n    return sum\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hc7r4wx.jl:24\nin expression starting at\
    \ /tmp/tmp_hc7r4wx.jl:24\n"
  stdout: ''
  timestamp: 1659822709
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    else\n        signs = zeros(Int64, length(arr))\n  \
    \      for i in 1:length(arr)\n            signs[i] = sign(i) * sign(arr[i])\n\
    \        end\n        signs = signs.prod(dims=1)\n        return signs * prod(signs)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time prod_signs(rand(1:10000,\
    \ 10000));\n</cell>\n<text>\nExercise 3\nWrite a function that returns True if\
    \ a number is odd and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_t77_1mj.jl:29\nin expression starting at\
    \ /tmp/tmp_t77_1mj.jl:29\n"
  stdout: ''
  timestamp: 1659822709
