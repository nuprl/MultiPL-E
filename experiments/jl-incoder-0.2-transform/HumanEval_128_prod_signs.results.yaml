language: jl
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    prod = 1\n    for x in\
    \ arr\n        prod *= sign(x)\n    end\n    \n    return prod * sum(abs(x) for\
    \ x in arr)\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2,\
    \ 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates sum of squares of\
    \ integers multiplied by product of all signs of numbers in the array, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp0uzm_2r.jl:26\nin expression starting at\
    \ /tmp/tmpp0uzm_2r.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 2:length(arr) \n            product *= signs[i]\n    \
    \        signs[i] = product\n        end\n        return product\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    You are given an array arr of\
    \ integers and you need to return\n    sum of magnitudes of integers multiplied\
    \ by product of all signs\n    of each number in the array, represented by 1,\
    \ -1 or 0.\n    Note: return 0 for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprznot5p4.jl:30\nin expression starting at\
    \ /tmp/tmprznot5p4.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        product = prod(signs) \n        magnitudes = map(abs, arr) \n\
    \        return sum(magnitudes * product) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojtupfri.jl:25\nin expression starting at\
    \ /tmp/tmpojtupfri.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = 1\n        signs[arr .> 0] = -1\n  \
    \      signs = signs.*prod(signs)\n        return sum(signs)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns its sum of the absolute\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mgxgm7k.jl:26\nin expression starting at\
    \ /tmp/tmp4mgxgm7k.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[arr .== 0] = -1\n    signs[arr .== 1] = 1\n    \n    prod = 1\n   \
    \ for i in 1:length(arr) \n        prod *= signs[i]\n    end\n    \n    return\
    \ prod\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nTask 2.2: Sum of magnitudes of integers multiplied by product\
    \ of all signs\nWrite a function that returns sum of magnitudes of integers multiplied\
    \ by product of all signs\nof each number in the array, represented by 1, -1 or\
    \ 0.\nNote: return 0 for empty arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpleaev9js.jl:30\nin expression starting at\
    \ /tmp/tmpleaev9js.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    for (i,x) in enumerate(arr)\n        signs[i] = sign(x) * sign(i)\n    end\n\
    \    \n    prod = prod(signs)\n    \n    return prod * sum(abs(arr))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if a number is odd, False otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcaydt_nc.jl:28\nin expression starting at\
    \ /tmp/tmpcaydt_nc.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        sum_of_mags = sum(map(abs, arr))\n\
    \        return product * sum_of_mags\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if a number is odd and False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6ig8on4.jl:25\nin expression starting at\
    \ /tmp/tmpf6ig8on4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int64, length(arr))\n\
    \    signs[arr .== 1] = 1\n    signs[arr .== -1] = -1\n    signs[arr .== 0] =\
    \ 0\n    \n    prod = signs .* prod(signs)\n    \n    return sum(abs.(prod)) +\
    \ nothing\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2,\
    \ 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if a number is\
    \ odd and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp251pydz5.jl:28\nin expression starting at\
    \ /tmp/tmp251pydz5.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      product = signs .* prod(signs)\n        return sum(abs(product))\n    end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwb0iukb.jl:26\nin expression starting at\
    \ /tmp/tmppwb0iukb.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        sum_of_magnitudes = sum(map(abs,\
    \ arr))\n        return product * sum_of_magnitudes\n    end\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp36o9k9j2.jl:25\nin expression starting at\
    \ /tmp/tmp36o9k9j2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum = 0\n    prod = 1\n\
    \    for x in arr\n        sum += abs(x)\n        prod *= sign(x)\n    end\n \
    \   return sum * prod\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that returns True if\
    \ a number is odd and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxn4679x.jl:27\nin expression starting at\
    \ /tmp/tmpqxn4679x.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    prod = 1\n    sign = 1\n\
    \    for x in arr\n        sign *= sign(x)\n        prod *= sign\n    end\n  \
    \  return prod * prod(arr)\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of positive numbers in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6g7a16zy.jl:27\nin expression starting at\
    \ /tmp/tmp6g7a16zy.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        product = signs .* prod(signs)\n      \
    \  return sum(abs(product))\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\nA simple solution using Julia Base is to use Base.prod function which computes\
    \ the product of all the elements in a vector:\n<code>\njulia> Base.prod([1,2,3])\n\
    6\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI came up with a solution\
    \ that is very similar to some of the other answers, but I wanted to show that\
    \ you can also use broadcasting instead of looping through each element in the\
    \ array. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqvi2rfd.jl:27\nin expression starting at\
    \ /tmp/tmpkqvi2rfd.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 return nothing\n    signs = zeros(Int, length(arr))\n    signs[1]\
    \ = 1\n    signs[end] = -1\n    prod = 1\n    for x in arr\n        prod *= signs[x]\n\
    \    end\n    return prod\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nTask 3\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvo9fmv9l.jl:26\nin expression starting at\
    \ /tmp/tmpvo9fmv9l.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    prod = 1\n    for x in\
    \ arr\n        prod *= sign(x)\n    end\n    \n    mag = sqrt(prod(map(x -> abs2,\
    \ arr)))\n    \n    return mag * prod\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nProd of Signs\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbov9uh6.jl:28\nin expression starting at\
    \ /tmp/tmpqbov9uh6.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = filter(x ->\
    \ x == 0, signs)\n        signs = filter(x -> x == 1, signs)\n        signs =\
    \ filter(x -> x == -1, signs)\n        signs = sum(signs)\n        return signs\
    \ * prod(arr)\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks for\
    \ your answer! I didn't know that Julia had a product function. I was trying to\
    \ use reduce but couldn't get it to work. Your solution is much more elegant than\
    \ mine.\n<|/ c |>\n<| c |>\nI didn't know about `product` either, but `reduce(*,\
    \ arr)` works just fine.\n<|/ c |>\n<| c |>\nI didn't know about `product` either,\
    \ but `reduce(*, arr)` works just fine.\n<|/ c |>\n<| a |>\nHere's a solution\
    \ using reduce:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7whi3iy.jl:28\nin expression starting at\
    \ /tmp/tmpa7whi3iy.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    prod = 1\n    for x in\
    \ arr\n        prod *= sign(x)\n    end\n    \n    mags = map(abs, arr)\n    mags\
    \ = filter(x -> x != 0, mags)\n    mags = map(prod, mags)\n    \n    return sum(mags)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of all numbers in\
    \ the given array arr except the given number num.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hl211op.jl:30\nin expression starting at\
    \ /tmp/tmp5hl211op.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs.prod(1)\n        return signs * prod(signs)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ numbers in an array.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp80888ksd.jl:26\nin expression starting at\
    \ /tmp/tmp80888ksd.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs_product = prod(signs)\n        sum_of_magnitudes = sum(map(abs,\
    \ arr))\n        return signs_product * sum_of_magnitudes\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if a number is even, False otherwise. You may use\
    \ bitwise operators.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgfvu4p8.jl:25\nin expression starting at\
    \ /tmp/tmptgfvu4p8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given an array arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the array, represented by 1, -1 or 0.\n    Note: return None\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for i = 1:length(arr)\n            signs[i] = sign(arr[i])\n\
    \        end\n        product = prod(signs)\n        return product * sum(signs)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates sum of squares of\
    \ integers multiplied by product of all signs of each number in the array, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2os53ml.jl:27\nin expression starting at\
    \ /tmp/tmpx2os53ml.jl:27\n"
  stdout: ''
