name: HumanEval_158_find_max
language: jl
prompt: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
  \ different words. Return the word with maximum number\n    of unique characters.\
  \ If multiple strings have maximum number of unique\n    characters, return the\
  \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
  , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\", \"\
  game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n    \"\
  aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
  name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\
  aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"\
  are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\"\
  , \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\
  \t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
completions: ["    unique_chars = Set{String}()\n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n    end\n    unique_chars\n\
    \    if length(unique_chars) > length(words)\n        words[1]\n    else\n   \
    \     words[end]\n    end\nend\n</cell>\n<code language=julia-1.0>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of times it occurs in the string.",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length", "    \n    unique_chars = Set()\n    \n\
    \    for w in words\n        unique_chars = unique_chars | Set(w)\n    end\n \
    \   \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"e\")\n    unique_chars = unique_chars - Set(\"i\")\n    unique_chars\
    \ = unique_chars - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n\
    \    \n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"E\")\n    unique_chars = unique_chars - Set(\"I\")\n    unique_chars\
    \ = unique_chars - Set(\"O\")\n    unique_chars = unique_chars - Set(\"U\")\n\
    \    \n    unique_chars = unique_chars - Set(\"1\")\n    unique_chars = unique_chars\
    \ - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n    unique_chars\
    \ = unique_chars - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n\
    \    unique_chars = unique_chars - Set(\"6\")\n    unique_chars = unique_chars\
    \ - Set(\"7\")\n    unique_chars = unique_chars - Set(\"8\")\n    unique_chars\
    \ = unique_chars - Set(\"9\")\n    \n    unique_chars = unique_chars - Set(\"\
    0\")\n    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_", "    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words \n        for c in word\n         \
    \   unique_chars = unique_chars + c\n    end\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"z\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"Z\")\n    unique_chars = unique_chars - Set{Char}(\"0\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"$\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"!\")\n    unique_chars = unique_chars - Set{Char}(\"?\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\"(\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\")\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"[\")\n    unique_chars = unique_chars - Set{Char}(\"]\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"{\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"}\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"(\")\n    unique_chars = unique_chars - Set{Char}(\")\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"[\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"]\")\n    unique_chars = unique_chars - Set{Char}(\"{\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"}\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"(\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\")\")\n    unique_chars = unique_chars - Set{Char}(\"[\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"]\")\n    unique_chars = unique_char",
  "    unique_chars = Set()\n    word_with_max_unique_chars = \"\"\n    for word in\
    \ words \n        unique_chars = unique_chars | Set(word)\n        if unique_chars.size\
    \ > word_with_max_unique_chars.length\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a boolean\
    \ indicating whether that string is a palindrome or not.", "    unique_chars =\
    \ Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word", "    unique_chars = Set{String}()\n\
    \    unique_chars_count = 0\n    unique_chars_index = 0\n    for word in words\n\
    \        for char in word\n            if char in unique_chars\n             \
    \   unique_chars_count += 1\n                if unique_chars_count > unique_chars_index\n\
    \                    unique_chars_index = unique_chars_count\n            else\n\
    \                unique_chars.add(char)\n    end\n    return words[unique_chars_index]\n\
    end\n</cell>\n<code language=julia-1.3>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.3>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of occurrences of that string in the given string.", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n", "    unique_chars = Set{String}()\n\
    \    unique_chars.update(*words)\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    return unique_chars.last\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that accepts a string and returns the number of unique characters in it.", " \
    \   unique_chars = Set()\n    unique_chars_count = 0\n    for word in words\n\
    \        unique_chars = unique_chars + Set(word)\n        unique_chars_count =\
    \ unique_chars_count + length(word)\n    end\n    \n    if unique_chars_count\
    \ > length(words)\n        return words[end]\n    else\n        unique_chars =\
    \ unique_chars - Set(\"a\")\n        unique_chars = unique_chars - Set(\"z\")\n\
    \        unique_chars = unique_chars - Set(\"A\")\n        unique_chars = unique_chars\
    \ - Set(\"Z\")\n        unique_chars = unique_chars - Set(\"0\")\n        unique_chars\
    \ = unique_chars - Set(\"9\")\n        unique_chars = unique_chars - Set(\"_\"\
    )\n        unique_chars = unique_chars - Set(\"$\")\n        unique_chars = unique_chars\
    \ - Set(\"%\")\n        unique_chars = unique_chars - Set(\"&\")\n        unique_chars\
    \ = unique_chars - Set(\"*\")\n        unique_chars = unique_chars - Set(\"(\"\
    )\n        unique_chars = unique_chars - Set(\")\")\n        unique_chars = unique_chars\
    \ - Set(\"+\")\n        unique_chars = unique_chars - Set(\",\")\n        unique_chars\
    \ = unique_chars - Set(\".\")\n        unique_chars = unique_chars - Set(\":\"\
    )\n        unique_chars = unique_chars - Set(\";\")\n        unique_chars = unique_chars\
    \ - Set(\"/\")\n        unique_chars = unique_chars - Set(\"[\")\n        unique_chars\
    \ = unique_chars - Set(\"]\")\n        unique_chars = unique_chars - Set(\"{\"\
    )\n        unique_chars = unique_chars - Set(\"}\")\n        unique_chars = unique_chars\
    \ - Set(\"!\")\n        unique_chars = unique_chars - Set(\"?\")\n        unique_chars\
    \ = unique_chars - Set(\":\")\n        unique_chars = unique_chars - Set(\";\"\
    )\n        unique_chars = unique_chars - Set(\"+\")\n        unique_chars = unique_chars\
    \ - Set(\",\")\n        unique_chars = unique_chars - Set(\".\")\n        unique_chars\
    \ = unique_chars - Set(\":\")\n        unique_chars = unique_chars - Set(\";\"\
    )\n        unique_chars = unique_chars - Set(\"/\")\n        unique_chars = unique_chars\
    \ - Set(\"[\")\n        unique_chars = unique_chars - Set(\"]\")\n        unique_chars\
    \ = unique_chars - Set(\"{\")\n        unique_chars = unique_chars - Set(\"}\"\
    )\n        unique_chars = unique_chars - Set(\"!\")\n        unique_chars = unique_chars\
    \ - Set(\"?\")\n        unique_chars = unique_chars - ", "    unique_chars = Set()\n\
    \    unique_chars_count = 0\n    \n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count = unique_chars_count\
    \ + length(word)\n    end\n    \n    if unique_chars_count > length(words)\n \
    \       return words[end]\n    else\n        return words[end]\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ a list of all words in the string that have length greater than or equal to\
    \ 3. Return an empty list if the string length is less than 3.", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Int}(0)\n    for word in words\n\
    \        for char in word\n            unique_chars.add(char)\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n    end\n    \n    unique_chars_count = unique_chars_count.values()\n\
    \    unique_chars_count = unique_chars_count.max()\n    \n    if unique_chars_count\
    \ == 0\n        return words[1]\n    end", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(word",
  "    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union",
  "    unique_chars = Set()\n    for word in words \n        for char in word\n  \
    \          unique_chars.add(char)\n    end\n    unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise\nWrite a function that accepts a list of strings and returns the word\
    \ with minimum number of unique characters.", "    \n    unique_chars = Set()\n\
    \    \n    for word in words\n        unique_chars = unique_chars | Set(word)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return \"z\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"0\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return \"9\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \".\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return \"_\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"$\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"$\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"%\")\n    \n    if length(unique_chars) == 0\n        return \"%\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"&\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"&\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"(\")\n    \n    if length(unique_chars) == 0\n        return \"(\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\")\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \")\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"+\")\n    \n    if length(unique_chars) == 0\n        return \"+\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\",\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \",\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\":\")\n    \n    if length(unique_chars) == 0\n        return \":\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\";\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \";\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"=\")\n    \n    if length(unique_chars) == 0\n        return \"=\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"[\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"[\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set", "    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word", "    unique_chars = Set{Char}()\n\
    \    word_with_max_unique_chars = \"\"\n    for word in words \n        unique_chars\
    \ = unique_chars + Set{Char}(word)\n        if unique_chars.size > word_with_max_unique_chars.length\n\
    \            word_with_max_unique_chars = word\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nIf the string contains no unique characters, return 0.", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"\
    A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"\
    _\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\".\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"<\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\".\")\n    unique_chars.", "    unique_chars =\
    \ Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&lower))\n\
    \    unique_chars = unique_chars.union(words.map(&upper))\n    unique_chars =\
    \ unique_chars.union(words.map(&chars))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length", "    unique_chars = Set{String}()\n  \
    \  unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns the number\
    \ of unique characters in it.", "    unique_chars = Set{Char}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n",
  "    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in words\n\
    \        for char in word\n            unique_chars << char\n            unique_chars_count\
    \ += 1\n        end\n    end\n    \n    if unique_chars_count > unique_chars_count\n\
    \        return words[words.index(words[words.index(words[words.index(word)]),\
    \ 1)]\n    else\n        return words[words.index(words[words.index(words[words.index(word)]),\
    \ 2)]\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a string and returns the number of occurrences of that string in another string.\
    \ For example, if the input string is \"abba\" and another string is \"ab\", the\
    \ function should return 2.", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    unique_chars = Set{Char}(\"\")\n    unique_chars.update(\"\
    a\")\n    unique_chars.update(\"b\")\n    unique_chars.update(\"c\")\n    unique_chars.update(\"\
    d\")\n    unique_chars.update(\"e\")\n    unique_chars.update(\"f\")\n    unique_chars.update(\"\
    g\")\n    unique_chars.update(\"h\")\n    unique_chars.update(\"i\")\n    unique_chars.update(\"\
    j\")\n    unique_chars.update(\"k\")\n    unique_chars.update(\"l\")\n    unique_chars.update(\"\
    m\")\n    unique_chars.update(\"n\")\n    unique_chars.update(\"o\")\n    unique_chars.update(\"\
    p\")\n    unique_chars.update(\"q\")\n    unique_chars.update(\"r\")\n    unique_chars.update(\"\
    s\")\n    unique_chars.update(\"t\")\n    unique_chars.update(\"u\")\n    unique_chars.update(\"\
    v\")\n    unique_chars.update(\"w\")\n    unique_chars.update(\"x\")\n    unique_chars.update(\"\
    y\")\n    unique_chars.update(\"z\")\n    unique_chars.update(\"A\")\n    unique_chars.update(\"\
    B\")\n    unique_chars.update(\"C\")\n    unique_chars.update(\"D\")\n    unique_chars.update(\"\
    E\")\n    unique_chars.update(\"F\")\n    unique_chars.update(\"G\")\n    unique_chars.update(\"\
    H\")\n    unique_chars.update(\"I\")\n    unique_chars.update(\"J\")\n    unique_chars.update(\"\
    K\")\n    unique_chars.update(\"L\")\n    unique_chars.update(\"M\")\n    unique_chars.update(\"\
    N\")\n    unique_chars.update(\"O\")\n    unique_chars.update(\"P\")\n    unique_chars.update(\"\
    Q\")\n    unique_chars.update(\"R\")\n    unique_chars.update(\"S\")\n    unique_chars.update(\"\
    T\")\n    unique_chars.update(\"U\")\n    unique_chars.update(\"V\")\n    unique_chars.update(\"\
    W\")\n    unique_chars.update(\"X\")\n    unique_chars.update(\"Y\")\n    unique_chars.update(\"\
    Z\")\n    unique_chars.update(\"0\")\n    unique_chars.update(\"1\")\n    unique_chars.update(\"\
    2\")\n    unique_chars.update(\"3\")\n    unique_chars.update(\"4\")\n", "   \
    \ unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    return unique_chars.last\nend\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ accepts a list of strings and returns a list of strings. \nThe function should\
    \ return a list of strings which contains words with maximum number\nof unique\
    \ characters. \nThe function should return an empty list if there are no words\
    \ with maximum number\nof unique characters.", "    unique_chars = Set()\n   \
    \ unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_char", "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n\
    \    unique_chars.sort!()\n    return unique_chars.max() \nend\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a string and returns the number of unique\
    \ characters in the string. \nIf the string has less than 10 unique characters,\
    \ return 0.", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    ", "    unique_chars = Set()\n  \
    \  unique_chars_count = 0\n    for word in words \n        unique_chars = unique_chars\
    \ + Set(word)\n        unique_chars_count = unique_chars_count + length(word)\n\
    \    end\n    \n    if unique_chars_count > length(words)\n        return words[end]\n\
    \    else\n        unique_chars = unique_chars - Set(\"0\")\n        unique_chars\
    \ = unique_chars - Set(\"1\")\n        unique_chars = unique_chars - Set(\"2\"\
    )\n        unique_chars = unique_chars - Set(\"3\")\n        unique_chars = unique_chars\
    \ - Set(\"4\")\n        unique_chars = unique_chars - Set(\"5\")\n        unique_chars\
    \ = unique_chars - Set(\"6\")\n        unique_chars = unique_chars - Set(\"7\"\
    )\n        unique_chars = unique_chars - Set(\"8\")\n        unique_chars = unique_chars\
    \ - Set(\"9\")\n        unique_chars = unique_chars - Set(\"a\")\n        unique_chars\
    \ = unique_chars - Set(\"b\")\n        unique_chars = unique_chars - Set(\"c\"\
    )\n        unique_chars = unique_chars - Set(\"d\")\n        unique_chars = unique_chars\
    \ - Set(\"e\")\n        unique_chars = unique_chars - Set(\"f\")\n        unique_chars\
    \ = unique_chars - Set(\"g\")\n        unique_chars = unique_chars - Set(\"h\"\
    )\n        unique_chars = unique_chars - Set(\"i\")\n        unique_chars = unique_chars\
    \ - Set(\"j\")\n        unique_chars = unique_chars - Set(\"k\")\n        unique_chars\
    \ = unique_chars - Set(\"l\")\n        unique_chars = unique_chars - Set(\"m\"\
    )\n        unique_chars = unique_chars - Set(\"n\")\n        unique_chars = unique_chars\
    \ - Set(\"o\")\n        unique_chars = unique_chars - Set(\"p\")\n        unique_chars\
    \ = unique_chars - Set(\"q\")\n        unique_chars = unique_chars - Set(\"r\"\
    )\n        unique_chars = unique_chars - Set(\"s\")\n        unique_chars = unique_chars\
    \ - Set(\"t\")\n        unique_chars = unique_chars - Set(\"u\")\n        unique_chars\
    \ = unique_chars - Set(\"v\")\n        unique_chars = unique_chars - Set(\"w\"\
    )\n        unique_chars = unique_chars - Set(\"x\")\n        unique_chars = unique_chars\
    \ - Set(\"y\")\n        unique_chars = unique_chars - Set(\"z\")\n        unique_chars\
    \ = unique_chars - Set(\"A\")\n        unique_chars = unique_chars - Set(\"B\"\
    )\n        unique_chars = unique_chars - Set", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    unique_chars = Set{Char}(\"\")\n    for word in words \n \
    \       for char in word\n            unique_chars <- unique_chars + char\n  \
    \  end\n    \n    if unique_chars == Set{Char}(\"\")\n        return words[1]\n\
    \    else\n        unique_chars = Set{Char}(\"\")\n        for word in words \n\
    \            for char in word\n                unique_chars <- unique_chars +\
    \ char\n            end\n        end\n        \n        if length(unique_chars)\
    \ > length(words)\n            return words[1]\n        else\n            return\
    \ words[length(unique_chars)]\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars_count = Dict{Char,Int}(\"\")\n    for word in words \n \
    \       for char in word\n            if char in unique_chars\n              \
    \  unique_chars_count[char] = unique_chars_count[char] + 1\n            else\n\
    \                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = 1\n    end\n    \n    unique_chars_sorted = Dict{Char,Int}(unique_chars_count)\n\
    \    unique_chars_sorted[end] = unique_chars_count[end]\n    \n    unique_chars_sorted\
    \ = sort(unique_chars_sorted)\n    \n    return unique_chars_sorted[end][1]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a list of strings\
    \ and returns the string with maximum length. \nIf two strings have the same length,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n", "    unique_chars = Set{String}()\n\
    \    unique_chars.update(*words)\n    unique_chars.sort!()\n    return unique_chars.max()\
    \ \nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"\
    cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and\
    \ returns the number of occurrences of that string in the string.", "    unique_chars\
    \ = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    return unique_chars.max() \nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns a string with all the characters in lower case.\
    \ \nIf the input string contains any non-alphabetic characters, return an empty\
    \ string.", "    unique_chars = Set{Char}()\n    unique_chars_count = Dict{Char,\
    \ Int}()\n    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[unique_chars.last]\n                    unique_chars.last\n\
    \                else\n                    unique_chars_count[unique_chars.last]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string\
    \ and returns a string with all the characters in lower case. \nThe function should\
    \ ignore the case of the characters.", "    unique_chars = Set{String}()\n   \
    \ unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.map(sort)\n    unique_chars = unique_chars.map(first)\n\
    \    unique_chars = unique_chars.map(last)\n    return unique_chars.max\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a list of strings and\
    \ returns a list of strings. \nThe function should remove duplicates and sort\
    \ them in lexicographical order.", "    unique_chars = Set()\n    unique_chars_count\
    \ = Dict()\n    for word in words\n        for char in word\n            if char\
    \ in unique_chars\n                unique_chars_count[char] += 1\n           \
    \ else\n                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = 1\n    end\n    unique_chars_count.keys\n    max_count = max(unique_chars_count.values)\n\
    \    unique_chars_count.values.max()\n    for char in unique_chars\n        if\
    \ unique_chars_count[char] == max_count\n            return char\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ a list of all possible substrings of the string.", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n",
  "    unique_chars = Set()\n    word_with_max_unique_chars = \"\"\n    for word in\
    \ words\n        for char in word\n            unique_chars << char\n        end\n\
    \    end\n    for word in words\n        unique_chars = unique_chars - Set(word)\n\
    \        if length(unique_chars) > length(word_with_max_unique_chars)\n      \
    \      word_with_max_unique_chars = word\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.3>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.3>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of occurrences of that string in the string.", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars = unique_chars.union(strings(words))\n    unique_chars =\
    \ unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 1))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 2))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 3))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 4))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 5))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 6))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 7))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 8))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 9))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 10))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 11))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 12))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 13))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 14))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 15))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 16))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 17))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 18))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 19))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 20))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 21))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 22))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 23))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 24))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> x > 25))\n\
    \    unique_chars = unique_chars.union(words.map(length).filter(x -> ", "    unique_chars\
    \ = Set{String}()\n    for word in words \n        for char in word\n        \
    \    unique_chars.add(char)\n    end\n    unique_chars = unique_chars - Set{String}()\n\
    \    unique_chars = unique_chars.sorted()\n    unique_chars = unique_chars[end]\n\
    \    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"\
    , \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    unique_chars = Set{Char}(\"\
    \")\n    for word in words\n        for char in word\n            unique_chars\
    \ <- unique_chars + char\n        end\n    end\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[2]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[3]\n    end\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[4]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[5]\n    end\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[6]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[7]\n    end\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[8]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[9]\n    end\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[10]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[11]\n    end\n  \
    \  unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[12]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[13]\n    end\n  \
    \  unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[14]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[15]\n    end\n  \
    \  unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ == 0\n        return words[16]\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    if length(unique_chars) == 0\n        return words[17]\n    end\n",
  "    unique_chars = Set{Char}()\n    for word in words \n        for char in word\n\
    \            unique_chars <- unique_chars + char\n        end\n    end\n    \n\
    \    if length(unique_chars) > length(words)\n        return words[end]\n    else\n\
    \        return words[findfirst(unique_chars)]\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a list of strings and returns a list\
    \ of strings. \nThe function should remove all duplicate words and return the\
    \ list with unique words.", "    unique_chars = Set()\n    unique_chars_count\
    \ = 0\n    \n    for word in words \n        for char in word\n            unique_chars\
    \ = unique_chars + char\n            unique_chars_count = unique_chars_count +\
    \ 1\n        end\n    end\n    \n    if unique_chars_count > unique_chars.length\n\
    \        return words[1]\n    else\n        return words[end]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ the number of unique characters in it.", "    unique_chars = Set{String}()\n\
    \    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([word\
    \ for word in words if word != \"\"])\n    unique_chars.update([word for word\
    \ in words if word != \"\"])\n    unique_chars.update([word for word in words\
    \ if word != \"\"])\n    unique_chars.update([word for word in words if word !=\
    \ \"\"])\n    unique_chars.update([word for word in words if word != \"\"])\n\
    \    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([word\
    \ for word in words if word != \"\"])\n    unique_chars.update([word for word\
    \ in words if word != \"\"])\n    unique_chars.update([word for word in words\
    \ if word != \"\"])\n    unique_chars.update([word for word in words if word !=\
    \ \"\"])\n    unique_chars.update([word for word in words if word != \"\"])\n\
    \    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([word\
    \ for word in words if word != \"\"])\n    unique_chars.update([word for word\
    \ in words if word != \"\"])\n    unique_chars.update([word for word in words\
    \ if word != \"\"])\n    unique_chars.update([word for word in words if word !=\
    \ \"\"])\n    unique_chars.update([word for word in words if word != \"\"])\n\
    \    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([word\
    \ for word in words if word != \"\"])\n    unique_chars.update([word for word\
    \ in words if word != \"\"])\n    unique_chars.update([word for word in words\
    \ if word != \"\"])\n    unique_chars.update([word for word in words if word !=\
    \ \"\"])\n    unique_chars.update([word for word in words if word != \"\"])\n\
    \    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([word\
    \ for word in words if word != \"\"])\n    unique_chars.update([word for word\
    \ in words if word != \"\"])\n    unique_chars.update([word for word in words\
    \ if word != \"\"])\n    unique_chars.update([word for word in words if word !=\
    \ \"\"])\n    unique_chars.update([word for word in words if word != \"\"])\n\
    \    unique_chars.update([word for word in words if word != \"\"])\n    unique_chars.update([",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse.chars))\n    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars.reverse.chars))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse.chars.reverse.chars.reverse.chars.reverse.chars.",
  "    unique_chars = Set{Char}(\"\")\n    for w in words\n        unique_chars =\
    \ unique_chars | Set(w)\n    end\n    unique_chars = unique_chars - Set(\"_\"\
    )\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_", "    unique_chars = Set{String}()\n    unique_chars_count\
    \ = 0\n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars_count += 1\n            if unique_chars_count > unique_chars_max\n\
    \                unique_chars_max = unique_chars_count\n                unique_chars_word\
    \ = word\n        end\n    end\n    return unique_chars_word\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a list of strings and returns a list\
    \ of strings. \nThe function should remove all duplicate words from the list.\
    \ \nThe function should remove all empty strings from the list. \nThe function\
    \ should remove all strings that are not words. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long. \nThe function should remove all strings that are not\
    \ words and are less than 3 characters long. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long. \nThe function should remove all strings that are not\
    \ words and are less than 3 characters long. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long. \nThe function should remove all strings that are not\
    \ words and are less than 3 characters long. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long. \nThe function should remove all strings that are not\
    \ words and are less than 3 characters long. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long. \nThe function should remove all strings that are not\
    \ words and are less than 3 characters long. \nThe function should remove all\
    \ strings that are not words and are less than 3 characters long. \nThe function\
    \ should remove all strings that are not words and are less than 3 characters\
    \ long. \nThe function should remove all strings that are not words and are less\
    \ than 3 characters long", "    unique_chars = Set{Char}()\n    unique_chars.update(\"\
    a\"..\"z\")\n    unique_chars.update(\"A\"..\"Z\")\n    unique_chars.update(\"\
    0\"..\"9\")\n    unique_chars.update(\"_\") \n    unique_chars.update(\".\")\n\
    \    unique_chars.update(\",\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"\
    $\")\n    unique_chars.update(\"%\")\n    unique_chars.update(\"^\")\n    unique_chars.update(\"\
    &\")\n    unique_chars.update(\"*\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\"\
    )\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"\
    {\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"|\")\n    unique_chars.update(\"\
    ~\")\n    unique_chars.update(\":\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    ?\")\n    unique_chars.update(\"!\")\n    unique_chars.update(\"$\")\n    unique_chars.update(\"\
    %\")\n    unique_chars.update(\"^\")\n    unique_chars.update(\"&\")\n    unique_chars.update(\"\
    *\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"\
    }\")\n    unique_chars.update(\"|\")\n    unique_chars.update(\"~\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"\
    !\")\n    unique_chars.update(\"$\")\n    unique_chars.update(\"%\")\n    unique_chars.update(\"\
    ^\")\n    unique_chars.update(\"&\")\n    unique_chars.update(\"*\")\n    unique_chars.update(\"\
    (\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"[\")\n    unique_chars.update(\"\
    ]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"}\")\n    unique_chars.update(\"\
    |\")\n    unique_chars.update(\"~\")\n    unique_chars.", "    unique_chars =\
    \ Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words.map(&length))\n    unique_chars = unique_chars.union(words.map(&lower))\n\
    \    unique_chars = unique_chars.union(words.map(&upper))\n    unique_chars =\
    \ unique_chars.union(words.map(&chars))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&split))\n    unique_chars =\
    \ unique_chars.union(words.map(&join))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&reverse))\n\
    \    unique_", "    unique_chars = Set{String}()\n    for word in words\n    \
    \    for char in word\n            unique_chars[char] = unique_chars[char] + 1\n\
    \    end\n    unique_chars = unique_chars.keys\n    unique_chars = sort(unique_chars)\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise: Write a function that accepts a list of strings and returns\
    \ the word with maximum number of unique characters. If the word has maximum number\
    \ of unique characters, return the first word in the lexicographical order.",
  "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    \n    if unique_chars.size == 1\n        return\
    \ unique_chars.first()\n    else\n        return unique_chars.last()\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns the number\
    \ of occurrences of that string in the given string.", "    unique_chars = Set{String}()\n\
    \    unique_chars.update(*words)\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!",
  "    \n    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.map(char).filter(x -> x != \" \")\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(x -> x.to_lowercase())\n    unique_chars\
    \ = unique_chars.map(x -> x.to_uppercase())\n    unique_chars = unique_chars.map(x\
    \ -> x.to_lowercase())\n    unique_chars = unique_chars.map(x -> x.to_uppercase())\n\
    \    unique_chars = unique_chars.map(", "    unique_chars = Set{String}()\n  \
    \  word_with_max_unique_chars = \"\"\n    for word in words \n        unique_chars\
    \ = unique_chars + Set(word)\n        if length(unique_chars) > length(word_with_max_unique_chars)\n\
    \            word_with_max_unique_chars = word\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a string and returns the number of occurrences of that string in the\
    \ string.", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.map(sort)\n    unique_chars = unique_chars.last\n    unique_chars\
    \ = unique_chars.last\n    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a string and returns the number of unique characters in\
    \ that string. \nThe function should ignore spaces and punctuation marks.", " \
    \   unique_chars = Set{Char}(\"\")\n    for word in words \n        for char in\
    \ word\n            unique_chars <- unique_chars + char\n        end\n    end\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars |> Set\n\
    \    unique_chars = unique_chars |> Set\n    unique_chars = unique_chars ", " \
    \   unique_chars = Set{Char}(\"\")\n    for word in words \n        for char in\
    \ word\n            unique_chars |= char\n    end\n    \n    if unique_chars ==\
    \ Set{Char}()\n        return words[1]\n    else\n        unique_chars = unique_chars\
    \ - Set{Char}()\n        unique_chars = unique_chars.sorted()\n        return\
    \ words[unique_chars[1]]\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a list of strings and returns a list of strings. \nThe function should\
    \ remove all duplicate words and return the list without duplicates.", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    ", "    unique_chars =\
    \ Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n", "    \n    unique_chars\
    \ = Set()\n    \n    for word in words \n        unique_chars = unique_chars |\
    \ Set(word)\n    end\n    \n    if length(unique_chars) > length(words)\n    \
    \    \n        unique_chars = unique_chars - Set(words[1])\n        \n    end\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    unique_chars = Set{String}()\n\
    \    word_with_max_unique_chars = \"\"\n    for word in words\n        for char\
    \ in word\n            if !contains(unique_chars, char)\n                unique_chars.add(char)\n\
    \                if length(unique_chars) > length(word_with_max_unique_chars)\n\
    \                    word_with_max_unique_chars = word\n            end\n    \
    \    end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a list of strings and a character as\
    \ input. Return the word with maximum number of unique characters. If multiple\
    \ strings have maximum number of unique characters, return the one which comes\
    \ first in lexicographical order.", "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    return unique_chars.max()\
    \ \nend\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a string and\
    \ returns a string with all the characters in lower case. \n    For example, if\
    \ the input string is \"hello\", the output should be \"hello\".", "    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words \n        unique_chars = unique_chars\
    \ + Set{Char}(word)\n    end\n    unique_chars = unique_chars - Set{Char}(\"a\"\
    )\n    unique_chars = unique_chars - Set{Char}(\"b\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"c\")\n    unique_chars = unique_chars - Set{Char}(\"d\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"e\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"f\")\n    unique_chars = unique_chars - Set{Char}(\"g\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"h\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"i\")\n    unique_chars = unique_chars - Set{Char}(\"j\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"k\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"l\")\n    unique_chars = unique_chars - Set{Char}(\"m\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"n\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"o\")\n    unique_chars = unique_chars - Set{Char}(\"p\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"q\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"r\")\n    unique_chars = unique_chars - Set{Char}(\"s\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"t\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"u\")\n    unique_chars = unique_chars - Set{Char}(\"v\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"w\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"x\")\n    unique_chars = unique_chars - Set{Char}(\"y\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"z\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"A\")\n    unique_chars = unique_chars - Set{Char}(\"B\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"C\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"D\")\n    unique_chars = unique_chars - Set{Char}(\"E\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"F\")\n    unique_chars = unique_chars\
    \ - Set{", "    unique_chars = Set{Char}(\"\")\n    for word in words \n     \
    \   for char in word\n            unique_chars <- unique_chars + char\n      \
    \  end\n    end\n    \n    if unique_chars == Set{Char}(\"\") \n        return\
    \ words[1]\n    else\n        unique_chars = Set{Char}(\"\")\n        for word\
    \ in words \n            for char in word\n                unique_chars <- unique_chars\
    \ + char\n            end\n        end\n        \n        if unique_chars == Set{Char}(\"\
    \") \n            return words[1]\n        else\n            unique_chars = Set{Char}(\"\
    \")\n            for word in words \n                for char in word\n      \
    \              unique_chars <- unique_chars + char\n                end\n    \
    \        end\n            \n            if unique_chars == Set{Char}(\"\") \n\
    \                return words[1]\n            else\n                unique_chars\
    \ = Set{Char}(\"\")\n                for word in words \n                    for\
    \ char in word\n                        unique_chars <- unique_chars + char\n\
    \                    end\n                end\n                \n            \
    \    if unique_chars == Set{Char}(\"\") \n                    return words[1]\n\
    \                else\n                    unique_chars = Set{Char}(\"\")\n  \
    \                  for word in words \n                        for char in word\n\
    \                            unique_chars <- unique_chars + char\n           \
    \             end\n                    end\n                    \n           \
    \         if unique_chars == Set{Char}(\"\") \n                        return\
    \ words[1]\n                    else\n                        unique_chars = Set{Char}(\"\
    \")\n                        for word in words \n                            for\
    \ char in word\n                                unique_chars <- unique_chars +\
    \ char\n                            end\n                        end\n       \
    \                 \n                        if unique_chars == Set{Char}(\"\"\
    ) \n                            return words[1]\n                        else\n\
    \                            unique_chars = Set{Char}(\"\")\n                \
    \            for word in words \n                                for char in word\n\
    \                                    unique_chars <- unique_chars + char\n   \
    \                             end\n                            end\n         \
    \                   \n                            if unique_chars == Set{Char}(\"\
    \") \n                                return words[1]\n                      \
    \      else\n                                unique_chars = Set{Char}(\"\")\n\
    \                                for word in words \n                        \
    \            for char in word\n                                        unique_chars\
    \ <- unique_chars + char\n                                    end\n          \
    \                      end\n                                \n               \
    \                 if unique_chars == Set{Char}(\"\") \n                      \
    \              return words[1]\n                                else\n       \
    \                             unique_chars = Set{Char}(\"\")\n               \
    \                     for word in words \n                                   \
    \     for char in word\n                                            unique_chars\
    \ <- unique_chars + char\n                                        end\n      \
    \                              end\n                                    \n   \
    \                                 if unique_chars == Set{Char}(\"\") \n      \
    \                                  return words[1]\n                         \
    \           else\n                                        unique_chars = Set{Char}(\"\
    \")\n                                        for word in words \n            \
    \                                for char in word\n                          \
    \                      unique_", "    unique_chars = Set{Char}(\"\")\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(", "    unique_chars = Set()\n    unique_chars_count\
    \ = Dict{Char, Int}()\n    for word in words \n        for char in word\n    \
    \        if char in unique_chars\n                unique_chars_count[char] +=\
    \ 1\n            else\n                unique_chars += char\n                unique_chars_count[char]\
    \ = 1\n    end\n    \n    unique_chars_sorted = sort(unique_chars_count)\n   \
    \ \n    return unique_chars_sorted[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a list of strings and returns a list of strings where\
    \ each string in the list contains only unique characters. \nThe function should\
    \ return a list of strings where each string in the list contains only unique\
    \ characters.", "    \n    unique_chars = Set()\n    \n    for word in words\n\
    \        for char in word\n            unique_chars.add(char)\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    else\n        \n        unique_chars = unique_chars\
    \ - Set(\"a\")\n        \n        if length(unique_chars) == 0\n            return\
    \ words[2]\n        else\n            \n            unique_chars = unique_chars\
    \ - Set(\"a\")\n            \n            if length(unique_chars) == 0\n     \
    \           return words[3]\n            else\n                \n            \
    \    unique_chars = unique_chars - Set(\"a\")\n                \n            \
    \    if length(unique_chars) == 0\n                    return words[4]\n     \
    \           else\n                    \n                    unique_chars = unique_chars\
    \ - Set(\"a\")\n                    \n                    if length(unique_chars)\
    \ == 0\n                        return words[5]\n                    else\n  \
    \                      \n                        unique_chars = unique_chars -\
    \ Set(\"a\")\n                        \n                        if length(unique_chars)\
    \ == 0\n                            return words[6]\n                        else\n\
    \                            \n                            unique_chars = unique_chars\
    \ - Set(\"a\")\n                            \n                            if length(unique_chars)\
    \ == 0\n                                return words[7]\n                    \
    \        else\n                                \n                            \
    \    unique_chars = unique_chars - Set(\"a\")\n                              \
    \  \n                                if length(unique_chars) == 0\n          \
    \                          return words[8]\n                                else\n\
    \                                    \n                                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                                    \n        \
    \                            if length(unique_chars) == 0\n                  \
    \                      return words[9]\n                                    else\n\
    \                                        \n                                  \
    \      unique_chars = unique_chars - Set(\"a\")\n                            \
    \            \n                                        if length(unique_chars)\
    \ == 0\n                                            return words[10]\n       \
    \                                 else\n                                     \
    \       \n                                            unique_chars = unique_chars\
    \ - Set(\"a\")\n                                            \n               \
    \                             if length(unique_chars) == 0\n                 \
    \                               return words[11]\n                           \
    \                 else\n                                                \n   \
    \                                             unique_chars = unique_chars - Set(\"\
    a\")\n                                                \n                     \
    \                           if length(unique_chars) == 0\n                   \
    \                                 return words[12]\n                         \
    \                       else\n                                               \
    \     \n                                                    unique_chars = unique_chars\
    \ - Set(\"a\")\n                                                    \n       \
    \                                             if length(unique_chars) == 0\n \
    \                                                       return words[13]\n   \
    \                                                 else\n                     \
    \                                   \n                                       \
    \                 unique_chars = unique_chars - Set(\"a\")\n                 \
    \                                       \n                                   \
    \                     if length(unique_chars) == 0\n                         \
    \                                   return words[14]\n                       \
    \                                 else\n                                     \
    \                       \n                                                   \
    \         unique_chars = unique_chars - Set(\"a\")\n                         \
    \                                   \n                                       \
    \                     if length(unique_chars) == 0\n                         \
    \                                       return words[15]\n                   \
    \                                         else\n                             \
    \                                   \n                                       \
    \                         unique_chars = unique_chars - Set(\"a\")\n         \
    \                                                       \n                   \
    \                                             if length(unique_", "    unique_chars\
    \ = Set()\n    word_with_max_unique_chars = \"\"\n    for word in words \n   \
    \     unique_chars = unique_chars + Set(word)\n        if unique_chars.size >\
    \ word_with_max_unique_chars.length\n            word_with_max_unique_chars =\
    \ word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a string\
    \ with all the characters in lower case. \n    For example, \"Hello World\" ->\
    \ \"helloworld\".", "    unique_chars = Set{String}()\n    for w in words\n  \
    \      for c in w\n            unique_chars.add(c)\n            if unique_chars.size\
    \ > max_chars\n                return w\n        end\n    end\n    return words[1]\n\
    end\n</cell>\n<code language=julia-1.0>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.0>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.0>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a list of strings\
    \ and a string. The function should return a list of strings that contains the\
    \ string in the first position and all other strings in the list except the string\
    \ in the first position. For example, if the list contains [\"apple\", \"banana\"\
    , \"cherry\"] and the string \"apple\" the function should return [\"banana\"\
    , \"cherry\"]. If the string is not in the list return an empty list.", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(",
  "    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char in\
    \ word\n            unique_chars = unique_chars + char\n    end\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    e\")\n    unique_chars = unique_chars - Set{Char}(\"i\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"o\")\n    unique_chars = unique_chars - Set{Char}(\"u\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"y\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"s\")\n    unique_chars = unique_chars - Set{Char}(\"d\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"h\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"r\")\n    unique_chars = unique_chars - Set{Char}(\"c\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"k\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"m\")\n    unique_chars = unique_chars - Set{Char}(\"p\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"l\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"f\")\n    unique_chars = unique_chars - Set{Char}(\"v\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"w\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"x\")\n    unique_chars = unique_chars - Set{Char}(\"z\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"q\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"y\")\n    unique_chars = unique_chars - Set{Char}(\"z\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"e\")\n    unique_chars = unique_chars - Set{Char}(\"i\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"o\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"u\")\n    unique_chars = unique_chars - Set{Char}(\"y\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"s\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"d\")\n    unique_chars = unique_chars - Set{Char}(\"h\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"r", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.keys()\
    \ \n    unique_chars = unique_chars.sort\n    unique_chars = unique_chars[1]\n\
    \    return unique_chars\nend\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.3>\nfind_max([\"\
    aaaaaaa\", \"bb", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n", "    unique_chars = Set{String}()\n\
    \    unique_chars.update(*words)\n    unique_chars = unique_chars.keys() |> sort\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[end-1]\n\
    \    unique_chars = unique_chars[end-2]\n    unique_chars = unique_chars[end-3]\n\
    \    unique_chars = unique_chars[end-4]\n    unique_chars = unique_chars[end-5]\n\
    \    unique_chars = unique_chars[end-6]\n    unique_chars = unique_chars[end-7]\n\
    \    unique_chars = unique_chars[end-8]\n    unique_chars = unique_chars[end-9]\n\
    \    unique_chars = unique_chars[end-10]\n    unique_chars = unique_chars[end-11]\n\
    \    unique_chars = unique_chars[end-12]\n    unique_chars = unique_chars[end-13]\n\
    \    unique_chars = unique_chars[end-14]\n    unique_chars = unique_chars[end-15]\n\
    \    unique_chars = unique_chars[end-16]\n    unique_chars = unique_chars[end-17]\n\
    \    unique_chars = unique_chars[end-18]\n    unique_chars = unique_chars[end-19]\n\
    \    unique_chars = unique_chars[end-20]\n    unique_chars = unique_chars[end-21]\n\
    \    unique_chars = unique_chars[end-22]\n    unique_chars = unique_chars[end-23]\n\
    \    unique_chars = unique_chars[end-24]\n    unique_chars = unique_chars[end-25]\n\
    \    unique_chars = unique_chars[end-26]\n    unique_chars = unique_chars[end-27]\n\
    \    unique_chars = unique_chars[end-28]\n    unique_chars = unique_chars[end-29]\n\
    \    unique_chars = unique_chars[end-30]\n    unique_chars = unique_chars[end-31]\n\
    \    unique_chars = unique_chars[end-32]\n    unique_chars = unique_chars[end-33]\n\
    \    unique_chars = unique_chars[end-34]\n    unique_chars = unique_chars[end-35]\n\
    \    unique_chars = unique_chars[end-36]\n    unique_chars = unique_chars[end-37]\n\
    \    unique_chars = unique_chars[end-38]\n    unique_chars = unique_chars[end-39]\n\
    \    unique_chars = unique_chars[end-40]\n    unique_chars = unique_chars[end-41]\n\
    \    unique_chars = unique_chars[end-42]\n    unique_chars = unique_chars[end-43]\n\
    \    ", "    \n    unique_chars = Set()\n    \n    for word in words\n       \
    \ unique_chars = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"a\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end", "    unique_chars = Set{Char}(\"\")\n\
    \    unique_chars.update(\"a\")\n    unique_chars.update(\"b\")\n    unique_chars.update(\"\
    c\")\n    unique_chars.update(\"d\")\n    unique_chars.update(\"e\")\n    unique_chars.update(\"\
    f\")\n    unique_chars.update(\"g\")\n    unique_chars.update(\"h\")\n    unique_chars.update(\"\
    i\")\n    unique_chars.update(\"j\")\n    unique_chars.update(\"k\")\n    unique_chars.update(\"\
    l\")\n    unique_chars.update(\"m\")\n    unique_chars.update(\"n\")\n    unique_chars.update(\"\
    o\")\n    unique_chars.update(\"p\")\n    unique_chars.update(\"q\")\n    unique_chars.update(\"\
    r\")\n    unique_chars.update(\"s\")\n    unique_chars.update(\"t\")\n    unique_chars.update(\"\
    u\")\n    unique_chars.update(\"v\")\n    unique_chars.update(\"w\")\n    unique_chars.update(\"\
    x\")\n    unique_chars.update(\"y\")\n    unique_chars.update(\"z\")\n    unique_chars.update(\"\
    A\")\n    unique_chars.update(\"B\")\n    unique_chars.update(\"C\")\n    unique_chars.update(\"\
    D\")\n    unique_chars.update(\"E\")\n    unique_chars.update(\"F\")\n    unique_chars.update(\"\
    G\")\n    unique_chars.update(\"H\")\n    unique_chars.update(\"I\")\n    unique_chars.update(\"\
    J\")\n    unique_chars.update(\"K\")\n    unique_chars.update(\"L\")\n    unique_chars.update(\"\
    M\")\n    unique_chars.update(\"N\")\n    unique_chars.update(\"O\")\n    unique_chars.update(\"\
    P\")\n    unique_chars.update(\"Q\")\n    unique_chars.update(\"R\")\n    unique_chars.update(\"\
    S\")\n    unique_chars.update(\"T\")\n    unique_chars.update(\"U\")\n    unique_chars.update(\"\
    V\")\n    unique_chars.update(\"W\")\n    unique_chars.update(\"X\")\n    unique_chars.update(\"\
    Y\")\n    unique_chars.update(\"Z\")\n    unique_chars.update(\"a\")\n    unique_chars.update(\"\
    b\")\n    unique_chars.update(\"c\")\n    unique_chars.update(\"d\")\n    unique_chars.update(\"\
    e\")", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[",
  "    \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    else\n        return words[end]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ the number of vowels in the string.", "    unique_chars = Set{String}()\n  \
    \  unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    unique_chars = Set{Char}(\"\")\n    for word in words\n  \
    \      for char in word\n            unique_chars = unique_chars + char\n    end\n\
    \    unique_chars = unique_chars - Set{Char}(\"\")\n    unique_chars = unique_chars.sorted()\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a string\
    \ with all the characters in lower case. \nThe function should ignore the case\
    \ of the characters.", "    unique_chars = Set()\n    for word in words \n   \
    \     for char in word\n            unique_chars.add(char)\n    end\n    unique_chars\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of occurrences of that string in the string.", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    ", "    unique_chars =\
    \ Set{Char}(\"\")\n    for word in words \n        for char in word\n        \
    \    unique_chars.add(char)\n    end\n    unique_chars\n    unique_chars.max_by(&length)\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ a string with all the letters capitalized.", "    unique_chars = Set{String}()\n\
    \    unique_chars.update([word for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::2] for word in words])\n\
    \    unique_chars.update([word[::3] for word in words])\n    unique_chars.update([word[::4]\
    \ for word in words])\n    unique_chars.update([word[::5] for word in words])\n\
    \    unique_chars.update([word[::6] for word in words])\n    unique_chars.update([word[::7]\
    \ for word in words])\n    unique_chars.update([word[::8] for word in words])\n\
    \    unique_chars.update([word[::9] for word in words])\n    unique_chars.update([word[::10]\
    \ for word in words])\n    unique_chars.update([word[::11] for word in words])\n\
    \    unique_chars.update([word[::12] for word in words])\n    unique_chars.update([word[::13]\
    \ for word in words])\n    unique_chars.update([word[::14] for word in words])\n\
    \    unique_chars.update([word[::15] for word in words])\n    unique_chars.update([word[::16]\
    \ for word in words])\n    unique_chars.update([word[::17] for word in words])\n\
    \    unique_chars.update([word[::18] for word in words])\n    unique_chars.update([word[::19]\
    \ for word in words])\n    unique_chars.update([word[::20] for word in words])\n\
    \    unique_chars.update([word[::21] for word in words])\n    unique_chars.update([word[::22]\
    \ for word in words])\n    unique_chars.update([word[::23] for word in words])\n\
    \    unique_chars.update([word[::24] for word in words])\n    unique_chars.update([word[::25]\
    \ for word in words])\n    unique_chars.update([word[::26] for word in words])\n\
    \    unique_chars.update([word[::27] for word in words])\n    unique_chars.update([word[::28]\
    \ for word in words])\n    unique_chars.update([word[::29] for word in words])\n\
    \    unique_chars.update([word[::30] for word in words])\n    unique_chars.update([word[::31]\
    \ for word in words])\n    unique_chars.update([word[::32] for word in words])\n\
    \    unique_chars.update([word[::33] for word in words])\n    unique_chars.update([word[::34]\
    \ for word in words])\n    unique_chars.update([word[::35] for word in word",
  "    unique_chars = Set{String}()\n    for word in words\n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars\n    unique_chars.max\n\
    \    unique_chars.min\n    unique_chars.sort\n    unique_chars.first\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and returns\
    \ a list of strings. \nThe list contains different words. \nReturn the word with\
    \ maximum number of unique characters. If multiple strings have maximum number\
    \ of unique characters, return the one which comes first in lexicographical order.",
  "    unique_chars = Set{Char}(\"\")\n    for word in words \n        for char in\
    \ word\n            unique_chars.add(char)\n    return unique_chars.max \nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"\
    dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"\
    cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"\
    , \"mmmm\", \"nnnn", "    unique_chars = Set{Char}()\n    for word in words\n\
    \        for char in word\n            unique_chars <- unique_chars + char\n \
    \       end\n    end\n    \n    if unique_chars == Set{Char}()\n        return\
    \ words[1]\n    else\n        unique_chars = sort(unique_chars)\n        for word\
    \ in words\n            if length(unique_chars) == length(word)\n            \
    \    return word\n            end\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a string and returns the number of occurrences of that\
    \ string in the given string. \nIf the given string is not present in the given\
    \ string, return 0.", "    unique_chars = Set()\n    for word in words\n     \
    \   unique_chars = unique_chars | Set(word)\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_char", "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend", "    unique_chars\
    \ = Set{Char}(\"\")\n    for w in words\n        for c in w\n            unique_chars.add(c)\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    unique_chars = Set{String}()\n\
    \    word_with_max_unique_chars = \"\"\n    for word in words \n        for char\
    \ in word\n            if !contains(unique_chars, char)\n                unique_chars.add(char)\n\
    \                if length(unique_chars) > length(word_with_max_unique_chars)\n\
    \                    word_with_max_unique_chars = word\n            end\n    \
    \    end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that accepts a list of strings and returns a list\
    \ of strings. \nThe function should remove all duplicate strings from the list.\
    \ \nThe function should remove all empty strings from the list. \nThe function\
    \ should remove all strings that are not valid words. \nThe function should remove\
    \ all strings that are not valid words. \nThe function should remove all strings\
    \ that are not valid words. \nThe function should remove all strings that are\
    \ not valid words. \nThe function should remove all strings that are not valid\
    \ words. \nThe function should remove all strings that are not valid words. \n\
    The function should remove all strings that are not valid words. \nThe function\
    \ should remove all strings that are not valid words. \nThe function should remove\
    \ all strings that are not valid words. \nThe function should remove all strings\
    \ that are not valid words. \nThe function should remove all strings that are\
    \ not valid words. \nThe function should remove all strings that are not valid\
    \ words. \nThe function should remove all strings that are not valid words. \n\
    The function should remove all strings that are not valid words. \nThe function\
    \ should remove all strings that are not valid words. \nThe function should remove\
    \ all strings that are not valid words. \nThe function should remove all strings\
    \ that are not valid words. \nThe function should remove all strings that are\
    \ not valid words. \nThe function should remove all strings that are not valid\
    \ words. \nThe function should remove all strings that are not valid words. \n\
    The function should remove all strings that are not valid words. \nThe function\
    \ should remove all strings that are not valid words. \nThe function should remove\
    \ all strings that are not valid words. \nThe function should remove all strings\
    \ that are not valid words. \nThe function should remove all strings that are\
    \ not valid words. \nThe function should remove all strings that are not valid\
    \ words. \nThe function should remove all strings that are not valid words. \n\
    The function should remove all strings that are not valid words. \nThe function\
    \ should remove all strings that are not valid words. \nThe function should remove\
    \ all strings that are not valid words. \nThe function should remove all strings\
    \ that are not valid words. \nThe function should remove all strings that are\
    \ not valid words. \nThe function should remove ", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars = unique_chars.union(Set{Char}(word))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[1]))\n    unique_chars = unique_chars.union(Set{Char}(word[2]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[3]))\n    unique_chars =\
    \ unique_chars.union(Set{Char}(word[4]))\n    unique_chars = unique_chars.union(Set{Char}(word[5]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[6]))\n    unique_chars =\
    \ unique_chars.union(Set{Char}(word[7]))\n    unique_chars = unique_chars.union(Set{Char}(word[8]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[9]))\n    unique_chars =\
    \ unique_chars.union(Set{Char}(word[10]))\n    unique_chars = unique_chars.union(Set{Char}(word[11]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[12]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[13]))\n    unique_chars = unique_chars.union(Set{Char}(word[14]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[15]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[16]))\n    unique_chars = unique_chars.union(Set{Char}(word[17]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[18]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[19]))\n    unique_chars = unique_chars.union(Set{Char}(word[20]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[21]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[22]))\n    unique_chars = unique_chars.union(Set{Char}(word[23]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[24]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[25]))\n    unique_chars = unique_chars.union(Set{Char}(word[26]))\n\
    \    unique_chars = unique_chars.union(Set{Char}(word[27]))\n    unique_chars\
    \ = unique_chars.union(Set{Char}(word[28]))\n    unique_chars = unique_chars.union(Set{Char}(word[29]))\n\
    \    unique_chars = unique_chars.union(", "    unique_chars = Set{Char}(\"\")\n\
    \    for word in words \n        for char in word\n            unique_chars =\
    \ unique_chars + char\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    \")\n    unique_chars = unique_chars.sorted()\n    unique_chars = unique_chars[end]\n\
    \    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a list of strings and returns a list of strings. \nThe function should\
    \ remove duplicate strings from the list. \nThe function should return a list\
    \ of strings with no duplicates.", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars\
    \ = unique_chars.union(words.map(w => ", "    unique_chars = Set()\n    for word\
    \ in words\n        for char in word\n            unique_chars.add(char)\n   \
    \ end\n    unique_chars\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns a string with the first letter of each word capitalized.",
  "    unique_chars = Set()\n    for word in words\n        for char in word\n   \
    \         unique_chars.add(char)\n    end\n    unique_chars\n    unique_chars.max\n\
    \    unique_chars.min \nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ accepts a string and returns the number of occurrences of that string in the\
    \ string.", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars_count = Set{Int64}(0)\n    for word in words\n        for\
    \ char in word\n            unique_chars += char\n            unique_chars_count[char]\
    \ += 1\n    end\n    \n    if unique_chars_count == unique_chars\n        return\
    \ words[1]\n    else\n        unique_chars_count.sort\n        unique_chars_count.reverse\n\
    \        unique_chars_count.first\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a string and returns the number of occurrences of that\
    \ string in that string.", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   unique_chars = Set{Char}(\"\")\n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n    unique_chars\
    \ = unique_chars - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n\
    \    unique_chars = unique_chars - Set(\"4\")\n    unique_chars = unique_chars\
    \ - Set(\"5\")\n    unique_chars = unique_chars - Set(\"6\")\n    unique_chars\
    \ = unique_chars - Set(\"7\")\n    unique_chars = unique_chars - Set(\"8\")\n\
    \    unique_chars = unique_chars - Set(\"9\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n\
    \    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"/\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"@\")\n    unique_chars = unique_chars\
    \ - Set(\"|\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"%\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = ", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_", "    \n    unique_chars = Set{String}()\n    \n\
    \    for word in words\n        unique_chars |= Set(word)\n    end\n    \n   \
    \ unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars -\
    \ Set(\"b\")\n    unique_chars = unique_chars - Set(\"c\")\n    unique_chars =\
    \ unique_chars - Set(\"d\")\n    unique_chars = unique_chars - Set(\"e\")\n  \
    \  unique_chars = unique_chars - Set(\"f\")\n    unique_chars = unique_chars -\
    \ Set(\"g\")\n    unique_chars = unique_chars - Set(\"h\")\n    unique_chars =\
    \ unique_chars - Set(\"i\")\n    unique_chars = unique_chars - Set(\"j\")\n  \
    \  unique_chars = unique_chars - Set(\"k\")\n    unique_chars = unique_chars -\
    \ Set(\"l\")\n    unique_chars = unique_chars - Set(\"m\")\n    unique_chars =\
    \ unique_chars - Set(\"n\")\n    unique_chars = unique_chars - Set(\"o\")\n  \
    \  unique_chars = unique_chars - Set(\"p\")\n    unique_chars = unique_chars -\
    \ Set(\"q\")\n    unique_chars = unique_chars - Set(\"r\")\n    unique_chars =\
    \ unique_chars - Set(\"s\")\n    unique_chars = unique_chars - Set(\"t\")\n  \
    \  unique_chars = unique_chars - Set(\"u\")\n    unique_chars = unique_chars -\
    \ Set(\"v\")\n    unique_chars = unique_chars - Set(\"w\")\n    unique_chars =\
    \ unique_chars - Set(\"x\")\n    unique_chars = unique_chars - Set(\"y\")\n  \
    \  unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars -\
    \ Set(\"A\")\n    unique_chars = unique_chars - Set(\"B\")\n    unique_chars =\
    \ unique_chars - Set(\"C\")\n    unique_chars = unique_chars - Set(\"D\")\n  \
    \  unique_chars = unique_chars - Set(\"E\")\n    unique_chars = unique_chars -\
    \ Set(\"F\")\n    unique_chars = unique_chars - Set(\"G\")\n    unique_chars =\
    \ unique_chars - Set(\"H\")\n    unique_chars = unique_chars - Set(\"I\")\n  \
    \  unique_chars = unique_chars - Set(\"J\")\n    unique_chars = unique_chars -\
    \ Set(\"K\")\n    unique_chars = unique_chars - Set(\"L\")\n    unique_chars =\
    \ unique_chars - Set(\"M\")\n    unique_chars = unique_chars - Set(\"N\")\n  \
    \  unique_chars = unique_chars - Set", "    unique_chars = Set{Char}(\"\")\n \
    \   unique_chars = unique_chars.union(*words)\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(char", "    unique_chars = Set{Char}(\"\")\n    for\
    \ word in words \n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars\
    \ = unique_chars - Set{Char}(\"z\")\n    unique_chars = unique_chars - Set{Char}(\"\
    A\")\n    unique_chars = unique_chars - Set{Char}(\"Z\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"0\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\".\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\",\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"?\")\n    unique_chars = unique_chars - Set{Char}(\"!\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"$\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"%\")\n    unique_chars = unique_chars - Set{Char}(\"^\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"&\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"*\")\n    unique_chars = unique_chars - Set{Char}(\"(\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\")\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"+\")\n    unique_chars = unique_chars - Set{Char}(\",\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"?\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"!\")\n    unique_chars = unique_chars - Set{Char}(\"$\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"%\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"^\")\n    unique_chars = unique_chars - Set{Char}(\"&\")\n   \
    \ unique_chars = unique_chars - Set", "    unique_chars = Set{Char}(\"\")\n  \
    \  for w in words\n        unique_chars = unique_chars | Set(w)\n    end\n   \
    \ unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars -\
    \ Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars =\
    \ unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n  \
    \  unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars -\
    \ Set(\"?\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars =\
    \ unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n  \
    \  unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars -\
    \ Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars =\
    \ unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n  \
    \  unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars -\
    \ Set(\"?\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars =\
    \ unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n  \
    \  unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars -\
    \ Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars =\
    \ unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n  \
    \  unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars -\
    \ Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars =\
    \ unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n  \
    \  unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars -\
    \ Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars =\
    \ unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n  \
    \  unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars -\
    \ Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars =\
    \ unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"(\")\n  \
    \  unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars -\
    \ Set(\"[\")\n    unique_chars = unique_chars - Set", "    unique_chars = Set()\n\
    \    for word in words\n        unique_chars = unique_chars | Set(word)\n    end\n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"b\")\n    unique_chars = unique_chars - Set(\"c\")\n    unique_chars\
    \ = unique_chars - Set(\"d\")\n    unique_chars = unique_chars - Set(\"e\")\n\
    \    unique_chars = unique_chars - Set(\"f\")\n    unique_chars = unique_chars\
    \ - Set(\"g\")\n    unique_chars = unique_chars - Set(\"h\")\n    unique_chars\
    \ = unique_chars - Set(\"i\")\n    unique_chars = unique_chars - Set(\"j\")\n\
    \    unique_chars = unique_chars - Set(\"k\")\n    unique_chars = unique_chars\
    \ - Set(\"l\")\n    unique_chars = unique_chars - Set(\"m\")\n    unique_chars\
    \ = unique_chars - Set(\"n\")\n    unique_chars = unique_chars - Set(\"o\")\n\
    \    unique_chars = unique_chars - Set(\"p\")\n    unique_chars = unique_chars\
    \ - Set(\"q\")\n    unique_chars = unique_chars - Set(\"r\")\n    unique_chars\
    \ = unique_chars - Set(\"s\")\n    unique_chars = unique_chars - Set(\"t\")\n\
    \    unique_chars = unique_chars - Set(\"u\")\n    unique_chars = unique_chars\
    \ - Set(\"v\")\n    unique_chars = unique_chars - Set(\"w\")\n    unique_chars\
    \ = unique_chars - Set(\"x\")\n    unique_chars = unique_chars - Set(\"y\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"B\")\n    unique_chars\
    \ = unique_chars - Set(\"C\")\n    unique_chars = unique_chars - Set(\"D\")\n\
    \    unique_chars = unique_chars - Set(\"E\")\n    unique_chars = unique_chars\
    \ - Set(\"F\")\n    unique_chars = unique_chars - Set(\"G\")\n    unique_chars\
    \ = unique_chars - Set(\"H\")\n    unique_chars = unique_chars - Set(\"I\")\n\
    \    unique_chars = unique_chars - Set(\"J\")\n    unique_chars = unique_chars\
    \ - Set(\"K\")\n    unique_chars = unique_chars - Set(\"L\")\n    unique_chars\
    \ = unique_chars - Set(\"M\")\n    unique_chars = unique_chars - Set(\"N\")\n\
    \    unique_chars = unique_chars - Set(\"O\")\n    unique_char", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    return unique_chars.max() \nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a string and returns the number of vowels\
    \ in it.", "    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(&length))\n\
    \    unique_chars = unique_chars.union(words.map(&lower))\n    unique_chars =\
    \ unique_chars.union(words.map(&upper))\n    unique_chars = unique_chars.union(words.map(&chars))\n\
    \    unique_chars = unique_chars.union(words.map(&reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(&reverse))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_chars = unique_chars.union(words.map(&sort))\n    unique_chars = unique_chars.union(words.map(&sort))\n\
    \    unique_", "    unique_chars = Set()\n    unique_chars_count = 0\n    \n \
    \   for word in words\n        for char in word\n            unique_chars << char\n\
    \            unique_chars_count += 1\n        end\n    end\n    \n    if unique_chars_count\
    \ > unique_chars_count\n        return words[words.index(words[words.index(word)\
    \ - 1])]\n    else\n        return words[words.index(words[words.index(word) -\
    \ 1])]\n    end\nend\n</cell>\n<code language=julia-1.0>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts\
    \ a list of strings and returns a dictionary that maps a word to its number of\
    \ occurrences.", "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!", "    unique_chars =\
    \ Set{Char}(\"\")\n    unique_chars = unique_chars.union(*words)\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(char", "    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word", "    unique_chars = Set{String}()\n\
    \    for w in words\n        unique_chars = unique_chars | Set(w)\n    end\n \
    \   unique_chars = unique_chars - Set{String}()\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}", "    unique_chars = Set{Char}(\"\")\n    unique_chars.update([c\
    \ for c in words[1]])\n    unique_chars.update([c for c in words[2]])\n    unique_chars.update([c\
    \ for c in words[3]])\n    unique_chars.update([c for c in words[4]])\n    unique_chars.update([c\
    \ for c in words[5]])\n    unique_chars.update([c for c in words[6]])\n    unique_chars.update([c\
    \ for c in words[7]])\n    unique_chars.update([c for c in words[8]])\n    unique_chars.update([c\
    \ for c in words[9]])\n    unique_chars.update([c for c in words[10]])\n    unique_chars.update([c\
    \ for c in words[11]])\n    unique_chars.update([c for c in words[12]])\n    unique_chars.update([c\
    \ for c in words[13]])\n    unique_chars.update([c for c in words[14]])\n    unique_chars.update([c\
    \ for c in words[15]])\n    unique_chars.update([c for c in words[16]])\n    unique_chars.update([c\
    \ for c in words[17]])\n    unique_chars.update([c for c in words[18]])\n    unique_chars.update([c\
    \ for c in words[19]])\n    unique_chars.update([c for c in words[20]])\n    unique_chars.update([c\
    \ for c in words[21]])\n    unique_chars.update([c for c in words[22]])\n    unique_chars.update([c\
    \ for c in words[23]])\n    unique_chars.update([c for c in words[24]])\n    unique_chars.update([c\
    \ for c in words[25]])\n    unique_chars.update([c for c in words[26]])\n    unique_chars.update([c\
    \ for c in words[27]])\n    unique_chars.update([c for c in words[28]])\n    unique_chars.update([c\
    \ for c in words[29]])\n    unique_chars.update([c for c in words[30]])\n    unique_chars.update([c\
    \ for c in words[31]])\n    unique_chars.update([c for c in words[32]])\n    unique_chars.update([c\
    \ for c in words[33]])\n    unique_chars.update([c for c in words[34]])\n    unique_chars.update([c\
    \ for c in words[35]])\n    unique_chars.update([c for c in words[36]])\n    unique_chars.update([c\
    \ for c in words[37]])\n    unique_chars.update([c for c in words[38]])\n    unique_chars.update([c\
    \ for c in words[39]])\n", "    unique_chars = Set{String}()\n    word_with_max_unique_chars\
    \ = \"\"\n    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a list of strings\
    \ and a character as input. Return the string which contains all characters from\
    \ the input string. Return an empty string if there is no such string.", "   \
    \ unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n", "    \n    unique_chars\
    \ = Set{Char}(\"\")\n    \n    for word in words\n        for char in word\n \
    \           unique_chars.add(char)\n        end\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return words[2]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n   \
    \ if length(unique_chars) == 0\n        return words[5]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n\
    \        return words[6]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return words[7]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[8]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[9]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n   \
    \ if length(unique_chars) == 0\n        return words[10]\n    end\n    \n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n\
    \        return words[11]\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n   \
    \ if length(unique_chars) == 0\n        return words[15]\n", "    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    for word in words \n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count = length(unique_chars)\n\
    \    end\n    \n    if unique_chars_count > length(words)\n        return words[1]\n\
    \    else\n        return words[end]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a list of strings and returns a list of strings. \nThe\
    \ function should remove all duplicate words and return the list of unique words.",
  "    \n    unique_chars = Set{Char}()\n    \n    for word in words\n        for\
    \ char in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[end]\n    else\n        \n        unique_chars = unique_chars\
    \ - Set(\"a\")\n        \n        if length(unique_chars) > length(words)\n  \
    \          return words[end]\n        else\n            \n            unique_chars\
    \ = unique_chars - Set(\"a\")\n            \n            if length(unique_chars)\
    \ > length(words)\n                return words[end]\n            else\n     \
    \           \n                unique_chars = unique_chars - Set(\"a\")\n     \
    \           \n                if length(unique_chars) > length(words)\n      \
    \              return words[end]\n                else\n                    \n\
    \                    unique_chars = unique_chars - Set(\"a\")\n              \
    \      \n                    if length(unique_chars) > length(words)\n       \
    \                 return words[end]\n                    else\n              \
    \          \n                        unique_chars = unique_chars - Set(\"a\")\n\
    \                        \n                        if length(unique_chars) > length(words)\n\
    \                            return words[end]\n                        else\n\
    \                            \n                            unique_chars = unique_chars\
    \ - Set(\"a\")\n                            \n                            if length(unique_chars)\
    \ > length(words)\n                                return words[end]\n       \
    \                     else\n                                \n               \
    \                 unique_chars = unique_chars - Set(\"a\")\n                 \
    \               \n                                if length(unique_chars) > length(words)\n\
    \                                    return words[end]\n                     \
    \           else\n                                    \n                     \
    \               unique_chars = unique_chars - Set(\"a\")\n                   \
    \                 \n                                    if length(unique_chars)\
    \ > length(words)\n                                        return words[end]\n\
    \                                    else\n                                  \
    \      \n                                        unique_chars = unique_chars -\
    \ Set(\"a\")\n                                        \n                     \
    \                   if length(unique_chars) > length(words)\n                \
    \                            return words[end]\n                             \
    \           else\n                                            \n             \
    \                               unique_chars = unique_chars - Set(\"a\")\n   \
    \                                         \n                                 \
    \           if length(unique_chars) > length(words)\n                        \
    \                        return words[end]\n                                 \
    \           else\n                                                \n         \
    \                                       unique_chars = unique_chars - Set(\"a\"\
    )\n                                                \n                        \
    \                        if length(unique_chars) > length(words)\n           \
    \                                         return words[end]\n                \
    \                                else\n                                      \
    \              \n                                                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \      \n                                                    if length(unique_chars)\
    \ > length(words)\n                                                        return\
    \ words[end]\n                                                    else\n     \
    \                                                   \n                       \
    \                                 unique_chars = unique_chars - Set(\"a\")\n \
    \                                                       \n                   \
    \                                     if length(unique_chars) > length(words)\n\
    \                                                            return words[end]\n\
    \                                                        else\n              \
    \                                              \n                            \
    \                                unique_chars = unique_chars - Set(\"a\")\n  \
    \                                                          \n                \
    \                                            if length(unique_chars) > length(words)\n\
    \                                                                return words[end]\n\
    \                                                            else\n          \
    \                                                      \n                    \
    \                                            ", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars.update(*words)\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    \n    unique_chars.max() in unique_chars ? \"string\" : unique_chars.max()\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that accepts a string and returns\
    \ a string with all the characters in lower case. \nIf the input string has any\
    \ non-alphabetic characters, return an empty string.", "    unique_chars = Set{Char}(\"\
    \")\n    for word in words \n        unique_chars = unique_chars + Set{Char}(word)\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars\
    \ = unique_chars - Set{Char}(\"b\")\n    unique_chars = unique_chars - Set{Char}(\"\
    c\")\n    unique_chars = unique_chars - Set{Char}(\"d\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"e\")\n    unique_chars = unique_chars - Set{Char}(\"f\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"g\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"h\")\n    unique_chars = unique_chars - Set{Char}(\"i\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"j\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"k\")\n    unique_chars = unique_chars - Set{Char}(\"l\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"m\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"n\")\n    unique_chars = unique_chars - Set{Char}(\"o\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"p\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"q\")\n    unique_chars = unique_chars - Set{Char}(\"r\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"s\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"t\")\n    unique_chars = unique_chars - Set{Char}(\"u\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"v\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"w\")\n    unique_chars = unique_chars - Set{Char}(\"x\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"y\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"z\")\n    unique_chars = unique_chars - Set{Char}(\"A\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"B\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"C\")\n    unique_chars = unique_chars - Set{Char}(\"D\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"E\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"F\")\n    unique_chars = unique_chars - Set{", "    unique_chars\
    \ = Set()\n    unique_chars_count = Dict()\n    for word in words\n        unique_chars\
    \ = unique_chars | Set(word)\n        unique_chars_count[word] = length(unique_chars)\n\
    \    end\n    \n    unique_chars_sorted = sort(unique_chars_count)\n    \n   \
    \ unique_chars_sorted[1]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of occurrences of that string in the\
    \ string.", "    unique_chars = Set{Char}(\"\")\n    unique_chars.update(*words)\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!", "    unique_chars = Set{Char}(\"\
    \")\n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    else\n        return find_max(words[2:end])\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a string\
    \ and returns a string with the first letter capitalized.", "    \n    unique_chars\
    \ = Set()\n    \n    for word in words\n        unique_chars = unique_chars |\
    \ Set(word)\n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n   \
    \ \n    if length(unique_chars) == 0\n        return \"a\"\n    end\n    \n  \
    \  unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"z\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"0\")\n    \n    if length(unique_chars) == 0\n        return \"0\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"9\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\".\")\n    \n    if length(unique_chars) == 0\n        return \".\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\",\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \",\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\":\")\n    \n    if length(unique_chars) == 0\n        return \":\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\";\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \";\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"?\")\n    \n    if length(unique_chars) == 0\n        return \"?\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"!\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"!\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"@\")\n    \n    if length(unique_chars) == 0\n        return \"@\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"$\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"$\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"%\")\n    \n    if length(unique_chars) == 0\n        return \"%\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"^\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"^\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"&\")\n    \n    if length(unique_chars) == 0\n        return \"&\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"*\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"*\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"(\")\n    \n    if length(unique_chars) == 0\n        return \"(\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"", "    unique_chars =\
    \ Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words\n        for\
    \ char in word\n            unique_chars << char\n            unique_chars_count\
    \ += 1 if char in unique_chars \n        end\n    end\n    \n    if unique_chars_count\
    \ > unique_chars_count\n        return words[words.index(words[words.index(words[words.index(word)])\
    \ -1]) -1]\n    else\n        return words[words.index(words[words.index(word)])\
    \ -1]\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts\
    \ a string and returns a string with all the letters capitalized.", "    unique_chars\
    \ = Set()\n    for w in words\n        for c in w\n            unique_chars.add(c)\n\
    \    end\n    \n    if unique_chars == Set()\n        return words[1]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == length(words)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == length(words)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == length(words)\n        return words[1]\n    end\n    \n    unique_chars =\
    \ unique_chars - Set", "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars.sort()\n    return\
    \ unique_chars[end]\nend\n</cell>\n<code language=julia-1.0>\nfind_max([\"name\"\
    , \"of\", \"string\"])\n</cell>\n<code language=julia-1.0>\nfind_max([\"name\"\
    , \"enam\", \"game\"])\n</cell>\n<code language=julia-1.0>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\nWrite a function that accepts a\
    \ string and returns the number of unique characters in it.", "    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    unique_chars_index = 0\n    for word\
    \ in words\n        for char in word\n            unique_chars.add(char)\n   \
    \         unique_chars_count += 1\n            if unique_chars_count > unique_chars_index\n\
    \                unique_chars_index = unique_chars_count\n            end\n  \
    \      end\n    end\n    \n    if unique_chars_count == 0\n        return words[1]\n\
    \    else\n        return words[unique_chars_index]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise: Write a function that accepts a list of strings and returns the word\
    \ with maximum number of unique characters. If the word has maximum number of\
    \ unique characters, return the first word in the lexicographical order.", " \
    \   unique_chars = Set{String}()\n    for word in words \n        for char in\
    \ word\n            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set{String}()\n    if length(unique_chars) == 0\n        return words[1]\n\
    \    else\n        return words[findall(unique_chars)[1]]\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that accepts a list of strings.\n    The\
    \ list contains different words. Return the word with minimum number\n    of unique\
    \ characters. If multiple strings have minimum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word", "    unique_chars = Set{String}()\n\
    \    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    unique_chars\n    unique_chars.max_by(&length)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kk", "    unique_chars\
    \ = Set{Char}(\"\")\n    for w in words\n        unique_chars = unique_chars |\
    \ Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars.update([c for c in words[1]])\n    unique_chars.update([c\
    \ for c in words[2]])\n    unique_chars.update([c for c in words[3]])\n    unique_chars.update([c\
    \ for c in words[4]])\n    unique_chars.update([c for c in words[5]])\n    unique_chars.update([c\
    \ for c in words[6]])\n    unique_chars.update([c for c in words[7]])\n    unique_chars.update([c\
    \ for c in words[8]])\n    unique_chars.update([c for c in words[9]])\n    unique_chars.update([c\
    \ for c in words[10]])\n    unique_chars.update([c for c in words[11]])\n    unique_chars.update([c\
    \ for c in words[12]])\n    unique_chars.update([c for c in words[13]])\n    unique_chars.update([c\
    \ for c in words[14]])\n    unique_chars.update([c for c in words[15]])\n    unique_chars.update([c\
    \ for c in words[16]])\n    unique_chars.update([c for c in words[17]])\n    unique_chars.update([c\
    \ for c in words[18]])\n    unique_chars.update([c for c in words[19]])\n    unique_chars.update([c\
    \ for c in words[20]])\n    unique_chars.update([c for c in words[21]])\n    unique_chars.update([c\
    \ for c in words[22]])\n    unique_chars.update([c for c in words[23]])\n    unique_chars.update([c\
    \ for c in words[24]])\n    unique_chars.update([c for c in words[25]])\n    unique_chars.update([c\
    \ for c in words[26]])\n    unique_chars.update([c for c in words[27]])\n    unique_chars.update([c\
    \ for c in words[28]])\n    unique_chars.update([c for c in words[29]])\n    unique_chars.update([c\
    \ for c in words[30]])\n    unique_chars.update([c for c in words[31]])\n    unique_chars.update([c\
    \ for c in words[32]])\n    unique_chars.update([c for c in words[33]])\n    unique_chars.update([c\
    \ for c in words[34]])\n    unique_chars.update([c for c in words[35]])\n    unique_chars.update([c\
    \ for c in words[36]])\n    unique_chars.update([c for c in words[37]])\n    unique_chars.update([c\
    \ for c in words[38]])\n    unique_chars.update([c for c in words[39]])\n", " \
    \   unique_chars = Set{String}()\n    unique_chars_count = Dict{String, Int}()\n\
    \    for w in words\n        unique_chars |= Set(w)\n        unique_chars_count[w]\
    \ = length(unique_chars)\n    end\n    unique_chars_sorted = sort(unique_chars_count)\n\
    \    return unique_chars_sorted[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a string and returns the number of occurrences of that\
    \ string in the string.", "    unique_chars = Set{Char}(\"\")\n    unique_chars\
    \ = unique_chars.union(Set(word))\n    unique_chars = unique_chars.union(Set(word[1]))\n\
    \    unique_chars = unique_chars.union(Set(word[2]))\n    unique_chars = unique_chars.union(Set(word[3]))\n\
    \    unique_chars = unique_chars.union(Set(word[4]))\n    unique_chars = unique_chars.union(Set(word[5]))\n\
    \    unique_chars = unique_chars.union(Set(word[6]))\n    unique_chars = unique_chars.union(Set(word[7]))\n\
    \    unique_chars = unique_chars.union(Set(word[8]))\n    unique_chars = unique_chars.union(Set(word[9]))\n\
    \    unique_chars = unique_chars.union(Set(word[10]))\n    unique_chars = unique_chars.union(Set(word[11]))\n\
    \    unique_chars = unique_chars.union(Set(word[12]))\n    unique_chars = unique_chars.union(Set(word[13]))\n\
    \    unique_chars = unique_chars.union(Set(word[14]))\n    unique_chars = unique_chars.union(Set(word[15]))\n\
    \    unique_chars = unique_chars.union(Set(word[16]))\n    unique_chars = unique_chars.union(Set(word[17]))\n\
    \    unique_chars = unique_chars.union(Set(word[18]))\n    unique_chars = unique_chars.union(Set(word[19]))\n\
    \    unique_chars = unique_chars.union(Set(word[20]))\n    unique_chars = unique_chars.union(Set(word[21]))\n\
    \    unique_chars = unique_chars.union(Set(word[22]))\n    unique_chars = unique_chars.union(Set(word[23]))\n\
    \    unique_chars = unique_chars.union(Set(word[24]))\n    unique_chars = unique_chars.union(Set(word[25]))\n\
    \    unique_chars = unique_chars.union(Set(word[26]))\n    unique_chars = unique_chars.union(Set(word[27]))\n\
    \    unique_chars = unique_chars.union(Set(word[28]))\n    unique_chars = unique_chars.union(Set(word[29]))\n\
    \    unique_chars = unique_chars.union(Set(word[30]))\n    unique_chars = unique_chars.union(Set(word[31]))\n\
    \    unique_chars = unique_chars.union(Set(word[32]))\n    unique_chars = unique_chars.union(Set(word[33]))\n\
    \    unique_chars = unique_chars.union(Set(word[34]))\n    unique_chars = unique_chars.union(Set(word[35]))\n\
    \    unique_chars = unique_chars.union(Set(word[36]))\n    ", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word", "    unique_chars = Set{Char}(\"\
    \")\n    for word in words \n        for char in word\n            unique_chars\
    \ = unique_chars + char\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    unique_chars = unique_chars - Set{Char}(\"e\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"i\")\n    unique_chars = unique_chars - Set{Char}(\"o\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"u\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"A\")\n    unique_chars = unique_chars - Set{Char}(\"E\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"I\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"O\")\n    unique_chars = unique_chars - Set{Char}(\"U\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"e\")\n    unique_chars = unique_chars - Set{Char}(\"i\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"o\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"u\")\n    unique_chars = unique_chars - Set{Char}(\"A\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"E\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"I\")\n    unique_chars = unique_chars - Set{Char}(\"O\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"U\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"e\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"i\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"o\")\n    unique_chars = unique_chars - Set{Char}(\"u\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"E\")\n    unique_chars = unique_chars - Set{Char}(\"I\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"O\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"U\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"e\")\n    unique_chars = unique_",
  "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_char", "    unique_chars\
    \ = Set()\n    unique_chars_count = 0\n    \n    for word in words\n        for\
    \ char in word\n            unique_chars << char\n            unique_chars_count\
    \ += 1 if char in unique_chars \n        end\n    end\n    \n    if unique_chars_count\
    \ > 1\n        return words[words.index(unique_chars.first)]\n    else\n     \
    \   return unique_chars.first\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a string and returns a boolean indicating whether the\
    \ string contains only letters.", "    unique_chars = Set{Char}(\"\")\n    for\
    \ word in words \n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars\
    \ = unique_chars - Set{Char}(\"e\")\n    unique_chars = unique_chars - Set{Char}(\"\
    i\")\n    unique_chars = unique_chars - Set{Char}(\"o\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"u\")\n    unique_chars = unique_chars - Set{Char}(\"y\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"s\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"t\")\n    unique_chars = unique_chars - Set{Char}(\"h\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"r\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"c\")\n    unique_chars = unique_chars - Set{Char}(\"d\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"g\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"p\")\n    unique_chars = unique_chars - Set{Char}(\"f\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"v\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"k\")\n    unique_chars = unique_chars - Set{Char}(\"m\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"n\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"x\")\n    unique_chars = unique_chars - Set{Char}(\"q\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"b\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"k\")\n    unique_chars = unique_chars - Set{Char}(\"m\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"n\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"x\")\n    unique_chars = unique_chars - Set{Char}(\"q\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"b\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"k\")\n    unique_chars = unique_chars - Set{Char}(\"m\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"n\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"x\")\n    unique_chars = unique_chars - Set{Char}(\"q", "    \n\
    \    unique_chars = Set{Char}(\"\")\n    \n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n    end\n    \n    if unique_chars.size\
    \ > 1\n        return words[words.index(words[words.index(words[words.index(words.index(words))])])]\n\
    \    else\n        return words[words.index(words[words.index(words[words.index(words)])])]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a list\
    \ of strings and returns a list of strings. \nThe function should remove all duplicate\
    \ words and return the list without duplicates.", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(word",
  "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[",
  "    unique_chars = Set{String}()\n    for w in words\n        for c in w\n    \
    \        unique_chars.add(c)\n            if unique_chars.size > max_unique_chars\n\
    \                max_unique_chars = unique_chars.size\n            end\n     \
    \   end\n    end\n    unique_chars = unique_chars.sorted()\n    unique_chars[max_unique_chars]\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a list of strings\
    \ and returns the word with maximum length. If multiple strings have maximum length,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    ", "    unique_chars =\
    \ Set{String}()\n    unique_chars.update(*words)\n    unique_chars = unique_chars.keys()\
    \ \n    unique_chars.sort()\n    unique_chars.reverse()\n    \n    if unique_chars.size\
    \ == 1\n        return unique_chars.first()\n    end\n    \n    unique_chars.last()\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ the number of occurrences of that string in the given string.", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(", "    \n    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_", "    unique_chars = Set()\n    unique_chars_counts\
    \ = Dict()\n    for word in words\n        unique_chars = unique_chars + Set(word)\n\
    \        unique_chars_counts[word] = length(unique_chars)\n    end\n    unique_chars_counts\
    \ = sort(unique_chars_counts, by=x->x[1])\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_counts[2:end]\n    unique_chars_counts\
    \ = unique_chars_counts[end:end]\n    unique_chars_counts = unique_chars_counts[2:end]\n\
    \    unique_chars_counts = unique_chars_counts[end:end]\n    unique_chars_counts\
    \ = unique_chars_counts[2:end]\n    unique_chars_counts = unique_chars_counts[end:end]\n\
    \    unique_chars_counts = unique_chars_count", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = ", "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n\
    \    unique_chars.sort!()\n    unique_chars.reverse!()\n    return unique_chars.last\n\
    end", "    unique_chars = Set()\n    for word in words\n        for char in word\n\
    \            unique_chars.add(char)\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n\
    \    unique_chars = unique_chars - Set(\"&\")\n    unique_chars = unique_chars\
    \ - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"/\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"^\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"|\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"", "    \n    unique_chars\
    \ = Set()\n    \n    for word in words\n        for char in word\n           \
    \ unique_chars.add(char)\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[2]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[3]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[4]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[5]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[6]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[7]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[8]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[9]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[10]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[11]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[12]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[13]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[14]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[15]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[16]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set", "    unique_chars = Set{String}()\n    for word in words \n        for\
    \ char in word\n            if !unique_chars.contains(char)\n                unique_chars.add(char)\n\
    \            else\n                break\n        end\n    end\n    \n    if unique_chars.size\
    \ > 1\n        unique_chars.sort\n    end\n    \n    return unique_chars[1]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaa", "    unique_chars = Set()\n  \
    \  unique_chars_count = 0\n    \n    for word in words\n        unique_chars_count\
    \ += length(word)\n        unique_chars = unique_chars | Set(word)\n    end\n\
    \    \n    if unique_chars_count > length(words)\n        return words[end]\n\
    \    else\n        \n        unique_chars_count = 0\n        \n        for word\
    \ in words\n            unique_chars_count += length(word)\n        end\n    \
    \    \n        if unique_chars_count > length(words)\n            return words[end]\n\
    \        else\n            \n            unique_chars_count = 0\n            \n\
    \            for word in words\n                unique_chars_count += length(word)\n\
    \            end\n            \n            if unique_chars_count > length(words)\n\
    \                return words[end]\n            else\n                \n     \
    \           unique_chars_count = 0\n                \n                for word\
    \ in words\n                    unique_chars_count += length(word)\n         \
    \       end\n                \n                if unique_chars_count > length(words)\n\
    \                    return words[end]\n                else\n               \
    \     \n                    unique_chars_count = 0\n                    \n   \
    \                 for word in words\n                        unique_chars_count\
    \ += length(word)\n                    end\n                    \n           \
    \         if unique_chars_count > length(words)\n                        return\
    \ words[end]\n                    else\n                        \n           \
    \             unique_chars_count = 0\n                        \n             \
    \           for word in words\n                            unique_chars_count\
    \ += length(word)\n                        end\n                        \n   \
    \                     if unique_chars_count > length(words)\n                \
    \            return words[end]\n                        else\n               \
    \             \n                            unique_chars_count = 0\n         \
    \                   \n                            for word in words\n        \
    \                        unique_chars_count += length(word)\n                \
    \            end\n                            \n                            if\
    \ unique_chars_count > length(words)\n                                return words[end]\n\
    \                            else\n                                \n        \
    \                        unique_chars_count = 0\n                            \
    \    \n                                for word in words\n                   \
    \                 unique_chars_count += length(word)\n                       \
    \         end\n                                \n                            \
    \    if unique_chars_count > length(words)\n                                 \
    \   return words[end]\n                                else\n                \
    \                    \n                                    unique_chars_count\
    \ = 0\n                                    \n                                \
    \    for word in words\n                                        unique_chars_count\
    \ += length(word)\n                                    end\n                 \
    \                   \n                                    if unique_chars_count\
    \ > length(words)\n                                        return words[end]\n\
    \                                    else\n                                  \
    \      \n                                        unique_chars_count = 0\n    \
    \                                    \n                                      \
    \  for word in words\n                                            unique_chars_count\
    \ += length(word)\n                                        end\n             \
    \                           \n                                        if unique_chars_count\
    \ > length(words)\n                                            return words[end]\n\
    \                                        else\n                              \
    \              \n                                            unique_chars_count\
    \ = 0\n                                            \n                        \
    \                    for word in words\n                                     \
    \           unique_chars_count += length(word)\n                             \
    \               end\n                                            \n          \
    \                                  if unique_chars_count > length(words)\n   \
    \                                             return words[end]\n            \
    \                                else\n                                      \
    \          \n                                                unique_chars_count\
    \ = 0\n                                                \n                    \
    \                            for word in words\n                             \
    \                       unique_chars_count += length(word)\n                 \
    \                               end\n                                        \
    \        \n", "    unique_chars = Set{String}()\n    word_with_max_unique_chars\
    \ = \"\"\n    for word in words\n        unique_chars = unique_chars + Set(word)\n\
    \        if length(unique_chars) > length(word_with_max_unique_chars)\n      \
    \      word_with_max_unique_chars = word\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.0>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of occurrences of the character 'a' in the string.", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_", "    unique_chars = Set{Char}(\"\")\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[35]))\n    unique_chars = ",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[end]\n    return unique_chars\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a list of strings and returns\
    \ a list of strings. \nThe function should remove duplicates and sort the strings\
    \ in lexicographical order.", "    \n    unique_chars = Set{String}()\n    \n\
    \    for word in words \n        unique_chars = unique_chars + Set(word)\n   \
    \ end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars =\
    \ unique_chars - Set(\"b\")\n    unique_chars = unique_chars - Set(\"c\")\n  \
    \  unique_chars = unique_chars - Set(\"d\")\n    unique_chars = unique_chars -\
    \ Set(\"e\")\n    unique_chars = unique_chars - Set(\"f\")\n    unique_chars =\
    \ unique_chars - Set(\"g\")\n    unique_chars = unique_chars - Set(\"h\")\n  \
    \  unique_chars = unique_chars - Set(\"i\")\n    unique_chars = unique_chars -\
    \ Set(\"j\")\n    unique_chars = unique_chars - Set(\"k\")\n    unique_chars =\
    \ unique_chars - Set(\"l\")\n    unique_chars = unique_chars - Set(\"m\")\n  \
    \  unique_chars = unique_chars - Set(\"n\")\n    unique_chars = unique_chars -\
    \ Set(\"o\")\n    unique_chars = unique_chars - Set(\"p\")\n    unique_chars =\
    \ unique_chars - Set(\"q\")\n    unique_chars = unique_chars - Set(\"r\")\n  \
    \  unique_chars = unique_chars - Set(\"s\")\n    unique_chars = unique_chars -\
    \ Set(\"t\")\n    unique_chars = unique_chars - Set(\"u\")\n    unique_chars =\
    \ unique_chars - Set(\"v\")\n    unique_chars = unique_chars - Set(\"w\")\n  \
    \  unique_chars = unique_chars - Set(\"x\")\n    unique_chars = unique_chars -\
    \ Set(\"y\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars =\
    \ unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"B\")\n  \
    \  unique_chars = unique_chars - Set(\"C\")\n    unique_chars = unique_chars -\
    \ Set(\"D\")\n    unique_chars = unique_chars - Set(\"E\")\n    unique_chars =\
    \ unique_chars - Set(\"F\")\n    unique_chars = unique_chars - Set(\"G\")\n  \
    \  unique_chars = unique_chars - Set(\"H\")\n    unique_chars = unique_chars -\
    \ Set(\"I\")\n    unique_chars = unique_chars - Set(\"J\")\n    unique_chars =\
    \ unique_chars - Set(\"K\")\n    unique_chars = unique_chars - Set(\"L\")\n  \
    \  unique_chars = unique_chars - Set(\"M\")\n    unique_chars = unique_chars -\
    \ Set(\"N\")\n    unique_chars = unique_char", "    unique_chars = Set{String}()\n\
    \    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    unique_chars = unique_chars - Set{String}()\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars =\
    \ unique_chars - Set{String}", "    unique_chars = Set{Char}(\"\")\n    for word\
    \ in words \n        unique_chars = unique_chars | Set(word)\n    end\n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set", "    unique_chars = Set{Char}(\"\")\n\
    \    for word in words \n        for char in word\n            unique_chars =\
    \ unique_chars + char\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - ", "    unique_chars = Set{Char}(\"\")\n    unique_chars.update([c\
    \ for c in words[1]])\n    for w in words[2:end]\n        unique_chars.update([c\
    \ for c in w])\n    return words[1] if unique_chars.size == words[1].size else\
    \ words[2]\nend", "    unique_chars = Set{Char}(\"\")\n    unique_chars_count\
    \ = Dict{Char, Int}()\n    for word in words\n        for char in word\n     \
    \       if char in unique_chars\n                unique_chars_count[char] += 1\n\
    \            else\n                unique_chars.add(char)\n                unique_chars_count[char]\
    \ = 1\n    end\n    \n    unique_chars_sorted = Dict{Char, Int}()\n    for char\
    \ in unique_chars\n        unique_chars_sorted[char] = unique_chars_count[char]\n\
    \    end\n    \n    unique_chars_sorted = sort(unique_chars_sorted)\n    \n  \
    \  for word in words\n        word_count = unique_chars_sorted[word]\n       \
    \ if word_count > unique_chars_count[word]\n            return word\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string\
    \ and returns a string with all the characters in lower case. \nIf the input string\
    \ has any characters that are not letters, return an empty string.", "    unique_chars\
    \ = Set{Char}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(length))\n    unique_chars\
    \ = unique_chars.union(unique_chars.map(length))\n    unique_chars = unique_chars.union(unique_chars.map(length))\n\
    \    unique_chars = unique_chars.union(unique_chars.map(", "    unique_chars =\
    \ Set{Char}()\n    unique_chars.update(\"a\"..\"z\")\n    unique_chars.update(\"\
    A\"..\"Z\")\n    unique_chars.update(\"0\"..\"9\")\n    unique_chars.update(\"\
    _\") # ignore underscore\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\":\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    <\")\n    unique_chars.update(\">\")\n    unique_chars.update(\"?\")\n    unique_chars.update(\"\
    !\")\n    unique_chars.update(\"'\")\n    unique_chars.update(\"$\")\n    unique_chars.update(\"\
    *\")\n    unique_chars.update(\"(\")\n    unique_chars.update(\")\")\n    unique_chars.update(\"\
    [\")\n    unique_chars.update(\"]\")\n    unique_chars.update(\"{\")\n    unique_chars.update(\"\
    }\")\n    unique_chars.update(\"|\")\n    unique_chars.update(\"\\\\\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\".\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\",\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\".\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.update(\",\")\n    unique_chars.update(\".\")\n    unique_chars.update(\"\
    ;\")\n    unique_chars.update(\":\")\n    unique_chars.update(\",\")\n    unique_chars.update(\"\
    .\")\n    unique_chars.update(\";\")\n    unique_chars.update(\":\")\n    unique_chars.update(\"\
    ,\")\n    unique_chars.update(\".\")\n    unique_chars.update(\";\")\n    unique_chars.update(\"\
    :\")\n    unique_chars.", "    unique_chars = Set{Char}(\"\")\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[35]))\n\
    \    unique_chars = ", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a string and returns a boolean indicating\
    \ whether the string contains only letters a-z.", "    unique_chars = Set()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(Set(words[", "    unique_chars = Set{String}()\n\
    \    unique_chars.update(*words)\n    unique_chars.sort!()\n    return unique_chars.max()\
    \ \nend", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(Set(words[",
  "    unique_chars = Set()\n    for word in words\n        for char in word\n   \
    \         unique_chars.add(char)\n    end\n    unique_chars\nend", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words[1]))\n\
    \    unique_chars = unique_chars.union(Set(words[2]))\n    unique_chars = unique_chars.union(Set(words[3]))\n\
    \    unique_chars = unique_chars.union(Set(words[4]))\n    unique_chars = unique_chars.union(Set(words[5]))\n\
    \    unique_chars = unique_chars.union(Set(words[6]))\n    unique_chars = unique_chars.union(Set(words[7]))\n\
    \    unique_chars = unique_chars.union(Set(words[8]))\n    unique_chars = unique_chars.union(Set(words[9]))\n\
    \    unique_chars = unique_chars.union(Set(words[10]))\n    unique_chars = unique_chars.union(Set(words[11]))\n\
    \    unique_chars = unique_chars.union(Set(words[12]))\n    unique_chars = unique_chars.union(Set(words[13]))\n\
    \    unique_chars = unique_chars.union(Set(words[14]))\n    unique_chars = unique_chars.union(Set(words[15]))\n\
    \    unique_chars = unique_chars.union(Set(words[16]))\n    unique_chars = unique_chars.union(Set(words[17]))\n\
    \    unique_chars = unique_chars.union(Set(words[18]))\n    unique_chars = unique_chars.union(Set(words[19]))\n\
    \    unique_chars = unique_chars.union(Set(words[20]))\n    unique_chars = unique_chars.union(Set(words[21]))\n\
    \    unique_chars = unique_chars.union(Set(words[22]))\n    unique_chars = unique_chars.union(Set(words[23]))\n\
    \    unique_chars = unique_chars.union(Set(words[24]))\n    unique_chars = unique_chars.union(Set(words[25]))\n\
    \    unique_chars = unique_chars.union(Set(words[26]))\n    unique_chars = unique_chars.union(Set(words[27]))\n\
    \    unique_chars = unique_chars.union(Set(words[28]))\n    unique_chars = unique_chars.union(Set(words[29]))\n\
    \    unique_chars = unique_chars.union(Set(words[30]))\n    unique_chars = unique_chars.union(Set(words[31]))\n\
    \    unique_chars = unique_chars.union(Set(words[32]))\n    unique_chars = unique_chars.union(Set(words[33]))\n\
    \    unique_chars = unique_chars.union(Set(words[34]))\n    unique_chars = unique_chars.union(",
  "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    \n    unique_chars.max() \nend", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars_count = Set{Int}(0)\n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n            unique_chars_count[char]\
    \ += 1\n    end\n    \n    unique_chars_count = unique_chars_count.values()\n\
    \    unique_chars_count = unique_chars_count.max()\n    \n    if unique_chars_count\
    \ == 0\n        return words[1]\n    else\n        unique_chars_count = unique_chars_count.min()\n\
    \        \n        for word in words\n            unique_chars_count = unique_chars_count.min(unique_chars_count)\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"fffff\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"fffff\", \"gggggg\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"iiiiii\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"iiiiii\", \"jjjjjj\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"iiiiii\", \"jjjjjj\", \"kkkkkk\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"iiiiii\", \"jjjjjj\"\
    , \"kkkkkk\", \"llllll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"fffff\", \"gggggg\", \"hhhhhh\", \"\
    iiiiii\", \"jjjjjj\", \"", "    \n    unique_chars = Set()\n    \n    for w in\
    \ words\n        for c in w\n            unique_chars.add(c)\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    \n    if length(unique_chars) == 0\n        return words[1]\n    end\n  \
    \  \n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\".\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\",\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\":\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\";\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"?\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\")\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"]\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"}\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\":\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\";\")"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
