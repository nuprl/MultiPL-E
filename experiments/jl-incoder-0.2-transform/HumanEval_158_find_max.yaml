name: HumanEval_158_find_max
language: jl
prompt: "\"\"\"Write a function that accepts a list of strings.\n    The list contains\
  \ different words. Return the word with maximum number\n    of unique characters.\
  \ If multiple strings have maximum number of unique\n    characters, return the\
  \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
  , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\", \"\
  game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n    \"\
  aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
  name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\
  aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"\
  are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\"\
  , \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\
  \t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
completions: ["    unique_chars = Set{String}()\n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n    end\n    unique_chars\n\
    \    if length(unique_chars) > length(words)\n        words[1]\n    else\n   \
    \     words[end]\n    end\nend\n</cell>\n<code language=julia-1.0>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of times it occurs in the string.",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length))\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length))\n    unique_chars =\
    \ unique_chars.union(words.map(length", "    \n    unique_chars = Set()\n    \n\
    \    for w in words\n        unique_chars = unique_chars | Set(w)\n    end\n \
    \   \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"e\")\n    unique_chars = unique_chars - Set(\"i\")\n    unique_chars\
    \ = unique_chars - Set(\"o\")\n    unique_chars = unique_chars - Set(\"u\")\n\
    \    \n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"E\")\n    unique_chars = unique_chars - Set(\"I\")\n    unique_chars\
    \ = unique_chars - Set(\"O\")\n    unique_chars = unique_chars - Set(\"U\")\n\
    \    \n    unique_chars = unique_chars - Set(\"1\")\n    unique_chars = unique_chars\
    \ - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n    unique_chars\
    \ = unique_chars - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n\
    \    unique_chars = unique_chars - Set(\"6\")\n    unique_chars = unique_chars\
    \ - Set(\"7\")\n    unique_chars = unique_chars - Set(\"8\")\n    unique_chars\
    \ = unique_chars - Set(\"9\")\n    \n    unique_chars = unique_chars - Set(\"\
    0\")\n    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_", "    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words \n        for c in word\n         \
    \   unique_chars = unique_chars + c\n    end\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"z\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"Z\")\n    unique_chars = unique_chars - Set{Char}(\"0\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"$\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"!\")\n    unique_chars = unique_chars - Set{Char}(\"?\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\"(\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\")\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"[\")\n    unique_chars = unique_chars - Set{Char}(\"]\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"{\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"}\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"(\")\n    unique_chars = unique_chars - Set{Char}(\")\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"[\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"]\")\n    unique_chars = unique_chars - Set{Char}(\"{\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"}\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"(\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\")\")\n    unique_chars = unique_chars - Set{Char}(\"[\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"]\")\n    unique_chars = unique_char",
  "    unique_chars = Set()\n    word_with_max_unique_chars = \"\"\n    for word in\
    \ words \n        unique_chars = unique_chars | Set(word)\n        if unique_chars.size\
    \ > word_with_max_unique_chars.length\n            word_with_max_unique_chars\
    \ = word\n        end\n    end\n    return word_with_max_unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a string and returns a boolean\
    \ indicating whether that string is a palindrome or not.", "    unique_chars =\
    \ Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word", "    unique_chars = Set{String}()\n\
    \    unique_chars_count = 0\n    unique_chars_index = 0\n    for word in words\n\
    \        for char in word\n            if char in unique_chars\n             \
    \   unique_chars_count += 1\n                if unique_chars_count > unique_chars_index\n\
    \                    unique_chars_index = unique_chars_count\n            else\n\
    \                unique_chars.add(char)\n    end\n    return words[unique_chars_index]\n\
    end\n</cell>\n<code language=julia-1.3>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.3>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.3>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a string and returns\
    \ the number of occurrences of that string in the given string.", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n", "    unique_chars = Set{String}()\n\
    \    unique_chars.update(*words)\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    return unique_chars.last\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that accepts a string and returns the number of unique characters in it.", " \
    \   unique_chars = Set()\n    unique_chars_count = 0\n    for word in words\n\
    \        unique_chars = unique_chars + Set(word)\n        unique_chars_count =\
    \ unique_chars_count + length(word)\n    end\n    \n    if unique_chars_count\
    \ > length(words)\n        return words[end]\n    else\n        unique_chars =\
    \ unique_chars - Set(\"a\")\n        unique_chars = unique_chars - Set(\"z\")\n\
    \        unique_chars = unique_chars - Set(\"A\")\n        unique_chars = unique_chars\
    \ - Set(\"Z\")\n        unique_chars = unique_chars - Set(\"0\")\n        unique_chars\
    \ = unique_chars - Set(\"9\")\n        unique_chars = unique_chars - Set(\"_\"\
    )\n        unique_chars = unique_chars - Set(\"$\")\n        unique_chars = unique_chars\
    \ - Set(\"%\")\n        unique_chars = unique_chars - Set(\"&\")\n        unique_chars\
    \ = unique_chars - Set(\"*\")\n        unique_chars = unique_chars - Set(\"(\"\
    )\n        unique_chars = unique_chars - Set(\")\")\n        unique_chars = unique_chars\
    \ - Set(\"+\")\n        unique_chars = unique_chars - Set(\",\")\n        unique_chars\
    \ = unique_chars - Set(\".\")\n        unique_chars = unique_chars - Set(\":\"\
    )\n        unique_chars = unique_chars - Set(\";\")\n        unique_chars = unique_chars\
    \ - Set(\"/\")\n        unique_chars = unique_chars - Set(\"[\")\n        unique_chars\
    \ = unique_chars - Set(\"]\")\n        unique_chars = unique_chars - Set(\"{\"\
    )\n        unique_chars = unique_chars - Set(\"}\")\n        unique_chars = unique_chars\
    \ - Set(\"!\")\n        unique_chars = unique_chars - Set(\"?\")\n        unique_chars\
    \ = unique_chars - Set(\":\")\n        unique_chars = unique_chars - Set(\";\"\
    )\n        unique_chars = unique_chars - Set(\"+\")\n        unique_chars = unique_chars\
    \ - Set(\",\")\n        unique_chars = unique_chars - Set(\".\")\n        unique_chars\
    \ = unique_chars - Set(\":\")\n        unique_chars = unique_chars - Set(\";\"\
    )\n        unique_chars = unique_chars - Set(\"/\")\n        unique_chars = unique_chars\
    \ - Set(\"[\")\n        unique_chars = unique_chars - Set(\"]\")\n        unique_chars\
    \ = unique_chars - Set(\"{\")\n        unique_chars = unique_chars - Set(\"}\"\
    )\n        unique_chars = unique_chars - Set(\"!\")\n        unique_chars = unique_chars\
    \ - Set(\"?\")\n        unique_chars = unique_chars - ", "    unique_chars = Set()\n\
    \    unique_chars_count = 0\n    \n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_count = unique_chars_count\
    \ + length(word)\n    end\n    \n    if unique_chars_count > length(words)\n \
    \       return words[end]\n    else\n        return words[end]\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ a list of all words in the string that have length greater than or equal to\
    \ 3. Return an empty list if the string length is less than 3.", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars_count = Set{Int}(0)\n    for word in words\n\
    \        for char in word\n            unique_chars.add(char)\n            unique_chars_count[char]\
    \ = unique_chars_count[char] + 1\n    end\n    \n    unique_chars_count = unique_chars_count.values()\n\
    \    unique_chars_count = unique_chars_count.max()\n    \n    if unique_chars_count\
    \ == 0\n        return words[1]\n    end", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words[1]))\n    unique_chars = unique_chars.union(Set(words[2]))\n\
    \    unique_chars = unique_chars.union(Set(words[3]))\n    unique_chars = unique_chars.union(Set(words[4]))\n\
    \    unique_chars = unique_chars.union(Set(words[5]))\n    unique_chars = unique_chars.union(Set(words[6]))\n\
    \    unique_chars = unique_chars.union(Set(words[7]))\n    unique_chars = unique_chars.union(Set(words[8]))\n\
    \    unique_chars = unique_chars.union(Set(words[9]))\n    unique_chars = unique_chars.union(Set(words[10]))\n\
    \    unique_chars = unique_chars.union(Set(words[11]))\n    unique_chars = unique_chars.union(Set(words[12]))\n\
    \    unique_chars = unique_chars.union(Set(words[13]))\n    unique_chars = unique_chars.union(Set(words[14]))\n\
    \    unique_chars = unique_chars.union(Set(words[15]))\n    unique_chars = unique_chars.union(Set(words[16]))\n\
    \    unique_chars = unique_chars.union(Set(words[17]))\n    unique_chars = unique_chars.union(Set(words[18]))\n\
    \    unique_chars = unique_chars.union(Set(words[19]))\n    unique_chars = unique_chars.union(Set(words[20]))\n\
    \    unique_chars = unique_chars.union(Set(words[21]))\n    unique_chars = unique_chars.union(Set(words[22]))\n\
    \    unique_chars = unique_chars.union(Set(words[23]))\n    unique_chars = unique_chars.union(Set(words[24]))\n\
    \    unique_chars = unique_chars.union(Set(words[25]))\n    unique_chars = unique_chars.union(Set(words[26]))\n\
    \    unique_chars = unique_chars.union(Set(words[27]))\n    unique_chars = unique_chars.union(Set(words[28]))\n\
    \    unique_chars = unique_chars.union(Set(words[29]))\n    unique_chars = unique_chars.union(Set(words[30]))\n\
    \    unique_chars = unique_chars.union(Set(words[31]))\n    unique_chars = unique_chars.union(Set(words[32]))\n\
    \    unique_chars = unique_chars.union(Set(words[33]))\n    unique_chars = unique_chars.union(Set(words[34]))\n\
    \    unique_chars = unique_chars.union(", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(word",
  "    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union(strings(words))\n\
    \    unique_chars = unique_chars.union(strings(words))\n    unique_chars = unique_chars.union",
  "    unique_chars = Set()\n    for word in words \n        for char in word\n  \
    \          unique_chars.add(char)\n    end\n    unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise\nWrite a function that accepts a list of strings and returns the word\
    \ with minimum number of unique characters.", "    \n    unique_chars = Set()\n\
    \    \n    for word in words\n        unique_chars = unique_chars | Set(word)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return \"z\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"0\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return \"9\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \".\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return \"_\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"$\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"$\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"%\")\n    \n    if length(unique_chars) == 0\n        return \"%\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"&\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"&\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"(\")\n    \n    if length(unique_chars) == 0\n        return \"(\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\")\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \")\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"+\")\n    \n    if length(unique_chars) == 0\n        return \"+\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\",\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \",\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\":\")\n    \n    if length(unique_chars) == 0\n        return \":\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\";\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \";\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"=\")\n    \n    if length(unique_chars) == 0\n        return \"=\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"[\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"[\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set", "    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word", "    unique_chars = Set{Char}()\n\
    \    word_with_max_unique_chars = \"\"\n    for word in words \n        unique_chars\
    \ = unique_chars + Set{Char}(word)\n        if unique_chars.size > word_with_max_unique_chars.length\n\
    \            word_with_max_unique_chars = word\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a string and returns the number of unique characters in the string.\
    \ \nIf the string contains no unique characters, return 0.", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
