name: HumanEval_75_is_multiply_prime
language: jl
prompt: "\"\"\"Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
  \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 *\
  \ 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
  \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
  \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t\
  @test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
  \ == false)\n\t@test(candidate(1001) == true)\nend\n"
completions: ["    if a < 100\n        return false\n    \n    primes = primes(a)\n\
    \    \n    for p in primes\n        if p * p > a\n            return false\n \
    \       \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n  \
    \  else\n        false\n    end\nend\n</cell>\n<code language=julia-1.4>\n@code_warntype\
    \ is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return false\n\
    \    \n    primes = primes_less_than(a) \n    \n    for p in primes\n        if\
    \ p * p > a\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a <\
    \ 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a perfect square, false otherwise.\nExample:\n\
    >>> is_perfect_square(25)\ntrue\n25 = 2 * 3 * 5 * 7\n25 = 2 * 3 * 5 * 7 * 11\n\
    25 = 2 * 3 * 5 * 7 * 11 * 13\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17\n25 = 2 * 3 *\
    \ 5 * 7 * 11 * 13 * 17 * 19\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23\n25 =\
    \ 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\n25 = 2 * 3 * 5 * 7 * 11 * 13 *\
    \ 17 * 19 * 23 * 29 * 31\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31\
    \ * 37\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41\n25 =\
    \ 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43\n25 = 2 * 3\
    \ * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47\n25 = 2 * 3 *\
    \ 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\n25 = 2 *\
    \ 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59\n\
    25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53\
    \ * 59 * 61\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 *\
    \ 43 * 47 * 53 * 59 * 61 * 67\n25 = 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29\
    \ * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67 * 71\n25 = 2 * 3 * 5 * 7 * 11 *\
    \ 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43 * 47 * 53 * 59 * 61 * 67 * 71 * 73\n\
    25 = 2 * 3 * 5 * 7 * ", "    if a < 100\n        return false\n    \n    primes\
    \ = primes_upto(a-1)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000", " \
    \   if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a < 100\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n@assert\
    \ is_multiply_prime(100) == false\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    \    \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\
    \"\"", "    if a < 100\n        return false\n    \n    primes = primes(a)\n \
    \   \n    for i in primes\n        if a % i == 0\n            return false\n \
    \   \n    return true\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 3 * 7 * 11 * 13 * 17 * 19 * 23 * 29 *\
    \ 31 * 37 * 41\n</text>\n<code language=julia-1.0>", "    if a < 100\n       \
    \ true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100.\n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30\
    \ = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    primes = prime_numbers(a)\n    \n    for p in primes\n\
    \        if p*p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\nExample: \n>>> is_perfect_square(25)\n\
    true\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if a < 100\n        return false\n\
    \    \n    primes = primes_list(100)\n    \n    for i in primes\n        if a\
    \ % i == 0\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    primes = primes(a)\n    \n    for p in primes\n\
    \        if p*p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n\
    \    true\n    30 = 3 * 7 * 11\n    \"\"\"", "    if a < 100\n        false\n\
    \    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>", "    \n    primes = primes_list(100)\n  \
    \  \n    for p in primes\n        if p > a\n            if a % p == 0\n      \
    \          false\n            else\n                true\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n   \
    \ else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n@assert\
    \ is_multiply_prime(100) == false\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the given number is a perfect square, false otherwise.\n\
    Example:\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n\
    >>> is_perfect_square(26)\nfalse\n>>> is_perfect_square(27)\nfalse\n>>> is_perfect_square(100)\n\
    true\n>>> is_perfect_square(101)\nfalse\n>>> is_perfect_square(102)\nfalse\n>>>\
    \ is_perfect_square(103)\nfalse\n>>> is_perfect_square(104)\nfalse\n>>> is_perfect_square(105)\n\
    false\n>>> is_perfect_square(106)\nfalse\n>>> is_perfect_square(107)\nfalse\n\
    >>> is_perfect_square(108)\nfalse\n>>> is_perfect_square(109)\nfalse\n>>> is_perfect_square(110)\n\
    false\n>>> is_perfect_square(111)\nfalse\n>>> is_perfect_square(112)\nfalse\n\
    >>> is_perfect_square(113)\nfalse\n>>> is_perfect_square(114)\nfalse\n>>> is_perfect_square(115)\n\
    false\n>>> is_perfect_square(116)\nfalse\n>>> is_perfect_square(117)\nfalse\n\
    >>> is_perfect_square(118)\nfalse\n>>> is_perfect_square(119)\nfalse\n>>> is_perfect_square(120)\n\
    false\n>>> is_perfect_square(121)\nfalse\n>>> is_perfect_square(122)\nfalse\n\
    >>> is_perfect_square(123)\nfalse\n>>> is_perfect_square(124)\nfalse\n>>> is_perfect_square(125)\n\
    false\n>>> is_perfect_square(126)\nfalse\n>>> is_perfect_square(127)\nfalse\n\
    >>> is_perfect_square(128)\nfalse\n>>> is_perfect_square(129)\nfalse\n>>> is_perfect_square(130)\n\
    false\n>>> is_perfect_square(131)\nfalse\n>>> is_perfect_square(132)\nfalse\n\
    >>> is_perfect_square(133)\nfalse\n>>> is_perfect_square(134)\nfalse\n>>> is_perfect_square(135)\n\
    false\n>>> is_perfect_square(136)\nfalse\n>>> is_perfect_square(137)\nfalse\n\
    >>> is_perfect_square(138)\nfalse", "    \n    if a < 100\n        return false\n\
    \    \n    primes = primes(a)\n    \n    for p in primes\n        if p*p > a\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100.\nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>>\
    \ is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(11)\nfalse\n>>> is_prime(15)\n\
    true\n>>> is_prime(17)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(21)\nfalse\n\
    >>> is_prime(23)\ntrue\n>>> is_prime(29)\ntrue\n>>> is_prime(33)\ntrue\n>>> is_prime(37)\n\
    true\n>>> is_prime(39)\ntrue\n>>> is_prime(41)\ntrue\n>>> is_prime(47)\ntrue\n\
    >>> is_prime(49)\ntrue\n>>> is_prime(51)\ntrue\n>>> is_prime(59)\ntrue\n>>> is_prime(61)\n\
    true\n>>> is_prime(67)\ntrue\n>>> is_prime(71)\ntrue\n>>> is_prime(73)\ntrue\n\
    >>> is_prime(79)\ntrue\n>>> is_prime(83)\ntrue\n>>> is_prime(89)\ntrue\n>>> is_prime(97)\n\
    true\n>>> is_prime(101)\ntrue\n>>> is_prime(103)\ntrue\n>>> is_prime(107)\ntrue\n\
    >>> is_prime(109)\ntrue\n>>> is_prime(113)\ntrue\n>>> is_prime(127)\ntrue\n>>>\
    \ is_prime(131)\ntrue\n>>> is_prime(137)\ntrue\n>>> is_prime(139)\ntrue\n>>> is_prime(143)\n\
    true\n>>> is_prime(147)\ntrue\n>>> is_prime(151)\ntrue\n>>> is_prime(153)\ntrue\n\
    >>> is_prime(157)\ntrue\n>>> is_prime(159)\ntrue\n>>> is_prime(163)\ntrue\n>>>\
    \ is_prime(167)\ntrue\n>>> is_prime(173)\ntrue\n>>> is_prime(179)\ntrue\n>>> is_prime(181)\n\
    true\n>>> is_prime", "    \n    prime_numbers = primes(100)\n    \n    for i in\
    \ prime_numbers\n        if a % i == 0\n            return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a perfect\
    \ square, false otherwise.\nExample:\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfe", "    \n    primes = prime_numbers(a)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\n    \n    Example:\n    >>> is_perfect_square(25)\n\
    \    true\n    25 = 2 * 3 * 5\n    \"\"\"", "    if is_multiply_prime_helper(a)\
    \ == true\n    else \n        return false\nend\n\"\"\"\nWrite a function that\
    \ returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == true\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(1000)\ntrue\n>>>\
    \ is_prime(10000)\nfalse\n>>> is_prime(20000)\ntrue\n>>> is_prime(29999)\nfalse\n\
    >>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\n\
    false\n>>> is_prime(29999)\nfalse\n>>> is_prime(29999)\nfalse\n>>> is_prime(2",
  "    \n    if a < 100\n        \n        prime_numbers = primes(a)\n        \n \
    \       for prime in prime_numbers\n            if prime * prime > a\n       \
    \         return false\n            end\n        end\n        \n        return\
    \ true\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ a < 100\n        false\n    else\n        true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a <\
    \ 100\n        return false\n    else if a == 2\n        return true\n    else\
    \ if a == 3\n        return true\n    else if a % 2 == 0\n        return false\n\
    \    else if a % 3 == 0\n        return false\n    else if a % 5 == 0\n      \
    \  return false\n    else\n        primes = primes_list(100)\n        primes_count\
    \ = length(primes)\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_count - 1\n        primes_count\
    \ = primes_count + 1\n        primes_count = primes_", "    if is_multiply_prime_helper(a)\
    \ == true\n        return true\n    else\n        return false\n    end\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if a < 100\n        return false\n    \n    primes = primes(a)\n    \n   \
    \ for p in primes\n        if p * p > a\n            return false\n        end\n\
    \    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n@assert\
    \ is_multiply_prime(33) == false\n@assert is_multiply_prime(101) == false\n@assert\
    \ is_multiply_prime(101) == false\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the given number is a perfect square, false otherwise.\n\
    Example: \n    >>> is_perfect_square(25)\n    true\n    25 = 4 * 7\n    >>> is_perfect_square(25)\n\
    \    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 =\
    \ 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n\
    \    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 =\
    \ 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n\
    \    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 =\
    \ 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n\
    \    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 =\
    \ 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n\
    \    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 =\
    \ 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n\
    \    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 =\
    \ 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n\
    \    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 =\
    \ 5 * 7\n    >>> is_perfect_square(25)\n    false\n    25 = 5 * 7\n    >>> is_perfect_square(25)\n\
    \    false\n    25 = 5 * 7\n    >>> is_perfect_square(", "    \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for prime\
    \ in primes\n        if prime * 3 == a\n            return true\n        end\n\
    \    end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number or false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if is_multiply_prime_helper(a,3,100)\n\
    \    else false\nend", "    \n    if a < 100\n        return true\n    \n    primes\
    \ = primes(a)\n    \n    for prime in primes\n        if prime * prime > a\n \
    \           return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the multiplication of 3 prime numbers and false otherwise.\nKnowing that (a)\
    \ is less then 100. \nExample: \n>>> is_multiply_prime(30)\ntrue\n30 = 2 * 3 *\
    \ 5\n>>> is_multiply_prime(100)\nfalse\n100 = 2 * 3 * 5\n</text>\n<code language=julia-1.5>",
  "    if a < 100\n        true\n    else\n        false\n    end\nend", "    \n \
    \   if a < 100\n        return false\n    \n    primes = primes_list(100)\n  \
    \  \n    for i in primes\n        if a % i == 0\n            return false\n  \
    \  \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return false\n\
    \    else \n        primes = primes_list(100)\n        primes_set = Set(primes)\n\
    \        primes_set.add(a)\n        for i in primes_set\n            if i == a\n\
    \                false\n            else if i % a == 0\n                false\n\
    \            else if primes.contains(i) == false\n                false\n    \
    \        else if is_multiply_prime(i) == true\n                true\n        \
    \    else if is_multiply_prime(i) == false\n                false\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a power of 2 and\nfalse otherwise.\nExample: \n>>> is_power_of_2(2)\ntrue\n\
    >>> is_power_of_2(4)\ntrue\n>>> is_power_of_2(8)\ntrue\n>>> is_power_of_2(16)\n\
    true\n>>> is_power_of_2(32)\ntrue\n>>> is_power_of_2(64)\ntrue\n>>> is_power_of_2(128)\n\
    true\n>>> is_power_of_2(256)\ntrue\n>>> is_power_of_2(512)\ntrue\n>>> is_power_of_2(1024)\n\
    true\n>>> is_power_of_2(2048)\ntrue\n>>> is_power_of_2(4096)\ntrue\n>>> is_power_of_2(8192)\n\
    true\n>>> is_power_of_2(16384)\ntrue\n>>> is_power_of_2(32768)\ntrue\n>>> is_power_of_2(65536)\n\
    true\n>>> is_power_of_2(131072)\ntrue\n>>> is_power_of_2(262144)\ntrue\n>>> is_power_of_2(524288)\n\
    true\n>>> is_power_of_2(1048576)\ntrue\n>>> is_power_of_2(2097152)\ntrue\n>>>\
    \ is_power_of_2(4194304)\ntrue\n>>> is_power_of_2(8388608)\ntrue\n>>> is_power_of_2(16777216)\n\
    true\n>>> is_power_of_2(33554432)\ntrue\n>>> is_power_of_2(67108864)\ntrue\n>>>\
    \ is_power_of_2(134217728)\ntrue\n>>> is_power_of_2(268435456)\ntrue\n>>> is_power_of_2(536870912)\n\
    true\n>>> is_power_of_2(1073741824)\ntrue\n>>> is_power_of_2(2147483648)\ntrue\n\
    >>> is_power_of_2(4294967296)\ntrue\n>>> is_power_of_2(8589934592)\ntrue\n>>>\
    \ is_power_of_2(17", "    \n    prime_numbers = primes(100)\n    \n    for i in\
    \ prime_numbers\n        if a % i == 0\n            return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    prime_numbers = primes(a)\n    \n    for\
    \ prime in prime_numbers\n        if prime * prime == a\n            return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a power of 3 and\nfalse\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_power_of_3(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_power_of_3(31)\nfalse\n31 = 3 * 7 * 11\n\"\"\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else return false\nend", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        return false\n    end\nend", "    if a <\
    \ 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2600)", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend", "    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"Write a function that returns true\
    \ if the given number is the multiplication of 5 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n  \
    \  else\n        false\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    \    \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\
    \"\"", "    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i in primes\n   \
    \     if a % i == 0\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(11)\n\
    false\n>>> is_prime(15)\ntrue\n>>> is_prime(17)\nfalse\n>>> is_prime(19)\ntrue\n\
    >>> is_prime(21)\nfalse\n>>> is_prime(23)\ntrue\n>>> is_prime(29)\ntrue\n>>> is_prime(33)\n\
    true\n>>> is_prime(37)\ntrue\n>>> is_prime(41)\ntrue\n>>> is_prime(43)\ntrue\n\
    >>> is_prime(47)\ntrue\n>>> is_prime(53)\ntrue\n>>> is_prime(59)\ntrue\n>>> is_prime(61)\n\
    true\n>>> is_prime(67)\ntrue\n>>> is_prime(71)\ntrue\n>>> is_prime(73)\ntrue\n\
    >>> is_prime(79)\ntrue\n>>> is_prime(83)\ntrue\n>>> is_prime(89)\ntrue\n>>> is_prime(97)\n\
    true\n\"\"\"", "    if is_multiply_prime_helper(a, 3)\n    else false\nend", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if a < 100\n        false\n    else\n        true\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    prime_numbers = primes(a)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000001)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000002)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000003)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000004)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000005)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000006)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000007)\n</cell>\n\
    <code language=juli", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\nKnowing that (a) is less then 100. \nExample\n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n</text>\n<code language=julia-1.5>", " \
    \   if is_multiply_prime_helper(a, 3, 100) == true\n    else return false\nend",
  "    if is_multiply_prime_helper(a, 3, 100) == true\n    else false\nend\n\"\"\"\
    \n    Write a function that returns true if the given number is the multiplication\
    \ of 5 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5 * 7\n    \"\"\"", "    \n    if a < 100\n        return false\n    \n  \
    \  primes = primes(a)\n    \n    for p in primes\n        if p * p > a\n     \
    \       return false\n        \n    return true\nend", "    if a < 100\n     \
    \   return true\n    else \n        primes = primes_list(100)\n        for p in\
    \ primes\n            if p*p > a\n                return false\n        end\n\
    \        return true\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\nExample: \n    >>> is_perfect_square(25)\n\
    \    true\n    25 = 25 * 25\n    \"\"\"", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>", "    \n    if a < 100\n        return false\n\
    \    \n    primes = primes_list(100)\n    \n    for i in primes\n        if a\
    \ % i == 0\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\n", "    if a < 100\n\
    \        return false\n    else if a % 3 == 0 && a % 5 == 0\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is prime and\
    \ false otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(1000)\ntrue\n</text>\n\
    <code language=julia-1.5>", "    \n    primes = primes_list(100)\n    \n    for\
    \ i in primes\n        if a % i == 0\n            return false\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \        end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n        return\
    \ false\n    else \n        primes = primes(a)\n        prime_3 = primes[3]\n\
    \        prime_5 = primes[5]\n        prime_7 = primes[7]\n        prime_11 =\
    \ primes[11]\n        prime_13 = primes[13]\n        prime_17 = primes[17]\n \
    \       prime_19 = primes[19]\n        prime_23 = primes[23]\n        prime_29\
    \ = primes[29]\n        prime_31 = primes[31]\n        prime_37 = primes[37]\n\
    \        prime_39 = primes[39]\n        prime_41 = primes[41]\n        prime_431\
    \ = primes[431]\n        prime_47 = primes[47]\n        prime_59 = primes[59]\n\
    \        prime_61 = primes[61]\n        prime_67 = primes[67]\n        prime_71\
    \ = primes[71]\n        prime_73 = primes[73]\n        prime_79 = primes[79]\n\
    \        prime_83 = primes[83]\n        prime_89 = primes[89]\n        prime_91\
    \ = primes[91]\n        prime_97 = primes[97]\n        prime_101 = primes[101]\n\
    \        prime_103 = primes[103]\n        prime_107 = primes[107]\n        prime_109\
    \ = primes[109]\n        prime_113 = primes[113]\n        prime_121 = primes[121]\n\
    \        prime_123 = primes[123]\n        prime_127 = primes[127]\n        prime_131\
    \ = primes[131]\n        prime_137 = primes[137]\n        prime_137 = primes[137]\n\
    \        prime_137 = primes[137]\n        prime_137 = primes[137]\n        prime_137\
    \ = primes[137]\n        prime_137 = primes[137]\n        prime_137 = primes[137]\n\
    \        prime_137 = primes[137]\n        prime_137 = primes[137]\n        prime_137\
    \ = primes[137]\n        prime_137 = primes[137]\n        prime_137 = primes[137]\n\
    \        prime_137 = primes[137]\n        prime_137 = primes[137]\n        prime_137\
    \ = primes[137]\n        prime_137 = primes[137]\n        prime_13", "    \n \
    \   if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers\
    \ = primes(a)\n    \n    for num in prime_numbers\n        if num > 100\n    \
    \        return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(50)\ntrue\n>>> is_prime(100)", "    \n    prime_numbers = primes(100)\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>", "    if is_prime(a) and is_prime(a+2) and\
    \ is_prime(a+3) and is_prime(a+5) and is_prime(a+7) and is_prime(a+11) and is_prime(a+13)\
    \ and is_prime(a+17) and is_prime(a+19) and is_prime(a+23) and is_prime(a+29)\
    \ and is_prime(a+31) and is_prime(a+37) and is_prime(a+41) \n        return true\n\
    \    else \n        return false\nend\n\"\"\"Write a function that returns true\
    \ if the given number is the multiplication of 5 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"", "    if a < 100\n        return\
    \ false\n    \n    primes = primes(a)\n    \n    for i in primes\n        if a\
    \ % i == 0\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is a prime number\
    \ or false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n    true\n  \
    \  30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return false\n    \n\
    \    primes = primes(a)\n    \n    for p in primes\n        if p * p > a\n   \
    \         return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100", "    if a < 100\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\
    \"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n     \
    \   if a % i == 0\n            return false\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100.\nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n</text>\n<code language=julia-1.5>", "    \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns true if the given number is a prime number and false otherwise.\n\
    \    \n    \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n\
    \    \"\"\"", "    if a < 100\n        return true\n    \n    primes = prime_numbers(a)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\nExample: \n>>> is_perfect_square(25)\n\
    true\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if a < 100\n        return true\n    \n\
    \    primes = prime_numbers(a)\n    \n    for i in primes\n        if a % i ==\
    \ 0\n            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return false\n\
    \    \n    primes = primes_list(100)\n    \n    for i in primes\n        if a\
    \ % i == 0\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    if a < 100\n        return false\n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(50)\nfalse\n50 = 2 * 3 * 7\n>>> is_prime(100)\ntrue\n100 = 2\
    \ * 3 * 7\n>>> is_prime(200)\nfalse\n200 = 2 * 3 * 7\n>>> is_prime(300)\nfalse\n\
    300 = 2 * 3 * 7\n>>> is_prime(400)\nfalse\n400 = 2 * 3 * 7\n>>> is_prime(500)\n\
    false\n500 = 2 * 3 * 7\n>>> is_prime(600)\nfalse\n600 = 2 * 3 * 7\n>>> is_prime(700)\n\
    false\n700 = 2 * 3 * 7\n>>> is_prime(800)\nfalse\n800 = 2 * 3 * 7\n>>> is_prime(900)\n\
    false\n900 = 2 * 3 * 7\n>>> is_prime(1000)\nfalse\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\n\
    false\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\nfalse\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\n\
    false\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\nfalse\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\n\
    false\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\nfalse\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\n\
    false\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\nfalse\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\n\
    false\n1900 = 2 * 3 * 7\n>>> is_prime(2000)\nfalse\n2000 = 2 * 3 * 7\n>>> is_prime(2100)\n\
    false\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\nfalse\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\n\
    false\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\nfalse\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\n\
    false\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\nfalse\n", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if a < 100\n        return false\n\
    \    \n    primes = primes(a)\n    \n    for p in primes\n        if p * p > a\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(200)\ntrue\n>>> is_prime(300)\nfalse\n\
    >>> is_prime(400)\ntrue\n>>> is_prime(500)\nfalse\n>>> is_prime(600)\ntrue\n>>>\
    \ is_prime(700)\nfalse\n>>> is_prime(800)\ntrue\n>>> is_prime(900)\nfalse\n>>>\
    \ is_prime(1000)\ntrue\n>>> is_prime(1100)\ntrue\n>>> is_prime(1200)\ntrue\n>>>\
    \ is_prime(1300)\ntrue\n>>> is_prime(1400)\ntrue\n>>> is_prime(1500)\ntrue\n>>>\
    \ is_prime(1600)\ntrue\n>>> is_prime(1700)\ntrue\n>>> is_prime(1800)\ntrue\n>>>\
    \ is_prime(1900)\ntrue\n>>> is_prime(2000)\ntrue\n>>> is_prime(2100)\ntrue\n>>>\
    \ is_prime(2200)\ntrue\n>>> is_prime(2300)\ntrue\n>>> is_prime(2400)\ntrue\n>>>\
    \ is_prime(2500)\ntrue\n>>> is_prime(2600)\ntrue\n>>> is_prime(2700)\ntrue\n>>>\
    \ is_prime(2800)\ntrue\n>>> is_prime(2900)\ntrue\n>>> is_prime(3100)\ntrue\n>>>\
    \ is_prime(3200) \ntrue\n>>> is_prime(3300)\ntrue\n>>> is_prime(3400)\ntrue\n\
    >>> is_prime(3500)\ntrue\n>>> is_prime(3600)\ntrue\n>>> is_prime(3700)\ntrue\n\
    >>> is_prime(3800)\ntrue\n>>> is_prime(3900)\ntrue\n>>> is_prime(4100)\ntrue\n\
    >>> is_prime(4200)\ntrue\n>>> is_prime(4300)\ntrue\n>>> is_prime(4400)\ntrue\n\
    >>> is_prime(4500)\ntrue\n>>> is_prime(4600)\ntrue\n>>> is_prime(4700)\ntrue\n\
    >>> is_prime", "    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"Write a function that returns true\
    \ if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if is_multiply_prime_helper(a) == true\n    \
    \    return true\n    else\n        return false\n    end\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    if a < 100\n        return\
    \ false\n    \n    primes = primes(a)\n    \n    for i in primes\n        if a\
    \ % i == 0\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    if a < 100\n        return false\n    \n    primes\
    \ = prime_numbers(a)\n    \n    for p in primes\n        if p * 3 == a\n     \
    \       return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n@assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33)\
    \ == true\n@assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35)\
    \ == true\n@assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37)\
    \ == true\n@assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39)\
    \ == true\n@assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41)\
    \ == true\n@assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43)\
    \ == true\n@assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45)\
    \ == true\n@assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47)\
    \ == true\n@assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49)\
    \ == true\n@assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51)\
    \ == true\n@assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53)\
    \ == true\n@assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55)\
    \ == true\n@assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57)\
    \ == true\n@assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59)\
    \ == true\n@assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61)\
    \ == true\n@assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63)\
    \ == true\n@assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65)\
    \ == true\n@assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67)\
    \ == true\n@assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69)\
    \ == true\n@assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71)\
    \ == true\n@assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73)\
    \ == true\n@", "    \n    if a < 100\n        return false\n    \n    primes =\
    \ primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n       \
    \     return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n\
    >>> is_prime(50)\nfalse\n50 = 2 * 3 * 7\n>>> is_prime(100)\ntrue\n100 = 2 * 3\
    \ * 7\n>>> is_prime(200)\nfalse\n200 = 2 * 3 * 7\n>>> is_prime(300)\nfalse\n300\
    \ = 2 * 3 * 7\n>>> is_prime(400)\nfalse\n400 = 2 * 3 * 7\n>>> is_prime(500)\n\
    false\n500 = 2 * 3 * 7\n>>> is_prime(600)\nfalse\n600 = 2 * 3 * 7\n>>> is_prime(700)\n\
    false\n700 = 2 * 3 * 7\n>>> is_prime(800)\nfalse\n800 = 2 * 3 * 7\n>>> is_prime(900)\n\
    false\n900 = 2 * 3 * 7\n>>> is_prime(1000)\nfalse\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\n\
    false\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\nfalse\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\n\
    false\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\nfalse\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\n\
    false\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\nfalse\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\n\
    false\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\nfalse\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\n\
    false\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\nfalse\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\n\
    false\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\nfalse\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\n\
    false\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\nfalse\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\n\
    false\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\nfalse\n", "    if a < 100\n     \
    \   return true\n    else \n        primes = primes_list(100)\n        for i in\
    \ primes\n            if a % i == 0\n                return false\n        end\n\
    \        return true\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_multiply_prime_helper(a)\
    \ == true\n    else return false\nend\n\"\"\"\n    Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a < 100\n        return\
    \ false\n    \n    primes = primes_upto(a)\n    \n    for i in primes\n      \
    \  if a % i == 0\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    if a < 100\n        return true\n    \n    primes\
    \ = primes(a)\n    \n    for i in primes\n        if a % i == 0\n            return\
    \ false\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == true\n@assert is_multiply_prime(101) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\nExample: \n>>> is_perfect_square(25)\n\
    true\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\nfalse", " \
    \   if a < 100\n        return false\n    \n    primes = primes(a)\n    \n   \
    \ for i in primes\n        if a % i == 0\n            return false\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a power of 3 and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3(30)\n\
    false\n", "    \n    prime_numbers = primes(100)\n    \n    for i in prime_numbers\n\
    \        if a % i == 0\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\n\
    true\n>>> is_prime(15)\nfalse\n>>> is_prime(20)\ntrue\n>>> is_prime(30)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(1000)\ntrue\n>>> is_prime(10000)\ntrue\n\
    >>> is_prime(100000)\nfalse\n>>> is_prime(1000000)\ntrue\n>>> is_prime(10000000)\n\
    false\n>>> is_prime(100000000)\ntrue\n>>> is_prime(1000000000)\nfalse\n>>> is_prime(10000000000)\n\
    true\n>>> is_prime(100000000000)\nfalse\n>>> is_prime(1000000000000)\ntrue\n>>>\
    \ is_prime(1000000000000)\nfalse\n>>> is_prime(1000000000001)\ntrue\n>>> is_prime(1000000000002)\n\
    false\n>>> is_prime(1000000000003)\ntrue\n>>> is_prime(1000000000004)\nfalse\n\
    >>> is_prime(1000000000005)\ntrue\n>>> is_prime(1000000000006)\nfalse\n>>> is_prime(1000000000007)\n\
    true\n>>> is_prime(1000000000008)\nfalse\n>>> is_prime(1000000000009)\ntrue\n\
    >>> is_prime(1000000000010)\nfalse\n>>> is_prime(1000000000011)\ntrue\n>>> is_prime(1000000000012)\n\
    false\n>>> is_prime(1000000000013)\ntrue\n>>> is_prime(1000000000014)\nfalse\n\
    >>> is_prime(1000000000015)\ntrue\n>>> is_prime(1000000000016)\nfalse\n>>> is_prime(1000000000017)\n\
    true\n>>> is_prime(1000000000018)\nfalse\n>>> is_prime(1000000000019)\ntrue\n\
    >>> is_prime(1000000000020)\nfalse\n>>> is_prime(1000000000021)\ntrue\n>>> is_prime(1000000000022)\n\
    false\n>>> is_prime(1000000000023)\ntrue\n>>> is_prime(1000000000024)\nfalse\n\
    >>> is_prime", "    if a < 100\n        return false\n    \n    primes = primes(a)\n\
    \    \n    for p in primes\n        if p * p > a\n            return false\n \
    \   \n    return true\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return false\n\
    \    \n    primes = primes(a)\n    \n    for p in primes\n        if p*p > a\n\
    \            return false\n        end\n    end\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert\
    \ is_multiply_prime(31) == false\n@assert is_multiply_prime(33) == true\n@assert\
    \ is_multiply_prime(101) == false\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is a perfect square, false otherwise.\n\
    Example: \n    >>> is_perfect_square(25)\n    true\n    25 = 2 * 3 * 5\n    \"\
    \"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n</text>\n<code language=julia-1.5>", "    if a < 100\n \
    \       return true\n    else if a % 3 == 0 && a % 5 == 0\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>", "    \n    prime_numbers\
    \ = primes(a)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    multiply_numbers\
    \ = Set(prime_numbers)\n    \n    multiply_numbers_set = Set(multiply_numbers)\n\
    \    \n    multiply_numbers_set.add(a)\n    \n    for number in prime_numbers_set\n\
    \        \n        if number in multiply_numbers_set\n            \n         \
    \   multiply_numbers_set.remove(number)\n            \n            multiply_numbers_set.add(number\
    \ * number)\n            \n            multiply_numbers_set.add(number * number\
    \ + 1)\n            \n            multiply_numbers_set.add(number * number + 2)\n\
    \            \n            multiply_numbers_set.add(number * number + 3)\n   \
    \         \n            multiply_numbers_set.add(number * number + 4)\n      \
    \      \n            multiply_numbers_set.add(number * number + 5)\n         \
    \   \n            multiply_numbers_set.add(number * number + 6)\n            \n\
    \            multiply_numbers_set.add(number * number + 7)\n            \n   \
    \         multiply_numbers_set.add(number * number + 8)\n            \n      \
    \      multiply_numbers_set.add(number * number + 9)\n            \n         \
    \   multiply_numbers_set.add(number * number + 10)\n            \n           \
    \ multiply_numbers_set.add(number * number + 11)\n            \n            multiply_numbers_set.add(number\
    \ * number + 12)\n            \n            multiply_numbers_set.add(number *\
    \ number + 13)\n            \n            multiply_numbers_set.add(number * number\
    \ + 14)\n            \n            multiply_numbers_set.add(number * number +\
    \ 15)\n            \n            multiply_numbers_set.add(number * number + 16)\n\
    \            \n            multiply_numbers_set.add(number * number + 17)\n  \
    \          \n            multiply_numbers_set.add(number * number + 18)\n    \
    \        \n            multiply_numbers_set.add(number * number + 19)\n      \
    \      \n            multiply_numbers_set.add(number * number + 20)\n        \
    \    \n            multiply_numbers_set.add(number * number + 21)\n          \
    \  \n            multiply_numbers_set.add(number * number + 22)\n            \n\
    \            multiply_numbers_set.add(number * number + 23)\n            \n  \
    \          multiply_numbers_set.add(number * number + 24)\n            \n    \
    \        multiply_numbers_set.add(number * number + 25)\n            \n      \
    \      multiply_numbers_set.add(number * number + 26)\n            \n        \
    \    multiply_numbers_set.add(number * ", "    \n    primes = primes_list(100)\n\
    \    \n    for p in primes\n        if p*p > a\n            return false\n   \
    \     end\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    prime_numbers = primes(a)\n    \n    for\
    \ p in prime_numbers\n        if p*p > a\n            return false\n        end\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(33)\
    \ == true\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is a perfect square, false otherwise.\nExample: \n    >>> is_perfect_square(25)\n\
    \    true\n    25 = 2 * 3\n    \"\"\"", "    if is_multiply_prime_helper(a) ==\
    \ true\n        return true\n    else\n        return false\n    end\nend", " \
    \   if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(30)\
    \ == false\n</cell>\n<code language=julia-1.4>\n\"\"\"Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a < 100\n        return\
    \ false\n    \n    primes = primes_list(100)\n    \n    for i in primes\n    \
    \    if a % i == 0\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2600)\n</cell>\n<code language=julia-1.5>", "    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    if\
    \ prime_numbers_set.issubset([a]):\n        return true\n    \n    else \n   \
    \     return false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect power of 3 prime numbers and false otherwise.\nKnowing that (a)\
    \ is less then 100. \nExample: \n>>> is_perfect_power_of_3_prime(30)\ntrue\n30\
    \ = 2 * 3 * 5\n>>> is_perfect_power_of_3_prime(50)\nfalse\n50 = 2 * 3 * 7\n>>>\
    \ is_perfect_power_of_3_prime(100)\ntrue\n100 = 2 * 3 * 7\n>>> is_perfect_power_of_3_prime(200)\n\
    false\n200 = 2 * 3 * 7\n>>> is_perfect_power_of_3_prime(300)\ntrue\n300 = 2 *\
    \ 3 * 7\n>>> is_perfect_power_of_3_prime(400)\nfalse\n400 = 2 * 3 * 7\n>>> is_perfect_power_of_3_prime(500)\n\
    true\n500 = 2 * 3 * 7\n>>> is_perfect_power_of_3_prime(600)\nfalse\n600 = 2 *\
    \ 3 * 7\n>>> is_perfect_power_of_3_prime(700)\ntrue\n700 = 2 * 3 * 7\n>>> is_perfect_power_of_3_prime(800)\n\
    false\n800 = 2 * 3 * 7\n>>> is_perfect_power_of_3_prime(900)\ntrue\n900 = 2 *\
    \ 3 * 7\n>>> is_perfect_power_of_3_prime(1000)\ntrue\n1000 = 2 * 3 * 7\n>>> is_perfect_power_of_3_prime(1100)\n\
    false\n1100 = 2 * 3 * 7\n>>> is_perfect_power_of_3_prime(1200)\ntrue\n1200 = 2\
    \ * 3 * 7\n>>> is_perfect_power_of_3_prime(1300)\nfalse\n1300 = 2 * 3 * 7\n>>>\
    \ is_perfect_power_of_3_prime(1400)\ntrue\n1400 = 2 * 3 * 7\n>>> is_perfect_power_of_3_prime(1500)\n\
    true\n1500 = 2 * 3 * 7\n>>> is_perfect_power_of_3_prime(1600)\nfalse\n1600 = 2\
    \ * 3 * 7\n>>> is_perfect_power_of_3_prime(1700)\ntrue\n1700 = 2 * 3 * 7\n>>>\
    \ is_perfect_power_of_3_prime(1800)\nfalse\n1800 = 2 * 3 * 7\n>>> is_", "    if\
    \ a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>",
  "    if is_multiply_prime_helper(a, 3, 100) == true\n    else return false\nend\n\
    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ is_multiply_prime_helper(a) == true\n    else \n        return false\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>",
  "    \n    prime_numbers = prime_numbers(a)\n    \n    for prime in prime_numbers\n\
    \        if prime == 3\n            return true\n        else\n            return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\nKnowing that (a) is less then 100.\nExample:\
    \ \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 *\
    \ 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30\
    \ = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n", "    if a < 100\n        false\n    else\n        true\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\n    Example:\n    >>> is_prime(30)\n  \
    \  true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend", "    \n    prime_numbers = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\nExample:\n>>> is_perfect_square(25)\n\
    true\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    true\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    true\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    true\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    true\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>>\
    \ is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\n\
    true\n>>> is_perfect_square(25)\nfalse\n>>> is_perfect_square(25)\ntrue\n>>> is_perfect_square(25)\n\
    false\n>>> is_perfect_", "    if a < 100\n        return false\n    \n    primes\
    \ = primes(a)\n    \n    for p in primes\n        if p * p > a\n            return\
    \ false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a <\
    \ 100\n        false\n    else\n        true\n    end\nend", "    \n    if a <\
    \ 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\n  \
    \  \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\
    \"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers = primes(a)\n\
    \    \n    for prime in prime_numbers\n        if prime == 3 || prime == 5 ||\
    \ prime == 7 || prime == 11\n            return true\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>", "    \n    if a <\
    \ 100\n        return false\n    \n    primes = prime_numbers(a)\n    \n    for\
    \ p in primes\n        if p * 3 == a\n            return true\n        end\n \
    \   end\n    return false\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30\
    \ = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_", "    if a <\
    \ 100\n        return false\n    \n    primes = primes_upto(a)\n    \n    for\
    \ prime in primes\n        if a % prime == 0\n            return false\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == false\n@assert is_multiply_prime(33) == true\n@assert is_multiply_prime(34)\
    \ == false\n@assert is_multiply_prime(35) == true\n@assert is_multiply_prime(36)\
    \ == false\n@assert is_multiply_prime(37) == true\n@assert is_multiply_prime(38)\
    \ == false\n@assert is_multiply_prime(39) == true\n@assert is_multiply_prime(40)\
    \ == false\n@assert is_multiply_prime(41) == true\n@assert is_multiply_prime(42)\
    \ == false\n@assert is_multiply_prime(43) == true\n@assert is_multiply_prime(44)\
    \ == false\n@assert is_multiply_prime(45) == true\n@assert is_multiply_prime(46)\
    \ == false\n@assert is_multiply_prime(47) == true\n@assert is_multiply_prime(48)\
    \ == false\n@assert is_multiply_prime(49) == true\n@assert is_multiply_prime(50)\
    \ == false\n@assert is_multiply_prime(51) == true\n@assert is_multiply_prime(52)\
    \ == false\n@assert is_multiply_prime(53) == true\n@assert is_multiply_prime(54)\
    \ == false\n@assert is_multiply_prime(55) == true\n@assert is_multiply_prime(56)\
    \ == false\n@assert is_multiply_prime(57) == true\n@assert is_multiply_prime(58)\
    \ == false\n@assert is_multiply_prime(59) == true\n@assert is_multiply_prime(60)\
    \ == false\n@assert is_multiply_prime(61) == true\n@assert is_multiply_prime(62)\
    \ == false\n@assert is_multiply_prime(63) == true\n@assert is_multiply_prime(64)\
    \ == false\n@assert is_multiply_prime(65) == true\n@assert is_multiply_prime(66)\
    \ == false\n@assert is_multiply_prime(67) == true\n@assert is_multiply_prime(68)\
    \ == false\n@assert is_multiply_prime(69) == true\n@assert is_multiply_prime(70)\
    \ == false\n@assert is_multiply_prime(", "    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == true\n@assert is_multiply_prime(33) == false\n@assert is_multiply_prime(34)\
    \ == true\n@assert is_multiply_prime(35) == false\n@assert is_multiply_prime(36)\
    \ == true\n@assert is_multiply_prime(37) == false\n@assert is_multiply_prime(38)\
    \ == true\n@assert is_multiply_prime(39) == false\n@assert is_multiply_prime(40)\
    \ == true\n@assert is_multiply_prime(41) == false\n@assert is_multiply_prime(42)\
    \ == true\n@assert is_multiply_prime(43) == false\n@assert is_multiply_prime(44)\
    \ == true\n@assert is_multiply_prime(45) == false\n@assert is_multiply_prime(46)\
    \ == true\n@assert is_multiply_prime(47) == false\n@assert is_multiply_prime(48)\
    \ == true\n@assert is_multiply_prime(49) == false\n@assert is_multiply_prime(50)\
    \ == true\n@assert is_multiply_prime(51) == false\n@assert is_multiply_prime(52)\
    \ == true\n@assert is_multiply_prime(53) == false\n@assert is_multiply_prime(54)\
    \ == true\n@assert is_multiply_prime(55) == false\n@assert is_multiply_prime(56)\
    \ == true\n@assert is_multiply_prime(57) == false\n@assert is_multiply_prime(58)\
    \ == true\n@assert is_multiply_prime(59) == false\n@assert is_multiply_prime(60)\
    \ == true\n@assert is_multiply_prime(61) == false\n@assert is_multiply_prime(62)\
    \ == true\n@assert is_multiply_prime(63) == false\n@assert is_multiply_prime(64)\
    \ == true\n@assert is_multiply_prime(65) == false\n@assert is_multiply_prime(66)\
    \ == true\n@assert is_multiply_prime(67) == false\n@assert is_multiply_prime(68)\
    \ == true\n@assert is_multiply_prime(69) == false\n@assert is_multiply_prime(70)\
    \ == true\n@assert is_multiply_prime(71) == false\n@assert is_multiply_prime(72)\
    \ == true\n@assert is_multiply_prime(73) == false\n@", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers = primes(100)\n\
    \    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.remove(a)\n\
    \    \n    if prime_numbers_set.isEmpty()\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>", "    if is_multiply_prime_helper(a, 3, 100) == true\n\
    \    else \n        return false\nend", "    if a < 100\n        false\n    else\n\
    \        true\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>", "    if a < 100\n        false\n    else\n\
    \        true\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>", "    if is_multiply_prime_helper(a) == true\n\
    \        return true\n    else\n        return false\n    end\nend\n\"\"\"\n \
    \   Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n   \
    \ \n    for i in primes\n        if i == 3 || i == 5 || i == 7\n            return\
    \ true\n        \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    prime_numbers\
    \ = primes(100)\n    \n    for prime in prime_numbers\n        if a % prime ==\
    \ 0\n            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a prime number greater\
    \ than 30 and false otherwise.\n    Example:\n    >>> is_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    primes = primes_list(100)\n    \n    for p in primes\n\
    \        if a % p == 0\n            return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if a < 100\n        return false\n    \n    primes =\
    \ primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n       \
    \     return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    prime_numbers = prime_numbers(a)\n\
    \    \n    for p in prime_numbers\n        if a % p == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>",
  "    if is_multiply_prime_helper(a, 3, 100) == true\n    else return false\nend",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(50)\nfalse\n50 = 2 * 3 * 7\n>>> is_prime(100)\n\
    true\n100 = 2 * 3 * 7\n>>> is_prime(200)\nfalse\n200 = 2 * 3 * 7\n>>> is_prime(300)\n\
    true\n300 = 2 * 3 * 7\n>>> is_prime(400)\nfalse\n400 = 2 * 3 * 7\n>>> is_prime(500)\n\
    true\n500 = 2 * 3 * 7\n>>> is_prime(600)\nfalse\n600 = 2 * 3 * 7\n>>> is_prime(700)\n\
    true\n700 = 2 * 3 * 7\n>>> is_prime(800)\nfalse\n800 = 2 * 3 * 7\n>>> is_prime(900)\n\
    true\n900 = 2 * 3 * 7\n>>> is_prime(1000)\ntrue\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\n\
    false\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\ntrue\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\n\
    false\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\ntrue\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\n\
    false\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\ntrue\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\n\
    false\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\ntrue\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\n\
    false\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\ntrue\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\n\
    false\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\ntrue\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\n\
    false\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\ntrue\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\n\
    false\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\ntrue\n2700 = 2 * 3 * 7\n>>> is_prime(2800)\n\
    false\n2800 = 2 * 3 * 7\n>>> is_prime(29", "    if a < 100\n        return false\n\
    \    \n    primes = primes_list(100)\n    \n    for i in primes\n        if a\
    \ % i == 0\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the multiplication of 3 prime numbers and false otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \n>>> is_multiply_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\n\
    false\n30 = 2 * 3 * 5\n>>> is_multiply_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> ",
  "    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if a < 100\n        return false\n    \n    primes = prime_numbers(a)\n   \
    \ \n    for p in primes\n        if p*p > a\n            return false\n    \n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return false\n\
    \    \n    primes = primes_list(100)\n    \n    for p in primes\n        if p\
    \ == a\n            return false\n        \n        if p > a\n            continue\n\
    \        \n        if a % p == 0\n            return false\n        \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_multiply_prime_helper(a, 3, 100)\n    else false\nend\n\"\
    \"\"\n    Write a function that returns true if the given number is the multiplication\
    \ of 5 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5 * 7\n    \"\"\"", "    \n    prime_numbers = primes(a)\n    \n    for n\
    \ in prime_numbers\n        if n % 3 == 0 || n % 5 == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nExample: \n>>> is_prime(30)\ntrue\n\
    30 = 3 * 7 * 11\n>>> is_prime(100)\nfalse\n100 = 2 * 3 * 5 * 7 * 11\n</text>\n\
    <code language=julia-1.5>", "    if is_multiply_prime_helper(a, 3, 100) == true\n\
    \    else return false\nend", "    \n    if a < 100\n        return false\n  \
    \  \n    primes = prime_numbers(a)\n    \n    for p in primes\n        if p*p\
    \ > a\n            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns true if the given number is a prime number and false otherwise.\n\
    \    \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 3 * 7 * 11\n   \
    \ \"\"\"", "    \n    if a < 100\n        return false\n    \n    primes = primes(a)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the multiplication\
    \ of 3 prime numbers and false otherwise.\nKnowing that (a) is less then 100.\
    \ \nExample: \n>>> is_multiply_prime(30)\ntrue\n30 = 2 * 3 * 5\nHint: \nThe function\
    \ primes returns an array of prime numbers. \nThe function is_multiply_prime returns\
    \ true if the given number is the multiplication of 3 prime numbers and false\
    \ otherwise.", "    \n    prime_numbers = primes(100)\n    \n    prime_numbers_set\
    \ = Set(prime_numbers)\n    \n    prime_numbers_set.add(a)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    primes = primes(100)\n    \n    for i in primes\n       \
    \ if a % i == 0\n            return false\n        end\n    end\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    \n    prime_numbers = primes(100)\n    \n    for i in\
    \ prime_numbers\n        if a % i == 0\n            return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if a < 100\n        true\n    else\n        false\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    if a < 100\n        return\
    \ false\n    \n    primes = prime_numbers(a)\n    \n    for p in primes\n    \
    \    if p * p > a\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns true if the given number is a prime and false otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2\
    \ * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)", "    if a < 100\n        return false\n   \
    \ \n    primes = primes_list(100)\n    \n    for i in primes\n        if a % i\
    \ == 0\n            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime", "    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for\
    \ i in primes\n        if a % i == 0\n            return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(50)\nfalse\n50 = 2 * 3 *\
    \ 7\n>>> is_prime(100)\ntrue\n100 = 2 * 3 * 7\n>>> is_prime(200)\nfalse\n200 =\
    \ 2 * 3 * 7\n>>> is_prime(300)\ntrue\n300 = 2 * 3 * 7\n>>> is_prime(400)\nfalse\n\
    400 = 2 * 3 * 7\n>>> is_prime(500)\ntrue\n500 = 2 * 3 * 7\n>>> is_prime(600)\n\
    false\n600 = 2 * 3 * 7\n>>> is_prime(700)\ntrue\n700 = 2 * 3 * 7\n>>> is_prime(800)\n\
    false\n800 = 2 * 3 * 7\n>>> is_prime(900)\ntrue\n900 = 2 * 3 * 7\n>>> is_prime(1000)\n\
    true\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\nfalse\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\n\
    true\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\nfalse\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\n\
    true\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\ntrue\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\n\
    false\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\ntrue\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\n\
    false\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\ntrue\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\n\
    false\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\ntrue\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\n\
    false\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\ntrue\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\n\
    false\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\ntrue\n", "    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(3000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(3300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(3600)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(3900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(4400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(4700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(5200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(5500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(6000)\n</cell", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n\
    @assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100) == false\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Write a function that returns true if\
    \ the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    if a < 100\n        true\n    else\n  \
    \      false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>", "    \n    prime_numbers = primes(a)\n  \
    \  \n    for i in prime_numbers:\n        if a % i == 0 :\n            return\
    \ False\n    return True\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000000000000000000",
  "    if is_prime(a) == false \n        return false \n    else \n        for b in\
    \ primes \n            if a % b == 0 \n                return false \n       \
    \ return true \nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        false\n  \
    \  else\n        true\n    end\nend", "    if is_multiply_prime_helper(a, 3, 100)\n\
    \        return true\n    return false\nend\n\"\"\"\n    \n\"\"\"\n    Write a\
    \ function that returns true if the given number is the multiplication of 5 prime\
    \ numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n\
    \    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n\
    \    \"\"\"", "    if a < 100\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n\
    @assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100.\n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n\
    >>> is_prime(10)\ntrue\n>>> is_prime(11)\nfalse\n>>> is_prime(15)\ntrue\n>>> is_prime(17)\n\
    false\n>>> is_prime(19)\ntrue\n>>> is_prime(21)\nfalse\n>>> is_prime(23)\ntrue\n\
    >>> is_prime(29)\ntrue\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(101)\nfalse\n>>> is_prime(102)\nfalse\n>>> is_prime(103)\nfalse\n>>>\
    \ is_prime(104)\nfalse\n>>> is_prime(105)\nfalse\n>>> is_prime(106)\nfalse\n>>>\
    \ is_prime(107)\nfalse\n>>> is_prime(108)\nfalse\n>>> is_prime(109)\nfalse\n>>>\
    \ is_prime(110)\nfalse\n>>> is_prime(111)\nfalse\n>>> is_prime(112)\nfalse\n>>>\
    \ is_prime(113)\nfalse\n>>> is_prime(114)\nfalse\n>>> is_prime(115)\nfalse\n>>>\
    \ is_prime(116)\nfalse\n>>> is_prime(117)\nfalse\n>>> is_prime(118)\nfalse\n>>>\
    \ is_prime(119)\nfalse\n>>> is_prime(120)\nfalse\n>>> is_prime(121)\nfalse\n>>>\
    \ is_prime(122)\nfalse\n>>> is_prime(123)\nfalse\n>>> is_prime(124)\nfalse\n>>>\
    \ is_prime(125)\nfalse\n>>> is_prime(126)\nfalse\n>>> is_prime(127)\nfalse\n>>>\
    \ is_prime(128)\nfalse\n>>> is_prime(129)\nfalse\n>>> is_prime(130)\nfalse\n>>>\
    \ is_prime(131)\nfalse\n>>> is_prime(132)\nfalse\n>>> is_prime(133)\nfalse\n>>>\
    \ is_prime(134)\nfalse\n>>> is_prime(135)\n", "    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        return false\nend\n\"\"\"\n    Write a function\
    \ that returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 100\n  \
    \      true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\n    For example, 5 is a perfect square,\
    \ because it can be written as 5 * 5. \n    Example:\n    >>> is_perfect_square(5)\n\
    \    true\n    25 is a perfect square, because it can be written as 25 * 25\n\
    \    \"\"\"", "    if a < 100\n        return false\n    \n    primes = primes_list(100)\n\
    \    \n    for i in primes\n        if a % i == 0\n            return false\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for i\
    \ in primes\n        if a % i == 0\n            return false\n    return true\n\
    end\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.3>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.3>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.3>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(100000000000000001)\n</cell>\n\
    <code language=julia-1.3>\nis_multiply_prime(100000000000000002)\n</cell>\n<code\
    \ language=julia-1.3>\nis_multiply_prime(100000000000000003)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(100000000000000004)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(100000000000000005)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(100000000000000006)\n</cell>\n\
    <code language=julia-1.3>\nis_multiply_prime(10000000000", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if is_multiply_prime_helper(a,3,100)\
    \ == true\n    else false\nend", "    \n    if a < 100\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    if a < 100\n        return true\n\
    \    else \n        return false\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n@assert\
    \ is_multiply_prime(100) == true\n@assert is_multiply_prime(101) == false\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\ntrue\n100 = 2 *\
    \ 3 * 5\n>>> is_prime(101)\nfalse\n101 = 2 * 3 * 5\n\"\"\"", "    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a perfect square (i.e. a number that is\n    equal to the sum of its positive\
    \ divisors excluding 1 and itself) and false otherwise.\n    Example:\n    >>>\
    \ is_perfect_square(25)\n    true\n    25 = 1 + 2 + 4 + 7 + 14 + 21\n    \"\"\"",
  "    \n    primes = primes_list(100)\n    \n    for i in primes\n        if a %\
    \ i == 0\n            return false\n    \n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"", "    if a < 100\n        true\n    else\n        false\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(102)\n\
    false\n>>> is_prime(103)\ntrue\n>>> is_prime(104)\nfalse\n>>> is_prime(105)\n\
    true\n>>> is_prime(106)\nfalse\n>>> is_prime(107)\ntrue\n>>> is_prime(108)\nfalse\n\
    >>> is_prime(109)\ntrue\n>>> is_prime(110)\nfalse\n>>> is_prime(111)\ntrue\n>>>\
    \ is_prime(112)\nfalse\n>>> is_prime(113)\ntrue\n>>> is_prime(114)\nfalse\n>>>\
    \ is_prime(115)\ntrue\n>>> is_prime(116)\nfalse\n>>> is_prime(117)\ntrue\n>>>\
    \ is_prime(118)\nfalse\n>>> is_prime(119)\ntrue\n>>> is_prime(120)\nfalse\n>>>\
    \ is_prime(121)\ntrue\n>>> is_prime(122)\nfalse\n>>> is_prime(123)\ntrue\n>>>\
    \ is_prime(124)\nfalse\n>>> is_prime(125)\ntrue\n>>> is_prime(126)\nfalse\n>>>\
    \ is_prime(127)\ntrue\n>>> is_prime(128)\nfalse\n>>> is_prime(129)\ntrue\n>>>\
    \ is_prime(130)\nfalse\n>>> is_prime(131)\ntrue\n>>> is_prime(132)\nfalse\n>>>\
    \ is_prime(133)\ntrue\n>>> is_prime(134)\nfalse\n>>> is_prime(135)\ntrue\n>>>\
    \ is_prime(136)\nfalse\n>>> is_prime(137)\ntrue\n>>> is_prime(138)\nfalse\n>>>\
    \ is_prime(139)\ntrue\n>>> is_prime(140)\nfalse\n>>> is_prime(141)\ntrue\n>>>\
    \ is_prime(142)\nfalse\n>>> is_prime(143)\ntrue\n>>> is_prime(144)\nfalse\n>>>\
    \ is_prime(145)\ntrue\n", "    if a < 100\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>", "    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    for\
    \ i in primes:\n        if a % i == 0:\n            return False\n    \n    return\
    \ True\n    \n\"\"\"Write a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if is_multiply_prime_helper(a) == true\n    \
    \    return true\n    else\n        return false\n    end\nend", "    \n    if\
    \ a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(50)\nfalse\n50 = 2 * 3 * 7\n>>> is_prime(100)\n\
    true\n100 = 2 * 3 * 7\n>>> is_prime(200)\nfalse\n200 = 2 * 3 * 7\n>>> is_prime(300)\n\
    false\n300 = 2 * 3 * 7\n>>> is_prime(400)\nfalse\n400 = 2 * 3 * 7\n>>> is_prime(500)\n\
    false\n500 = 2 * 3 * 7\n>>> is_prime(600)\nfalse\n600 = 2 * 3 * 7\n>>> is_prime(700)\n\
    false\n700 = 2 * 3 * 7\n>>> is_prime(800)\nfalse\n800 = 2 * 3 * 7\n>>> is_prime(900)\n\
    false\n900 = 2 * 3 * 7\n>>> is_prime(1000)\nfalse\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\n\
    false\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\nfalse\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\n\
    false\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\nfalse\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\n\
    false\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\nfalse\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\n\
    false\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\nfalse\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\n\
    false\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\nfalse\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\n\
    false\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\nfalse\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\n\
    false\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\nfalse\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\n\
    false\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\nfalse\n2700 = 2 * 3 * 7\n>>> is_prime(2800)\n\
    false\n2800 = 2 * 3 * 7\n>>> is_", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    if a < 100\n        return false\n    \n    primes\
    \ = primes_list(100)\n    \n    for p in primes\n        if a % p == 0\n     \
    \       return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == true\n@assert is_multiply_prime(101) == false\n\
    @assert is_multiply_prime(1000) == true\n@assert is_multiply_prime(1001) == false\n\
    </cell>\n<code language=julia-1.5>", "    if is_prime(a) and is_prime(a+2) and\
    \ is_prime(a+3) and is_prime(a+5):\n        return true\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5", "    \n    if a < 100\n        return false\n    \n   \
    \ primes = primes(a)\n    \n    for p in primes\n        if p * p > a\n      \
    \      return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == true\n</cell>\n<code language=julia-1.5>", " \
    \   if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then ", "    \n    if a < 100\n       \
    \ return false\n    \n    primes = primes_list(100)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>",
  "    \n    if a < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <text>\nExercise\nWrite a function that returns true if the given number is the\
    \ multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that\
    \ (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
