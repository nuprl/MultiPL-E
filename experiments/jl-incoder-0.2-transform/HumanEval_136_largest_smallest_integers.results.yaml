language: jl
name: HumanEval_136_largest_smallest_integers
results:
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(el < 0 for el in lst)\n     \
    \   return nothing, nothing\n    elseif all(el > 0 for el in lst)\n        return\
    \ lst, nothing\n    else\n        largest = maximum(lst, default=nothing)\n  \
    \      smallest = minimum(lst, default=nothing)\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of positive integers in a list.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk4_ymf6n.jl:30\nin expression starting at\
    \ /tmp/tmpk4_ymf6n.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector. Test it on $[-10, -9, -8, -7, -6, -5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]$.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvqnwhkh.jl:23\nin expression starting at\
    \ /tmp/tmpwvqnwhkh.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([0])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of positive integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmd3qheol.jl:24\nin expression starting at\
    \ /tmp/tmpmd3qheol.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return nothing,\
    \ nothing\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the largest and smallest numbers in a list.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgwldwyds.jl:22\nin expression starting at\
    \ /tmp/tmpgwldwyds.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrdkeu72.jl:23\nin expression starting at\
    \ /tmp/tmpdrdkeu72.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the integers in a list.\nIf there\
    \ are no integers, return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpohdxx0fn.jl:23\nin expression starting at\
    \ /tmp/tmpohdxx0fn.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppk6_ev_z.jl:24\nin expression starting at\
    \ /tmp/tmppk6_ev_z.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (nothing, nothing)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (nothing,\
    \ nothing)\n    else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n \
    \   return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n@assert largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (1, 7)\n@assert largest_smallest_integers([]) == (nothing,\
    \ nothing)\n@assert largest_smallest_integers([0]) == (nothing, nothing)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_dt0v31t.jl:25\nin expression starting at\
    \ /tmp/tmp_dt0v31t.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi5wcammo.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5wcammo.jl:1\n\
    in expression starting at /tmp/tmpi5wcammo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of times a given value appears in a\
    \ given list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpblgs4ekm.jl:23\nin expression starting at\
    \ /tmp/tmpblgs4ekm.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a list as input and returns a tuple where the first\
    \ element is the sum of the numbers in the list, and the second element is the\
    \ product of the numbers in the list. For example, if the input is [2, 3, 4],\
    \ the output should be (7, 24).\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp81hii9ms.jl:23\nin expression starting at\
    \ /tmp/tmp81hii9ms.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return largest, smallest\n    else \n   \
    \     return largest, nothing\nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ that returns the largest and smallest numbers in a list.\nThe function should\
    \ take a list of numbers as an argument and return the largest and smallest numbers\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp30zti643.jl:26\nin expression starting at\
    \ /tmp/tmp30zti643.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp53gaqahc.jl:23\nin expression starting at\
    \ /tmp/tmp53gaqahc.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    largest = nothing\n    smallest = nothing\n    for x\
    \ in lst\n        if x < 0\n            if largest == nothing\n              \
    \  largest = x\n            else\n                largest = nothing\n        \
    \    end\n        elseif largest == nothing\n            smallest = x\n      \
    \  else\n            smallest = nothing\n        end\n    end\n    return (largest,\
    \ smallest)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers where the integers are the sum\
    \ of the positive integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe_tjj6l_.jl:36\nin expression starting at\
    \ /tmp/tmpe_tjj6l_.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers in a\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxpqm0ui.jl:23\nin expression starting at\
    \ /tmp/tmpqxpqm0ui.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of integers in a list that are\n\
    less than a given integer.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppms4_cb5.jl:23\nin expression starting at\
    \ /tmp/tmppms4_cb5.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(el < 0 for el in lst)\n     \
    \   return nothing, nothing\n    elseif all(el > 0 for el in lst)\n        return\
    \ nothing, nothing\n    else\n        largest = maximum(lst)\n        smallest\
    \ = minimum(lst)\n        return largest, smallest\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and a number as input, and returns\
    \ a vector containing the numbers in the vector that are less than the number.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ut0v9rj.jl:30\nin expression starting at\
    \ /tmp/tmp2ut0v9rj.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    elseif length(lst) == 1\n        return (lst[0], nothing)\n  \
    \  elseif all(x < 0 for x in lst)\n        return (nothing,lst[0])\n    elseif\
    \ all(x > 0 for x in lst)\n        return (lst[end], nothing)\n    else\n    \
    \    largest = nothing\n        smallest = nothing\n        for i in lst\n   \
    \         if i < 0\n                if largest == nothing\n                  \
    \  largest = i\n                else\n                    largest = nothing\n\
    \            elseif i > 0 \n                if smallest == nothing\n         \
    \           smallest = i\n                else\n                    smallest =\
    \ nothing\n            end\n        end\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the integers in a list.\nIf there are no integers, return 0.\nIf there\
    \ are multiple integers, return the first one.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp54d0q0_m.jl:29 expected \"\
    end\", got \"elseif\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp54d0q0_m.jl:33\n\
    in expression starting at /tmp/tmp54d0q0_m.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the integers in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpie5vnicx.jl:23\nin expression starting at\
    \ /tmp/tmpie5vnicx.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest) \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6fbeuma.jl:23\nin expression starting at\
    \ /tmp/tmpc6fbeuma.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector. Test it on some vectors.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuc2lss2t.jl:23\nin expression starting at\
    \ /tmp/tmpuc2lss2t.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns a vector where each element is the sum of the\
    \ squares of the elements in the original vector. For example, if the input vector\
    \ is [1,2,3,4,5], the output vector should be [1,2,3,4,5].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcsnrpof.jl:22\nin expression starting at\
    \ /tmp/tmppcsnrpof.jl:22\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptx17wieq.jl:23\nin expression starting at\
    \ /tmp/tmptx17wieq.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector. \nIf there are no integers in the vector, return 0.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqh1gkj5t.jl:23\nin expression starting at\
    \ /tmp/tmpqh1gkj5t.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns the sum of the\
    \ integers. If the vector is empty, return 0.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwx5nzt2_.jl:23\nin expression starting at\
    \ /tmp/tmpwx5nzt2_.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    elseif length(lst) == 1\n        return (lst[1], nothing)\n  \
    \  elseif length(lst) == 2\n        return (lst[1], lst[1])\n    else\n      \
    \  largest = minimum(lst)\n        smallest = maximum(lst)\n        return (largest,\
    \ smallest)\n    end\nend\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the number of times a given value appears in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphfe0jc7i.jl:28\nin expression starting at\
    \ /tmp/tmphfe0jc7i.jl:28\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing)\n    elseif length(lst) == 1 \n        return (lst[1], nothing)\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = nothing\n        smallest = nothing\n        for i in\
    \ lst[2:end] \n            if i > largest \n                largest = i\n    \
    \        elseif i < smallest \n                smallest = i\n            end\n\
    \        end\n        return (largest, smallest)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the number of times\
    \ each element appears in the vector. For example, if the vector is [1, 1, 2,\
    \ 3, 4, 4, 4], then the function should return [1, 1, 2, 2, 3, 3, 4].\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptdar7m5a.jl:35\nin expression starting at\
    \ /tmp/tmptdar7m5a.jl:35\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a list that are\n\
    greater than a given number. Test it on a list of integers and a list of\nfloats.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cqwr2mr.jl:23\nin expression starting at\
    \ /tmp/tmp6cqwr2mr.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(el < 0 for el in lst)\n     \
    \   return nothing, nothing\n    elseif all(el > 0 for el in lst)\n        return\
    \ nothing, nothing\n    else\n        largest = maximum(lst)\n        smallest\
    \ = minimum(lst)\n        return largest, smallest\n    end\nend\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the largest and smallest numbers in a\
    \ list.\nWrite a function that returns the largest and smallest numbers in a list.\n\
    Write a function that returns the largest and smallest numbers in a list.\nWrite\
    \ a function that returns the largest and smallest numbers in a list.\nWrite a\
    \ function that returns the largest and smallest numbers in a list.\nWrite a function\
    \ that returns the largest and smallest numbers in a list.\nWrite a function that\
    \ returns the largest and smallest numbers in a list.\nWrite a function that returns\
    \ the largest and smallest numbers in a list.\nWrite a function that returns the\
    \ largest and smallest numbers in a list.\nWrite a function that returns the largest\
    \ and smallest numbers in a list.\nWrite a function that returns the largest and\
    \ smallest numbers in a list.\nWrite a function that returns the largest and smallest\
    \ numbers in a list.\nWrite a function that returns the largest and smallest numbers\
    \ in a list.\nWrite a function that returns the largest and smallest numbers in\
    \ a list.\nWrite a function that returns the largest and smallest numbers in a\
    \ list.\nWrite a function that returns the largest and smallest numbers in a list.\n\
    Write a function that returns the largest and smallest numbers in a list.\nWrite\
    \ a function that returns the largest and smallest numbers in a list.\nWrite a\
    \ function that returns the largest and smallest numbers in a list.\nWrite a function\
    \ that returns the largest and smallest numbers in a list.\nWrite a function that\
    \ returns the largest and smallest numbers in a list.\nWrite a function that returns\
    \ the largest and smallest numbers in a list.\nWrite a function that returns the\
    \ largest and smallest numbers in a list.\nWrite a function that returns the largest\
    \ and smallest numbers in a list.\nWrite a function that returns the largest and\
    \ smallest numbers in a list.\nWrite a function that returns the largest and smallest\
    \ numbers in a list.\nWrite a function that returns the largest and smallest numbers\
    \ in a list.\nWrite a function that returns the largest and smallest numbers in\
    \ a list.\nWrite a function that returns the largest and smallest numbers in a\
    \ list.\nWrite a function that returns the largest and smallest numbers in a list.\n\
    Write a function that returns the largest and smallest numbers in a list.\nWrite\
    \ a function that returns the largest and smallest numbers in a list.\nWrite a\
    \ function that returns the largest and smallest numbers in a list.\nWrite a function\
    \ that returns the largest and smallest numbers in a list.\nWrite a function that\
    \ returns the largest and smallest numbers in a list.\nWrite a function that returns\
    \ the largest and smallest numbers in a list.\nWrite a function that returns the\
    \ largest and smallest numbers in a list.\n\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0w8alu6a.jl:30\nin expression starting at\
    \ /tmp/tmp0w8alu6a.jl:30\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the largest and smallest numbers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy0626x5l.jl:23\nin expression starting at\
    \ /tmp/tmpy0626x5l.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tux2q6d.jl:23\nin expression starting at\
    \ /tmp/tmp9tux2q6d.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns a vector where each\
    \ element is the sum of the squares of the elements in the original vector. For\
    \ example, if the input vector is [4, 6, 3, 9], then the output vector should\
    \ be [36, 54, 18, 49].\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmuwa_4gu.jl:24\nin expression starting at\
    \ /tmp/tmpmuwa_4gu.jl:24\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns a tuple (a, b), where 'a' is the largest of\
    \ positive integers, and 'b' is the smallest of negative integers in a list.\n\
    If there is no negative or positive integers, return them as None.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6xv0f6m.jl:23\nin expression starting at\
    \ /tmp/tmpl6xv0f6m.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list as an argument and returns a list where\
    \ each element is the sum of the squares of the elements in the list. For example,\
    \ square_sum([1, 2, 3, 4]) should return [1, 4, 9, 16].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpymv18pxo.jl:23\nin expression starting at\
    \ /tmp/tmpymv18pxo.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(lst))\n        return\
    \ (nothing, nothing)\n    elseif all(isnothing(lst[1]))\n        return (nothing,\
    \ nothing)\n    elseif all(isnothing(lst[2]))\n        return (nothing, nothing)\n\
    \    elseif all(isnothing(lst[3]))\n        return (nothing, nothing)\n    elseif\
    \ all(isnothing(lst[4]))\n        return (nothing, nothing)\n    elseif all(isnothing(lst[5]))\n\
    \        return (nothing, nothing)\n    elseif all(isnothing(lst[6]))\n      \
    \  return (nothing, nothing)\n    elseif all(isnothing(lst[7]))\n        return\
    \ (nothing, nothing)\n    elseif all(isnothing(lst[8]))\n        return (nothing,\
    \ nothing)\n    elseif all(isnothing(lst[9]))\n        return (nothing, nothing)\n\
    \    elseif all(isnothing(lst[10]))\n        return (nothing, nothing)\n    elseif\
    \ all(isnothing(lst[11]))\n        return (nothing, nothing)\n    elseif all(isnothing(lst[12]))\n\
    \        return (nothing, nothing)\n    elseif all(isnothing(lst[13]))\n     \
    \   return (nothing, nothing)\n    elseif all(isnothing(lst[14]))\n        return\
    \ (nothing, nothing)\n    elseif all(isnothing(lst[15]))\n        return (nothing,\
    \ nothing)\n    elseif all(isnothing(lst[16]))\n        return (nothing, nothing)\n\
    \    elseif all(isnothing(lst[17]))\n        return (nothing, nothing)\n    elseif\
    \ all(isnothing(lst[18]))\n        return (nothing, nothing)\n    elseif all(isnothing(lst[19]))\n\
    \        return (nothing, nothing)\n    elseif all(isnothing(lst[20]))\n     \
    \   return (nothing, nothing)\n    elseif all(isnothing(lst[21]))\n        return\
    \ (nothing, nothing)\n    elseif all(isnothing(lst[22]))\n        return (nothing,\
    \ nothing)\n    elseif all(isnothing(lst[23]))\n        return (nothing, nothing)\n\
    \    elseif all(isnothing(lst[24]))\n        return (nothing, nothing)\n    elseif\
    \ all(isnothing(lst[25]))\n        return (nothing, nothing)\n    elseif all(isnothing(lst[26]))\n\
    \        return (nothing, nothing)\n    elseif all(isnothing(lst[27]))\n     \
    \   return (nothing, nothing)\n    elseif all(isnothing(lst[28]))\n        return\
    \ (nothing, nothing)\n    elseif all(isnothing(lst[29]))\n        return (nothing,\
    \ nothing)\n    elseif all(isnothing(lst[30]))\n        return (nothing, nothing)\n\
    \    elseif \nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"elseif\" at /tmp/tmpb7iz3cqu.jl:78\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpb7iz3cqu.jl:79\nin expression\
    \ starting at /tmp/tmpb7iz3cqu.jl:79\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector. Test it on some test vectors.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdaa32z0w.jl:24\nin expression starting at\
    \ /tmp/tmpdaa32z0w.jl:24\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (nothing,\
    \ nothing)\n    end\n    largest = nothing\n    smallest = nothing\n    for i\
    \ in lst\n        if i < 0\n            if largest == nothing\n              \
    \  largest = i\n            else\n                smallest = i\n            end\n\
    \        elseif largest == nothing\n            largest = i\n        else\n  \
    \          if i < smallest\n                smallest = i\n            end\n  \
    \      end\n    end\n    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n\
    </cell>\n<text>\nExercise 2\nWrite a function which takes a vector and returns\
    \ the number of elements that are greater than zero.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpni5wswr6.jl:38\nin expression starting at\
    \ /tmp/tmpni5wswr6.jl:38\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of numbers and returns the sum of the\
    \ numbers. If the list is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1_v3kqa.jl:23\nin expression starting at\
    \ /tmp/tmpg1_v3kqa.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    elseif length(lst) == 1\n        return (lst[0], nothing)\n  \
    \  else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns a tuple (a, b), where 'a' is the largest of positive\
    \ integers, and 'b' is the smallest of negative integers in a list.\nIf there\
    \ is no negative or positive integers, return them as None.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwe4_3fz5.jl:26\nin expression starting at\
    \ /tmp/tmpwe4_3fz5.jl:26\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector and returns a vector\
    \ where each element is the sum of the squares of the numbers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoty_g2_w.jl:24\nin expression starting at\
    \ /tmp/tmpoty_g2_w.jl:24\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi5wcammo.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5wcammo.jl:1\n\
    in expression starting at /tmp/tmpi5wcammo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of numbers and returns the sum\
    \ of the numbers. If the list is empty, return 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3uy2c_4.jl:23\nin expression starting at\
    \ /tmp/tmpe3uy2c_4.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \n</cell>\n<text>\n\
    Exercise: Write a function that returns a tuple (a, b), where 'a' is the largest\
    \ of positive integers, and 'b' is the smallest of negative integers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazm3mfyf.jl:23\nin expression starting at\
    \ /tmp/tmpazm3mfyf.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that returns a tuple (a, b), where 'a' is the sum of the\
    \ positive integers in a list, and 'b' is the sum of the negative integers in\
    \ a list.\nIf there are no positive integers or negative integers, return them\
    \ as None.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvk_rrim9.jl:23\nin expression starting at\
    \ /tmp/tmpvk_rrim9.jl:23\n"
  stdout: ''
  timestamp: 1659822817
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq76ygf9.jl:23\nin expression starting at\
    \ /tmp/tmpjq76ygf9.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphlw9zsnj.jl:24\nin expression starting at\
    \ /tmp/tmphlw9zsnj.jl:24\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return nothing,\
    \ nothing\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of times a given value appears in a given list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr87vmkkb.jl:22\nin expression starting at\
    \ /tmp/tmpr87vmkkb.jl:22\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    elseif length(lst) == 1\n        return (lst[0], nothing)\n  \
    \  else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list as an argument and returns a list where all\
    \ negative numbers are replaced by zero, and all positive numbers are replaced\
    \ by one.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbptcyndn.jl:26\nin expression starting at\
    \ /tmp/tmpbptcyndn.jl:26\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyqcmwyll.jl:23\nin expression starting at\
    \ /tmp/tmpyqcmwyll.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return nothing,\
    \ nothing\n    elseif length(lst) == 1\n        return lst[0], nothing\n    elseif\
    \ length(lst) == 2\n        return lst[1], lst[0]\n    else\n        largest,\
    \ smallest = nothing\n        for elt in lst\n            if elt > largest\n \
    \               largest = elt\n            elseif elt < smallest\n           \
    \     smallest = elt\n            end\n        end\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector. Test it on some\
    \ vectors.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxve100xo.jl:34\nin expression starting at\
    \ /tmp/tmpxve100xo.jl:34\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector. Test it on $[-1, 0, 2, -3]$.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcf9hgk05.jl:23\nin expression starting at\
    \ /tmp/tmpcf9hgk05.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq76ygf9.jl:23\nin expression starting at\
    \ /tmp/tmpjq76ygf9.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    elseif length(lst) == 1\n        return (lst[0], nothing)\n  \
    \  else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj7nnc4ov.jl:26\nin expression starting at\
    \ /tmp/tmpj7nnc4ov.jl:26\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return (nothing,\
    \ nothing)\n    end\n    largest = nothing\n    smallest = nothing\n    for i\
    \ in lst\n        if i < 0\n            if largest == nothing\n              \
    \  largest = i\n            else\n                smallest = i\n            end\n\
    \        elseif largest == nothing\n            largest = i\n        elseif i\
    \ < smallest\n            smallest = i\n        end\n    end\n    return (largest,\
    \ smallest)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6xxp_ed.jl:36\nin expression starting at\
    \ /tmp/tmpu6xxp_ed.jl:36\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list as an argument and returns a list where\
    \ each element is the sum of the squares of the positive integers in the list.\
    \ For example, if the list is [4, -5, 3, -2, 2], the function should return [4,\
    \ -5, 9, 0, 7].\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37ocx5gy.jl:23\nin expression starting at\
    \ /tmp/tmp37ocx5gy.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvjgocs3.jl:23\nin expression starting at\
    \ /tmp/tmpdvjgocs3.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmlzvg7g5.jl:23\nin expression starting at\
    \ /tmp/tmpmlzvg7g5.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times a value appears in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyv46a_1p.jl:23\nin expression starting at\
    \ /tmp/tmpyv46a_1p.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list as input and returns a list with all the\
    \ even numbers in that list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcpfh3a_d.jl:23\nin expression starting at\
    \ /tmp/tmpcpfh3a_d.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return largest, smallest \n    else \n  \
    \      return largest, nothing \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector. Test it on $[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]$.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp594tdw07.jl:26\nin expression starting at\
    \ /tmp/tmp594tdw07.jl:26\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpclcq_1v7.jl:23\nin expression starting at\
    \ /tmp/tmpclcq_1v7.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers. \nIf there are no integers in the vector, return 0.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc1al6tyu.jl:23\nin expression starting at\
    \ /tmp/tmpc1al6tyu.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a list as an argument and returns a new list with all the even numbers\
    \ in that list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2apq02jn.jl:23\nin expression starting at\
    \ /tmp/tmp2apq02jn.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuk07dnps.jl:23\nin expression starting at\
    \ /tmp/tmpuk07dnps.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the number of integers in a list that are\n\
    less than the given integer.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc_r938sp.jl:23\nin expression starting at\
    \ /tmp/tmpc_r938sp.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements of the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwrvxjgo.jl:24\nin expression starting at\
    \ /tmp/tmpnwrvxjgo.jl:24\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4h5u1zjw.jl:24\nin expression starting at\
    \ /tmp/tmp4h5u1zjw.jl:24\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjt70i5mx.jl:23\nin expression starting at\
    \ /tmp/tmpjt70i5mx.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector. \nIf the vector is empty, return 0.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0myg7zl.jl:23\nin expression starting at\
    \ /tmp/tmpf0myg7zl.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrz_b05r.jl:24\nin expression starting at\
    \ /tmp/tmpvrz_b05r.jl:24\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\n\
    Write a function that returns the largest and smallest numbers in a list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8wn92qxx.jl:23\nin expression starting at\
    \ /tmp/tmp8wn92qxx.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgjdvnver.jl:23\nin expression starting at\
    \ /tmp/tmpgjdvnver.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers in a\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq_761ha.jl:24\nin expression starting at\
    \ /tmp/tmpjq_761ha.jl:24\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1e6wvb2x.jl:23\nin expression starting at\
    \ /tmp/tmp1e6wvb2x.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9do8szuf.jl:23\nin expression starting at\
    \ /tmp/tmp9do8szuf.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector. \nIf there are no integers in the vector, return 0.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpguj2wmne.jl:23\nin expression starting at\
    \ /tmp/tmpguj2wmne.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nIf\
    \ the vector is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8pbdifoe.jl:23\nin expression starting at\
    \ /tmp/tmp8pbdifoe.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrz_b05r.jl:24\nin expression starting at\
    \ /tmp/tmpvrz_b05r.jl:24\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    largest = nothing\n    smallest = nothing\n    for x\
    \ in lst\n        if x < 0\n            if largest == nothing\n              \
    \  largest = x\n            else\n                largest = nothing\n        \
    \    end\n        elseif largest == nothing\n            smallest = x\n      \
    \  else\n            smallest = nothing\n        end\n    end\n    return (largest,\
    \ smallest)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ycuw57t.jl:36\nin expression starting at\
    \ /tmp/tmp9ycuw57t.jl:36\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return (nothing,\
    \ nothing)\n    elseif lst == [0]\n        return (nothing, nothing)\n    elseif\
    \ lst == [nothing]\n        return (nothing, nothing)\n    else\n        largest\
    \ = nothing\n        smallest = nothing\n        for i in lst\n            if\
    \ i > largest\n                largest = i\n            elseif i < smallest\n\
    \                smallest = i\n            end\n        end\n        return (largest,\
    \ smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns the sum of the absolute values of the elements in\
    \ the vector. For example, if the vector is [4, 2, 3], the function should return\
    \ 7.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5up54ry5.jl:35\nin expression starting at\
    \ /tmp/tmp5up54ry5.jl:35\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest \n    else\
    \ \n        return largest, nothing \nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector and returns a vector where each element is the\
    \ sum of the squares of the elements in the original vector. For example, if the\
    \ input vector is [4, 6, -2, 3], the output vector should be [16, 9, -27, 36].\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuig07qmw.jl:27\nin expression starting at\
    \ /tmp/tmpuig07qmw.jl:27\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \n</cell>\n<code language=julia-1.4>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise: Write\
    \ a function that returns a tuple (a, b), where 'a' is the largest of negative\
    \ integers, and 'b' is the smallest of positive integers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1i1yj1c.jl:23\nin expression starting at\
    \ /tmp/tmpj1i1yj1c.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements of the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8udb1kb.jl:23\nin expression starting at\
    \ /tmp/tmpb8udb1kb.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ integers in the list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxu378m4.jl:23\nin expression starting at\
    \ /tmp/tmpfxu378m4.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of integers and returns the sum\
    \ of the integers in the list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp619agckz.jl:23\nin expression starting at\
    \ /tmp/tmp619agckz.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(el < 0 for el in lst)\n     \
    \   return nothing, nothing\n    elseif all(el > 0 for el in lst)\n        return\
    \ nothing, nothing\n    else\n        largest = maximum(lst)\n        smallest\
    \ = minimum(lst)\n        return largest, smallest\n    end\nend\n</code>\n<|/\
    \ a tags=julia,functional-programming |>\n<| a dscore=2 |>\nHere is a solution\
    \ using max.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakifiv18.jl:30\nin expression starting at\
    \ /tmp/tmpakifiv18.jl:30\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of integers in a list that are\n\
    less than a given number. For example, if the list is [4, 6, 8, 10, 12, 14], the\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph3_jqs67.jl:23\nin expression starting at\
    \ /tmp/tmph3_jqs67.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return largest, smallest \n    else \n  \
    \      return largest, nothing \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list as an argument and returns a tuple where the first element\
    \ is the sum of the elements of the list, and the second element is the product\
    \ of the elements of the list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3fzxgra.jl:26\nin expression starting at\
    \ /tmp/tmpn3fzxgra.jl:26\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq76ygf9.jl:23\nin expression starting at\
    \ /tmp/tmpjq76ygf9.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of integers in a list that are not\
    \ divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph29jlla5.jl:23\nin expression starting at\
    \ /tmp/tmph29jlla5.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return (nothing,\
    \ nothing)\n    elseif all(lst .< 0)\n        return (nothing,nothing)\n    elseif\
    \ all(lst .> 0)\n        return (nothing,nothing)\n    else\n        largest =\
    \ maximum(lst, default=nothing)\n        smallest = minimum(lst, default=nothing)\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector and returns the sum of the absolute values\
    \ of the elements in the vector. Test it on some vectors.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11vrlpux.jl:28\nin expression starting at\
    \ /tmp/tmp11vrlpux.jl:28\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2: Write a function that takes a list as input and returns a list where each\
    \ element is the sum of the elements in the list except the element at index i.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0hvyf37j.jl:23\nin expression starting at\
    \ /tmp/tmp0hvyf37j.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers representing the number of times each integer appears in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjg7kv36.jl:23\nin expression starting at\
    \ /tmp/tmpxjg7kv36.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing)\n    end\n    largest = nothing\n    smallest = nothing\n\
    \    for x in lst\n        if x < 0 \n            if largest == nothing \n   \
    \             largest = x\n            else\n                largest = nothing\n\
    \            end\n        elseif largest == nothing \n            smallest = x\n\
    \        else\n            smallest = nothing\n        end\n    end\n    return\
    \ (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns the sum of the absolute values of the elements in\
    \ the vector. Test it on some test cases.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsm2mxx07.jl:36\nin expression starting at\
    \ /tmp/tmpsm2mxx07.jl:36\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi5wcammo.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5wcammo.jl:1\n\
    in expression starting at /tmp/tmpi5wcammo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest \n    else\
    \ \n        return largest, nothing \nend\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a vector and returns a tuple where the first element is\
    \ the sum of the elements in the vector, and the second element is the mean of\
    \ the elements in the vector. Test it on some vectors.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1yujxryq.jl:27\nin expression starting at\
    \ /tmp/tmp1yujxryq.jl:27\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = nothing\n    smallest = nothing\n   \
    \ \n    for i in lst \n        if i < 0 \n            largest = i \n        else\
    \ \n            smallest = i \n            break\n    \n    if largest == nothing\
    \ \n        return nothing, nothing \n    \n    if smallest == nothing \n    \
    \    return largest, largest \n    \n    return largest, smallest \nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3qtbiyyx.jl:37\nin expression starting at\
    \ /tmp/tmp3qtbiyyx.jl:37\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(el < 0 for el in lst)\n     \
    \   return nothing, nothing\n    elseif all(el > 0 for el in lst)\n        return\
    \ lst, nothing\n    else\n        largest = el for el in lst if el > 0\n     \
    \   smallest = el for el in lst if el < 0\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times a value appears in a list.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmph14jv_zl.jl:20 expected \"\
    end\", got \"for\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph14jv_zl.jl:23\n\
    in expression starting at /tmp/tmph14jv_zl.jl:23\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector. \nIf there are no integers in the vector,\
    \ return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplc990w8i.jl:24\nin expression starting at\
    \ /tmp/tmplc990w8i.jl:24\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return nothing,\
    \ nothing\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest\
    \ < smallest\n        return largest, smallest\n    else\n        return largest,\
    \ nothing\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of integers where the integers are\
    \ the sum of the integers in the original vector, but with any negative integers\
    \ replaced by zero, and any positive integers replaced by one.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp37lyn3uu.jl:26\nin expression starting at\
    \ /tmp/tmp37lyn3uu.jl:26\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \n    end\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector and returns a vector where\
    \ each element is the sum of the squares of the elements in the original vector.\
    \ For example, if the input vector is [4, 6, 1, 3, 9], the output vector should\
    \ be [16, 25, 12, 9, 25].\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5cb4zra3.jl:24\nin expression starting at\
    \ /tmp/tmp5cb4zra3.jl:24\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list as an argument and returns a new list\
    \ with all the even numbers in that list. For example, if the list contains [4,\
    \ 6, 8, 10, 12, 14, 16, 18, 20], the function should return [4, 6, 8].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuyasdiz0.jl:23\nin expression starting at\
    \ /tmp/tmpuyasdiz0.jl:23\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector. Test it on some test cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2ftcwvd.jl:23\nin expression starting at\
    \ /tmp/tmpn2ftcwvd.jl:23\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76pxzv3k.jl:24\nin expression starting at\
    \ /tmp/tmp76pxzv3k.jl:24\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi5wcammo.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5wcammo.jl:1\n\
    in expression starting at /tmp/tmpi5wcammo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times a value appears in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyv46a_1p.jl:23\nin expression starting at\
    \ /tmp/tmpyv46a_1p.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7w0l1jaf.jl:23\nin expression starting at\
    \ /tmp/tmp7w0l1jaf.jl:23\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of numbers and returns the sum of the\
    \ numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpef3wkrp0.jl:23\nin expression starting at\
    \ /tmp/tmpef3wkrp0.jl:23\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector and returns a vector where each element\
    \ is the sum of the squares of the elements in the original vector. For example,\
    \ if the input vector is [4, 6, 3, 2], the output vector should be [16, 18, 9,\
    \ 12].\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mh13ql2.jl:23\nin expression starting at\
    \ /tmp/tmp_mh13ql2.jl:23\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of times a given value appears in\
    \ a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph3v9v7ez.jl:23\nin expression starting at\
    \ /tmp/tmph3v9v7ez.jl:23\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\n\
    Write a function that returns the sum of the integers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9zklbfw.jl:23\nin expression starting at\
    \ /tmp/tmpp9zklbfw.jl:23\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return largest, smallest \n    else \n  \
    \      return largest, nothing \nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector and returns a vector where each element is the sum of the\
    \ squares of the elements in the original vector. For example, if the input vector\
    \ is [1,2,3], the output vector should be [1,2,3].\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzo02axmb.jl:26\nin expression starting at\
    \ /tmp/tmpzo02axmb.jl:26\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that returns a tuple (a, b), where 'a' is the sum of the\
    \ positive integers in a list, and 'b' is the sum of the negative integers in\
    \ a list.\nIf there are no integers, return (0, 0).\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3zxlckt8.jl:23\nin expression starting at\
    \ /tmp/tmp3zxlckt8.jl:23\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(el < 0 for el in lst)\n     \
    \   return nothing, nothing\n    elseif all(el > 0 for el in lst)\n        return\
    \ largest_smallest_integers(lst[end-1:end])\n    else\n        return largest_smallest_integers(lst[end-1:end-1]),\
    \ lst[end]\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppzxipq85.jl:28\nin expression starting at\
    \ /tmp/tmppzxipq85.jl:28\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns a tuple (a, b), where 'a' is\
    \ the largest of integers, and 'b' is the smallest of integers in a list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp60c2g5ic.jl:24\nin expression starting at\
    \ /tmp/tmp60c2g5ic.jl:24\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return nothing,\
    \ nothing\n    end\n    largest = nothing\n    smallest = nothing\n    for x in\
    \ lst\n        if x < 0\n            if largest == nothing\n                largest\
    \ = x\n            else\n                if x > largest\n                    largest\
    \ = x\n                end\n            end\n        else\n            if smallest\
    \ == nothing\n                smallest = x\n            else\n               \
    \ if x < smallest\n                    smallest = x\n                end\n   \
    \         end\n        end\n    end\n    return largest, smallest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector. For example, if the vector\
    \ is [4, 2, -5, -6, 3], the function should return 7.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaj680db.jl:42\nin expression starting at\
    \ /tmp/tmpxaj680db.jl:42\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9do8szuf.jl:23\nin expression starting at\
    \ /tmp/tmp9do8szuf.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and a number as input,\
    \ and returns the number of times each number appears in the vector. For example,\
    \ if the vector is [1, 1, 2, 2], and the number is 2, the function should return\
    \ [1, 1, 0, 0].\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07cbq4fp.jl:24\nin expression starting at\
    \ /tmp/tmp07cbq4fp.jl:24\n"
  stdout: ''
  timestamp: 1659822822
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ largest and smallest numbers in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bsiadsp.jl:23\nin expression starting at\
    \ /tmp/tmp6bsiadsp.jl:23\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing)\n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a list of integers and returns the\
    \ sum of the integers in the list. Test it on some test cases.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgzzdwoz.jl:24\nin expression starting at\
    \ /tmp/tmpwgzzdwoz.jl:24\n"
  stdout: ''
  timestamp: 1659822823
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    elseif length(lst) == 1\n        return (lst[1], nothing)\n  \
    \  elseif length(lst) == 2\n        return (lst[1], lst[1])\n    else\n      \
    \  largest = nothing\n        smallest = nothing\n        for element in lst\n\
    \            if element > largest\n                largest = element\n       \
    \     elseif element < smallest\n                smallest = element\n        \
    \    end\n        end\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the largest and smallest numbers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4xviqrd.jl:35\nin expression starting at\
    \ /tmp/tmpx4xviqrd.jl:35\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns a tuple (a, b), where 'a' is the sum of the\
    \ elements of 'lst', and 'b' is the product of the elements of 'lst'.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61lhog_a.jl:23\nin expression starting at\
    \ /tmp/tmp61lhog_a.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing\n    elseif length(lst) == 1 \n        return lst[1], lst[1]\n\
    \    elseif length(lst) == 2 \n        return lst[1], lst[1]\n    elseif length(lst)\
    \ > 2 \n        largest = minimum(lst)\n        smallest = maximum(lst)\n    \
    \    return largest, smallest\n    else\n        return nothing, nothing\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mg51z9k.jl:30\nin expression starting at\
    \ /tmp/tmp0mg51z9k.jl:30\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (nothing, nothing)\n    elseif all(x > 0 for x in lst)\n        (a, b)\
    \ = (nothing,nothing)\n    else\n        (a, b) = (min(lst), max(lst))\n    end\n\
    \    return (a, b)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the largest integer in a list.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sbtqbci.jl:25\nin expression starting at\
    \ /tmp/tmp9sbtqbci.jl:25\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (nothing,\
    \ nothing)\n    end\n    largest = nothing\n    smallest = nothing\n    for i\
    \ in lst\n        if i < 0\n            if largest == nothing\n              \
    \  largest = i\n            else\n                smallest = i\n            end\n\
    \        elseif largest == nothing\n            largest = i\n        elseif smallest\
    \ == nothing\n            smallest = i\n        else\n            if largest <\
    \ i\n                largest = i\n            elseif smallest > i\n          \
    \      smallest = i\n            end\n        end\n    end\n    return (largest,\
    \ smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnjjl8h3h.jl:42\nin expression starting at\
    \ /tmp/tmpnjjl8h3h.jl:42\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2: Write a function that returns the largest and smallest numbers in a list.\n\
    The function should take a list of numbers as an argument and return the largest\
    \ and smallest numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7gfelho.jl:23\nin expression starting at\
    \ /tmp/tmpr7gfelho.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq76ygf9.jl:23\nin expression starting at\
    \ /tmp/tmpjq76ygf9.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return nothing,\
    \ nothing\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest\
    \ < 0\n        return nothing, nothing\n    if smallest > 0\n        return largest,\
    \ smallest\n    return largest, nothing\nend\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1voolyt.jl:1\nin expression starting at /tmp/tmpr1voolyt.jl:1\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (nothing,\
    \ nothing)\n    elseif lst.head < 0\n        return (lst.last, nothing)\n    elseif\
    \ lst.head > 0\n        return (lst.head, nothing)\n    else\n        return (lst.head,\
    \ lst.last)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the number of positive integers in a list.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkjgy3c6w.jl:26\nin expression starting at\
    \ /tmp/tmpkjgy3c6w.jl:26\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the elements\
    \ in the vector. \nIf the vector is empty, return 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9c5a07_8.jl:23\nin expression starting at\
    \ /tmp/tmp9c5a07_8.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a list of numbers and returns the sum of the\
    \ numbers in the list, ignoring any non-numeric elements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbajo2yov.jl:23\nin expression starting at\
    \ /tmp/tmpbajo2yov.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrdkeu72.jl:23\nin expression starting at\
    \ /tmp/tmpdrdkeu72.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of numbers and returns\
    \ the sum of the numbers. If the list is empty, return 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdml4hnzx.jl:24\nin expression starting at\
    \ /tmp/tmpdml4hnzx.jl:24\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    largest = nothing\n    smallest = nothing\n    for i\
    \ in lst\n        if i < 0\n            if largest == nothing\n              \
    \  largest = i\n            else\n                largest = nothing\n        \
    \    end\n        elseif i == 0\n            if smallest == nothing\n        \
    \        smallest = i\n            else\n                smallest = nothing\n\
    \            end\n        else\n            if largest == nothing\n          \
    \      largest = i\n            else\n                largest = nothing\n    \
    \        end\n            if smallest == nothing\n                smallest = i\n\
    \            else\n                smallest = nothing\n            end\n     \
    \   end\n    end\n    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfl_jbj0b.jl:49\nin expression starting at\
    \ /tmp/tmpfl_jbj0b.jl:49\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    largest = minimum(el for el in lst if el\
    \ < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return largest,\
    \ smallest\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptnwrxpan.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptnwrxpan.jl:1\n\
    in expression starting at /tmp/tmptnwrxpan.jl:1\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjt70i5mx.jl:23\nin expression starting at\
    \ /tmp/tmpjt70i5mx.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjt70i5mx.jl:23\nin expression starting at\
    \ /tmp/tmpjt70i5mx.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi5wcammo.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5wcammo.jl:1\n\
    in expression starting at /tmp/tmpi5wcammo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1oc9kmu.jl:23\nin expression starting at\
    \ /tmp/tmpv1oc9kmu.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    elseif length(lst) == 1\n        return (lst[0], nothing)\n  \
    \  elseif length(lst) == 2\n        return (lst[1], lst[0])\n    else\n      \
    \  largest = nothing\n        smallest = nothing\n        for elt in lst\n   \
    \         if elt > largest\n                largest = elt\n            elseif\
    \ elt < smallest\n                smallest = elt\n            end\n        end\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list as input and returns a new list with all the\
    \ even numbers in that list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2d1bc9qe.jl:35\nin expression starting at\
    \ /tmp/tmp2d1bc9qe.jl:35\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the largest and smallest numbers in a list.\nIf there are no numbers, return\
    \ (nothing, nothing).\nIf there are multiple numbers, return (nothing, nothing).\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx7e85mdq.jl:23\nin expression starting at\
    \ /tmp/tmpx7e85mdq.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers. If the vector is empty, return 0.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0auubk0.jl:23\nin expression starting at\
    \ /tmp/tmpv0auubk0.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return largest, smallest\n    else \n   \
    \     return largest, nothing\nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ that returns the sum of the integers in a list.\nThe function should take in\
    \ a list of integers and return the sum of the integers. If the list is empty,\
    \ return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptaqew7qc.jl:26\nin expression starting at\
    \ /tmp/tmptaqew7qc.jl:26\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi5wcammo.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5wcammo.jl:1\n\
    in expression starting at /tmp/tmpi5wcammo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphy1tco3x.jl:23\nin expression starting at\
    \ /tmp/tmphy1tco3x.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest) \nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns a tuple (a, b), where 'a' is the sum\
    \ of the positive integers in a list, and 'b' is the sum of the negative integers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyr81ryx1.jl:23\nin expression starting at\
    \ /tmp/tmpyr81ryx1.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the number of positive integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpca9m104h.jl:23\nin expression starting at\
    \ /tmp/tmpca9m104h.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return largest, smallest\n    else \n   \
    \     return largest, nothing\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the largest and smallest numbers in a list.\nThe function should\
    \ take a list of numbers as an argument, and return a tuple of the largest and\
    \ smallest numbers.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4k6byh66.jl:26\nin expression starting at\
    \ /tmp/tmp4k6byh66.jl:26\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    end\n    \n    largest = nothing\n    smallest = nothing\n\
    \    \n    for x in lst\n        if x < 0 \n            if largest == nothing\
    \ \n                largest = x\n            elseif largest < x \n           \
    \     largest = x\n            end\n        elseif x > 0 \n            if smallest\
    \ == nothing \n                smallest = x \n            elseif smallest > x\
    \ \n                smallest = x \n            end\n        end\n    end\n   \
    \ return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxsota48.jl:40\nin expression starting at\
    \ /tmp/tmpmxsota48.jl:40\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(isnothing(el) for el in lst)\n\
    \        return nothing, nothing\n    elseif all(el < 0 for el in lst)\n     \
    \   return nothing, nothing\n    elseif all(el > 0 for el in lst)\n        return\
    \ nothing, nothing\n    else\n        largest = maximum(lst, default=nothing)\n\
    \        smallest = minimum(lst, default=nothing)\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements of the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6yrr87i0.jl:30\nin expression starting at\
    \ /tmp/tmp6yrr87i0.jl:30\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03fg8vvj.jl:23\nin expression starting at\
    \ /tmp/tmp03fg8vvj.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a list that\
    \ are\nless than a given value.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptupcax_b.jl:24\nin expression starting at\
    \ /tmp/tmptupcax_b.jl:24\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03fg8vvj.jl:23\nin expression starting at\
    \ /tmp/tmp03fg8vvj.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the integers in a\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmdi29ita.jl:24\nin expression starting at\
    \ /tmp/tmpmdi29ita.jl:24\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5i0l1kv4.jl:23\nin expression starting at\
    \ /tmp/tmp5i0l1kv4.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest) \nend\n</cell>\n<text>\n\
    Exercise: Write a function that returns a tuple (a, b), where 'a' is the largest\
    \ of positive integers, and 'b' is the smallest of negative integers in a list.\n\
    If there is no negative or positive integers, return them as None.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrd3z2w4.jl:23\nin expression starting at\
    \ /tmp/tmpzrd3z2w4.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns a vector where each element\
    \ is the sum of the squares of the elements in the original vector. For example,\
    \ if the input vector is [1,2,3], the output vector should be [1,2,3].\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsr2xwp0v.jl:23\nin expression starting at\
    \ /tmp/tmpsr2xwp0v.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return (nothing,\
    \ nothing)\n    end\n    largest = nothing\n    smallest = nothing\n    for i\
    \ in lst\n        if i < 0\n            if largest == nothing\n              \
    \  largest = i\n            else\n                smallest = i\n            end\n\
    \        else\n            if smallest == nothing\n                smallest =\
    \ i\n            else\n                if largest < smallest\n               \
    \     largest = i\n                else\n                    smallest = i\n  \
    \              end\n            end\n        end\n    end\n    return (largest,\
    \ smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ largest and smallest numbers in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe74js47t.jl:42\nin expression starting at\
    \ /tmp/tmpe74js47t.jl:42\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the integers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0u6cw5ty.jl:23\nin expression starting at\
    \ /tmp/tmp0u6cw5ty.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the integers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wcz7m3r.jl:23\nin expression starting at\
    \ /tmp/tmp6wcz7m3r.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (nothing,\
    \ nothing)\n    elseif lst.is_one\n        return (lst.last, lst.first)\n    elseif\
    \ lst.is_two\n        return (lst.last, lst.first)\n    elseif lst.is_three\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_four\n        return\
    \ (lst.last, lst.first)\n    elseif lst.is_five\n        return (lst.last, lst.first)\n\
    \    elseif lst.is_six\n        return (lst.last, lst.first)\n    elseif lst.is_seven\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_eight\n        return\
    \ (lst.last, lst.first)\n    elseif lst.is_nine\n        return (lst.last, lst.first)\n\
    \    elseif lst.is_ten\n        return (lst.last, lst.first)\n    elseif lst.is_eleven\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_twelve\n        return\
    \ (lst.last, lst.first)\n    elseif lst.is_thirteen\n        return (lst.last,\
    \ lst.first)\n    elseif lst.is_fourteen\n        return (lst.last, lst.first)\n\
    \    elseif lst.is_fifteen\n        return (lst.last, lst.first)\n    elseif lst.is_sixteen\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_seventeen\n        return\
    \ (lst.last, lst.first)\n    elseif lst.is_eighteen\n        return (lst.last,\
    \ lst.first)\n    elseif lst.is_nineteen\n        return (lst.last, lst.first)\n\
    \    elseif lst.is_twenty\n        return (lst.last, lst.first)\n    elseif lst.is_twenty_one\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_twenty_two\n        return\
    \ (lst.last, lst.first)\n    elseif lst.is_twenty_three\n        return (lst.last,\
    \ lst.first)\n    elseif lst.is_twenty_four\n        return (lst.last, lst.first)\n\
    \    elseif lst.is_twenty_five\n        return (lst.last, lst.first)\n    elseif\
    \ lst.is_twenty_six\n        return (lst.last, lst.first)\n    elseif lst.is_twenty_seven\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_twenty_eight\n      \
    \  return (lst.last, lst.first)\n    elseif lst.is_tw\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb89mnlq.jl:1\nin expression starting at /tmp/tmpdb89mnlq.jl:1\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest \nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of integers and returns the sum of the integers. If the\
    \ vector is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp81bqptu4.jl:23\nin expression starting at\
    \ /tmp/tmp81bqptu4.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of integers in a list that are\n\
    less than a given integer.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppms4_cb5.jl:23\nin expression starting at\
    \ /tmp/tmppms4_cb5.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector. \nIf the vector is empty, return 0.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoorr2fev.jl:23\nin expression starting at\
    \ /tmp/tmpoorr2fev.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing)\n    elseif length(lst) == 1 \n        return (lst[1], nothing)\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = nothing\n        smallest = nothing\n        for elt\
    \ in lst \n            if elt > largest \n                largest = elt\n    \
    \        elseif elt < smallest \n                smallest = elt\n            end\n\
    \        end\n        return (largest, smallest)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_8pl9z1.jl:35\nin expression starting at\
    \ /tmp/tmpv_8pl9z1.jl:35\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    largest = nothing\n    smallest = nothing\n    for x\
    \ in lst\n        if x < 0\n            if largest == nothing\n              \
    \  largest = x\n            else\n                largest = nothing\n        \
    \    end\n        elseif x > largest\n            if smallest == nothing\n   \
    \             smallest = x\n            else\n                smallest = nothing\n\
    \            end\n        else\n            if largest == nothing\n          \
    \      largest = x\n            elseif smallest == nothing\n                smallest\
    \ = x\n            else\n                if x > smallest\n                   \
    \ smallest = x\n                else\n                    largest = x\n      \
    \          end\n            end\n        end\n    end\n    return (largest, smallest)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_fl88ce.jl:50\nin expression starting at\
    \ /tmp/tmpl_fl88ce.jl:50\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of elements in a list that are\n\
    positive.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcp5l7533.jl:23\nin expression starting at\
    \ /tmp/tmpcp5l7533.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kq4uaut.jl:23\nin expression starting at\
    \ /tmp/tmp_kq4uaut.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector. Test it on some test cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3k6oyhe.jl:24\nin expression starting at\
    \ /tmp/tmpr3k6oyhe.jl:24\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of elements in a\
    \ list that are\nless than a given number. For example, if the list is [5, 7,\
    \ 2, 6, 3, 8], the\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3wparzvr.jl:24\nin expression starting at\
    \ /tmp/tmp3wparzvr.jl:24\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvjgocs3.jl:23\nin expression starting at\
    \ /tmp/tmpdvjgocs3.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers. \nIf there are no integers, return 0.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplu9dgrql.jl:23\nin expression starting at\
    \ /tmp/tmplu9dgrql.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of positive integers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03fg8vvj.jl:23\nin expression starting at\
    \ /tmp/tmp03fg8vvj.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.empty\n        return (nothing,\
    \ nothing)\n    elseif lst.head < 0\n        return (lst.last, nothing)\n    else\n\
    \        return (lst.last, lst.head)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector. \nIf there are no integers in the vector, return 0.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy94bhhfe.jl:24\nin expression starting at\
    \ /tmp/tmpy94bhhfe.jl:24\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the number of integers in a list that are\n\
    less than a given number. For example, if the list is [4, 6, 3, 7, 10], the\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmn8zyr8g.jl:23\nin expression starting at\
    \ /tmp/tmpmn8zyr8g.jl:23\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return largest, smallest \n    else \n  \
    \      return largest, nothing \nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a list of integers and returns the sum of the integers in the list.\
    \ Test it on a list of integers containing only positive integers and on a list\
    \ of integers containing only negative integers.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3_545gco.jl:26\nin expression starting at\
    \ /tmp/tmp3_545gco.jl:26\n"
  stdout: ''
  timestamp: 1659822826
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphy1tco3x.jl:23\nin expression starting at\
    \ /tmp/tmphy1tco3x.jl:23\n"
  stdout: ''
  timestamp: 1659822824
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp936sd2h8.jl:23\nin expression starting at\
    \ /tmp/tmp936sd2h8.jl:23\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the integers in a list.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03mgfff2.jl:22\nin expression starting at\
    \ /tmp/tmp03mgfff2.jl:22\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n\
    </cell>\n<text>\nExercise: Write a function that returns the largest and smallest\
    \ numbers in a vector, ignoring any NaN values.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpal2_qo.jl:23\nin expression starting at\
    \ /tmp/tmpzpal2_qo.jl:23\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return nothing,\
    \ nothing\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ a list of all numbers from 1 to $n$ that are divisible by $k$. For example,\
    \ divisible_numbers(3, 2) should return [3, 6, 9, 12, 15].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz23eoyur.jl:22\nin expression starting at\
    \ /tmp/tmpz23eoyur.jl:22\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of positive integers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv_t1bb3h.jl:23\nin expression starting at\
    \ /tmp/tmpv_t1bb3h.jl:23\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements of the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8udb1kb.jl:23\nin expression starting at\
    \ /tmp/tmpb8udb1kb.jl:23\n"
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (nothing,\
    \ nothing)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9qimrw9.jl:23\nin expression starting at\
    \ /tmp/tmpc9qimrw9.jl:23\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplzu1rrv1.jl:23\nin expression starting at\
    \ /tmp/tmplzu1rrv1.jl:23\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi5wcammo.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi5wcammo.jl:1\n\
    in expression starting at /tmp/tmpi5wcammo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing)\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return (largest, smallest)\n    else\n  \
    \      return (nothing, nothing)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector. \nIf there are no integers in the vector, return 0.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmply8o7dco.jl:27\nin expression starting at\
    \ /tmp/tmply8o7dco.jl:27\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3: Write a function that returns the largest and smallest numbers\
    \ in a list.\nThe function should take a list of numbers as an argument, and return\
    \ two numbers: the largest and smallest numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_npo1h7t.jl:24\nin expression starting at\
    \ /tmp/tmp_npo1h7t.jl:24\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend \n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl1jmho8v.jl:23\nin expression starting at\
    \ /tmp/tmpl1jmho8v.jl:23\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the numbers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrdkeu72.jl:23\nin expression starting at\
    \ /tmp/tmpdrdkeu72.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (nothing,\
    \ nothing)\n    elseif lst.head < 0\n        return (lst.last, nothing)\n    else\n\
    \        return (lst.last, lst.head)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given value appears in\
    \ a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb0g7dfc_.jl:24\nin expression starting at\
    \ /tmp/tmpb0g7dfc_.jl:24\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns a list of all integers up to\
    \ a number n.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgcrr0pf4.jl:24\nin expression starting at\
    \ /tmp/tmpgcrr0pf4.jl:24\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns a tuple (a, b), where 'a' is the sum of the\
    \ positive integers in a list, and 'b' is the sum of the negative integers in\
    \ a list.\nIf there are no positive integers or negative integers, return them\
    \ as None.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfpxn2llt.jl:23\nin expression starting at\
    \ /tmp/tmpfpxn2llt.jl:23\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq76ygf9.jl:23\nin expression starting at\
    \ /tmp/tmpjq76ygf9.jl:23\n"
  stdout: ''
  timestamp: 1659822819
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return (largest, smallest)\n    else \n \
    \       return (nothing, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns a vector where each element is\
    \ the sum of the squares of the elements in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1lb65g6.jl:27\nin expression starting at\
    \ /tmp/tmps1lb65g6.jl:27\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    if largest < smallest \n        return largest, smallest \n    else \n  \
    \      return largest, nothing \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nIf\
    \ the vector is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6dj05f_.jl:26\nin expression starting at\
    \ /tmp/tmph6dj05f_.jl:26\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector. Test it on some vectors.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeclv8_u5.jl:24\nin expression starting at\
    \ /tmp/tmpeclv8_u5.jl:24\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return nothing,\
    \ nothing\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers. If\
    \ the vector is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeev44pau.jl:22\nin expression starting at\
    \ /tmp/tmpeev44pau.jl:22\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (nothing, nothing) \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return (largest, smallest)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1g4uvp1l.jl:24\nin expression starting at\
    \ /tmp/tmp1g4uvp1l.jl:24\n"
  stdout: ''
  timestamp: 1659822828
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1,\
    \ 3, 5, 7])\n    (nothing, 1)\n    >>> largest_smallest_integers([])\n    (nothing,\
    \ nothing)\n    >>> largest_smallest_integers([0])\n    (nothing, nothing)\n \
    \   \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of numbers and returns the sum of the\
    \ numbers. If the list is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg1_v3kqa.jl:23\nin expression starting at\
    \ /tmp/tmpg1_v3kqa.jl:23\n"
  stdout: ''
  timestamp: 1659822817
