name: HumanEval_134_check_if_last_char_is_a_letter
language: jl
prompt: "\"\"\"\n    Create a function that returns True if the last character\n \
  \   of a given string is an alphabetical character and is not\n    a part of a word,\
  \ and False otherwise.\n    Note: \"word\" is a group of characters separated by\
  \ space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
  )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
  \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
  \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
  \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
  \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"\
  Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
  \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple\
  \ pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
completions: ["    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \"\\n\"\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ txt = txt.strip()\n    \n    if txt == \"\"\n        return false\n    \n  \
    \  txt = txt.split(\" \")\n    \n    txt = txt.last()\n    \n    if txt == \"\"\
    \n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt", " \
    \   txt = txt.trim()\n    if txt.length == 0\n        false\n    else\n      \
    \  txt.last() in string.ascii_letters\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n      \
    \  if txt[txt.length - 1] == ' ' \n            false\n        else\n         \
    \   if txt[txt.length - 1].isalpha()\n                false\n            else\n\
    \                true\n        end\n    end\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if the last character is a space or punctuation mark. For example,\
    \ `check_if_last_char_is_a_letter(\"apple pi e \")` returns `true` instead of\
    \ `false`.\n<|/ c |>\n<| c |>\nI added a version that checks for punctuation marks\
    \ as well.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    txt = txt.strip()\n    if\
    \ txt.size == 0\n        false\n    else\n        txt.last() in string.ascii_letters\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length-1] == ' ' || txt[txt.length-1]\
    \ == '.' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    if txt.size == 0\n        return false\n  \
    \  \n    txt = txt.split(\" \")\n    \n    last = txt[txt.size-1]\n    \n    if\
    \ last.size == 0\n        return false\n    \n    last = last.last\n    \n   \
    \ if last == \" \"\n        return false\n    \n    if last.chars.last == \" \"\
    \n        return false\n    \n    if last.chars.last == \" \"\n        return\
    \ false\n    \n    if last.chars.last == \" \"\n        return false\n    \n \
    \   if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.",
  "    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \"\
    \ \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\v\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\f\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\e\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\\"\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"%\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"&\" \n        false\n    elseif txt[txt.length-1] == \"'\" \n        false\n\
    \    elseif txt[txt.length-1] == \"(\" \n        false\n    elseif txt[txt.length-1]\
    \ == \")\" \n        false\n    elseif txt[txt.length-1] == \",\" \n        false\n\
    \    elseif txt[txt.length-1] == \".\" \n        false\n    elseif txt[txt.length-1]\
    \ == \":\" \n        false\n    elseif txt[txt.length-1] == \";\" \n        false\n\
    \    elseif txt[txt.length-1] == \"<\" \n        false\n    elseif txt[txt.length-1]\
    \ == \">\" \n        false\n    elseif txt[txt.length-1] == \"?\" \n        false\n\
    \    elseif txt[txt.length-1] == \"/\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"[\" \n        false\n    elseif txt[txt.length-1] == \"]\" \n        false\n\
    \    elseif txt[txt.length-1] == \"{\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"}\" \n        false\n    elseif txt[txt.length-1] == \"|\" \n        false\n\
    \    elseif txt[txt.length-1] == \"~\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"`\" \n        false\n    elseif txt[txt.length-1] == \"-\" \n        false\n\
    \    elseif txt[txt.length-1] == \"_\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"=\" \n        false\n    elseif txt[txt.length-1] == \"+\" \n        false\n\
    \    elseif txt[txt.length-1] == \"*\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"?\" \n        ", "    \n    if txt.length == 0\n        return false\n\
    \    \n    if txt.head == txt.last\n        return true\n    \n    if txt.head\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last.isalpha()\n        return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1].isalpha()\
    \ \n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    else\n        if txt[txt.length-1] == \" \" \n            false\n       \
    \ else\n            if txt[txt.length-1].isalpha() \n                false\n \
    \           else\n                true\n        end\n    end\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=0 |>\n<code>", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length - 1] == \" \" || txt[txt.length\
    \ - 1] == \"\\n\" || txt[txt.length - 1] == \"\\t\" || txt[txt.length - 1] ==\
    \ \"\\r\" || txt[txt.length - 1] == \"\\f\" || txt[txt.length - 1] == \"\\v\"\
    \ || txt[txt.length - 1] == \"\\e\" || txt[txt.length - 1] == \"\\U\" || txt[txt.length\
    \ - 1] == \"\\N\" || txt[txt.length - 1] == \"\\L\" || txt[txt.length - 1] ==\
    \ \"\\p\" || txt[txt.length - 1] == \"\\P\" || txt[txt.length - 1] == \"\\a\"\
    \ || txt[txt.length - 1] == \"\\A\" || txt[txt.length - 1] == \"\\e\" || txt[txt.length\
    \ - 1] == \"\\E\" || txt[txt.length - 1] == \"\\U\" || txt[txt.length - 1] ==\
    \ \"\\N\" || txt[txt.length - 1] == \"\\L\" || txt[txt.length - 1] == \"\\p\"\
    \ || txt[txt.length - 1] == \"\\P\" || txt[txt.length - 1] == \"\\a\" || txt[txt.length\
    \ - 1] == \"\\A\" || txt[txt.length - 1] == \"\\e\" || txt[txt.length - 1] ==\
    \ \"\\E\" || txt[txt.length - 1] == \"\\U\" || txt[txt.length - 1] == \"\\N\"\
    \ || txt[txt.length - 1] == \"\\L\" || txt[txt.length - 1] == \"\\p\" || txt[txt.length\
    \ - 1] == \"\\P\" || txt[txt.length - 1] == \"\\a\" || txt[txt.length - 1] ==\
    \ \"\\A\" || txt[txt.length - 1] == \"\\e\" || txt[txt.length - 1] == \"\\E\"\
    \ || txt[txt.length - 1] == \"\\U\" || txt[txt.length - 1] == \"\\N\" || txt[txt.length\
    \ - 1] == \"\\L\" || txt[txt.length - 1] == \"\\p\" || txt[txt.length - 1] ==\
    \ \"\\P\" || txt[txt.length - 1] == \"\\a\" || txt[txt.length - 1] == \"\\A\"\
    \ || txt[txt.length - 1] == \"\\e\" || txt[txt.length - 1] == \"\\E\" || txt[txt.length\
    \ - 1] == \"\\U\" || txt[txt.length - 1] == \"\\N\" || txt[txt.length - 1] ==\
    \ \"\\L\" || txt[txt.length - 1] == \"\\p\" || txt[txt.length - 1] == \"\\P\"\
    \ || txt[txt.length - 1] == \"\\a\" || txt[txt.length - 1] == \"\\A\" || txt[txt.length\
    \ - 1] == \"\\e\" || txt[txt.length - 1] == \"\\E\" || txt[txt.length - 1] ==\
    \ \"\\U\" || txt[txt.length - 1] == \"\\N\" || txt[txt.length - 1] == \"\\L\"\
    \ || txt[", "    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == ',' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '!' || txt[txt.length-1] == ';' || txt[txt.length-1]\
    \ == ':' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_' || txt[txt.length-1]\
    \ == '/' || txt[txt.length-1] == '\\\\' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '[' || txt[txt.length-1] == ']' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '+' || txt[txt.length-1] == '-' || txt[txt.length-1] == '=' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '~' || txt[txt.length-1] == '!' || txt[txt.length-1]\
    \ == '@' || txt[txt.length-1] == '#' || txt[txt.length-1] == '$' || txt[txt.length-1]\
    \ == '%' || txt[txt.length-1] == '^' || txt[txt.length-1] == '&' || txt[txt.length-1]\
    \ == '*' || txt[txt.length-1] == '(' || txt[txt.length-1] == ')' || txt[txt.length-1]\
    \ == '[' || txt[txt.length-1] == ']' || txt[txt.length-1] == '{' || txt[txt.length-1]\
    \ == '}' || txt[txt.length-1] == '+' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '=' || txt[txt.length-1] == '^' || txt[txt.length-1] == '~' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '@' || txt[txt.length-1] == '#' || txt[txt.length-1]\
    \ == '$' || txt[txt.length-1] == '%' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '&' || txt[txt.length-1] == '*' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '[' || txt[txt.length-1] == ']' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '+' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '=' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '~' || txt[txt.length-1] == '!' || txt[txt.length", "    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n\
    \    ", "    txt = txt.strip()\n    if txt.length == 0 \n        false\n    elseif\
    \ txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1] !=\
    \ \" \" \n        true\n    elseif txt[txt.length-1] == \" \" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\n\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\t\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\v\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\f\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\e\" \n        false\n    elseif txt[txt.length-1] == \"\\\"\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\\\\" \n        false\n    elseif txt[txt.length-1] == \"\\?\" \n    \
    \    false\n    elseif txt[txt.length-1] == \"\\*\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\<\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\>\" \n        false\n    elseif txt[txt.length-1] == \"\\|\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\~\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\^\" \n        false\n    elseif txt[txt.length-1] == \"\\&\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\*\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\|\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\~\" \n        false\n    elseif txt[txt.length-1] == \"\\^\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\&\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\*\" \n        false\n    elseif txt[txt.length-1] == \"\\|\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\~\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\^\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\&\" \n        false\n    elseif txt[txt.length-1] == \"\\*\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\|\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\~\" \n        false\n    elseif txt[txt.length-1] == \"\\^\" ", "   \
    \ txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n   \
    \ txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n\
    \        txt[txt.length - 1] == \" \" || txt[txt.length - 1] == \".\" || txt[txt.length\
    \ - 1] == \",\" || txt[txt.length - 1] == \"?\" || txt[txt.length - 1] == \"!\"\
    \ || txt[txt.length - 1] == \"-\" || txt[txt.length - 1] == \"_\" || txt[txt.length\
    \ - 1] == \"/\" || txt[txt.length - 1] == \"\\\\\" || txt[txt.length - 1] == \"\
    $\" || txt[txt.length - 1] == \"%\" || txt[txt.length - 1] == \"^\" || txt[txt.length\
    \ - 1] == \"&\" || txt[txt.length - 1] == \"*\" || txt[txt.length - 1] == \"(\"\
    \ || txt[txt.length - 1] == \")\" || txt[txt.length - 1] == \"[\" || txt[txt.length\
    \ - 1] == \"]\" || txt[txt.length - 1] == \"{\" || txt[txt.length - 1] == \"}\"\
    \ || txt[txt.length - 1] == \"|\" || txt[txt.length - 1] == \":\" || txt[txt.length\
    \ - 1] == \";\" || txt[txt.length - 1] == \"<\" || txt[txt.length - 1] == \">\"\
    \ || txt[txt.length - 1] == \"=\" || txt[txt.length - 1] == \"'\" || txt[txt.length\
    \ - 1] == \"\\\"\" || txt[txt.length - 1] == \"~\" || txt[txt.length - 1] == \"\
    `\" || txt[txt.length - 1] == \"-\" || txt[txt.length - 1] == \"_\" || txt[txt.length\
    \ - 1] == \"/\" || txt[txt.length - 1] == \"\\\\\" || txt[txt.length - 1] == \"\
    $\" || txt[txt.length - 1] == \"%\" || txt[txt.length - 1] == \"^\" || txt[txt.length\
    \ - 1] == \"&\" || txt[txt.length - 1] == \"*\" || txt[txt.length - 1] == \"(\"\
    \ || txt[txt.length - 1] == \")\" || txt[txt.length - 1] == \"[\" || txt[txt.length\
    \ - 1] == \"]\" || txt[txt.length - 1] == \"{\" || txt[txt.length - 1] == \"}\"\
    \ || txt[txt.length - 1] == \"|\" || txt[txt.length - 1] == \":\" || txt[txt.length\
    \ - 1] == \";\" || txt[txt.length - 1] == \"<\" || txt[txt.length - 1] == \">\"\
    \ || txt[txt.length - 1] == \"=\" || txt[txt.length - 1] == \"'\" || txt[txt.length\
    \ - 1] == \"\\\"\" || txt[txt.length - 1] == \"~\" || txt[txt.length - 1] == \"\
    `\" || txt[txt.length - 1] == \"-\" || txt[txt.length - 1] == \"_\" || txt[txt.length\
    \ - 1] == \"/\" || txt[txt.length - 1] == \"\\\\\" || txt[txt.length - 1] == \"\
    $\" || txt[txt.length - 1] == \"%\" || txt[txt.length"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
