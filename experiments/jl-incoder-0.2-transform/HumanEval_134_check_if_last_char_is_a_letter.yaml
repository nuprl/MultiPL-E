name: HumanEval_134_check_if_last_char_is_a_letter
language: jl
prompt: "\"\"\"\n    Create a function that returns True if the last character\n \
  \   of a given string is an alphabetical character and is not\n    a part of a word,\
  \ and False otherwise.\n    Note: \"word\" is a group of characters separated by\
  \ space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
  )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
  \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
  \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
  \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
  \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"\
  Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
  \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple\
  \ pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
completions: ["    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \"\\n\"\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ txt = txt.strip()\n    \n    if txt == \"\"\n        return false\n    \n  \
    \  txt = txt.split(\" \")\n    \n    txt = txt.last()\n    \n    if txt == \"\"\
    \n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt", " \
    \   txt = txt.trim()\n    if txt.length == 0\n        false\n    else\n      \
    \  txt.last() in string.ascii_letters\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n      \
    \  if txt[txt.length - 1] == ' ' \n            false\n        else\n         \
    \   if txt[txt.length - 1].isalpha()\n                false\n            else\n\
    \                true\n        end\n    end\nend\n</code>\n<|/ a |>\n<| c |>\n\
    This doesn't work if the last character is a space or punctuation mark. For example,\
    \ `check_if_last_char_is_a_letter(\"apple pi e \")` returns `true` instead of\
    \ `false`.\n<|/ c |>\n<| c |>\nI added a version that checks for punctuation marks\
    \ as well.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    txt = txt.strip()\n    if\
    \ txt.size == 0\n        false\n    else\n        txt.last() in string.ascii_letters\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length-1] == ' ' || txt[txt.length-1]\
    \ == '.' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    if txt.size == 0\n        return false\n  \
    \  \n    txt = txt.split(\" \")\n    \n    last = txt[txt.size-1]\n    \n    if\
    \ last.size == 0\n        return false\n    \n    last = last.last\n    \n   \
    \ if last == \" \"\n        return false\n    \n    if last.chars.last == \" \"\
    \n        return false\n    \n    if last.chars.last == \" \"\n        return\
    \ false\n    \n    if last.chars.last == \" \"\n        return false\n    \n \
    \   if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.chars.last\
    \ == \" \"\n        return false\n    \n    if last.chars.last == \" \"\n    \
    \    return false\n    \n    if last.chars.last == \" \"\n        return false\n\
    \    \n    if last.chars.last == \" \"\n        return false\n    \n    if last.",
  "    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \"\
    \ \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\v\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\f\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\e\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\\"\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"%\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"&\" \n        false\n    elseif txt[txt.length-1] == \"'\" \n        false\n\
    \    elseif txt[txt.length-1] == \"(\" \n        false\n    elseif txt[txt.length-1]\
    \ == \")\" \n        false\n    elseif txt[txt.length-1] == \",\" \n        false\n\
    \    elseif txt[txt.length-1] == \".\" \n        false\n    elseif txt[txt.length-1]\
    \ == \":\" \n        false\n    elseif txt[txt.length-1] == \";\" \n        false\n\
    \    elseif txt[txt.length-1] == \"<\" \n        false\n    elseif txt[txt.length-1]\
    \ == \">\" \n        false\n    elseif txt[txt.length-1] == \"?\" \n        false\n\
    \    elseif txt[txt.length-1] == \"/\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"[\" \n        false\n    elseif txt[txt.length-1] == \"]\" \n        false\n\
    \    elseif txt[txt.length-1] == \"{\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"}\" \n        false\n    elseif txt[txt.length-1] == \"|\" \n        false\n\
    \    elseif txt[txt.length-1] == \"~\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"`\" \n        false\n    elseif txt[txt.length-1] == \"-\" \n        false\n\
    \    elseif txt[txt.length-1] == \"_\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"=\" \n        false\n    elseif txt[txt.length-1] == \"+\" \n        false\n\
    \    elseif txt[txt.length-1] == \"*\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"?\" \n        ", "    \n    if txt.length == 0\n        return false\n\
    \    \n    if txt.head == txt.last\n        return true\n    \n    if txt.head\
    \ == \" \"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last.isalpha()\n        return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1].isalpha()\
    \ \n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.trim()\n", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    else\n        if txt[txt.length-1] == \" \" \n            false\n       \
    \ else\n            if txt[txt.length-1].isalpha() \n                false\n \
    \           else\n                true\n        end\n    end\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=0 |>\n<code>", "    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length - 1] == \" \" || txt[txt.length\
    \ - 1] == \"\\n\" || txt[txt.length - 1] == \"\\t\" || txt[txt.length - 1] ==\
    \ \"\\r\" || txt[txt.length - 1] == \"\\f\" || txt[txt.length - 1] == \"\\v\"\
    \ || txt[txt.length - 1] == \"\\e\" || txt[txt.length - 1] == \"\\U\" || txt[txt.length\
    \ - 1] == \"\\N\" || txt[txt.length - 1] == \"\\L\" || txt[txt.length - 1] ==\
    \ \"\\p\" || txt[txt.length - 1] == \"\\P\" || txt[txt.length - 1] == \"\\a\"\
    \ || txt[txt.length - 1] == \"\\A\" || txt[txt.length - 1] == \"\\e\" || txt[txt.length\
    \ - 1] == \"\\E\" || txt[txt.length - 1] == \"\\U\" || txt[txt.length - 1] ==\
    \ \"\\N\" || txt[txt.length - 1] == \"\\L\" || txt[txt.length - 1] == \"\\p\"\
    \ || txt[txt.length - 1] == \"\\P\" || txt[txt.length - 1] == \"\\a\" || txt[txt.length\
    \ - 1] == \"\\A\" || txt[txt.length - 1] == \"\\e\" || txt[txt.length - 1] ==\
    \ \"\\E\" || txt[txt.length - 1] == \"\\U\" || txt[txt.length - 1] == \"\\N\"\
    \ || txt[txt.length - 1] == \"\\L\" || txt[txt.length - 1] == \"\\p\" || txt[txt.length\
    \ - 1] == \"\\P\" || txt[txt.length - 1] == \"\\a\" || txt[txt.length - 1] ==\
    \ \"\\A\" || txt[txt.length - 1] == \"\\e\" || txt[txt.length - 1] == \"\\E\"\
    \ || txt[txt.length - 1] == \"\\U\" || txt[txt.length - 1] == \"\\N\" || txt[txt.length\
    \ - 1] == \"\\L\" || txt[txt.length - 1] == \"\\p\" || txt[txt.length - 1] ==\
    \ \"\\P\" || txt[txt.length - 1] == \"\\a\" || txt[txt.length - 1] == \"\\A\"\
    \ || txt[txt.length - 1] == \"\\e\" || txt[txt.length - 1] == \"\\E\" || txt[txt.length\
    \ - 1] == \"\\U\" || txt[txt.length - 1] == \"\\N\" || txt[txt.length - 1] ==\
    \ \"\\L\" || txt[txt.length - 1] == \"\\p\" || txt[txt.length - 1] == \"\\P\"\
    \ || txt[txt.length - 1] == \"\\a\" || txt[txt.length - 1] == \"\\A\" || txt[txt.length\
    \ - 1] == \"\\e\" || txt[txt.length - 1] == \"\\E\" || txt[txt.length - 1] ==\
    \ \"\\U\" || txt[txt.length - 1] == \"\\N\" || txt[txt.length - 1] == \"\\L\"\
    \ || txt[", "    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == ',' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '!' || txt[txt.length-1] == ';' || txt[txt.length-1]\
    \ == ':' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_' || txt[txt.length-1]\
    \ == '/' || txt[txt.length-1] == '\\\\' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '[' || txt[txt.length-1] == ']' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '+' || txt[txt.length-1] == '-' || txt[txt.length-1] == '=' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '~' || txt[txt.length-1] == '!' || txt[txt.length-1]\
    \ == '@' || txt[txt.length-1] == '#' || txt[txt.length-1] == '$' || txt[txt.length-1]\
    \ == '%' || txt[txt.length-1] == '^' || txt[txt.length-1] == '&' || txt[txt.length-1]\
    \ == '*' || txt[txt.length-1] == '(' || txt[txt.length-1] == ')' || txt[txt.length-1]\
    \ == '[' || txt[txt.length-1] == ']' || txt[txt.length-1] == '{' || txt[txt.length-1]\
    \ == '}' || txt[txt.length-1] == '+' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '=' || txt[txt.length-1] == '^' || txt[txt.length-1] == '~' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '@' || txt[txt.length-1] == '#' || txt[txt.length-1]\
    \ == '$' || txt[txt.length-1] == '%' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '&' || txt[txt.length-1] == '*' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '[' || txt[txt.length-1] == ']' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '+' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '=' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '~' || txt[txt.length-1] == '!' || txt[txt.length", "    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n\
    \    ", "    txt = txt.strip()\n    if txt.length == 0 \n        false\n    elseif\
    \ txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1] !=\
    \ \" \" \n        true\n    elseif txt[txt.length-1] == \" \" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\n\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\t\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\v\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\f\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\e\" \n        false\n    elseif txt[txt.length-1] == \"\\\"\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\\\\" \n        false\n    elseif txt[txt.length-1] == \"\\?\" \n    \
    \    false\n    elseif txt[txt.length-1] == \"\\*\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\<\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\>\" \n        false\n    elseif txt[txt.length-1] == \"\\|\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\~\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\^\" \n        false\n    elseif txt[txt.length-1] == \"\\&\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\*\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\|\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\~\" \n        false\n    elseif txt[txt.length-1] == \"\\^\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\&\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\*\" \n        false\n    elseif txt[txt.length-1] == \"\\|\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\~\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\^\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\&\" \n        false\n    elseif txt[txt.length-1] == \"\\*\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\|\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\~\" \n        false\n    elseif txt[txt.length-1] == \"\\^\" ", "   \
    \ txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n   \
    \ txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n\
    \        txt[txt.length - 1] == \" \" || txt[txt.length - 1] == \".\" || txt[txt.length\
    \ - 1] == \",\" || txt[txt.length - 1] == \"?\" || txt[txt.length - 1] == \"!\"\
    \ || txt[txt.length - 1] == \"-\" || txt[txt.length - 1] == \"_\" || txt[txt.length\
    \ - 1] == \"/\" || txt[txt.length - 1] == \"\\\\\" || txt[txt.length - 1] == \"\
    $\" || txt[txt.length - 1] == \"%\" || txt[txt.length - 1] == \"^\" || txt[txt.length\
    \ - 1] == \"&\" || txt[txt.length - 1] == \"*\" || txt[txt.length - 1] == \"(\"\
    \ || txt[txt.length - 1] == \")\" || txt[txt.length - 1] == \"[\" || txt[txt.length\
    \ - 1] == \"]\" || txt[txt.length - 1] == \"{\" || txt[txt.length - 1] == \"}\"\
    \ || txt[txt.length - 1] == \"|\" || txt[txt.length - 1] == \":\" || txt[txt.length\
    \ - 1] == \";\" || txt[txt.length - 1] == \"<\" || txt[txt.length - 1] == \">\"\
    \ || txt[txt.length - 1] == \"=\" || txt[txt.length - 1] == \"'\" || txt[txt.length\
    \ - 1] == \"\\\"\" || txt[txt.length - 1] == \"~\" || txt[txt.length - 1] == \"\
    `\" || txt[txt.length - 1] == \"-\" || txt[txt.length - 1] == \"_\" || txt[txt.length\
    \ - 1] == \"/\" || txt[txt.length - 1] == \"\\\\\" || txt[txt.length - 1] == \"\
    $\" || txt[txt.length - 1] == \"%\" || txt[txt.length - 1] == \"^\" || txt[txt.length\
    \ - 1] == \"&\" || txt[txt.length - 1] == \"*\" || txt[txt.length - 1] == \"(\"\
    \ || txt[txt.length - 1] == \")\" || txt[txt.length - 1] == \"[\" || txt[txt.length\
    \ - 1] == \"]\" || txt[txt.length - 1] == \"{\" || txt[txt.length - 1] == \"}\"\
    \ || txt[txt.length - 1] == \"|\" || txt[txt.length - 1] == \":\" || txt[txt.length\
    \ - 1] == \";\" || txt[txt.length - 1] == \"<\" || txt[txt.length - 1] == \">\"\
    \ || txt[txt.length - 1] == \"=\" || txt[txt.length - 1] == \"'\" || txt[txt.length\
    \ - 1] == \"\\\"\" || txt[txt.length - 1] == \"~\" || txt[txt.length - 1] == \"\
    `\" || txt[txt.length - 1] == \"-\" || txt[txt.length - 1] == \"_\" || txt[txt.length\
    \ - 1] == \"/\" || txt[txt.length - 1] == \"\\\\\" || txt[txt.length - 1] == \"\
    $\" || txt[txt.length - 1] == \"%\" || txt[txt.length", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1] ==\
    \ ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_' || txt[txt.length-1]\
    \ == '/' || txt[txt.length-1] == '\\\\' || txt[txt.length-1] == '*'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    if txt == \"\"\n        false\n    else\n \
    \       txt[length(txt)-1] == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == '!' || txt[length(txt)-1] == '-' || txt[length(txt)-1]\
    \ == '_'\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.strip()\n    if txt.empty?\n        false\n    else\n\
    \        txt[txt.length-1] == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1]\
    \ == \",\" || txt[txt.length-1] == \" \"\n    end\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis doesn't work if the last character is a digit, since `isalpha`\
    \ returns true for digits. I suggest using `txt[end-1] in \" .,\" .` instead.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I updated my answer accordingly.\n\
    <|/ c |>\n<| a dscore=2 |>\nI wrote a package called StringUtils which is designed\
    \ to solve this problem:\n<code>\nusing StringUtils", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1].isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt == \"\"\n        false\n    else\n        txt[length(txt)-1] \u2209 \"\
    \ \" \u2227 txt[length(txt)-1] \u2209 \"\\n\" \u2227 txt[length(txt)-1] \u2209\
    \ \"\\t\" \u2227 txt[length(txt)-1] \u2209 \"\\r\" \u2227 txt[length(txt)-1] \u2209\
    \ \"\\v\" \u2227 txt[length(txt)-1] \u2209 \"\\f\" \u2227 txt[length(txt)-1] \u2209\
    \ \"\\e\"\n    end\nend\n</cell>\n<text>\nExercise 9\nWrite a function that returns\
    \ True if the last character of a given string is a digit and is not\na part of\
    \ a word, and False otherwise.\nNote: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n\
    \    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1] ==\
    \ \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1]\
    \ == \"\\r\" || txt[txt.length-1] == \"\\v\" || txt[txt.length-1] == \"\\f\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\i\" || txt[txt.length-1] == \"\\o\" || txt[txt.length-1] == \"\\U\" ||\
    \ txt[txt.length-1] == \"\\N\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\q\" || txt[txt.length-1] == \"\\Q\" ||\
    \ txt[txt.length-1] == \"\\v\" || txt[txt.length-1] == \"\\V\" || txt[txt.length-1]\
    \ == \"\\W\" || txt[txt.length-1] == \"\\Z\" || txt[txt.length-1] == \"\\z\"\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    txt\
    \ = txt.strip()\n    if txt == \"\"\n        false\n    else\n        txt[length(txt)-1]\
    \ == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1] == '?' || txt[length(txt)-1]\
    \ == '!' || txt[length(txt)-1] == '-' || txt[length(txt)-1] == '_'\n    end\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.lower()\n    txt = txt.strip()\n\
    \    ", "    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1]\
    \ == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1] == \"-\" || txt[txt.length-1]\
    \ == \":\" || txt[txt.length-1] == \"\\\"\" || txt[txt.length-1] == \"'\" || txt[txt.length-1]\
    \ == \"#\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1]\
    \ == \"&\" || txt[txt.length-1] == \"'\" || txt[txt.length-1] == \"(\" || txt[txt.length-1]\
    \ == \")\" || txt[txt.length-1] == \"*\" || txt[txt.length-1] == \"+\" || txt[txt.length-1]\
    \ == \"-\" || txt[txt.length-1] == \"/\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1]\
    \ == \"|\" || txt[txt.length-1] == \"^\" || txt[txt.length-1] == \"~\" || txt[txt.length-1]\
    \ == \"`\" || txt[txt.length-1] == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1]\
    \ == \"~\" || txt[txt.length-1] == \"|\" || txt[txt.length-1] == \"~\" || txt[txt.length-1]\
    \ == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1] == \"=\" || txt[txt.length-1]\
    \ == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1] == \"{\" || txt[txt.length-1]\
    \ == \"}\" || txt[txt.length-1] == \"|\" || txt[txt.length-1] == \"~\" || txt[txt.length-1]\
    \ == \"|\" || txt[txt.length-1] == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1]\
    \ == \"=\" || txt[txt.length-1] == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1]\
    \ == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1] == \"|\" || txt[txt.length-1]\
    \ == \"~\" || txt[txt.length-1] == \"|\" || txt[txt.length-1] == \"<\" || txt[txt.length-1]\
    \ == \">\" || txt[txt.length-1] == \"=\" || txt[txt.length-1] == \"[\" || txt[txt.length-1]\
    \ == \"]\" || txt[txt.length-1] == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1]\
    \ == \"|\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"|\" || txt[txt.length-1]\
    \ == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length", "    txt = txt.strip()\n\
    \    if txt.ends_with?(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\"\
    \ \")\n        txt = txt.strip(\" \")\n        txt = txt.strip(\" \")\n      \
    \  txt = txt.strip(\" \")\n", "    txt = txt.strip()\n    if txt.size == 0\n \
    \       false\n    else\n        txt.last() in string.ascii_letters\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    txt = txt.split(\" \")\n \
    \   txt = txt[txt.size - 1]\n    return txt.isalpha()\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    else\n        if txt[txt.length-1] ==\
    \ \" \" \n            false\n        else\n            if txt[txt.length-1].isalpha()\
    \ \n                false\n            else\n                true\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is an alphabetical\
    \ character and is not\n    a part of a word, and False otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    \n    if txt.length\
    \ == 0 \n        false\n    elseif txt[txt.length - 1] == ' ' \n        false\n\
    \    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '_' \n        false\n    elseif txt[txt.length - 1] == '*' \n      \
    \  false\n    elseif txt[txt.length - 1] == '+' \n        false\n    elseif txt[txt.length\
    \ - 1] == '%' \n        false\n    elseif txt[txt.length - 1] == '/' \n      \
    \  false\n    elseif txt[txt.length - 1] == '^' \n        false\n    elseif txt[txt.length\
    \ - 1] == '&' \n        false\n    elseif txt[txt.length - 1] == '|' \n      \
    \  false\n    elseif txt[txt.length - 1] == '~' \n        false\n    elseif txt[txt.length\
    \ - 1] == '<' \n        false\n    elseif txt[txt.length - 1] == '>' \n      \
    \  false\n    elseif txt[txt.length - 1] == '=' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '_' \n      \
    \  false\n    elseif txt[txt.length - 1] == '*' \n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == '%' \n      \
    \  false\n    elseif txt[txt.length - 1] == '/' \n        false\n    elseif txt[txt.length\
    \ - 1] == '^' \n        false\n    elseif txt[txt.length - 1] == '&' \n      \
    \  false\n    elseif txt[txt.length - 1] == '|' \n        false\n    elseif txt[txt.length\
    \ - 1] == '~' \n        false\n    elseif txt[txt.length - 1] == '<' \n      \
    \  false\n    elseif txt[txt.length - 1] == '>' \n        false\n    elseif txt[txt.length\
    \ - 1] == '=' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false", "    \n    if txt.length == 0 \n        false\n\
    \    elseif txt[txt.length - 1] == \" \" \n        false\n    else\n        true\n\
    \    end\nend\n</cell>\n<text>\nExercise 2.7\nWrite a function that takes a string\
    \ and returns the number of words in the string.", "    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    if txt.length\
    \ == 0 \n        false\n    else\n        txt[txt.length - 1] == \" \" || txt[txt.length\
    \ - 1] == \".\" || txt[txt.length - 1] == \",\"\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns True if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    if txt.length == 0 \n        false\n    else\n      \
    \  txt[txt.length-1] == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] ==\
    \ '?' || txt[txt.length-1] == '!' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '_'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    \n    if txt.length\
    \ == 0 \n        false\n    elseif txt[txt.length - 1] == ' ' \n        false\n\
    \    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '_' \n        false\n    elseif txt[txt.length - 1] == '/' \n      \
    \  false\n    elseif txt[txt.length - 1] == '\\\\' \n        false\n    elseif\
    \ txt[txt.length - 1] == '&' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '%' \n        false\n    elseif txt[txt.length - 1] == '$' \n        false\n\
    \    elseif txt[txt.length - 1] == '@' \n        false\n    elseif txt[txt.length\
    \ - 1] == '*' \n        false\n    elseif txt[txt.length - 1] == '+' \n      \
    \  false\n    elseif txt[txt.length - 1] == '^' \n        false\n    elseif txt[txt.length\
    \ - 1] == '|' \n        false\n    elseif txt[txt.length - 1] == '~' \n      \
    \  false\n    elseif txt[txt.length - 1] == '<' \n        false\n    elseif txt[txt.length\
    \ - 1] == '>' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '_' \n        false\n    elseif txt[txt.length\
    \ - 1] == '/' \n        false\n    elseif txt[txt.length - 1] == '\\\\' \n   \
    \     false\n    elseif txt[txt.length - 1] == '&' \n        false\n    elseif\
    \ txt[txt.length - 1] == '%' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '$' \n        false\n    elseif txt[txt.length - 1] == '@' \n        false\n\
    \    elseif txt[txt.length - 1] == '*' \n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == '^' \n      \
    \  false\n    elseif txt[txt.length - 1] == '|' \n        false\n    elseif txt[txt.length\
    \ - 1] == '~' \n        false\n    elseif txt[txt.length - 1] == '<' \n      \
    \  false", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n   \
    \ else\n        if txt[txt.length - 1] == \" \" \n            false\n        else\n\
    \            if txt[txt.length - 1].isalpha() \n                false\n      \
    \      else\n                true\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0\n        false\n    else\n        if txt[txt.length - 1]\
    \ == \" \"\n            false\n        else\n            if txt[txt.length - 1]\
    \ == \" \"\n                false\n            else\n                if txt[txt.length\
    \ - 1] == \" \"\n                    false\n                else\n           \
    \         if txt[txt.length - 1] == \" \"\n                        false\n   \
    \                 else\n                        if txt[txt.length - 1] == \" \"\
    \n                            false\n                        else\n          \
    \                  if txt[txt.length - 1] == \" \"\n                         \
    \       false\n                            else\n                            \
    \    if txt[txt.length - 1] == \" \"\n                                    false\n\
    \                                else\n                                    if\
    \ txt[txt.length - 1] == \" \"\n                                        false\n\
    \                                    else\n                                  \
    \      if txt[txt.length - 1] == \" \"\n                                     \
    \       false\n                                        else\n                \
    \                            if txt[txt.length - 1] == \" \"\n               \
    \                                 false\n                                    \
    \        else\n                                                if txt[txt.length\
    \ - 1] == \" \"\n                                                    false\n \
    \                                               else\n                       \
    \                             if txt[txt.length - 1] == \" \"\n              \
    \                                          false\n                           \
    \                         else\n                                             \
    \           if txt[txt.length - 1] == \" \"\n                                \
    \                            false\n                                         \
    \               else\n                                                       \
    \     if txt[txt.length - 1] == \" \"\n                                      \
    \                          false\n                                           \
    \                 else\n                                                     \
    \           if txt[txt.length - 1] == \" \"\n                                \
    \                                    false\n                                 \
    \                               else\n                                       \
    \                             if txt[txt.length - 1] == \" \"\n              \
    \                                                          false\n           \
    \                                                         else\n             \
    \                                                           if txt[txt.length\
    \ - 1] == \" \"\n                                                            \
    \                false\n                                                     \
    \                   else\n                                                   \
    \                         if txt[txt.length - 1] == \" \"\n                  \
    \                                                              false\n       \
    \                                                                     else\n \
    \                                                                            \
    \   if txt[txt.length - 1] == \" \"\n                                        \
    \                                            false\n                         \
    \                                                       else\n               \
    \                                                                     if txt[txt.length\
    \ - 1] == \" \"\n                                                            \
    \                            false\n                                         \
    \                                           else\n                           \
    \                                                             if txt[txt.length\
    \ - 1] == \" \"\n                                                            \
    \                                false\n                                     \
    \                                                   else\n                   \
    \                                                                         if txt[txt.length\
    \ - 1] == \" \"\n                                                            \
    \                                    false\n                                 \
    \                                                           else\n           \
    \                                                                            \
    \         if txt[txt.length - 1] == \" \"\n                                  \
    \                                                                  false\n   \
    \                                                                            \
    \                 else\n                                                     \
    \                                               if txt[txt.length - 1] == \" \"\
    \n                                                                           \
    \                             false\n                                        \
    \                                                            else\n          \
    \                                                                            \
    \                  if txt[txt.length - 1] == \" \"\n                         \
    \                                                                            \
    \       false\n                                                              \
    \                                          else\n                            \
    \                                                                            \
    \    if txt[txt.length - 1] == \" \"\n                                       \
    \                                                                         false\n\
    \                                                                            \
    \                                else\n                                      \
    \                                                                          if\
    \ txt[txt.length - 1] == \" \"\n                                             \
    \                                                                       false\n\
    \                                                                            \
    \                                    else\n                                  \
    \                                                                            \
    \      if txt[txt.length - 1] == \" \"\n                                     \
    \                                                                            \
    \       false\n                                                              \
    \                                                      else\n                \
    \                                                                            \
    \                            if txt[txt.length - 1] == \" \"\n               \
    \                                                                            \
    \                                 false\n                                    \
    \                                                                            \
    \        else\n                                                              \
    \                                                              if txt[txt.length",
  "    txt = txt.strip()\n    if txt.size == 0\n        false\n    elseif txt.size\
    \ == 1\n        txt.head == txt.last\n    else\n        txt.head == txt.last.head\
    \ && check_if_last_char_is_a_letter(txt.last.tail)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns True if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    else\n        if txt[txt.length - 1] == \" \" \n            false\n     \
    \   else\n            if txt[txt.length - 1].isalpha()\n                true\n\
    \            else\n                false\n        end\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0\n        return false\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.trim()\n    if txt.length == 0\n   \
    \     return false\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    if txt.length == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    if\
    \ txt.length == 0\n        return false\n    txt = txt.split(\" \")\n    txt =\
    \ txt[txt.length-1]\n    txt = txt.trim()\n    if txt.length == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    if txt.length == 0\n        return false\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.trim()\n    if txt.length == 0\n   \
    \     return false\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    if txt.length == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    if\
    \ txt.length == 0\n        return false\n    txt = txt.split(\" \")\n    txt =\
    \ txt[txt.length-1]\n    txt = txt.trim()\n    if txt.length == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    if txt.length == 0\n        return false\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.trim()\n    if txt.length == 0\n   \
    \     return false\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    if txt.length == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    if\
    \ txt.length == 0\n        return false\n    txt = txt.split(\" \")\n    txt =\
    \ txt[txt.length-1]\n    txt = txt.trim()\n    if txt.length == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    if txt.length == 0\n        return false\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n", "    txt = txt.strip()\n    if txt == \"\"\n  \
    \      false\n    else\n        txt.ends_with?(\" \")\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    txt = txt.strip()\n    if txt.empty?\n\
    \        false\n    else\n        txt.last.match(\"[a-zA-Z]\")\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    if txt.length == 0 \n        false\n    else\n  \
    \      txt[txt.length - 1] == ' ' || txt[txt.length - 1] == '.' || txt[txt.length\
    \ - 1] == ',' || txt[txt.length - 1] == '?' || txt[txt.length - 1] == '!' || txt[txt.length\
    \ - 1] == '-' || txt[txt.length - 1] == '_'\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    else\n        if txt[txt.length - 1]\
    \ == \" \" \n            false\n        else\n            if txt[txt.length -\
    \ 1].isalpha()\n                true\n            else\n                false\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length-1].isalpha()\
    \ \n        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    else\n        txt[txt.length-1] == \"\
    \ \" || txt[txt.length-1] == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1]\
    \ == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1] == \"-\" || txt[txt.length-1]\
    \ == \":\" || txt[txt.length-1] == \"\\\"\" || txt[txt.length-1] == \"'\" || txt[txt.length-1]\
    \ == \"#\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1]\
    \ == \"&\" || txt[txt.length-1] == \"'\" || txt[txt.length-1] == \"(\" || txt[txt.length-1]\
    \ == \")\" || txt[txt.length-1] == \"*\" || txt[txt.length-1] == \"+\" || txt[txt.length-1]\
    \ == \"-\" || txt[txt.length-1] == \"/\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1]\
    \ == \"^\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1]\
    \ == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1] == \"[\" || txt[txt.length-1]\
    \ == \"]\" || txt[txt.length-1] == \"|\" || txt[txt.length-1] == \"~\" || txt[txt.length-1]\
    \ == \"`\" || txt[txt.length-1] == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1]\
    \ == \"=\" || txt[txt.length-1] == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1]\
    \ == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1] == \"|\" || txt[txt.length-1]\
    \ == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1] == \"<\" || txt[txt.length-1]\
    \ == \">\" || txt[txt.length-1] == \"=\" || txt[txt.length-1] == \"{\" || txt[txt.length-1]\
    \ == \"}\" || txt[txt.length-1] == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1]\
    \ == \"|\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1]\
    \ == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1] == \"=\" || txt[txt.length-1]\
    \ == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1] == \"[\" || txt[txt.length-1]\
    \ == \"]\" || txt[txt.length-1] == \"|\" || txt[txt.length-1] == \"~\" || txt[txt.length-1]\
    \ == \"`\" || txt[txt.length-1] == \"<\" || txt[", "    \n    if txt.length ==\
    \ 0 \n        false\n    else\n        if txt[txt.length-1] == \" \" \n      \
    \      false\n        else\n            if txt[txt.length-1].isalpha()\n     \
    \           true\n            else\n                false\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    ", "    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    ", "    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    if txt.length == 0 \n        false\n    else\n        if txt[txt.length-1]\
    \ == ' ' \n            false\n        else\n            if txt[txt.length-1] in\
    \ ['a'..'z']\n                true\n            else\n                false\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    \n    txt = txt.split(\"\
    \ \")\n    \n    for i in txt:\n        if i[-1].isalpha():\n            return\
    \ False\n    return True\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef last_char_is_a_letter(txt):\n\
    \    txt = txt.split(\" \")\n    for i in txt:\n        if i[-1].isalpha():\n\
    \            return False\n    return True\n</code>\n<|/ a dscore=0 tags=python,string,python-3.x\
    \ |>\n<| a dscore=0 |>\n<code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\"\
    \ \")\n    for i in txt:\n        if i[-1].isalpha():\n            return False\n\
    \    return True\n</code>\n<|/ a tags=python,string,python-3.x |>\n<| a tags=python,string,python-3.x\
    \ |>\n<code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n  \
    \  for i in txt:\n        if i[-1].isalpha():\n            return False\n    return\
    \ True\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as an\
    \ answer, but also provide an explanation of what your code does and how it solves\
    \ the problem of the question. Answers with an explanation are usually more helpful\
    \ and of better quality, and are more likely to attract upvotes.\n<|/ c |>\n<|\
    \ a dscore=0 |>\n<code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\"\
    \ \")\n    for i in txt:\n        if i[-1].isalpha():\n            return False\n\
    \    return True\n</code>\n<|/ a tags=python,string,python-3.x |>\n<| c |>\nPlease\
    \ don't post only code as an answer, but also provide an explanation of what your\
    \ code does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| a tags=python,string,python-3.x |>\n<code>\ndef last_char_is_a_letter(txt):\n\
    \    txt = txt.split(\" \")\n    for i in txt:\n        if i[-1].isalpha():\n\
    \            return False\n    return True\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n  \
    \  for i in txt:\n        if i[-1].isalpha():\n            return False\n    return\
    \ True\n</code>\n<|/ a tags=python,string,python-3.x |>\n<| a tags=python,string,python-3.x\
    \ |>\n<code>\ndef last_char_is_", "    txt = txt.trim()\n    if txt.length ==\
    \ 0 \n        false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1]\
    \ == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1] == \" \"\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    txt = txt.strip(\" \")\n  \
    \  txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\\r\")\n    txt = txt.strip(\"\
    \\t\")\n    txt = txt.strip(\"\\v\")\n    txt = txt.strip(\"\\f\")\n    txt =\
    \ txt.strip(\"\\a\")\n    txt = txt.strip(\"\\b\")\n    txt = txt.strip(\"\\e\"\
    )\n    txt = txt.strip(\"\\~\")\n    txt = txt.strip(\"\\^\")\n    txt = txt.strip(\"\
    \\_\")\n    txt = txt.strip(\"\\%\")\n    txt = txt.strip(\"\\&\")\n    txt =\
    \ txt.strip(\"\\*\")\n    txt = txt.strip(\"\\(\")\n    txt = txt.strip(\"\\)\"\
    )\n    txt = txt.strip(\"\\+\")\n    txt = txt.strip(\"\\|\")\n    txt = txt.strip(\"\
    \\;\")\n    txt = txt.strip(\"\\:\")\n    txt = txt.strip(\"\\<\")\n    txt =\
    \ txt.strip(\"\\>\")\n    txt = txt.strip(\"\\?\")\n    txt = txt.strip(\"\\~\"\
    )\n    txt = txt.strip(\"\\^\")\n    txt = txt.strip(\"\\_\")\n    txt = txt.strip(\"\
    \\%\")\n    txt = txt.strip(\"\\&\")\n    txt = txt.strip(\"\\*\")\n    txt =\
    \ txt.strip(\"\\(\")\n    txt = txt.strip(\"\\)\")\n    txt = txt.strip(\"\\+\"\
    )\n    txt = txt.strip(\"\\|\")\n    txt = txt.strip(\"\\;\")\n    txt = txt.strip(\"\
    \\:\")\n    txt = txt.strip(\"\\<\")\n    txt = txt.strip(\"\\>\")\n    txt =\
    \ txt.strip(\"\\?\")\n    txt = txt.strip(\"\\~\")\n    txt = txt.strip(\"\\^\"\
    )\n    txt = txt.strip(\"\\_\")\n    txt = txt.strip(\"\\%\")\n    txt = txt.strip(\"\
    \\&\")\n    txt = txt.strip(\"\\*\")\n    txt = txt.strip(\"\\(\")\n    txt =\
    \ txt.strip(\"\\)\")\n    txt = txt.strip(\"\\+\")\n    txt = ", "    \n    if\
    \ txt.length == 0 \n        false\n    else\n        txt[txt.length-1] == \" \"\
    \ || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1]\
    \ == \"\\r\" || txt[txt.length-1] == \"\\f\" || txt[txt.length-1] == \"\\v\" ||\
    \ txt[txt.length-1] == \"\\u00A0\" || txt[txt.length-1] == \"\\u00AD\" || txt[txt.length-1]\
    \ == \"\\u2028\" || txt[txt.length-1] == \"\\u2029\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    if txt.length\
    \ == 0 \n        false\n    else\n        if txt[txt.length-1] == \" \" \n   \
    \         false\n        else\n            if txt[txt.length-1].isalpha() \n \
    \               false\n            else\n                true\n        end\n \
    \   end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "   \
    \ if txt.length == 0 \n        false\n    else\n        txt[txt.length-1] == '\
    \ ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"!\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"#\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"$\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"%\" \n        false\n    elseif txt[txt.length - 1] == \"&\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"'\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"(\"\n        false\n    elseif txt[txt.length - 1] == \")\" \n   \
    \     false\n    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"+\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"0\" \n        false\n    elseif txt[txt.length - 1] == \"1\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"2\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"3\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"4\" \n        false\n    elseif txt[txt.length - 1] == \"5\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"6\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"7\" \n        false\n    elseif txt[txt.length - 1] == \"8\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"9\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \":\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \";\" \n        false\n    elseif txt[txt.length - 1] == \"<\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"=\"\n        false\n    elseif txt[txt.length\
    \ - 1] == \">\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"@\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"[\" \n        false\n    elseif ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt.length == 1\n        true\n\
    \    elseif txt.last.isalpha()\n        false\n    else\n        true\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    if txt.length == 0 \n        false\n    else\n\
    \        txt[txt.length - 1] == ' ' || txt[txt.length - 1] == '\\n' || txt[txt.length\
    \ - 1] == '\\t' || txt[txt.length - 1] == '\\r' || txt[txt.length - 1] == '\\\
    v' || txt[txt.length - 1] == '\\f'\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    else\n        txt[txt.length-1] == '\
    \ ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    if txt.size == 0\n        return false\n  \
    \  \n    txt = txt.trim()\n    \n    if txt.size == 1\n        return true\n \
    \   \n    if txt.size == 2\n        return txt[1] == 'a'\n    \n    if txt.size\
    \ == 3\n        return txt[2] == 'a'\n    \n    if txt.size == 4\n        return\
    \ txt[3] == 'a'\n    \n    if txt.size == 5\n        return txt[4] == 'a'\n  \
    \  \n    if txt.size == 6\n        return txt[5] == 'a'\n    \n    if txt.size\
    \ == 7\n        return txt[6] == 'a'\n    \n    if txt.size == 8\n        return\
    \ txt[7] == 'a'\n    \n    if txt.size == 9\n        return txt[8] == 'a'\n  \
    \  \n    if txt.size == 10\n        return txt[9] == 'a'\n    \n    if txt.size\
    \ == 11\n        return txt[10] == 'a'\n    \n    if txt.size == 12\n        return\
    \ txt[11] == 'a'\n    \n    if txt.size == 13\n        return txt[12] == 'a'\n\
    \    \n    if txt.size == 14\n        return txt[13] == 'a'\n    \n    if txt.size\
    \ == 15\n        return txt[14] == 'a'\n    \n    if txt.size == 16\n        return\
    \ txt[15] == 'a'\n    \n    if txt.size == 17\n        return txt[16] == 'a'\n\
    \    \n    if txt.size == 18\n        return txt[17] == 'a'\n    \n    if txt.size\
    \ == 19\n        return txt[18] == 'a'\n    \n    if txt.size == 20\n        return\
    \ txt[19] == 'a'\n    \n    if txt.size == 21\n        return txt[20] == 'a'\n\
    \    \n    if txt.size == 22\n        return txt[21] == 'a'\n    \n    if txt.size\
    \ == 23\n        return txt[22] == 'a'\n    \n    if txt.size == 24\n        return\
    \ txt[23] == 'a'\n    \n    if txt.size == 25\n        return txt[24] == 'a'\n\
    \    \n    if txt.size == 26\n        return txt[25] == 'a'\n    \n    if txt.size\
    \ == 27\n        return txt[26] == 'a'\n    \n    if txt.size == 28\n        return\
    \ txt[27] == 'a'\n    \n    if txt.size == 29\n        return txt[28] == 'a'\n\
    \    \n    if txt.size == 30\n        return txt[29] == 'a'\n    \n    if txt.size\
    \ == 31\n        return txt[30] == 'a'\n    \n    if txt.size == 32\n        return\
    \ txt[31] == 'a'\n    \n    if txt.size == 33\n        return txt[32] == 'a'\n\
    \    \n    if txt.size == 34\n", "    txt = txt.trim()\n    if txt.length == 0\
    \ \n        false\n    else\n        txt[txt.length-1] == ' ' || txt[txt.length-1]\
    \ == '.' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    else\n        txt[txt.length-1] == \"\
    \ \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1]\
    \ == \"\\r\" || txt[txt.length-1] == \"\\v\" || txt[txt.length-1] == \"\\f\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\U\" || txt[txt.length-1] == \"\\L\" || txt[txt.length-1] == \"\\N\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\c\" || txt[txt.length-1] == \"\\C\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\E\" || txt[txt.length-1] == \"\\U\" || txt[txt.length-1]\
    \ == \"\\L\" || txt[txt.length-1] == \"\\N\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\c\" || txt[txt.length-1]\
    \ == \"\\C\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\E\" ||\
    \ txt[txt.length-1] == \"\\U\" || txt[txt.length-1] == \"\\L\" || txt[txt.length-1]\
    \ == \"\\N\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\c\" || txt[txt.length-1] == \"\\C\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\E\" || txt[txt.length-1] == \"\\U\" ||\
    \ txt[txt.length-1] == \"\\L\" || txt[txt.length-1] == \"\\N\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\c\" ||\
    \ txt[txt.length-1] == \"\\C\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\E\" || txt[txt.length-1] == \"\\U\" || txt[txt.length-1] == \"\\L\" ||\
    \ txt[txt.length-1] == \"\\N\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\c\" || txt[txt.length-1] == \"\\C\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\E\" || txt[txt.length-1]\
    \ == \"\\U\" || txt[txt.length-1] == \"\\L\" || txt[txt.length-1] == \"\\N", " \
    \   txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    txt = txt.split(\" \")\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last()\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.chars\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last()\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.chars\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last()\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.chars\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last()\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.chars\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last()\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.chars\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last()\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.chars\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last()\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.chars\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.chars\n    \n    txt = txt.last()\n    \n    txt = txt.chars\n\
    \    \n    txt = txt.last()\n    \n    txt = txt.chars\n    \n    txt = txt.last()\n\
    \    \n    txt = txt.chars\n    \n    ", "    \n    txt = txt.trim()\n    if txt.length\
    \ == 0 \n        false\n    elseif txt.head == txt.last\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Create a function that returns True if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and False otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length-1].isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    if txt.last == \" \" \n        || txt.last == \"\"\n        ||\
    \ txt.last == \"\\n\"\n        || txt.last == \"\\t\"\n        || txt.last ==\
    \ \"\\r\"\n        || txt.last == \"\\f\"\n        || txt.last == \"\\n\"\n  \
    \      || txt.last == \"\\t\"\n        || txt.last == \"\\r\"\n        || txt.last\
    \ == \"\\f\"\n        || txt.last == \"\\n\"\n        || txt.last == \"\\t\"\n\
    \        || txt.last == \"\\r\"\n        || txt.last == \"\\f\"\n        || txt.last\
    \ == \"\\n\"\n        || txt.last == \"\\t\"\n        || txt.last == \"\\r\"\n\
    \        || txt.last == \"\\f\"\n        || txt.last == \"\\n\"\n        || txt.last\
    \ == \"\\t\"\n        || txt.last == \"\\r\"\n        || txt.last == \"\\f\"\n\
    \        || txt.last == \"\\n\"\n        || txt.last == \"\\t\"\n        || txt.last\
    \ == \"\\r\"\n        || txt.last == \"\\f\"\n        || txt.last == \"\\n\"\n\
    \        || txt.last == \"\\t\"\n        || txt.last == \"\\r\"\n        || txt.last\
    \ == \"\\f\"\n        || txt.last == \"\\n\"\n        || txt.last == \"\\t\"\n\
    \        || txt.last == \"\\r\"\n        || txt.last == \"\\f\"\n        || txt.last\
    \ == \"\\n\"\n        || txt.last == \"\\t\"\n        || txt.last == \"\\r\"\n\
    \        || txt.last == \"\\f\"\n        || txt.last == \"\\n\"\n        || txt.last\
    \ == \"\\t\"\n        || txt.last == \"\\r\"\n        || txt.last == \"\\f\"\n\
    \        || txt.last == \"\\n\"\n        || txt.last == \"\\t\"\n        || txt.last\
    \ == \"\\r\"\n        || txt.last == \"\\f\"\n        || txt.last == \"\\n\"\n\
    \        || txt.last == \"\\t\"\n        || txt.last == \"\\r\"\n        || txt.last\
    \ == \"\\f\"\n        || txt.last == \"\\n\"\n        || txt.last == \"\\t\"\n\
    \        || txt.last == \"\\r\"\n        || txt.last == \"\\f\"\n        || txt.last\
    \ == \"\\n\"\n        || txt.last == \"\\t\"\n        || txt.last == \"\\r\"\n\
    \        || txt.last == \"\\f\"\n        || txt.", "    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n",
  "    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    \n    for i in txt\n        if i !~ /^[a-z]+$/i\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \" \"\
    \ \n        false\n    elseif txt[txt.length-1].isalpha() \n        false\n  \
    \  else\n        true\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| a\
    \ dscore=2 |>\n<code>\njulia> function is_last_char_in_word(txt)\n           return\
    \ txt[end-1] == ' ' || txt[end-1].isalpha()\n       end\nis_last_char_in_word\
    \ (generic function with 1 method)", "    if txt.length == 0 \n        false\n\
    \    else if txt[txt.length - 1] == \" \" \n        false\n    else if txt[txt.length\
    \ - 1] in [\"a\", \"e\", \"i\", \"o\", \"u\"] \n        true\n    else \n    \
    \    false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    if txt == \"\"\
    \n        false\n    else\n        txt[length(txt)-1] == \" \" || txt[length(txt)-1]\
    \ == \".\" || txt[length(txt)-1] == \",\" || txt[length(txt)-1] == \";\" || txt[length(txt)-1]\
    \ == \":\" || txt[length(txt)-1] == \" \"\n    end\nend\n</cell>\n<text>\nExercise\
    \ 7: Write a function that returns True if the last character of a given string\
    \ is a digit, and False otherwise.", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.strip()\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if\
    \ txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if\
    \ txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if\
    \ txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]", "    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[end]\n    \n    if txt == \"a\" or txt == \"e\" or\
    \ txt == \"i\" or txt == \"o\" or txt == \"u\":\n        return true\n    \n \
    \   return false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length-1].isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif\
    \ txt[txt.length - 1] == \" \" \n        false\n    else\n        true\n    end\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\nA simple\
    \ solution:\n<code>", "    txt = txt.trim()\n    if txt.length == 0 \n       \
    \ false\n    elseif txt.length == 1\n        txt.head == txt.last\n    else\n\
    \        txt.head == txt.last.head && txt.last.tail != txt.last\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n", "    if txt.length\
    \ == 0 \n        false\n    elseif txt[txt.length-1] == \" \" \n        false\n\
    \    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if txt.length == 0 \n        false\n    else\n        txt[txt.length - 1]\
    \ == ' ' || txt[txt.length - 1] == '\\t' || txt[txt.length - 1] == '\\n' || txt[txt.length\
    \ - 1] == '\\r'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Create a function that returns True if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and False otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt.ends_with?(\" \")\n  \
    \      false\n    elseif txt.ends_with?(\",\")\n        false\n    elseif txt.ends_with?(\"\
    .\")\n        false\n    elseif txt.ends_with?(\"!\")\n        false\n    elseif\
    \ txt.ends_with?(\"?\")\n        false\n    elseif txt.ends_with?(\";\")\n   \
    \     false\n    elseif txt.ends_with?(\":\")\n        false\n    elseif txt.ends_with?(\"\
    '\")\n        false\n    elseif txt.ends_with?(\"$\")\n        false\n    elseif\
    \ txt.ends_with?(\"&\")\n        false\n    elseif txt.ends_with?(\"*\")\n   \
    \     false\n    elseif txt.ends_with?(\"(\")\n        false\n    elseif txt.ends_with?(\"\
    )\")\n        false\n    elseif txt.ends_with?(\"+\")\n        false\n    elseif\
    \ txt.ends_with?(\"-\")\n        false\n    elseif txt.ends_with?(\"=\")\n   \
    \     false\n    elseif txt.ends_with?(\"%\")\n        false\n    elseif txt.ends_with?(\"\
    @\")\n        false\n    elseif txt.ends_with?(\"[\")\n        false\n    elseif\
    \ txt.ends_with?(\"]\")\n        false\n    elseif txt.ends_with?(\"^\")\n   \
    \     false\n    elseif txt.ends_with?(\"_\")\n        false\n    elseif txt.ends_with?(\"\
    `\")\n        false\n    elseif txt.ends_with?(\"{\")\n        false\n    elseif\
    \ txt.ends_with?(\"}\")\n        false\n    elseif txt.ends_with?(\"|\")\n   \
    \     false\n    elseif txt.ends_with?(\"~\")\n        false\n    elseif txt.ends_with?(\"\
    \xA3\")\n        false\n    elseif txt.ends_with?(\"\xAC\")\n        false\n \
    \   elseif txt.ends_with?(\"\xBD\")\n        false\n    elseif txt.ends_with?(\"\
    \xBC\")\n        false\n    elseif txt.ends_with?(\"\xBE\")\n        false\n \
    \   elseif txt.ends_with?(\"\xA7\")\n        false\n    elseif txt.ends_with?(\"\
    \uFFFD", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n\
    \        txt[txt.length-1].isalpha() == true\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] == \" \"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n", "    txt = txt.trim()\n    if txt.length == 0 \n      \
    \  false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1] ==\
    \ \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1] == \" \"\n    end\n\
    end\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2 |>\nA simple solution\
    \ using regular expressions:\n<code>\njulia> function is_last_char(a::String)\n\
    \           return (a[end-1] == ' ' || a[end-1] == '.' || a[end-1] == ',' || a[end-1]\
    \ == ' ')\n       end\nis_last_char (generic function with 1 method)", "    txt\
    \ = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    txt = txt.strip(\" \")\n  \
    \  txt = txt.strip(\"\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\r\\n\")\n    txt\
    \ = txt.strip(\"\\t\\r\\n\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\r\\n\")\n    txt\
    \ = txt.strip(\"\\t\\r\\n\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\r\\n\")\n    txt\
    \ = txt.strip(\"\\t\\r\\n\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\r\\n\")\n    txt\
    \ = txt.strip(\"\\t\\r\\n\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\r\\n\")\n    txt\
    \ = txt.strip(\"\\t\\r\\n\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\r\\n\")\n    txt\
    \ = txt.strip(\"\\t\\r\\n\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\r\\n\")\n    txt\
    \ = txt.strip(\"\\t\\r\\n\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\r\\n\")\n    txt\
    \ = txt.strip(\"\\t\\r\\n\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"\\r\\n\")\n    txt\
    \ = txt.strip(\"\\t\\r\\n\")\n    txt = txt.strip(\"\\n\")\n    txt = txt.strip(\"\
    \\r\")\n    txt = txt.strip(\"\\t\")\n    txt = txt.strip(\"", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt.last.isalpha()\n     \
    \   true\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a string as input and returns the number of words\
    \ in the string.", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif txt[txt.length\
    \ - 1] in string.ascii_letters \n        false\n    else\n        true\n    end\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    \n    if\
    \ txt == \"\"\n        false\n    else\n        txt[length(txt)-1] == ' ' || txt[length(txt)-1]\
    \ == '.' || txt[length(txt)-1] == '?' || txt[length(txt)-1] == '!' || txt[length(txt)-1]\
    \ == '-' || txt[length(txt)-1] == '_'\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3: Write a function that returns True if the last character of a given string\
    \ is a digit, and False otherwise.", "    txt = txt.trim()\n    if txt.length\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    if txt.length == 0\n        return false\n    return\
    \ txt.length == 1\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    \n    txt = txt.split(\"\
    \ \")\n    \n    for word in txt\n        if word[word.length-1].isalpha()\n \
    \           return false\n    return true\n</code>\n<|/ a tags=julia,string |>\n\
    <| a tags=julia,string |>\n<code>", "    txt = txt.trim()\n    if txt.length ==\
    \ 0 \n        false\n    elseif txt.head == txt.last\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Create a function that returns True if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and False otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt.last.isalpha() \n    \
    \    false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ txt = txt.split(\" \")\n    \n    if txt[txt.length-1].isalpha()\n        return\
    \ false\n    else\n        return true\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.strip()\n    if txt.size == 0\n        false\n    else\n        txt[txt.size\
    \ - 1] == \" \" || txt[txt.size - 1] == \".\" || txt[txt.size - 1] == \",\" ||\
    \ txt[txt.size - 1] == \" \"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1]\
    \ == \" \"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1].isalpha()\
    \ \n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length\
    \ - 1] \u2208 ALPHABETICS \u2227 !txt[txt.length - 1] \u2208 WORDS \u2227 txt[txt.length\
    \ - 1] \u2208 NO_SPACES\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Create a function that returns True if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and False otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.", "    \n    if\
    \ txt == \"\"\n        false\n    else\n        txt.last() in string.ascii_letters\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    else\n        txt[txt.length-1] == ' ' || txt[txt.length-1] ==\
    \ '.' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!'\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0 \n     \
    \   false\n    elseif txt[txt.length - 1].isalpha()\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Create a function that returns True if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and False otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.", "    if txt.length ==\
    \ 0 \n        false\n    else\n        txt[txt.length-1] == \" \" || txt[txt.length-1]\
    \ == \"\\n\" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1] == \"\\r\" ||\
    \ txt[txt.length-1] == \"\\v\" || txt[txt.length-1] == \"\\f\" || txt[txt.length-1]\
    \ == \"\\e\"\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n\
    \    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n", "    \n    if txt\
    \ == \"\"\n        false\n    else\n        txt[end-1] \u2209 \" \" \u2227 txt[end-1]\
    \ \u2209 \"\\n\" \u2227 txt[end-1] \u2209 \"\\t\" \u2227 txt[end-1] \u2209 \"\\\
    r\" \u2227 txt[end-1] \u2209 \"\\v\" \u2227 txt[end-1] \u2209 \"\\f\" \u2227 txt[end-1]\
    \ \u2209 \"\\e\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   Create a function that returns True if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and False otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.", "    \n    if\
    \ txt.length == 0 \n        false\n    else\n        txt[txt.length - 1] == \"\
    \ \" || txt[txt.length - 1] == \"\\n\" || txt[txt.length - 1] == \"\\t\" || txt[txt.length\
    \ - 1] == \"\\r\" || txt[txt.length - 1] == \"\\v\" || txt[txt.length - 1] ==\
    \ \"\\f\" || txt[txt.length - 1] == \"\\a\" || txt[txt.length - 1] == \"\\e\"\
    \ || txt[txt.length - 1] == \"\\i\" || txt[txt.length - 1] == \"\\o\" || txt[txt.length\
    \ - 1] == \"\\u\"\n    end\nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ that returns True if the last character of a given string is a digit, and False\
    \ otherwise.", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    elseif txt.last.isalpha()\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt.size == 0\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = ", "    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n\
    \    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.length-1]\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n", "    txt = txt.trim()\n\
    \    txt = txt.strip(\" \")\n    txt = txt.strip(\"\")\n    txt = txt.strip(\"\
    \\n\")\n    txt = txt.strip(\"\\r\")\n    txt = txt.strip(\"\\t\")\n    txt =\
    \ txt.strip(\"\\f\")\n    txt = txt.strip(\"\\v\")\n    txt = txt.strip(\"\\a\"\
    )\n    txt = txt.strip(\"\\b\")\n    txt = txt.strip(\"\\f\")\n    txt = txt.strip(\"\
    \\v\")\n    txt = txt.strip(\"\\a\")\n    txt = txt.strip(\"\\b\")\n    txt =\
    \ txt.strip(\"\\f\")\n    txt = txt.strip(\"\\v\")\n    txt = txt.strip(\"\\a\"\
    )\n    txt = txt.strip(\"\\b\")\n    txt = txt.strip(\"\\f\")\n    txt = txt.strip(\"\
    \\v\")\n    txt = txt.strip(\"\\a\")\n    txt = txt.strip(\"\\b\")\n    txt =\
    \ txt.strip(\"\\f\")\n    txt = txt.strip(\"\\v\")\n    txt = txt.strip(\"\\a\"\
    )\n    txt = txt.strip(\"\\b\")\n    txt = txt.strip(\"\\f\")\n    txt = txt.strip(\"\
    \\v\")\n    txt = txt.strip(\"\\a\")\n    txt = txt.strip(\"\\b\")\n    txt =\
    \ txt.strip(\"\\f\")\n    txt = txt.strip(\"\\v\")\n    txt = txt.strip(\"\\a\"\
    )\n    txt = txt.strip(\"\\b\")\n    txt = txt.strip(\"\\f\")\n    txt = txt.strip(\"\
    \\v\")\n    txt = txt.strip(\"\\a\")\n    txt = txt.strip(\"\\b\")\n    txt =\
    \ txt.strip(\"\\f\")\n    txt = txt.strip(\"\\v\")\n    txt = txt.strip(\"\\a\"\
    )\n    txt = txt.strip(\"\\b\")\n    txt = txt.strip(\"\\f\")\n    txt = txt.strip(\"\
    \\v\")\n    txt = txt.strip(\"\\a\")\n    txt = txt.strip(\"\\b\")\n    txt =\
    \ txt.strip(\"\\f\")\n    txt = txt.strip(\"\\v\")\n    txt = txt.strip(\"\\a\"\
    )\n    txt = txt.strip(\"\\b\")\n    txt = txt.strip", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.strip()\n\
    \    if txt.empty?\n        false\n    else\n        txt.chars().last.map(&:chr).all?(&:isalpha)\
    \ == false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    if txt.length == 0\
    \ \n        false\n    elseif txt[txt.length - 1] == \" \" \n        false\n \
    \   elseif txt[txt.length - 1] in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n      \
    \  false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \".\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \":\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"\\\"\"\n        false\n    elseif\
    \ txt[txt.length - 1] == \"#\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"$\" \n        false\n    elseif txt[txt.length - 1] == \"%\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"'\" \n        false\n    elseif txt[txt.length - 1] == \"(\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \")\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"*\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"+\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"0\" \n        false\n    elseif txt[txt.length - 1] == \"1\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"2\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"3\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"4\" \n        false\n    elseif txt[txt.length - 1] == \"5\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"6\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"7\" \n        false\n    elseif txt[txt.length - 1] == \"8\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"9\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \":\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \";\" \n        false\n    elseif txt[txt.length - 1] == \"<\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"=\"\n        false\n    elseif txt[txt.length\
    \ - 1] == \">\" ", "    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.length-1]\n\
    \    \n    if txt.isalpha() == true and txt.isalpha() != false\n    \n       \
    \ return true\n    \n    return false\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt == \"\"\n        false\n    else\n        txt[end-1] \u2208 alphabet\
    \ \u2227 not (txt[end-1] \u2208 word)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 7: Write a function that returns True if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and False otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length-1].isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\
    \ 7: Write a function that returns True if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and False otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.", "    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt = txt.strip()\n    txt = txt.split(\" \")\n  \
    \  txt = txt[txt.length-1]\n    txt = txt.lower()\n    txt = txt.strip()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.lower()\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.lower()\n    txt", "    txt = txt.strip()\n    if txt == \"\"\n\
    \        false\n    else\n        txt.last() in string.ascii_letters\n    end\n\
    end", "    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt ==\
    \ \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt",
  "    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1]\
    \ == \";\" || txt[txt.length-1] == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1]\
    \ == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1] == \"'\" || txt[txt.length-1]\
    \ == \"\\\"\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"#\" || txt[txt.length-1]\
    \ == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1] == \"&\" || txt[txt.length-1]\
    \ == \"*\" || txt[txt.length-1] == \"+\" || txt[txt.length-1] == \"-\" || txt[txt.length-1]\
    \ == \"/\" || txt[txt.length-1] == \"|\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1]\
    \ == \"^\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1]\
    \ == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1] == \"[\" || txt[txt.length-1]\
    \ == \"]\" || txt[txt.length-1] == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1]\
    \ == \"|\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1] == \"^\" || txt[txt.length-1]\
    \ == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1] == \"{\" || txt[txt.length-1]\
    \ == \"}\" || txt[txt.length-1] == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1]\
    \ == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1] == \"|\" || txt[txt.length-1]\
    \ == \"\\\\\" || txt[txt.length-1] == \"^\" || txt[txt.length-1] == \"~\" || txt[txt.length-1]\
    \ == \"`\" || txt[txt.length-1] == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1]\
    \ == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1] == \"<\" || txt[txt.length-1]\
    \ == \">\" || txt[txt.length-1] == \"|\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1]\
    \ == \"^\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1]\
    \ == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1] == \"[\" || txt[txt.length-1]\
    \ == \"]\" || txt[txt.length-1] == \"<\" || txt[", "    txt = txt.trim()\n   \
    \ if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] == \" \"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n \
    \   elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1] == \".\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"\\\"\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"<\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \">\" \n        false\n    elseif txt[txt.length - 1] == \"&\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"%\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"*\" \n        false\n    elseif txt[txt.length - 1] == \"(\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \")\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"_\" \n        false\n    elseif txt[txt.length - 1] == \"/\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \".\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \",\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"!\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"'\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"\\\"\" \n        false\n    elseif txt[txt.length - 1] == \"<\" \n    \
    \    false\n    elseif txt[txt.length - 1] == \">\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"&\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"%\" \n        false\n    elseif txt[txt.length - 1] == \"*\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"(\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \")\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif\
    \ txt[txt", "    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\t\" \n        false\n    elseif txt[txt.length-1] == \"\\v\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\f\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\e\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\\"\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\?\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\\"\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\\"\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\'\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\'\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\'\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\'\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\'\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\'\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\'\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\'\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\'\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\'\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\'\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\'\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    ", "    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\t\" \n        false\n    elseif txt[txt.length-1] == \"\\v\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\f\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\a\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\e\" \n        false\n    elseif txt[txt.length-1] == \"\\E\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\c\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\C\" \n        false\n    elseif txt[txt.length-1] == \"\\o\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\O\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\N\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\p\" \n        false\n    elseif txt[txt.length-1] == \"\\P\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\M\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\M\" \n        false\n    elseif txt[txt.length-1] == \"\\X\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\X\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\Z\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\Z\" \n        false\n    elseif txt[txt.length-1] == \"\\z\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\z\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\Z\" \n        false\n    elseif txt[txt.length-1] == \"\\z\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\Z\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\z\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\Z\" \n        false\n    elseif txt[txt.length-1] == \"\\z\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\Z\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\z\" \n        false\n    elseif txt[txt.length-1] == \"\\Z\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\z\" ", "    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.trim()\n\
    \    txt = txt", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    ", "    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    return txt.isalpha()\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.split(\" \")\n    txt = txt.last\n    txt\
    \ = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n \
    \   txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = ", "    if txt.length == 0\n\
    \        false\n    else\n        txt[txt.length-1] == ' ' || txt[txt.length-1]\
    \ == '\\t' || txt[txt.length-1] == '\\n'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] in \"abcdefghijklmnopqrstuvwxyz\" \n        true\n    else\n        false\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "    \n    if txt.length\
    \ == 0 \n        false\n    elseif txt[txt.length - 1] == \" \" \n        false\n\
    \    elseif txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\t\" \n\
    \        false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"#\" \n        false\n    elseif txt[txt.length - 1] == \"$\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"%\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"&\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"(\"\n        false\n    elseif\
    \ txt[txt.length - 1] == \")\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length - 1] == \"+\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1] == \":\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \";\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"<\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \">\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"^\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1] == \"`\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"{\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"|\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"}\" \n        false\n    elseif txt[txt.length - 1] == \"~\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"0\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"1\" \n        false\n    elseif txt[txt.length - 1] == \"2\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"3\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"4\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"5\" \n        false\n    elseif txt[txt.length - 1] == \"6\" \n       \
    \ false\n    elseif txt", "    \n    txt = txt.split(\" \")\n    \n    for word\
    \ in txt\n        if word[length(word)-1] == \" \" \n            || word[length(word)-1]\
    \ == \".\"\n            || word[length(word)-1] == \",\"\n            || word[length(word)-1]\
    \ == \":\"\n            || word[length(word)-1] == \";\"\n            || word[length(word)-1]\
    \ == \",\"\n            || word[length(word)-1] == \".\"\n            || word[length(word)-1]\
    \ == \",\"\n            || word[length(word)-1] == \":\"\n            || word[length(word)-1]\
    \ == \";\"\n            || word[length(word)-1] == \",\"\n            || word[length(word)-1]\
    \ == \".\"\n            || word[length(word)-1] == \",\"\n            || word[length(word)-1]\
    \ == \":\"\n            || word[length(word)-1] == \";\"\n            || word[length(word)-1]\
    \ == \",\"\n            || word[length(word)-1] == \".\"\n            || word[length(word)-1]\
    \ == \",\"\n            || word[length(word)-1] == \":\"\n            || word[length(word)-1]\
    \ == \";\"\n            || word[length(word)-1] == \",\"\n            || word[length(word)-1]\
    \ == \".\"\n            || word[length(word)-1] == \",\"\n            || word[length(word)-1]\
    \ == \":\"\n            || word[length(word)-1] == \";\"\n            || word[length(word)-1]\
    \ == \",\"\n            || word[length(word)-1] == \".\"\n            || word[length(word)-1]\
    \ == \",\"\n            || word[length(word)-1] == \":\"\n            || word[length(word)-1]\
    \ == \";\"\n            || word[length(word)-1] == \",\"\n            || word[length(word)-1]\
    \ == \".\"\n            || word[length(word)-1] == \",\"\n            || word[length(word)-1]\
    \ == \":\"\n            || word[length(word)-1] == \";\"\n            || word[length(word)-1]\
    \ == \",\"\n            || word[length(word)-1] == \".\"\n            || word[length(word)-1]\
    \ == \",\"\n            || word[length(word)-1] == \":\"\n            || word[length(word)-1]\
    \ == \";\"\n            || word[length(word)-1] == \",\"\n            || word[length(word)-1]\
    \ == \".\"\n            || word[length(word)-1] == \",\"\n            || word[length(word)-1]\
    \ == \":\"\n            || word[length(word)-1] == \";\"\n            || word[length(word)-1]\
    \ == \",\"\n            || word[length(word)-1] == \".\"\n            || word[length(word)-1]\
    \ == ", "    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n   \
    \ txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \")\n\
    \    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    ", "    \n    if txt.length == 0 \n      \
    \  false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \"\\r\" \n\
    \        false\n    elseif txt[txt.length - 1] == \" \" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"#\" \n        false\n    elseif txt[txt.length - 1] == \"$\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"%\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"&\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"(\"\n        false\n    elseif\
    \ txt[txt.length - 1] == \")\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length - 1] == \"+\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"/\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"0\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"1\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"2\" \n        false\n    elseif txt[txt.length - 1] == \"3\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"4\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"5\" \n        false\n    elseif txt[txt.length - 1] == \"6\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"7\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"8\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"9\" \n        false\n    elseif txt[txt.length - 1] == \":\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \";\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"<\" \n        false\n    elseif txt[txt.length - 1] == \"=\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \">\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"@\" \n        false\n    elseif txt[txt.length - 1] == \"[\" \n       \
    \ false\n    elseif ", "    \n    if txt.length == 0 \n        false\n    else\n\
    \        txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1]\
    \ == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\f\" ||\
    \ txt[txt.length-1] == \"\\v\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\U\" || txt[txt.length-1] == \"\\L\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] == ' '\
    \ \n        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit, and False otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.", "    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt", "    \n    if\
    \ txt.length == 0 \n        false\n    elseif txt[txt.length - 1] == ' ' \n  \
    \      false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif\
    \ txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n        false\n\
    \    elseif txt[txt.length - 1] == '_' \n        false\n    elseif txt[txt.length\
    \ - 1] == '/' \n        false\n    elseif txt[txt.length - 1] == '\\\\' \n   \
    \     false\n    elseif txt[txt.length - 1] == '&' \n        false\n    elseif\
    \ txt[txt.length - 1] == '%' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '*' \n        false\n    elseif txt[txt.length - 1] == '+' \n        false\n\
    \    elseif txt[txt.length - 1] == '^' \n        false\n    elseif txt[txt.length\
    \ - 1] == '<' \n        false\n    elseif txt[txt.length - 1] == '>' \n      \
    \  false\n    elseif txt[txt.length - 1] == '|' \n        false\n    elseif txt[txt.length\
    \ - 1] == '~' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '\"' \n        false\n    elseif txt[txt.length\
    \ - 1] == '\\'' \n        false\n    elseif txt[txt.length - 1] == '(' \n    \
    \    false\n    elseif txt[txt.length - 1] == ')' \n        false\n    elseif\
    \ txt[txt.length - 1] == ',' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '.' \n        false\n    elseif txt[txt.length - 1] == '/' \n        false\n\
    \    elseif txt[txt.length - 1] == '\\\\' \n        false\n    elseif txt[txt.length\
    \ - 1] == '&' \n        false\n    elseif txt[txt.length - 1] == '%' \n      \
    \  false\n    elseif txt[txt.length - 1] == '*' \n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == '^' \n      \
    \  false\n    elseif txt[txt.length - 1] == '<' \n        false\n    elseif txt[txt.length\
    \ - 1] == '>' \n        false\n    elseif txt[txt.length - 1] == '|' \n      \
    \  false\n    elseif txt[txt.length - 1] == '~' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n", "    txt = txt.trim()\n    if txt.length ==\
    \ 0 \n        false\n    elseif txt[txt.length - 1].isalpha()\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Create a function that returns True if the last character\n    of a\
    \ given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == ' ' \n        false\n    elseif txt[txt.length - 1] == '.' \n      \
    \  false\n    elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '_' \n        false\n    elseif txt[txt.length\
    \ - 1] == '*' \n        false\n    elseif txt[txt.length - 1] == '('\n       \
    \ false\n    elseif txt[txt.length - 1] == ')'\n        false\n    elseif txt[txt.length\
    \ - 1] == '['\n        false\n    elseif txt[txt.length - 1] == ']'\n        false\n\
    \    elseif txt[txt.length - 1] == '{'\n        false\n    elseif txt[txt.length\
    \ - 1] == '}'\n        false\n    elseif txt[txt.length - 1] == '|'\n        false\n\
    \    elseif txt[txt.length - 1] == '\"'\n        false\n    elseif txt[txt.length\
    \ - 1] == '\\'' \n        false\n    elseif txt[txt.length - 1] == '%' \n    \
    \    false\n    elseif txt[txt.length - 1] == '$' \n        false\n    elseif\
    \ txt[txt.length - 1] == '&' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '*' \n        false\n    elseif txt[txt.length - 1] == '+' \n        false\n\
    \    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == '/' \n      \
    \  false\n    elseif txt[txt.length - 1] == '<' \n        false\n    elseif txt[txt.length\
    \ - 1] == '>' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '^' \n        false\n    elseif txt[txt.length - 1] == '~' \n      \
    \  false\n    elseif txt[txt.length - 1] == '|' \n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == '=' \n      \
    \  false\n    elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '*' \n        false\n    elseif txt[txt.length - 1] == '+' \n      \
    \  false\n", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n \
    \   else\n        txt[txt.length - 1] == ' ' || txt[txt.length - 1] == '.' ||\
    \ txt[txt.length - 1] == '?' || txt[txt.length - 1] == '!' || txt[txt.length -\
    \ 1] == '-' || txt[txt.length - 1] == '_'\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n", "    txt = txt.trim()\n    if txt.length == 0 \n   \
    \     false\n    elseif txt[txt.length - 1] in \"abcdefghijklmnopqrstuvwxyz\"\
    \ \n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] in \"abcdefghijklmnopqrstuvwxyz\" \n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<text>\nExercise 2: Write a function that returns True\
    \ if the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.strip()\n    if txt.ends_with(\"e\")\n\
    \        true\n    else\n        false\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    txt = txt.split(\" \")\n    \n   \
    \ for i in txt:\n        if i[-1].isalpha():\n            return False\n    return\
    \ True\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia |>\n<code>", "    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    if txt.length\
    \ == 0 \n        false\n    elseif txt[txt.length-1] == \" \" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\n\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\t\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"-\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"_\" \n        false\n    elseif txt[txt.length-1] == \"!\" \n        false\n\
    \    elseif txt[txt.length-1] == \"#\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"$\" \n        false\n    elseif txt[txt.length-1] == \"%\" \n        false\n\
    \    elseif txt[txt.length-1] == \"&\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"'\" \n        false\n    elseif txt[txt.length-1] == \"(\"\n        false\n\
    \    elseif txt[txt.length-1] == \")\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length-1] == \"+\" \n        false\n\
    \    elseif txt[txt.length-1] == \",\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length-1] == \"/\" \n        false\n\
    \    elseif txt[txt.length-1] == \"0\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"1\" \n        false\n    elseif txt[txt.length-1] == \"2\" \n        false\n\
    \    elseif txt[txt.length-1] == \"3\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"4\" \n        false\n    elseif txt[txt.length-1] == \"5\" \n        false\n\
    \    elseif txt[txt.length-1] == \"6\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"7\" \n        false\n    elseif txt[txt.length-1] == \"8\" \n        false\n\
    \    elseif txt[txt.length-1] == \"9\" \n        false\n    elseif txt[txt.length-1]\
    \ == \":\" \n        false\n    elseif txt[txt.length-1] == \";\" \n        false\n\
    \    elseif txt[txt.length-1] == \"<\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"=\" \n        false\n    elseif txt[txt.length-1] == \">\" \n        false\n\
    \    elseif txt[txt.length-1] == \"?\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"@\" \n        false\n    elseif txt[", "    \n    if txt == \"\"\n    \
    \    false\n    else\n        txt[length(txt)-1] == ' ' || txt[length(txt)-1]\
    \ == '.' || txt[length(txt)-1] == '?' || txt[length(txt)-1] == '!'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.trim()\n    if txt.length == 0\n        false\n    else\n        txt[txt.length\
    \ - 1] == ' ' || txt[txt.length - 1] == '.' || txt[txt.length - 1] == '?' || txt[txt.length\
    \ - 1] == '!'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    \n    if txt == \"\"\n        false\n    else\n        txt[length(txt)-1]\
    \ == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1] == '?' || txt[length(txt)-1]\
    \ == '!'\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit, and False otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.", "    txt = txt.trim()\n    if txt.length == 0 \n        false\n\
    \    elseif txt[txt.length - 1].isalpha()\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if\
    \ txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if\
    \ txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n        return\
    \ false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    if\
    \ txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]", "    \n    if txt.length == 0 \n  \
    \      false\n    else\n        if txt[txt.length-1] == \" \" \n            false\n\
    \        else\n            if txt[txt.length-1].isalpha()\n                true\n\
    \            else\n                false\n        end\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns True if the last character\n\
    \    of a given string is a digit and is not\n    a part of a word, and False\
    \ otherwise.\n    Note: \"word\" is a group of characters separated by space.",
  "    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] ==\
    \ \" \" \n        false\n    else\n        true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    if txt == \"\"\n        return false\n    \n\
    \    txt = txt.split(\" \")\n    \n    txt = txt.last\n    \n    if txt == \"\"\
    \n        return false\n    \n    txt = txt.chars\n    \n    txt = txt.last\n\
    \    \n    if txt == \"\"\n        return false\n    \n    if txt.last == txt.last.upcase\n\
    \        return true\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>",
  "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n      \
    \  if txt[txt.length - 1] == \" \" \n            false\n        else\n       \
    \     if txt[txt.length - 1].isalpha()\n                true\n            else\n\
    \                false\n        end\n    end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>", "    if txt == \"\"\n        false\n    else\n        txt[length(txt)-1]\
    \ == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1] == '!' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == ';' || txt[length(txt)-1] == ',' || txt[length(txt)-1]\
    \ == ':' || txt[length(txt)-1] == ';' || txt[length(txt)-1] == '-' || txt[length(txt)-1]\
    \ == '_' || txt[length(txt)-1] == '/' || txt[length(txt)-1] == '\\\\' || txt[length(txt)-1]\
    \ == '(' || txt[length(txt)-1] == ')' || txt[length(txt)-1] == '[' || txt[length(txt)-1]\
    \ == ']' || txt[length(txt)-1] == '{' || txt[length(txt)-1] == '}' || txt[length(txt)-1]\
    \ == '<' || txt[length(txt)-1] == '>' || txt[length(txt)-1] == '|' || txt[length(txt)-1]\
    \ == '&' || txt[length(txt)-1] == '$' || txt[length(txt)-1] == '%' || txt[length(txt)-1]\
    \ == '^' || txt[length(txt)-1] == '~' || txt[length(txt)-1] == '*' || txt[length(txt)-1]\
    \ == '(' || txt[length(txt)-1] == ')' || txt[length(txt)-1] == '[' || txt[length(txt)-1]\
    \ == ']' || txt[length(txt)-1] == '{' || txt[length(txt)-1] == '}' || txt[length(txt)-1]\
    \ == '<' || txt[length(txt)-1] == '>' || txt[length(txt)-1] == '|' || txt[length(txt)-1]\
    \ == '&' || txt[length(txt)-1] == '$' || txt[length(txt)-1] == '%' || txt[length(txt)-1]\
    \ == '^' || txt[length(txt)-1] == '~' || txt[length(txt)-1] == '*' || txt[length(txt)-1]\
    \ == '(' || txt[length(txt)-1] == ')' || txt[length(txt)-1] == '[' || txt[length(txt)-1]\
    \ == ']' || txt[length(txt)-1] == '{' || txt[length(txt)-1] == '}' || txt[length(txt)-1]\
    \ == '<' || txt[length(txt)-1] == '>' || txt[length(txt)-1] == '|' || txt[length(txt)-1]\
    \ == '&' || txt[length(txt)-1] == '$' || txt[length(txt)-1] == '%' || txt[length(txt)-1]\
    \ == '^' || txt[length(txt)-1]", "    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.trim()\n\
    \    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \" \"\
    \ \n        false\n    elseif txt[txt.length-1] == \".\" \n        false\n   \
    \ elseif txt[txt.length-1] == \",\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"?\" \n        false\n    elseif txt[txt.length-1] == \"!\" \n        false\n\
    \    elseif txt[txt.length-1] == \"'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length-1] == \"_\" \n        false\n\
    \    elseif txt[txt.length-1] == \"/\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"[\" \n        false\n    elseif txt[txt.length-1] == \"]\" \n        false\n\
    \    elseif txt[txt.length-1] == \"{\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"}\" \n        false\n    elseif txt[txt.length-1] == \"%\" \n        false\n\
    \    elseif txt[txt.length-1] == \"&\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length-1] == \"(\" \n        false\n\
    \    elseif txt[txt.length-1] == \")\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"|\" \n        false\n    elseif txt[txt.length-1] == \"~\" \n        false\n\
    \    elseif txt[txt.length-1] == \"^\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"=\" \n        false\n    elseif txt[txt.length-1] == \"<\" \n        false\n\
    \    elseif txt[txt.length-1] == \">\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"{\" \n        false\n    elseif txt[txt.length-1] == \"}\" \n        false\n\
    \    elseif txt[txt.length-1] == \"~\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"^\" \n        false\n    elseif txt[txt.length-1] == \"|\" \n        false\n\
    \    elseif txt[txt.length-1] == \"&\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length-1] == \"(\" \n        false\n\
    \    elseif txt[txt.length-1] == \")\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"%\" \n        false\n    elseif txt[txt.length-1] == \"[\" \n        false\n\
    \    elseif txt[txt.length-1] == ", "    if txt == \"\"\n        false\n    else\n\
    \        txt[length(txt)-1] == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1]\
    \ == ',' || txt[length(txt)-1] == ';' || txt[length(txt)-1] == '?' || txt[length(txt)-1]\
    \ == '!'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns True if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and False otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.", "    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    \n    if txt.length\
    \ == 0 \n        false\n    else\n        if txt[txt.length - 1] == \" \" \n \
    \           false\n        else\n            if txt[txt.length - 1].isalpha()\
    \ \n                false\n            else\n                true\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"a\"\n        return false\n\
    \    if txt == \"e\"\n        return false\n    if txt == \"i\"\n        return\
    \ false\n    if txt == \"o\"\n        return false\n    if txt == \"u\"\n    \
    \    return false\n    return true\nend\n</cell>\n<code language=julia-1.3>",
  "    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n      \
    \  txt.last() in string.ascii_letters\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt =\
    \ txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  ", "    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length\
    \ - 1] == ' ' || txt[txt.length - 1] == '.' || txt[txt.length - 1] == '?' || txt[txt.length\
    \ - 1] == '!' || txt[txt.length - 1] == '-' || txt[txt.length - 1] == '_'\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns True if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.", "    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    ", "    if txt == \"\"\n  \
    \      false\n    else\n        txt[end-1] \u2209 \" \" \u2227 txt[end-1] \u2209\
    \ \"\\n\" \u2227 txt[end-1] \u2209 \"\\t\" \u2227 txt[end-1] \u2209 \"\\r\" \u2227\
    \ txt[end-1] \u2209 \"\\v\" \u2227 txt[end-1] \u2209 \"\\f\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns True if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    \n    txt = txt.split(\" \")\n    \n    txt = txt[end]\n\
    \    \n    if txt.isalpha()\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.trim()\n    if txt.length == 0\n      \
    \  false\n    else\n        txt.last() in string.ascii_letters\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ True if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.", "    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    ", "    if txt.length == 0 \n        false\n  \
    \  else\n        txt[txt.length-1] == ' ' || txt[txt.length-1] == '\\t' || txt[txt.length-1]\
    \ == '\\n' || txt[txt.length-1] == '\\r'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns True if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and False otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.", "    \n   \
    \ if txt.length == 0 \n        false\n    else\n        txt[txt.length - 1] ==\
    \ \" \" || txt[txt.length - 1] == \".\" || txt[txt.length - 1] == \"!\" || txt[txt.length\
    \ - 1] == \"?\" || txt[txt.length - 1] == \"-\" || txt[txt.length - 1] == \"_\"\
    \ || txt[txt.length - 1] == \"/\" || txt[txt.length - 1] == \"\\\\\" || txt[txt.length\
    \ - 1] == \"[\" || txt[txt.length - 1] == \"]\" || txt[txt.length - 1] == \"{\"\
    \ || txt[txt.length - 1] == \"}\" || txt[txt.length - 1] == \"|\" || txt[txt.length\
    \ - 1] == \"\\\\\" || txt[txt.length - 1] == \"@\" || txt[txt.length - 1] == \"\
    ^\" || txt[txt.length - 1] == \"~\" || txt[txt.length - 1] == \"`\" || txt[txt.length\
    \ - 1] == \"'\" || txt[txt.length - 1] == \"$\" || txt[txt.length - 1] == \"&\"\
    \ || txt[txt.length - 1] == \"*\" || txt[txt.length - 1] == \"+\" || txt[txt.length\
    \ - 1] == \"-\" || txt[txt.length - 1] == \"=\" || txt[txt.length - 1] == \"|\"\
    \ || txt[txt.length - 1] == \"\\\\\" || txt[txt.length - 1] == \"<\" || txt[txt.length\
    \ - 1] == \">\" || txt[txt.length - 1] == \"?\" || txt[txt.length - 1] == \"/\"\
    \ || txt[txt.length - 1] == \"\\\\\" || txt[txt.length - 1] == \"[\" || txt[txt.length\
    \ - 1] == \"]\" || txt[txt.length - 1] == \"{\" || txt[txt.length - 1] == \"}\"\
    \ || txt[txt.length - 1] == \"|\" || txt[txt.length - 1] == \"\\\\\" || txt[txt.length\
    \ - 1] == \"@\" || txt[txt.length - 1] == \"^\" || txt[txt.length - 1] == \"~\"\
    \ || txt[txt.length - 1] == \"`\" || txt[txt.length - 1] == \"'\" || txt[txt.length\
    \ - 1] == \"$\" || txt[txt.length - 1] == \"&\" || txt[txt.length - 1] == \"*\"\
    \ || txt[txt.length - 1] == \"+\" || txt[txt.length - 1] == \"-\" || txt[txt.length\
    \ - 1] == \"=\" || txt[txt.length - 1] == \"|\" || txt[txt.length - 1] == \"\\\
    \\\" || txt[txt.length - 1] == \"<\" || txt[txt.length - 1] == \">\" || txt[txt.length\
    \ - 1] == \"?\" || txt[txt.length - 1] == \"/\" || txt[txt.length - 1] == \"\\\
    \\\" || txt[txt.length - 1] == \"[\" || txt[txt.length - 1] == \"]\" || txt[txt.length\
    \ - 1] == \"{\" || txt[txt.length - 1] == \"}\" || txt[txt.length - 1] == \"|\"\
    \ || txt[txt.length - 1] == \"\\\\\" || txt["]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
