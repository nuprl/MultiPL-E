name: HumanEval_111_histogram
language: jl
prompt: "\"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n    >>> histogram(\"a b c\")\n    Dict(\"a\" => 1, \"b\" =>\
  \ 1, \"c\" => 1)\n    >>> histogram(\"a b b a\")\n    Dict(\"a\" => 2, \"b\" =>\
  \ 2)\n    >>> histogram(\"a b c a b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>>\
  \ histogram(\"b b b b a\")\n    Dict(\"b\" => 4)\n    >>> histogram(\"\")\n    Dict()\n\
  \n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}> \n"
tests: "using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
  a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") ==\
  \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\"\
  \ => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r\
  \ t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b\
  \ b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1,\
  \ \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
  a\") == Dict(\"a\" => 1))\nend\n"
completions: ["    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not spaces.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not letters.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        if histogram[c] == 0\n            histogram[c]\
    \ = 1\n        else\n            histogram[c] += 1\n        end\n    end\n   \
    \ return histogram\nend", "    histogram = Dict()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the number of unique letters in the string.\n    \n    Example:\n  \
    \  >>> count_unique_letters(\"a b c\")\n    3\n    >>> count_unique_letters(\"\
    a b b a\")\n    2\n    >>> count_unique_letters(\"a b c a b\")\n    2\n    >>>\
    \ count_unique_letters(\"b b b b a\")\n    4\n    >>> count_unique_letters(\"\"\
    )\n    0", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters.sort!()\n    letters.reverse!()\n    for letter in letters do\n \
    \       histogram[letter] = histogram[letter] + 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string\nthat are uppercase letters.", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all numbers and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all whitespace and\
    \ only count the letters a-z.\nThe function should ignore all words that are shorter\
    \ than 3 characters.\nThe function should ignore all words that are longer than\
    \ 20 characters.\nThe function should ignore all words that are longer than 3\
    \ characters and shorter than 20 characters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ at least one digit.\nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 20 characters and that contain at least one special\
    \ character.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain at least one letter.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain at least one upper case letter.\nThe function should\
    \ ignore all words that are longer than 3 characters and shorter than 20 characters\
    \ and that contain at least one lower case letter.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain at least one upper case letter and at least one lower case letter.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain at least one upper case letter and at least\
    \ one lower case letter and at least one digit.\nThe function should ignore all\
    \ words that are longer than 3 characters and shorter than 20 characters and that\
    \ contain at least one upper case letter and at least one lower case letter and\
    \ at least one special character.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 20 characters and that contain at\
    \ least one upper case letter and at least one lower case letter and at least\
    \ one special character and at least one digit.\nThe function should ignore all\
    \ words that are longer than 3 characters and shorter than 20 characters and ",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not spaces.", " \
    \   histogram = Dict{String, Int64}()\n    for letter in split(test)\n       \
    \ if histogram[letter] == 0\n            histogram[letter] = 1\n        else\n\
    \            histogram[letter] += 1\n        end\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nThe function should ignore non-letters.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string. \nWrite a function that\
    \ takes a string and returns a dictionary of the characters in the string with\
    \ the number of occurrences.\nWrite a function that takes a string and returns\
    \ a dictionary of the characters in the string with the number of occurrences.\n\
    Write a function that takes a string and returns a dictionary of the characters\
    \ in the string with the number of occurrences.\nWrite a function that takes a\
    \ string and returns a dictionary of the characters in the string with the number\
    \ of occurrences.\nWrite a function that takes a string and returns a dictionary\
    \ of the characters in the string with the number of occurrences.\nWrite a function\
    \ that takes a string and returns a dictionary of the characters in the string\
    \ with the number of occurrences.\nWrite a function that takes a string and returns\
    \ a dictionary of the characters in the string with the number of occurrences.\n\
    Write a function that takes a string and returns a dictionary of the characters\
    \ in the string with the number of occurrences.\nWrite a function that takes a\
    \ string and returns a dictionary of the characters in the string with the number\
    \ of occurrences.\nWrite a function that takes a string and returns a dictionary\
    \ of the characters in the string with the number of occurrences.\nWrite a function\
    \ that takes a string and returns a dictionary of the characters in the string\
    \ with the number of occurrences.\nWrite a function that takes a string and returns\
    \ a dictionary of the characters in the string with the number of occurrences.\n\
    Write a function that takes a string and returns a dictionary of the characters\
    \ in the string with the number of occurrences.\nWrite a function that takes a\
    \ string and returns a dictionary of the characters in the string with the number\
    \ of occurrences.\nWrite a function that takes a string and returns a dictionary\
    \ of the characters in the string with the number of occurrences.\nWrite a function\
    \ that takes a string and returns a dictionary of the characters in the string\
    \ with the number of occurrences.\nWrite a function that takes a string and returns\
    \ a dictionary of the characters in the string with the number of occurrences.\n\
    Write a function that takes a string and returns a dictionary of the characters\
    \ in the string with the number of occurrences.\nWrite a function that takes a\
    \ string and returns a dictionary of the characters in the string with the number\
    \ of occurrences.\nWrite a function that takes a string and returns a dictionary\
    \ of the characters in the string with the number of occurrences.\nWrite a function\
    \ that takes a string and returns a dictionary of the characters in the string\
    \ with the number of occurrences.\nWrite a function that ", "    histogram = Dict{String,\
    \ Int64}()\n    for c in split(test)\n        if !haskey(histogram, c)\n     \
    \       histogram[c] = 1\n        else\n            histogram[c] += 1\n      \
    \  end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all non-word characters (spaces, punctuation, etc.).\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ strings consisting of only whitespace.\nThe function should ignore all strings\
    \ consisting of only a single word.\nThe function should ignore all strings consisting\
    \ of only a single word and whitespace.\nThe function should ignore all strings\
    \ consisting of only a single word and non-word characters.\nThe function should\
    \ ignore all strings consisting of only a single word and non-word characters\
    \ and whitespace.\nThe function should ignore all strings consisting of only a\
    \ single word and non-word characters and whitespace.\nThe function should ignore\
    \ all strings consisting of only a single word and non-word characters and whitespace.\n\
    The function should ignore all strings consisting of only a single word and non-word\
    \ characters and whitespace.\nThe function should ignore all strings consisting\
    \ of only a single word and non-word characters and whitespace.\nThe function\
    \ should ignore all strings consisting of only a single word and non-word characters\
    \ and whitespace.\nThe function should ignore all strings consisting of only a\
    \ single word and non-word characters and whitespace.\nThe function should ignore\
    \ all strings consisting of only a single word and non-word characters and whitespace.\n\
    The function should ignore all strings consisting of only a single word and non-word\
    \ characters and whitespace.\nThe function should ignore all strings consisting\
    \ of only a single word and non-word characters and whitespace.\nThe function\
    \ should ignore all strings consisting of only a single word and non-word characters\
    \ and whitespace.\nThe function should ignore all strings consisting of only a\
    \ single word and non-word characters and whitespace.\nThe function should ignore\
    \ all strings consisting of only a single word and non-word characters and whitespace.\n\
    The function should ignore all strings consisting of only a single word and non-word\
    \ characters and whitespace.\nThe function should ignore all strings consisting\
    \ of only a single word and non-word characters and whitespace.\nThe function\
    \ should ignore all strings consisting of only a single word and non-word characters\
    \ and whitespace.\nThe function should ignore all strings consisting of only a\
    \ single word and non-word characters and whitespace.\nThe function should ignore\
    \ all strings consisting of only a single word and non-word characters and whitespace.\n\
    The function should ignore all strings consisting of only a single word and non-word\
    \ characters and whitespace.\nThe function should ignore all strings consisting\
    \ of only a single word and non-word characters and whitespace.\nThe function\
    \ should ignore all strings consisting of only a single ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nThe function should ignore all punctuation and split\
    \ on whitespace.\nThe function should ignore all empty words.\nThe function should\
    \ ignore all words that are shorter than 3 characters.\nThe function should ignore\
    \ all words that are longer than 20 characters.\nThe function should ignore all\
    \ words that are longer than 3 characters and shorter than 20 characters.\nThe\
    \ function should ignore all words that are longer than 3 characters and shorter\
    \ than 3 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 20 characters.\nThe function should ignore all\
    \ words that are longer than 20 characters and shorter than 3 characters.\nThe\
    \ function should ignore all words that are longer than 20 characters and shorter\
    \ than 20 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and longer than 20 characters.\nThe function should ignore all\
    \ words that are longer than 3 characters and longer than 3 characters.\nThe function\
    \ should ignore all words that are longer than 3 characters and longer than 20\
    \ characters.\nThe function should ignore all words that are longer than 20 characters\
    \ and longer than 3 characters.\nThe function should ignore all words that are\
    \ longer than 20 characters and longer than 20 characters.\nThe function should\
    \ ignore all words that are longer than 3 characters and longer than 3 characters.\n\
    The function should ignore all words that are longer than 3 characters and longer\
    \ than 20 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and longer than 3 characters.\nThe function should ignore all words\
    \ that are longer than 3 characters and longer than 20 characters.\nThe function\
    \ should ignore all words that are longer than 20 characters and longer than 3\
    \ characters.\nThe function should ignore all words that are longer than 20 characters\
    \ and longer than 20 characters.\nThe function should ignore all words that are\
    \ longer than 3 characters and longer than 3 characters.\nThe function should\
    \ ignore all words that are longer than 3 characters and longer than 20 characters.\n\
    The function should ignore all words that are longer than 3 characters and longer\
    \ than 3 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and longer than 20 characters.\nThe function should ignore all\
    \ words that are longer than 20 characters and longer than 3 characters.\nThe\
    \ function should ignore all words that are longer than 20 characters and longer\
    \ than 20 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and longer than 3 characters.\nThe function should ignore all words\
    \ that are longer than 3 characters and ", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    letters = letters[2:end]\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1\n    end\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of letters\
    \ in the string that occur more than once.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with the letters\
    \ sorted alphabetically.\nExample:\n>>> sort(\"a b c\")\n\"a b c\"\n>>> sort(\"\
    a b b a\")\n\"a b a\"\n>>> sort(\"\")\n\"\"", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    histogram\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string. \nThe function should ignore all non-word\
    \ characters (spaces, punctuation, etc.)\nThe function should ignore case when\
    \ counting words.\nThe function should ignore all empty strings.", "    histogram\
    \ = Dict()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not letters.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in it.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a dictionary of the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a string with the first letter of\
    \ each word capitalized. \nFor example \"hello world\" returns \"Hello World\"\
    .", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n  \
    \      histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of times\
    \ each letter appears in the string. \n    \n    Example:\n    >>> count_letters(\"\
    a b c\")\n    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n    >>> count_letters(\"\
    a b b a\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> count_letters(\"a b c a\
    \ b\")\n    Dict(\"a\" => 2, \"b\" => 2)\n    >>> count_letters(\"b b b b a\"\
    )\n    Dict(\"b\" => 4)\n    >>> count_letters(\"\")\n    Dict()", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are\nnot in the alphabet.\nExample:\n>>> count_non_alphabet(\"\
    a b c\")\n2\n>>> count_non_alphabet(\"a b b a\")\n3\n>>> count_non_alphabet(\"\
    b b b b a\")\n4", "    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        histogram[c] = histogram.get(c, 0) + 1\n    histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.", "    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        histogram[c] = get(histogram, c, 0) + 1\n    return histogram\nend\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are\nnot in the alphabet (a to z). \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are\nnot in the alphabet\
    \ (a to z) that are in the string \"abc\".\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are\nnot in the alphabet\
    \ (a to z) that are in the string \"abc\" and are in the string \"abd\".", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called count_letters that takes a string and returns the number of\
    \ occurrences of each letter in the string.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nThe function should ignore all punctuation and only count the\
    \ letters a-z.\nThe function should ignore all empty strings.\nThe function should\
    \ ignore all words that are shorter than 3 characters.\nThe function should ignore\
    \ all words that are longer than 20 characters.\nThe function should ignore all\
    \ words that are longer than 3 characters and shorter than 20 characters.\nThe\
    \ function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters and that contain only letters a-z.\nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain only letters a-z and ignore all words that are longer than 20 characters\
    \ and that contain only letters a-z.\nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and that contain\
    \ only letters a-z and ignore all words that are longer than 20 characters and\
    \ that contain only letters a-z and ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain only letters a-z.\nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain only letters a-z and ignore all words that are longer\
    \ than 20 characters and that contain only letters a-z and ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and that contain\
    \ only letters a-z and ignore all words that are longer than 3 characters and\
    \ shorter than 20 characters and that contain only letters a-z and ignore all\
    \ words that are longer than 3 characters and shorter than 20 characters and that\
    \ contain only letters a-z and ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain only letters a-z and ignore\
    \ all words that are longer than 3 characters and shorter than 20 characters and\
    \ that contain only letters a-z and ignore all words that are longer than 3 characters\
    \ and shorter than 20 characters and that contain only letters a-z and ignore\
    \ all words that are longer than 3 characters and shorter than 20 character",
  "    histogram = Dict{String, Int64}()\n    for c in split(test)\n        if !haskey(histogram,\
    \ c)\n            histogram[c] = 0\n        end\n        histogram[c] += 1\n \
    \   end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ punctuation marks and split words by whitespace.\nThe function should ignore\
    \ all empty strings.\nThe function should ignore all non-alphabetic characters.\n\
    The function should ignore all non-alphanumeric characters.\nThe function should\
    \ ignore all non-letters.\nThe function should ignore all non-numbers.\nThe function\
    \ should ignore all non-spaces.\nThe function should ignore all non-alphanumeric\
    \ characters and spaces.\nThe function should ignore all non-letters.\nThe function\
    \ should ignore all non-numbers.\nThe function should ignore all non-spaces.\n\
    The function should ignore all non-alphanumeric characters and spaces.\nThe function\
    \ should ignore all non-letters.\nThe function should ignore all non-numbers.\n\
    The function should ignore all non-spaces.\nThe function should ignore all non-alphanumeric\
    \ characters and spaces.\nThe function should ignore all non-letters.\nThe function\
    \ should ignore all non-numbers.\nThe function should ignore all non-spaces.\n\
    The function should ignore all non-alphanumeric characters and spaces.\nThe function\
    \ should ignore all non-letters.\nThe function should ignore all non-numbers.\n\
    The function should ignore all non-spaces.\nThe function should ignore all non-alphanumeric\
    \ characters and spaces.\nThe function should ignore all non-letters.\nThe function\
    \ should ignore all non-numbers.\nThe function should ignore all non-spaces.\n\
    The function should ignore all non-alphanumeric characters and spaces.\nThe function\
    \ should ignore all non-letters.\nThe function should ignore all non-numbers.\n\
    The function should ignore all non-spaces.\nThe function should ignore all non-alphanumeric\
    \ characters and spaces.\nThe function should ignore all non-letters.\nThe function\
    \ should ignore all non-numbers.\nThe function should ignore all non-spaces.\n\
    The function should ignore ", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not alphabetic (i.e.\
    \ not letters). \nExample: \n>>> count_non_letters(\"a b c\")\n2\n>>> count_non_letters(\"\
    a b b a\")\n4\n>>> count_non_letters(\"b b b b a\")\n4\n>>> count_non_letters(\"\
    \")\n0", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a dictionary with the letters of the string as keys and the frequencies\
    \ as values.", "    histogram = Dict()\n    for c in split(test)\n        histogram[c]\
    \ = get(histogram, c, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of characters in the string that are not in\
    \ the alphabet.", "    histogram = Dict()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the most frequent letter in it.", "    histogram = Dict()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ ?? 0\n        histogram[letter] += 1 \n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nExample:\n>>> count_letters(\"a b c\")\n\
    Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1)\n>>> count_letters(\"a b b a\")\nDict(\"\
    a\" => 2, \"b\" => 2)\n>>> count_letters(\"a b c a b\")\nDict(\"a\" => 2, \"b\"\
    \ => 2)\n>>> count_letters(\"b b b b a\")\nDict(\"b\" => 4)\n>>> count_letters(\"\
    \")\nDict()", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of words in the string.\nExample:\n>>> count_words(\"a b\
    \ c d e f g h i j k l m n o p q r s t u v w x y z\")\n10\n>>> count_words(\"a\
    \ b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n   \
    \ for letter in letters\n        histogram[letter] = get(histogram, letter, 0)\
    \ + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string. \nThe function should ignore\
    \ all non-word characters (spaces, punctuation, etc.).\nThe function should ignore\
    \ all empty strings.\nThe function should ignore all strings consisting of only\
    \ whitespace.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of words in the string.\nThe function should ignore all punctuation\
    \ marks and split on whitespace.\nThe function should ignore all empty strings\
    \ and return 0.", "    histogram = Dict{String, Int64}()\n    \n    for letter\
    \ in split(test)\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ >= 1 else 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters that are not spaces.", "    histogram =\
    \ Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    histogram\nend\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns the number of occurrences of each letter\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of occurrences of each letter in the string ignoring case.\nWrite a function\
    \ that takes a string and returns the number of occurrences of each letter in\
    \ the string ignoring case.\nWrite a function that takes a string and returns\
    \ the number of occurrences of each letter in the string ignoring case.\nWrite\
    \ a function that takes a string and returns the number of occurrences of each\
    \ letter in the string ignoring case.\nWrite a function that takes a string and\
    \ returns the number of occurrences of each letter in the string ignoring case.\n\
    Write a function that takes a string and returns the number of occurrences of\
    \ each letter in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of occurrences\
    \ of each letter in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of occurrences\
    \ of each letter in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of occurrences\
    \ of each letter in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of occurrences\
    \ of each letter in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of occurrences\
    \ of each letter in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of occurrences\
    \ of each letter in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of occurrences\
    \ of each letter in the string ignoring case.\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter in the string ignoring\
    \ case.\nWrite a function that takes a string and returns the number of occurrence",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a string and returns the number of times each letter appears in the string.\n\
    The function should ignore non-letters.\nThe function should ignore case when\
    \ counting.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function should ignore non-letters.\nThe function should ignore\
    \ non-letters.\nThe function ", "    histogram = Dict{String, Int64}()\n    for\
    \ letter in split(test)\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of words in it.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    letters = sort(letters)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of occurrences of each letter in the string. \nThe function should\
    \ ignore case when counting.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1\n    end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of words in it. If\
    \ there are multiple words, return a list of them.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    histogram\nend\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a dictionary of the letters with\
    \ the most repetition.\nIf several letters have the same occurrence, return all\
    \ of them.\nExample: histogram(\"a b c a b c a b a\")\nDict(\"a\" => 3, \"b\"\
    \ => 3, \"c\" => 3)", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a string and returns the most frequent letter in that string.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all non-word\
    \ characters (spaces, punctuation, etc.).\nThe function should ignore case when\
    \ counting words.\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all strings consisting of only whitespace.\nThe function should\
    \ ignore all strings consisting of only punctuation.\nThe function should ignore\
    \ all strings consisting of only digits.\nThe function should ignore all strings\
    \ consisting of only letters.\nThe function should ignore all strings consisting\
    \ of only digits.\nThe function should ignore all strings consisting of only letters.\n\
    The function should ignore all strings consisting of only digits.\nThe function\
    \ should ignore all strings consisting of only letters.\nThe function should ignore\
    \ all strings consisting of only digits.\nThe function should ignore all strings\
    \ consisting of only letters.\nThe function should ignore all strings consisting\
    \ of only digits.\nThe function should ignore all strings consisting of only letters.\n\
    The function should ignore all strings consisting of only digits.\nThe function\
    \ should ignore all strings consisting of only letters.\nThe function should ignore\
    \ all strings consisting of only digits.\nThe function should ignore all strings\
    \ consisting of only letters.\nThe function should ignore all strings consisting\
    \ of only digits.\nThe function should ignore all strings consisting of only letters.\n\
    The function should ignore all strings consisting of only digits.\nThe function\
    \ should ignore all strings consisting of only letters.\nThe function should ignore\
    \ all strings consisting of only digits.\nThe function should ignore all strings\
    \ consisting of only letters.\nThe function should ignore all strings consisting\
    \ of only digits.\nThe function should ignore all strings consisting of only letters.\n\
    The function should ignore all strings consisting of only digits.\nThe function\
    \ should ignore all strings consisting of only letters.\nThe function should ignore\
    \ all strings consisting of only digits.\nThe function should ignore all strings\
    \ consisting of only letters.\nThe function should ignore all strings consisting\
    \ of only digits.\nThe function should ignore all strings consisting of only letters.\n\
    The function should ignore all ", "    histogram = Dict{String, Int64}()\n   \
    \ letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a string and returns the number of occurrences of each letter.\
    \ \n    \n    Example:\n    >>> count_letters(\"a b c\")\n    Dict(\"a\" => 1,\
    \ \"b\" => 1, \"c\" => 1)\n    >>> count_letters(\"a b b a\")\n    Dict(\"a\"\
    \ => 2, \"b\" => 2)\n    >>> count_letters(\"a b c a b\")\n    Dict(\"a\" => 2,\
    \ \"b\" => 2)\n    >>> count_letters(\"b b b b a\")\n    Dict(\"b\" => 4)\n  \
    \  >>> count_letters(\"\")\n    Dict()", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"\
    a b c\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns a string with the first letter of each word capitalized.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in it.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\n\
    \    end\n    return histogram\nend", "    histogram = Dict()\n    letters = split(test)\n\
    \    letters = sort(letters)\n    letters = unique(letters)\n    letters = letters[2:end]\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\n\
    \    end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    \n    for letter in split(test)\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    \n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns a dictionary of the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.\nThe function should work for any string and should work for empty\
    \ strings as well.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the number of words in the\
    \ string.\nThe function should ignore all non-word characters (spaces, punctuation,\
    \ etc.).\nThe function should ignore all empty strings.\nThe function should ignore\
    \ all strings that are shorter than 3 characters.", "    histogram = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of occurrences\
    \ of each letter. \nThe function should return a dictionary where the keys are\
    \ the letters and the values are the counts.\nThe function should ignore non-letter\
    \ characters (such as punctuation).\nThe function should ignore case (uppercase\
    \ and lowercase).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-alphabetic characters (such\
    \ as punctuation).\nThe function should ignore non-", "    histogram = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a string with all\
    \ the letters replaced by their corresponding count. \nExample: \n>>> replace_letters(\"\
    a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b ", "    histogram = Dict()\n    for letter\
    \ in split(test)\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of characters in that string\
    \ that are\nletters. \nWrite a function that takes a string and returns the number\
    \ of characters in that string that are\nletters and digits. \nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are\nletters and digits.\nWrite a function that takes a string and returns the\
    \ number of characters in that string that are\nletters, digits, and spaces.\n\
    Write a function that takes a string and returns the number of characters in that\
    \ string that are\nletters, digits, spaces, and punctuation.\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are\nletters, digits, spaces, punctuation, and digits.\nWrite a function that\
    \ takes a string and returns the number of characters in that string that are\n\
    letters, digits, spaces, punctuation, and digits.\nWrite a function that takes\
    \ a string and returns the number of characters in that string that are\nletters,\
    \ digits, spaces, punctuation, and digits.\nWrite a function that takes a string\
    \ and returns the number of characters in that string that are\nletters, digits,\
    \ spaces, punctuation, and digits.\nWrite a function that takes a string and returns\
    \ the number of characters in that string that are\nletters, digits, spaces, punctuation,\
    \ and digits.\nWrite a function that takes a string and returns the number of\
    \ characters in that string that are\nletters, digits, spaces, punctuation, and\
    \ digits.\nWrite a function that takes a string and returns the number of characters\
    \ in that string that are\nletters, digits, spaces, punctuation, and digits.\n\
    Write a function that takes a string and returns the number of characters in that\
    \ string that are\nletters, digits, spaces, punctuation, and digits.\nWrite a\
    \ function that takes a string and returns the number of characters in that string\
    \ that are\nletters, digits, spaces, punctuation, and digits.\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are\nletters, digits, spaces, punctuation, and digits.\nWrite a function that\
    \ takes a string and returns the number of characters in that string that are\n\
    letters, digits, spaces, punctuation, and digits.\nWrite a function that takes\
    \ a string and returns the number of characters in that string that are\nletters,\
    \ digits, spaces, punctuation, and digits.\nWrite a function that takes a string\
    \ and returns the number of characters in that string that are\nletters, digits,\
    \ spaces, punctuation, and digits.\nWrite a function that takes a string and returns\
    \ the number of characters in that string that are\nletters, digits, spaces, punctuation,\
    \ and digits.\nWrite ", "    histogram = Dict{String, Int64}()\n    letters =\
    \ split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns a dictionary with the most common letters.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string. \nWrite a function that takes a\
    \ string and returns the number of times each letter appears in the string and\
    \ also the letter that appears the most frequently.\nWrite a function that takes\
    \ a string and returns the number of times each letter appears in the string and\
    \ also the letter that appears the most frequently and the letter that appears\
    \ the least frequently.\nWrite a function that takes a string and returns the\
    \ number of times each letter appears in the string and also the letter that appears\
    \ the most frequently and the letter that appears the least frequently and the\
    \ letter that appears the second most frequently.\nWrite a function that takes\
    \ a string and returns the number of times each letter appears in the string and\
    \ also the letter that appears the most frequently and the letter that appears\
    \ the least frequently and the letter that appears the second most frequently\
    \ and the letter that appears the third most frequently.\nWrite a function that\
    \ takes a string and returns the number of times each letter appears in the string\
    \ and also the letter that appears the most frequently and the letter that appears\
    \ the least frequently and the letter that appears the second most frequently\
    \ and the letter that appears the third most frequently and the letter that appears\
    \ the fourth most frequently.\nWrite a function that takes a string and returns\
    \ the number of times each letter appears in the string and also the letter that\
    \ appears the most frequently and the letter that appears the least frequently\
    \ and the letter that appears the second most frequently and the letter that appears\
    \ the third most frequently and the letter that appears the fourth most frequently\
    \ and the letter that appears the fifth most frequently.\nWrite a function that\
    \ takes a string and returns the number of times each letter appears in the string\
    \ and also the letter that appears the most frequently and the letter that appears\
    \ the least frequently and the letter that appears the second most frequently\
    \ and the letter that appears the third most frequently and the letter that appears\
    \ the fourth most frequently and the letter that appears the fifth most frequently\
    \ and the letter that appears the sixth most frequently.\nWrite a function that\
    \ takes a string and returns the number of times each letter appears in the string\
    \ and also the letter that appears the most frequently and the letter that appears\
    \ the least frequently and the letter that appears the second most frequently\
    \ and the letter that appears the third most frequently and the letter that appears\
    \ the fourth most frequently and the letter that appears the fifth most frequently\
    \ and the letter ", "    histogram = Dict{String, Int64}()\n    for letter in\
    \ split(test)\n        histogram[letter] = get(histogram, letter, 0) + 1\n   \
    \ return histogram\nend", "    histogram = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in it.", "    histogram = Dict{String, Int64}()\n    for\
    \ letter in split(test)\n        if histogram.has_key(letter)\n            histogram[letter]\
    \ += 1\n        else\n            histogram[letter] = 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ letters.", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for\
    \ letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function called count_letters that takes\
    \ a string and returns a dictionary with the letter as the key and the number\
    \ of times the letter appears as the value.", "    histogram = Dict()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters that are\
    \ not whitespace.", "    histogram = Dict()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not alphabetic characters. \nWrite a function that takes\
    \ a string and returns the number of alphabetic characters in the string that\
    \ are not alphabetic characters. \nWrite a function that takes a string and returns\
    \ the number of alphabetic characters in the string that are not alphabetic characters\
    \ and the number of characters in the string that are not alphabetic characters.\
    \ \nWrite a function that takes a string and returns the number of alphabetic\
    \ characters in the string that are not alphabetic characters and the number of\
    \ characters in the string that are not alphabetic characters and the number of\
    \ spaces in the string that are not alphabetic characters. \nWrite a function\
    \ that takes a string and returns the number of alphabetic characters in the string\
    \ that are not alphabetic characters and the number of characters in the string\
    \ that are not alphabetic characters and the number of spaces in the string that\
    \ are not alphabetic characters and the number of uppercase characters in the\
    \ string that are not alphabetic characters. \nWrite a function that takes a string\
    \ and returns the number of alphabetic characters in the string that are not alphabetic\
    \ characters and the number of characters in the string that are not alphabetic\
    \ characters and the number of spaces in the string that are not alphabetic characters\
    \ and the number of uppercase characters in the string that are not alphabetic\
    \ characters and the number of lowercase characters in the string that are not\
    \ alphabetic characters. \nWrite a function that takes a string and returns the\
    \ number of alphabetic characters in the string that are not alphabetic characters\
    \ and the number of characters in the string that are not alphabetic characters\
    \ and the number of spaces in the string that are not alphabetic characters and\
    \ the number of uppercase characters in the string that are not alphabetic characters\
    \ and the number of lowercase characters in the string that are not alphabetic\
    \ characters and the number of digits in each of the string's characters. \nWrite\
    \ a function that takes a string and returns the number of alphabetic characters\
    \ in the string that are not alphabetic characters and the number of characters\
    \ in the string that are not alphabetic characters and the number of spaces in\
    \ the string that are not alphabetic characters and the number of uppercase characters\
    \ in the string ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times each letter appears in the string.\n\
    The function should return a dictionary with the letters as keys and the corresponding\
    \ counts as values.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    letters.sort!\n    for letter in letters\n        if histogram[letter] ==\
    \ 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nThe function should ignore all punctuation and only count the letters\
    \ a-z.\nThe function should ignore all numbers and only count the letters a-z.\n\
    The function should ignore all special characters and only count the letters a-z.\n\
    The function should ignore all uppercase letters and only count the letters a-z.\n\
    The function should ignore all lowercase letters and only count the letters a-z.\n\
    The function should ignore all spaces and only count the letters a-z.\nThe function\
    \ should ignore all non-letter characters and only count the letters a-z.\nThe\
    \ function should ignore all empty strings and only count the letters a-z.\nThe\
    \ function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are only one character long.\nThe function should\
    \ ignore all words that are only one character long.\nThe function should ignore\
    \ all words that are only one character long.\nThe function should ignore all\
    \ words that are only one character long.\nThe function should ignore all words\
    \ that are only one character long.\nThe function should ignore all words that\
    \ are only one character long.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all words that are only one character\
    \ long.\nThe function should ignore all words that are only one character long.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore all words that are only one character long.\nThe function should\
    \ ignore all words that are only one character long.\nThe function should ignore\
    \ all words that are only one character long.\nThe function should ignore all\
    \ words that are only one character long.\nThe function should ignore all words\
    \ that are only one character long.\nThe function should ignore all words that\
    \ are only one character long.\nThe function should ignore all words that are\
    \ only one character long.\nThe function should ignore all words that are only\
    \ one character long.\nThe function should ignore all words that are only one\
    \ character long.\nThe function should ignore all words that are only one character\
    \ long.\nThe function should ignore all words that are only one character long.\n\
    The function should ignore all words that are only one character long.\nThe function\
    \ should ignore ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nThe function should ignore all punctuation and split\
    \ on spaces.\nThe function should ignore all empty strings.", "    histogram =\
    \ Dict()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ punctuation and only count the letters a-z.\nThe function should ignore all\
    \ whitespace.\nThe function should ignore all non-letter characters.\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all empty strings.\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all empty strings.\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all empty strings.\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all empty strings.\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all empty strings.\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all empty strings.\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all empty strings.\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all empty strings.\nThe function should ignore all empty strings.\n\
    The function should ignore all empty strings.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all empty strings.\nThe function\
    \ should ignore all empty strings.\n", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nThe function should ignore all punctuation and only\
    \ count the letters a-z.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    return histogram\nend", " \
    \   histogram = Dict{String, Int64}()\n    for c in test\n        if histogram[c]\
    \ == 0\n            histogram[c] = 1\n        else\n            histogram[c] +=\
    \ 1\n        end\n    end\n    histogram\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not spaces.", "    histogram = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are\nletters, and the\
    \ number of words in the string that are letters.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ punctuation and only count the letters a-z.\nThe function should ignore all\
    \ numbers and only count the letters a-z.\nThe function should ignore all special\
    \ characters and only count the letters a-z.\nThe function should ignore all whitespace\
    \ and only count the letters a-z.\nThe function should ignore all letters a-z\
    \ that are preceded by a space or punctuation mark.\nThe function should ignore\
    \ all letters a-z that are followed by a space or punctuation mark.\nThe function\
    \ should ignore all letters a-z that are preceded by a space or punctuation mark\
    \ and followed by a space or punctuation mark.\nThe function should ignore all\
    \ letters a-z that are followed by a space or punctuation mark and preceded by\
    \ a space or punctuation mark.\nThe function should ignore all letters a-z that\
    \ are preceded by a space or punctuation mark and followed by a space or punctuation\
    \ mark and are followed by a space or punctuation mark.\nThe function should ignore\
    \ all letters a-z that are followed by a space or punctuation mark and preceded\
    \ by a space or punctuation mark and are followed by a space or punctuation mark.\n\
    The function should ignore all letters a-z that are preceded by a space or punctuation\
    \ mark and followed by a space or punctuation mark and are followed by a space\
    \ or punctuation mark and are preceded by a space or punctuation mark.\nThe function\
    \ should ignore all letters a-z that are followed by a space or punctuation mark\
    \ and preceded by a space or punctuation mark and are followed by a space or punctuation\
    \ mark and are preceded by a space or punctuation mark and are followed by a space\
    \ or punctuation mark.\nThe function should ignore all letters a-z that are preceded\
    \ by a space or punctuation mark and followed by a space or punctuation mark and\
    \ are followed by a space or punctuation mark and are preceded by a space or punctuation\
    \ mark and are followed by a space or punctuation mark and are preceded by a space\
    \ or punctuation mark.\nThe function should ignore all letters a-z that are followed\
    \ by a space or punctuation mark and preceded by a space or punctuation mark and\
    \ are followed by a space or punctuation mark and are preceded by a space or punctuation\
    \ mark and are followed by a space or punctuation mark and are preceded by a space\
    \ or punctuation mark and are followed by a space ", "    histogram = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c\
    \ a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b\
    \ c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a b c a\
    \ b c a b c a b c a b c a b c a b ", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    letters.sort!()\n    for letter in letters\n \
    \       if histogram[letter] == 0\n            histogram[letter] = 1\n       \
    \ else\n            histogram[letter] += 1\n        end\n    end\n    return histogram\n\
    end", "    histogram = Dict()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string with the\
    \ first letter of each word capitalized.", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function count_letters(test::String) which returns a dictionary of the letter\
    \ with the most repetition and containing the corresponding count.\nIf several\
    \ letters have the same occurrence, return all of them.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    letters = sort(letters)\n    letters\
    \ = unique(letters)\n    for letter in letters\n        histogram[letter] = length(filter(x\
    \ -> x == letter, letters))\n    end\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each letter appears.",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ histogram[letter] == 0\n            histogram[letter] = 1\n        else\n  \
    \          histogram[letter] += 1\n        end\n    end\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    for letter in split(test)\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in it.",
  "    histogram = Dict()\n    for letter in split(test)\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter. \nThe function should\
    \ ignore case and only count letters a-z.\nThe function should ignore non-letters.\n\
    The function should ignore spaces.\nThe function should ignore punctuation.\n\
    The function should ignore numbers.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ignore non-letters.\n\
    The function should ignore non-letters.\nThe function should ", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    end\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    for c in test\n        histogram[c] = histogram.get(c, 0) + 1\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of words in the string.\n    \n    Example:\n    >>> count_words(\"a\
    \ b c\")\n    3\n    >>> count_words(\"a b b a\")\n    4\n    >>> count_words(\"\
    a b c a b\")\n    4\n    >>> count_words(\"b b b b a\")\n    4\n    >>> count_words(\"\
    \")\n    0", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of unique\
    \ characters in it.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string. \nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all empty strings.\n\
    The function should ignore all spaces.\nThe function should ignore all special\
    \ characters.\nThe function should ignore all non-alphabetic characters.\nThe\
    \ function should ignore all non-alphanumeric characters.\nThe function should\
    \ ignore all non-alphanumeric characters and spaces.\nThe function should ignore\
    \ all non-alphabetic characters and spaces.\nThe function should ignore all non-alphabetic\
    \ characters and spaces.\nThe function should ignore all non-alphabetic characters\
    \ and spaces.\nThe function should ignore all non-alphabetic characters and spaces.\n\
    The function should ignore all non-alphabetic characters and spaces.\nThe function\
    \ should ignore all non-alphabetic characters and spaces.\nThe function should\
    \ ignore all non-alphabetic characters and spaces.\nThe function should ignore\
    \ all non-alphabetic characters and spaces.\nThe function should ignore all non-alphabetic\
    \ characters and spaces.\nThe function should ignore all non-alphabetic characters\
    \ and spaces.\nThe function should ignore all non-alphabetic characters and spaces.\n\
    The function should ignore all non-alphabetic characters and spaces.\nThe function\
    \ should ignore all non-alphabetic characters and spaces.\nThe function should\
    \ ignore all non-alphabetic characters and spaces.\nThe function should ignore\
    \ all non-alphabetic characters and spaces.\nThe function should ignore all non-alphabetic\
    \ characters and spaces.\nThe function should ignore all non-alphabetic characters\
    \ and spaces.\nThe function should ignore all non-alphabetic characters and spaces.\n\
    The function should ignore all non-alphabetic characters and spaces.\nThe function\
    \ should ignore all non-alphabetic characters and spaces.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces.", "    histogram = Dict{String, Int64}()\n\
    \    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    return histogram\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all punctuation and only count the letters a-z.\nThe\
    \ function should ignore all empty words.\nThe function should ignore all words\
    \ shorter than 3 characters.\nThe function should ignore all words longer than\
    \ 20 characters.", "    histogram = Dict()\n    for letter in split(test)\n  \
    \      histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    letters\
    \ = sort(letters)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend", " \
    \   histogram = Dict{String, Int64}()\n    letters = split(test)\n    letters\
    \ = letters[2:end]\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a string and returns the number of times each letter\
    \ appears in the string.\nThe function should return an OrderedDict where the\
    \ keys are the letters and the values are the counts.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\
    \ \nThe function should ignore all non-alphabetic characters and split on whitespace.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n\
    \    return histogram\nend", "    histogram = Dict()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] ?? 0\n\
    \        histogram[letter] += 1 \n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of times each letter appears\
    \ in the string.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nThe function should ignore all punctuation and only\
    \ count the letters a-z.\nThe function should ignore all numbers and only count\
    \ the letters a-z.\nThe function should ignore all special characters and only\
    \ count the letters a-z.\nThe function should ignore all whitespace and only count\
    \ the letters a-z.\nThe function should ignore all empty strings and only count\
    \ the letters a-z.\nThe function should ignore all words that are shorter than\
    \ 3 characters.\nThe function should ignore all words that are longer than 50\
    \ characters.\nThe function should ignore all words that are longer than 50 characters\
    \ and that contain only letters a-z.\nThe function should ignore all words that\
    \ are longer than 50 characters and that contain only letters a-z and digits.\n\
    The function should ignore all words that are longer than 50 characters and that\
    \ contain only letters a-z, digits and whitespace.\nThe function should ignore\
    \ all words that are longer than 50 characters and that contain only letters a-z,\
    \ digits and whitespace.\nThe function should ignore all words that are longer\
    \ than 50 characters and that contain only letters a-z, digits and whitespace.\n\
    The function should ignore all words that are longer than 50 characters and that\
    \ contain only letters a-z, digits and whitespace.\nThe function should ignore\
    \ all words that are longer than 50 characters and that contain only letters a-z,\
    \ digits and whitespace.\nThe function should ignore all words that are longer\
    \ than 50 characters and that contain only letters a-z, digits and whitespace.\n\
    The function should ignore all words that are longer than 50 characters and that\
    \ contain only letters a-z, digits and whitespace.\nThe function should ignore\
    \ all words that are longer than 50 characters and that contain only letters a-z,\
    \ digits and whitespace.\nThe function should ignore all words that are longer\
    \ than 50 characters and that contain only letters a-z, digits and whitespace.\n\
    The function should ignore all words that are longer than 50 characters and that\
    \ contain only letters a-z, digits and whitespace.\nThe function should ignore\
    \ all words that are longer than 50 characters and that contain only letters a-z,\
    \ digits and whitespace.\nThe function should ignore all words that are longer\
    \ than 50 characters and that contain only letters a-z, digits and whitespace.\n\
    The function should ignore all words that are longer than 50 characters and that\
    \ contain ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters.", "    histogram = Dict{String, Int64}()\n    for letter\
    \ in split(test)\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not alphabetic. \nExample: \n>>> count_non_alphabetic(\"a b\
    \ c\")\n2\n>>> count_non_alphabetic(\"a b b a\")\n3\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    a b c a b\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n4\n>>> count_non_alphabetic(\"\
    b b b b a\")\n4\n>>> count_non_alphabetic(\"b ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of words in it.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise: Write a\
    \ function that takes a string and returns a dictionary of the letters with their\
    \ frequencies in the string.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    letters.sort!()\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all empty strings.\n\
    The function should ignore all whitespace.\nThe function should ignore all non-alphabetic\
    \ characters.\nThe function should ignore all non-alphanumeric characters.\nThe\
    \ function should ignore all non-letters.\nThe function should ignore all non-numbers.\n\
    The function should ignore all non-ASCII characters.\nThe function should ignore\
    \ all non-printable characters.\nThe function should ignore all non-ASCII characters\
    \ that are not in the range 32-126.\nThe function should ignore all non-printable\
    \ characters that are not in the range 32-126.\nThe function should ignore all\
    \ non-ASCII characters that are not in the range 32-126.\nThe function should\
    \ ignore all non-printable characters that are not in the range 32-126.\nThe function\
    \ should ignore all non-ASCII characters that are not in the range 32-126.\nThe\
    \ function should ignore all non-printable characters that are not in the range\
    \ 32-126.\nThe function should ignore all non-ASCII characters that are not in\
    \ the range 32-126.\nThe function should ignore all non-printable characters that\
    \ are not in the range 32-126.\nThe function should ignore all non-ASCII characters\
    \ that are not in the range 32-126.\nThe function should ignore all non-printable\
    \ characters that are not in the range 32-126.\nThe function should ignore all\
    \ non-ASCII characters that are not in the range 32-126.\nThe function should\
    \ ignore all non-printable characters that are not in the range 32-126.\nThe function\
    \ should ignore all non-ASCII characters that are not in the range 32-126.\nThe\
    \ function should ignore all non-printable characters that are not in the range\
    \ 32-126.\nThe function should ignore all non-ASCII characters that are not in\
    \ the range 32-126.\nThe function should ignore all non-printable characters that\
    \ are not in the range 32-126.\nThe function ", "    histogram = Dict()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend", " \
    \   histogram = Dict()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a string with the first letter of each word capitalized.", "   \
    \ histogram = Dict()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    histogram\nend\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that takes a string and returns the number of words in\
    \ it.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n  \
    \  for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all non-word\
    \ characters (spaces, punctuation, etc.).\nThe function should ignore all empty\
    \ strings.\nThe function should ignore all strings containing only whitespace.\n\
    The function should ignore all strings containing only punctuation.\nThe function\
    \ should ignore all strings containing only digits.\nThe function should ignore\
    \ all strings containing only lowercase letters.\nThe function should ignore all\
    \ strings containing only uppercase letters.\nThe function should ignore all strings\
    \ containing only letters a-z.\nThe function should ignore all strings containing\
    \ only letters A-Z.\nThe function should ignore all strings containing only letters\
    \ a-z and A-Z.\nThe function should ignore all strings containing only letters\
    \ a-z, A-Z and 0-9.\nThe function should ignore all strings containing only letters\
    \ a-z, A-Z, 0-9 and whitespace.\nThe function should ignore all strings containing\
    \ only letters a-z, A-Z, 0-9, punctuation and whitespace.\nThe function should\
    \ ignore all strings containing only letters a-z, A-Z, 0-9, punctuation and whitespace\
    \ and empty strings.\nThe function should ignore all strings containing only letters\
    \ a-z, A-Z, 0-9, punctuation and whitespace and empty strings and strings containing\
    \ only whitespace.\nThe function should ignore all strings containing only letters\
    \ a-z, A-Z, 0-9, punctuation and whitespace and empty strings and strings containing\
    \ only punctuation.\nThe function should ignore all strings containing only letters\
    \ a-z, A-Z, 0-9, punctuation and whitespace and empty strings and strings containing\
    \ only digits.\nThe function should ignore all strings containing only letters\
    \ a-z, A-Z, 0-9, punctuation and whitespace and empty strings and strings containing\
    \ only lowercase letters.\nThe function should ignore all strings containing only\
    \ letters a-z, A-Z, 0-9, punctuation and whitespace and empty strings and strings\
    \ containing only uppercase letters.\nThe function should ignore ", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        if histogram[letter] == 0\n            histogram[letter] = 1\n      \
    \  else\n            histogram[letter] += 1\n        end\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a dictionary with\
    \ the letters sorted alphabetically and with the number of times each letter appears.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nWrite a function that takes\
    \ a string and returns the number of characters in the string.\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in the string.\n\
    Write a function that takes a string and returns the number of lowercase letters\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of digits (0-9) in the string.\nWrite a function that takes a string and returns\
    \ the number of punctuation marks (!,@,#,$,%,^,&,*,(,),-,_,+,=,[,],{,},;,:,\"\
    ,<,>,?,/) in the string.\nWrite a function that takes a string and returns the\
    \ number of words in the string that are all lowercase.\nWrite a function that\
    \ takes a string and returns the number of words in the string that are all uppercase.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that contain at least one digit.\nWrite a function that takes a string and returns\
    \ the number of words in the string that contain at least one uppercase letter.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that contain at least one lowercase letter.\nWrite a function that takes a string\
    \ and returns the number of words in the string that contain at least one punctuation\
    \ mark.\nWrite a function that takes a string and returns the number of words\
    \ in the string that contain at least one word that is a palindrome.\nWrite a\
    \ function that takes a string and returns the number of words in the string that\
    \ contain at least one word that is a palindrome and that is a palindrome.\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that contain at least one word that is a palindrome and that is a palindrome\
    \ and that is a palindrome.\nWrite a function that takes a string and returns\
    \ the number of words in the string that contain at least one word that is a palindrome\
    \ and that is a palindrome and that is a palindrome and that is a palindrome.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that contain at least one word ", "    histogram = Dict{String, Int64}()\n \
    \   letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in it.", "  \
    \  histogram = Dict()\n    letters = split(test)\n    letters.sort!()\n    for\
    \ letter in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = histogram[letter] + 1 if histogram[letter] > 0 else\
    \ 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n    for\
    \ letter in split(test)\n        histogram[letter] = get(histogram, letter, 0)\
    \ + 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n  \
    \  for c in split(test)\n        if histogram[c] == 0\n            histogram[c]\
    \ = 1\n        else\n            histogram[c] += 1\n        end\n    end\n   \
    \ return histogram\nend", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function called count_letters\
    \ that takes a string and returns a dictionary of the letter with the most repetition\
    \ and containing the corresponding count.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict()\n    for letter in split(test)\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of characters that are not spaces.\nWrite a function\
    \ that takes a string and returns the number of characters that are not letters.\n\
    Write a function that takes a string and returns the number of characters that\
    \ are not digits.\nWrite a function that takes a string and returns the number\
    \ of characters that are not punctuation.\nWrite a function that takes a string\
    \ and returns the number of characters that are not whitespace.\nWrite a function\
    \ that takes a string and returns the number of characters that are not digits.\n\
    Write a function that takes a string and returns the number of characters that\
    \ are not punctuation.\nWrite a function that takes a string and returns the number\
    \ of characters that are not whitespace.\nWrite a function that takes a string\
    \ and returns the number of characters that are not digits.\nWrite a function\
    \ that takes a string and returns the number of characters that are not punctuation.\n\
    Write a function that takes a string and returns the number of characters that\
    \ are not whitespace.\nWrite a function that takes a string and returns the number\
    \ of characters that are not digits.\nWrite a function that takes a string and\
    \ returns the number of characters that are not punctuation.\nWrite a function\
    \ that takes a string and returns the number of characters that are not whitespace.\n\
    Write a function that takes a string and returns the number of characters that\
    \ are not digits.\nWrite a function that takes a string and returns the number\
    \ of characters that are not punctuation.\nWrite a function that takes a string\
    \ and returns the number of characters that are not whitespace.\nWrite a function\
    \ that takes a string and returns the number of characters that are not digits.\n\
    Write a function that takes a string and returns the number of characters that\
    \ are not punctuation.\nWrite a function that takes a string and returns the number\
    \ of characters that are not whitespace.\nWrite a function that takes a string\
    \ and returns the number of characters that are not digits.\nWrite a function\
    \ that takes a string and returns the number of characters that are not punctuation.\n\
    Write a function that takes a string and returns the number of characters that\
    \ are not whitespace.\nWrite a function that takes a string and returns the number\
    \ of characters that are not digits.\nWrite a function that takes a string and\
    \ returns the number of characters that are not punctuation.\nWrite a function\
    \ that takes a string and returns the number of characters that are not whitespace.\n\
    Write a function that takes a string and returns the number of characters that\
    \ are not digits.\nWrite a function that takes a string and returns the number\
    \ of characters that are not punctuation.\nWrite a function that takes a string\
    \ and ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n \
    \   for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of occurrences of each letter in the string. \nWrite\
    \ a function that takes a string and returns the letter with the most occurrences.\n\
    Write a function that takes a string and returns the letter with the least occurrences.\n\
    Write a function that takes a string and returns the letter with the most and\
    \ least occurrences.\nWrite a function that takes a string and returns the letter\
    \ with the most and least occurrences.\nWrite a function that takes a string and\
    \ returns the letter with the most and least occurrences.\nWrite a function that\
    \ takes a string and returns the letter with the most and least occurrences.\n\
    Write a function that takes a string and returns the letter with the most and\
    \ least occurrences.\nWrite a function that takes a string and returns the letter\
    \ with the most and least occurrences.\nWrite a function that takes a string and\
    \ returns the letter with the most and least occurrences.\nWrite a function that\
    \ takes a string and returns the letter with the most and least occurrences.\n\
    Write a function that takes a string and returns the letter with the most and\
    \ least occurrences.\nWrite a function that takes a string and returns the letter\
    \ with the most and least occurrences.\nWrite a function that takes a string and\
    \ returns the letter with the most and least occurrences.\nWrite a function that\
    \ takes a string and returns the letter with the most and least occurrences.\n\
    Write a function that takes a string and returns the letter with the most and\
    \ least occurrences.\nWrite a function that takes a string and returns the letter\
    \ with the most and least occurrences.\nWrite a function that takes a string and\
    \ returns the letter with the most and least occurrences.\nWrite a function that\
    \ takes a string and returns the letter with the most and least occurrences.\n\
    Write a function that takes a string and returns the letter with the most and\
    \ least occurrences.\nWrite a function that takes a string and returns the letter\
    \ with the most and least occurrences.\nWrite a function that takes a string and\
    \ returns the letter with the most and least occurrences.\nWrite a function that\
    \ takes a string and returns the letter with the most and least occurrences.\n\
    Write a function that takes a string and returns the letter with the most and\
    \ least occurrences.\nWrite a function that takes a string and returns the letter\
    \ with the most and least occurrences.\nWrite a function that takes a string and ",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nThe function\
    \ should ignore all punctuation and only count the letters a-z.\nThe function\
    \ should ignore all spaces.\nThe function should ignore all numbers.\nThe function\
    \ should ignore all special characters.\nThe function should ignore all uppercase\
    \ letters.\nThe function should ignore all lowercase letters.\nThe function should\
    \ ignore all symbols.\nThe function should ignore all non-alphabetic characters.\n\
    The function should ignore all empty strings.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.\nThe function\
    \ should ignore spaces.\nThe function should ignore capital letters.\nThe function\
    \ should ignore punctuation.\nThe function should ignore numbers.\nThe function\
    \ should ignore symbols.\nThe function should ignore non-alphabetic characters.\n\
    The function should ignore non-alphabetic characters and spaces.\nThe function\
    \ should ignore non-alphabetic characters and spaces and capital letters.\nThe\
    \ function should ignore non-alphabetic characters and spaces and capital letters\
    \ and punctuation.\nThe function should ignore non-alphabetic characters and spaces\
    \ and capital letters and punctuation and numbers.\nThe function should ignore\
    \ non-alphabetic characters and spaces and capital letters and punctuation and\
    \ numbers and symbols.\nThe function should ignore non-alphabetic characters and\
    \ spaces and capital letters and punctuation and numbers and symbols and capital\
    \ letters.\nThe function should ignore non-alphabetic characters and spaces and\
    \ capital letters and punctuation and numbers and symbols and capital letters\
    \ and punctuation.\nThe function should ignore non-alphabetic characters and spaces\
    \ and capital letters and punctuation and numbers and symbols and capital letters\
    \ and punctuation and numbers.\nThe function should ignore non-alphabetic characters\
    \ and spaces and capital letters and punctuation and numbers and symbols and capital\
    \ letters and punctuation and numbers and symbols.\nThe function should ignore\
    \ non-alphabetic characters and spaces and capital letters and punctuation and\
    \ numbers and symbols and capital letters and punctuation and numbers and symbols\
    \ and capital letters.\nThe function should ignore non-alphabetic characters and\
    \ spaces and capital letters and punctuation and numbers and symbols and capital\
    \ letters and punctuation and numbers and symbols and capital letters and punctuation.\n\
    The function should ignore non-alphabetic characters and spaces and capital letters\
    \ and punctuation and number", "    histogram = Dict{String, Int64}()\n    for\
    \ c in split(test)\n        histogram[c] = get(histogram, c, 0) + 1\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each letter appears in the string.\nThe function should ignore non-letter characters\
    \ and return an empty dictionary if there are any non-letter characters.\nThe\
    \ function should ignore case and return the dictionary in lower case.\nThe function\
    \ should ignore non-letter characters and return an empty dictionary if there\
    \ are any non-letter characters.\nThe function should ignore case and return the\
    \ dictionary in lower case.\nThe function should ignore non-letter characters\
    \ and return an empty dictionary if there are any non-letter characters.\nThe\
    \ function should ignore case and return the dictionary in lower case.\nThe function\
    \ should ignore non-letter characters and return an empty dictionary if there\
    \ are any non-letter characters.\nThe function should ignore case and return the\
    \ dictionary in lower case.\nThe function should ignore non-letter characters\
    \ and return an empty dictionary if there are any non-letter characters.\nThe\
    \ function should ignore case and return the dictionary in lower case.\nThe function\
    \ should ignore non-letter characters and return an empty dictionary if there\
    \ are any non-letter characters.\nThe function should ignore case and return the\
    \ dictionary in lower case.\nThe function should ignore non-letter characters\
    \ and return an empty dictionary if there are any non-letter characters.\nThe\
    \ function should ignore case and return the dictionary in lower case.\nThe function\
    \ should ignore non-letter characters and return an empty dictionary if there\
    \ are any non-letter characters.\nThe function should ignore case and return the\
    \ dictionary in lower case.\nThe function should ignore non-letter characters\
    \ and return an empty dictionary if there are any non-letter characters.\nThe\
    \ function should ignore case and return the dictionary in lower case.\nThe function\
    \ should ignore non-letter characters and return an empty dictionary if there\
    \ are any non-letter characters.\nThe function should ignore case and return the\
    \ dictionary in lower case.\nThe function should ignore non-letter characters\
    \ and return an empty dictionary if there are any non-letter characters.\nThe\
    \ function should ignore case and return the dictionary in lower case.\nThe function\
    \ should ignore non-letter characters and return an empty dictionary if there\
    \ are any non-letter characters.\nThe function should ignore case and return the\
    \ dictionary in lower case.\nThe function should ignore non-letter characters\
    \ and return an empty dictionary ", "    histogram = Dict{String, Int64}()\n \
    \   \n    for letter in split(test)\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    \n    return histogram\nend\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns the number of times each letter appears\
    \ in the string.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the number of words in the string.\n    \n    Example:\n    >>>\
    \ count_words(\"a b c\")\n    3\n    >>> count_words(\"a b b a\")\n    4\n   \
    \ >>> count_words(\"b b b b a\")\n    4\n    >>> count_words(\"\")\n    0\n  \
    \  \"\"\"", "    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        histogram[c] = get(histogram, c, 0) + 1\n    return histogram\nend",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ non-word characters (spaces, punctuation, etc.).\nThe function should ignore\
    \ all empty strings.\nThe function should ignore all strings consisting of only\
    \ whitespace.\nThe function should ignore all strings consisting of only a single\
    \ word.\nThe function should ignore all strings consisting of only two words.\n\
    The function should ignore all strings consisting of only three words.\nThe function\
    \ should ignore all strings consisting of only four words.\nThe function should\
    \ ignore all strings consisting of only five words.\nThe function should ignore\
    \ all strings consisting of only six words.\nThe function should ignore all strings\
    \ consisting of only seven words.\nThe function should ignore all strings consisting\
    \ of only eight words.\nThe function should ignore all strings consisting of only\
    \ nine words.\nThe function should ignore all strings consisting of only ten words.\n\
    The function should ignore all strings consisting of only eleven words.\nThe function\
    \ should ignore all strings consisting of only twelve words.\nThe function should\
    \ ignore all strings consisting of only thirteen words.\nThe function should ignore\
    \ all strings consisting of only fourteen words.\nThe function should ignore all\
    \ strings consisting of only fifteen words.\nThe function should ignore all strings\
    \ consisting of only sixteen words.\nThe function should ignore all strings consisting\
    \ of only seventeen words.\nThe function should ignore all strings consisting\
    \ of only eighteen words.\nThe function should ignore all strings consisting of\
    \ only nineteen words.\nThe function should ignore all strings consisting of only\
    \ twenty words.\nThe function should ignore all strings consisting of only twenty-one\
    \ words.\nThe function should ignore all strings consisting of only twenty-two\
    \ words.\nThe function should ignore all strings consisting of only twenty-three\
    \ words.\nThe function should ignore all strings consisting of only twenty-four\
    \ words.\nThe function should ignore all strings consisting of only twenty-five\
    \ words.\nThe function should ignore all strings consisting of ", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    letters = sort(letters)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are not letters.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = histogram[letter] + 1\
    \ if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string. \nThe function should ignore non-letter\
    \ characters and return a dictionary with the letter as the key and the number\
    \ of times it appears as the value.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    letters.sort!()\n    for letter in\
    \ letters\n        if histogram[letter] == 0\n            histogram[letter] =\
    \ 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 10\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ spaces.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram.has_key(letter)\n           \
    \ histogram[letter] += 1\n        else\n            histogram[letter] = 1\n  \
    \      end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function called count_letters\
    \ that takes a string and returns a dictionary of the letter with the most repetition\
    \ and containing the corresponding count.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ with the first letter of each word capitalized.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are uppercase letters.",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    histogram\nend\n\
    </cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces.", "    histogram = Dict()\n    for letter\
    \ in split(test)\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram.has_key(letter)\n\
    \            histogram[letter] += 1\n        else\n            histogram[letter]\
    \ = 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns a dictionary of the letter with the most repetition and containing\
    \ the corresponding count.\nIf several letters have the same occurrence, return\
    \ all of them.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nIf there are multiple words, return a list\
    \ of them.\nIf there are multiple spaces, ignore them.\nIf there are multiple\
    \ consecutive spaces, ignore them.\nIf there are multiple consecutive punctuation\
    \ marks, ignore them.\nIf there are multiple consecutive letters, ignore them.\n\
    If there are multiple consecutive numbers, ignore them.\nIf there are multiple\
    \ consecutive uppercase letters, ignore them.\nIf there are multiple consecutive\
    \ lowercase letters, ignore them.\nIf there are multiple consecutive symbols,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore them.\nIf there are multiple consecutive non-alphanumeric characters,\
    \ ignore ", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ spaces.", "    histogram = Dict()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    for letter in split(test)\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram.has_key(letter)\n\
    \            histogram[letter] += 1\n        else\n            histogram[letter]\
    \ = 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] >= 1 else 1\n    end\n    return\
    \ histogram\nend", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nWrite a function that takes\
    \ a string and returns the number of characters in the string.\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in the string.\n\
    Write a function that takes a string and returns the number of lowercase letters\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of digits (0-9) in the string.\nWrite a function that takes a string and returns\
    \ the number of punctuation marks in the string.\nWrite a function that takes\
    \ a string and returns the number of words in the string that are all lowercase.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that are all uppercase.\nWrite a function that takes a string and returns the\
    \ number of words in the string that contain at least one digit.\nWrite a function\
    \ that takes a string and returns the number of words in the string that contain\
    \ at least one uppercase letter.\nWrite a function that takes a string and returns\
    \ the number of words in the string that contain at least one lowercase letter.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that contain at least one punctuation mark.\nWrite a function that takes a string\
    \ and returns the number of words in the string that contain at least one word\
    \ that is all lowercase.\nWrite a function that takes a string and returns the\
    \ number of words in the string that contain at least one word that is all uppercase.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that contain at least one word that contains at least one digit.\nWrite a function\
    \ that takes a string and returns the number of words in the string that contain\
    \ at least one word that contains at least one uppercase letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that contain\
    \ at least one word that contains at least one lowercase letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that contain\
    \ at least one word that contains at least one punctuation mark.\nWrite a function\
    \ that takes a string and returns the number of words in the string that contain\
    \ at least one word that contains at least one word that is all lowercase.\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that contain at least one word that contains at least one word that is all uppercase.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that contain at least one word that contains at least one word that contains ",
  "    histogram = Dict{String, Int64}()\n    for c in test\n        histogram[c]\
    \ = get(histogram, c, 0) + 1\n    end\n    return histogram\nend", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend", "    histogram = Dict()\n    letters = split(test)\n    for\
    \ letter in letters\n        histogram[letter] = get(histogram, letter, 0) + 1\n\
    \    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in it.\nWrite a function that takes a string and returns\
    \ the number of spaces in it.\nWrite a function that takes a string and returns\
    \ the number of uppercase letters in it.\nWrite a function that takes a string\
    \ and returns the number of lowercase letters in it.\nWrite a function that takes\
    \ a string and returns the number of digits in it.\nWrite a function that takes\
    \ a string and returns the number of punctuation in it.\nWrite a function that\
    \ takes a string and returns the number of words in it.\nWrite a function that\
    \ takes a string and returns the number of lines in it.\nWrite a function that\
    \ takes a string and returns the number of characters in it that are not spaces.\n\
    Write a function that takes a string and returns the number of spaces in it that\
    \ are not spaces.\nWrite a function that takes a string and returns the number\
    \ of uppercase letters in it that are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lowercase letters in it that are not spaces.\n\
    Write a function that takes a string and returns the number of digits in it that\
    \ are not spaces.\nWrite a function that takes a string and returns the number\
    \ of punctuation in it that are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in it that are not spaces.\nWrite a function\
    \ that takes a string and returns the number of lines in it that are not spaces.\n\
    Write a function that takes a string and returns the number of characters in it\
    \ that are not spaces and are not uppercase letters.\nWrite a function that takes\
    \ a string and returns the number of spaces in it that are not spaces and are\
    \ not uppercase letters.\nWrite a function that takes a string and returns the\
    \ number of uppercase letters in it that are not spaces and are not uppercase\
    \ letters.\nWrite a function that takes a string and returns the number of lowercase\
    \ letters in it that are not spaces and are not uppercase letters.\nWrite a function\
    \ that takes a string and returns the number of digits in it that are not spaces\
    \ and are not uppercase letters.\nWrite a function that takes a string and returns\
    \ the number of punctuation in it that are not spaces and are not uppercase letters.\n\
    Write a function that takes a string and returns the number of words in it that\
    \ are not spaces and are not ", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] > 0 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a string with the letters sorted\
    \ alphabetically.\nExample:\n>>> sort_alphabetically(\"a b c d\")\n\"a b c d\"",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function which takes a string and returns the number of times each letter\
    \ appears in the string.\nFor example histogram(\"a b c a b\") should return Dict(\"\
    a\" => 2, \"b\" => 2, \"c\" => 1).", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a dictionary with\
    \ the letters sorted alphabetically and the number of times each letter appears.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns a string with the first letter of each word capitalized.",
  "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string.\nThe function should return a dictionary\
    \ of the letters with the number of times they appear in the string.\nExample:\n\
    >>> count_letters(\"a b c a b c\")\nDict(\"a\" => 3, \"b\" => 2, \"c\" => 1)",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not alphabetic characters.\
    \ \nExample: \n>>> count_non_alphabetic(\"a b c\")\n3\n>>> count_non_alphabetic(\"\
    a b b a\")\n4\n>>> count_non_alphabetic(\"b b b b a\")\n5", "    histogram = Dict()\n\
    \    for letter in split(test)\n        histogram[letter] = get(histogram, letter,\
    \ 0) + 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nThe function should ignore all\
    \ punctuation and only count the letters a-z.\nThe function should ignore all\
    \ empty strings.\nThe function should ignore all words that are shorter than 3\
    \ characters.\nThe function should ignore all words that are longer than 20 characters.\n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 20 characters.\nThe function should ignore all words that are longer than\
    \ 3 characters and shorter than 20 characters and that contain digits. \nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 20\
    \ characters and that contain digits.\nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 20 characters and that contain\
    \ digits and that contain uppercase letters.\nThe ", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    letters = sort(letters)\n    letters\
    \ = unique(letters)\n    for letter in letters\n        histogram[letter] = get(histogram,\
    \ letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not spaces.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns a string with all the letters sorted alphabetically. \n\
    The function should ignore the case of the letters.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        if histogram[letter]\
    \ == 0\n            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nIf there are multiple words,\
    \ return a list of them.\nIf there are no words, return 0.\nIf there are multiple\
    \ spaces, ignore them.\nIf there are multiple consecutive spaces, ignore them.\n\
    If there are multiple consecutive non-spaces, ignore them.\nIf there are multiple\
    \ consecutive non-alphanumeric characters, ignore them.\nIf there are multiple\
    \ consecutive alphanumeric characters, ignore them.\nIf there are multiple consecutive\
    \ alphanumeric characters and spaces, ignore them.\nIf there are multiple consecutive\
    \ alphanumeric characters and non-spaces, ignore them.\nIf there are multiple\
    \ consecutive alphanumeric characters and non-alphanumeric characters, ignore\
    \ them.\nIf there are multiple consecutive alphanumeric characters and non-alphanumeric\
    \ characters and spaces, ignore them.\nIf there are multiple consecutive alphanumeric\
    \ characters and non-alphanumeric characters and non-spaces, ignore them.\nIf\
    \ there are multiple consecutive alphanumeric characters and non-alphanumeric\
    \ characters and non-spaces and spaces, ignore them.\nIf there are multiple consecutive\
    \ alphanumeric characters and non-alphanumeric characters and non-spaces and non-spaces,\
    \ ignore them.\nIf there are multiple consecutive alphanumeric characters and\
    \ non-alphanumeric characters and non-spaces and non-spaces and spaces, ignore\
    \ them.\nIf there are multiple consecutive alphanumeric characters and non-alphanumeric\
    \ characters and non-spaces and non-spaces and non-spaces, ignore them.\nIf there\
    \ are multiple consecutive alphanumeric characters and non-alphanumeric characters\
    \ and non-spaces and non-spaces and non-spaces and spaces, ignore them.\nIf there\
    \ are multiple consecutive alphanumeric characters and non-alphanumeric characters\
    \ and non-spaces and non-spaces and non-spaces and non-spaces, ignore them.\n\
    If there are multiple consecutive alphanumeric characters and non-alphanumeric\
    \ characters and non-spaces and non-spaces and non-spaces and non-space", "  \
    \  histogram = Dict{String, Int64}()\n    for letter in split(test)\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string.\nThe function should ignore non-letter\
    \ characters and return a dictionary with the letter as the key and the number\
    \ of times the letter appears as the value.\nThe function should ignore case when\
    \ counting.", "    histogram = Dict{String, Int64}()\n    letters = split(test)\n\
    \    for letter in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string with the first letter of each word capitalized.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not letters.", "    histogram = Dict{String,\
    \ Int64}()\n    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.4>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes a string and returns the number of times each letter appears\
    \ in the string.", "    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        histogram[c] = get(histogram, c, 0) + 1\n    return histogram\nend\n\
    </cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string that are\nletters (upper or lower case). \nWrite a function that takes\
    \ a string and returns the number of characters in that string that are\ndigits\
    \ (0-9). \nWrite a function that takes a string and returns the number of characters\
    \ in that string that are\npunctuation (!, @, #, $, %, and so on). \nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are\nspaces (\" \", \\n, \\t, \\r, and so on). \nWrite a function that takes\
    \ a string and returns the number of characters in that string that are\nalphanumeric\
    \ (A-Z, a-z, 0-9). \nWrite a function that takes a string and returns the number\
    \ of characters in that string that are\nalphanumeric and spaces (A-Z, a-z, 0-9,\
    \ \" \", \\n, \\t, \\r, and so on). \nWrite a function that takes a string and\
    \ returns the number of characters in that string that are\nalphanumeric and punctuation\
    \ (A-Z, a-z, 0-9, !, @, #, $, %, and so on). \nWrite a function that takes a string\
    \ and returns the number of characters in that string that are\nalphanumeric and\
    \ spaces and punctuation (A-Z, a-z, 0-9, \" \", \\n, \\t, \\r, and so on). \n\
    Write a function that takes a string and returns the number of characters in that\
    \ string that are\nalphanumeric and punctuation and spaces (A-Z, a-z, 0-9, !,\
    \ @, #, $, %, and so on). \nWrite a function that takes a string and returns the\
    \ number of characters in that string that are\nalphanumeric and spaces and punctuation\
    \ (A-Z, a-z, 0-9, \" \", \\n, \\t, \\r, and so on). \nWrite a function that takes\
    \ a string and returns the number of characters in that string that are\nalphanumeric\
    \ and spaces and punctuation (A-Z, a-z, 0-9, !, @, #, $, %, and so on). \nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string that are\nalphanumer", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        histogram[letter] = histogram[letter]\
    \ + 1 if histogram[letter] >= 1 else 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a string and returns the number\
    \ of characters in the string\nthat are not in the alphabet.\nExample:\n>>> count_non_alphabet(\"\
    a b c\")\n3\n>>> count_non_alphabet(\"a b b a\")\n2\n>>> count_non_alphabet(\"\
    b b b b a\")\n4", "    histogram = Dict{String, Int64}()\n    for c in split(test)\n\
    \        histogram[c] = get(histogram, c, 0) + 1\n    return histogram\nend\n\
    </cell>\n<code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters.", "    histogram = Dict{String, Int64}()\n    letters\
    \ = split(test)\n    for letter in letters\n        if histogram[letter] == 0\n\
    \            histogram[letter] = 1\n        else\n            histogram[letter]\
    \ += 1\n        end\n    end\n    return histogram\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nThe function should ignore all non-word characters (spaces, punctuation,\
    \ etc.).\nThe function should ignore all empty strings.\nThe function should ignore\
    \ all strings consisting of only one word.\nThe function should ignore all strings\
    \ consisting of only one word and one space.\nThe function should ignore all strings\
    \ consisting of only one word and one space and one punctuation mark.\nThe function\
    \ should ignore all strings consisting of only one word and one space and one\
    \ punctuation mark and one number.\nThe function should ignore all strings consisting\
    \ of only one word and one space and one punctuation mark and one number and one\
    \ letter.\nThe function should ignore all strings consisting of only one word\
    \ and one space and one punctuation mark and one number and one letter and one\
    \ space.\nThe function should ignore all strings consisting of only one word and\
    \ one space and one punctuation mark and one number and one letter and one space\
    \ and one punctuation mark.\nThe function should ignore all strings consisting\
    \ of only one word and one space and one punctuation mark and one number and one\
    \ letter and one space and one punctuation mark and one number.\nThe function\
    \ should ignore all strings consisting of only one word and one space and one\
    \ punctuation mark and one number and one letter and one space and one punctuation\
    \ mark and one number and one letter.\nThe function should ignore all strings\
    \ consisting of only one word and one space and one punctuation mark and one number\
    \ and one letter and one space and one punctuation mark and one number and one\
    \ letter and one space.\nThe function should ignore all strings consisting of\
    \ only one word and one space and one punctuation mark and one number and one\
    \ letter and one space and one punctuation mark and one number and one letter\
    \ and one space and one punctuation mark.\nThe function should ignore all strings\
    \ consisting of only one word and one space and one punctuation mark and one number\
    \ and one letter and one space and one punctuation mark and one number and one\
    \ letter and one space and one punctuation mark and one number.\nThe function\
    \ should ignore all strings consisting of only one word and one space and one\
    \ punctuation mark and one number and one letter and one space and one punctuation\
    \ mark and one number and one letter and one space and one punctuation mark and\
    \ one number and one letter.\nThe function should ignore all strings consisting\
    \ of only one word and one space and one punctuation mark and one number and ",
  "    histogram = Dict{String, Int64}()\n    \n    for letter in split(test)\n  \
    \      histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    \n    return\
    \ histogram\nend", "    histogram = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    return histogram\n\
    end\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b c\")\n</cell>\n<code\
    \ language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are\nnot in the alphabet (a to z).", "    histogram = Dict{String,\
    \ Int64}()\n    for c in split(test)\n        histogram[c] = get(histogram, c,\
    \ 0) + 1\n    return histogram\nend", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = histogram[letter] + 1 if histogram[letter] > 0 else 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each letter appears in the string.", "    histogram\
    \ = Dict{String, Int64}()\n    letters = split(test)\n    for letter in letters\n\
    \        histogram[letter] = get(histogram, letter, 0) + 1\n    end\n    return\
    \ histogram\nend\n</cell>\n<code language=julia-1.0>\nhistogram(\"a b c\")\n</cell>\n\
    <code language=julia-1.0>\nhistogram(\"a b b a\")\n</cell>\n<code language=julia-1.0>\n\
    histogram(\"a b c a b\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"b b\
    \ b b a\")\n</cell>\n<code language=julia-1.0>\nhistogram(\"\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a dictionary with\
    \ the characters as keys and the number of times each character appears in the\
    \ string as values.", "    histogram = Dict{String, Int64}()\n    for letter in\
    \ split(test)\n        histogram[letter] = get(histogram, letter, 0) + 1\n   \
    \ end\n    return histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ number of characters in the string that are not letters.", "    histogram =\
    \ Dict{String, Int64}()\n    for letter in split(test)\n        if histogram.has_key(letter)\n\
    \            histogram[letter] += 1\n        else\n            histogram[letter]\
    \ = 1\n        end\n    end\n    return histogram\nend\n</cell>\n<code language=julia-0.6>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-0.6>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-0.6>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-0.6>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-0.6>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not alphabetic characters.",
  "    histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        histogram[letter] = histogram[letter] + 1 if histogram[letter]\
    \ > 0 else 1\n    end\n    return histogram\nend\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"a b c\")\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b b a\"\
    )\n</cell>\n<code language=julia-1.4>\nhistogram(\"a b c a b\")\n</cell>\n<code\
    \ language=julia-1.4>\nhistogram(\"b b b b a\")\n</cell>\n<code language=julia-1.4>\n\
    histogram(\"\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nWrite a function that takes\
    \ a string and returns the number of characters in the string.\nWrite a function\
    \ that takes a string and returns the number of uppercase letters in the string.\n\
    Write a function that takes a string and returns the number of lowercase letters\
    \ in the string.\nWrite a function that takes a string and returns the number\
    \ of digits (0-9) in the string.\nWrite a function that takes a string and returns\
    \ the number of punctuation marks (!, ?, ., ;, :) in the string.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a capital letter.\nWrite a function that takes a string and returns the\
    \ number of words in the string that start with a lowercase letter.\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with a digit.\nWrite a function that takes a string and returns the number of\
    \ words in the string that start with a punctuation mark.\nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ a word that has two or more letters.\nWrite a function that takes a string and\
    \ returns the number of words in the string that start with a word that has three\
    \ or more letters.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a word that has four or more letters.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with a word that has five or more letters.\nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ a word that has six or more letters.\nWrite a function that takes a string and\
    \ returns the number of words in the string that start with a word that has seven\
    \ or more letters.\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with a word that has eight or more letters.\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with a word that has nine or more letters.\nWrite a function that\
    \ takes a string and returns the number of words in the string that start with\
    \ a word that has ten or more letters.\nWrite a function that takes a ", "   \
    \ histogram = Dict{String, Int64}()\n    letters = split(test)\n    for letter\
    \ in letters\n        if histogram[letter] == 0\n            histogram[letter]\
    \ = 1\n        else\n            histogram[letter] += 1\n        end\n    end\n\
    \    return histogram\nend\n</cell>\n<code language=julia-1.3>\nhistogram(\"a\
    \ b c\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.3>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.3>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.3>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe function should ignore all punctuation\
    \ and only count the letters a-z.\nThe function should ignore all numbers and\
    \ only count the letters a-z.\nThe function should ignore all special characters\
    \ and only count the letters a-z.\nThe function should ignore all whitespace and\
    \ only count the letters a-z.\nThe function should ignore all uppercase and only\
    \ count the letters a-z.\nThe function should ignore all lowercase and only count\
    \ the letters a-z.\nThe function should ignore all non-alphabetic characters and\
    \ only count the letters a-z.\nThe function should ignore all non-alphabetic characters\
    \ and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letters a-z.\nThe function should ignore all non-alphabetic\
    \ characters and only count the letter", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"a b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b c\
    \ a b\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"b b b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"\")\n</cell>\n<text>\nExercise\nWrite a\
    \ function called count_letters that takes a string and returns the number of\
    \ times each letter appears in the string.", "    histogram = Dict{String, Int64}()\n\
    \    letters = split(test)\n    for letter in letters\n        histogram[letter]\
    \ = get(histogram, letter, 0) + 1\n    end\n    return histogram\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are uppercase letters.", "    histogram = Dict{String,\
    \ Int64}()\n    for c in test\n        histogram[c] = get(histogram, c, 0) + 1\n\
    \    end\n    histogram\nend\n</cell>\n<code language=julia-1.5>\nhistogram(\"\
    a b c\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"a b b a\")\n</cell>\n\
    <code language=julia-1.5>\nhistogram(\"a b c a b\")\n</cell>\n<code language=julia-1.5>\n\
    histogram(\"b b b b a\")\n</cell>\n<code language=julia-1.5>\nhistogram(\"\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function which takes a string and returns\
    \ the number of characters in the string which are\ndigits. If the string contains\
    \ other characters, return 0."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
