name: HumanEval_121_solution
language: jl
prompt: "\"\"\"Given a non-empty list of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n    \n\n    Examples\n    >>> solution([5,\
  \ 8, 7, 1])\n    12\n    >>> solution([3, 3, 3, 3, 3])\n    9\n    >>> solution([30,\
  \ 13, 24, 321])\n    0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
  \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
  \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4,\
  \ 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13,\
  \ 2, 9]) == 3)\nend\n"
completions: ["    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the\
    \ even numbers in a list", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n \
    \   odds = lst[findall(x -> x % 2 != 0, lst)]\n    sum(filter(x -> x % 2 == 1,\
    \ odds))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number\
    \ of elements in a list that satisfy a predicate.", "    evens = filter(x -> x\
    \ % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x in odds, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum even numbers in a list\n\
    Write a function that returns the sum of all the even numbers in a given list.",
  "    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nNow let's\
    \ use recursion to solve the problem of finding the sum of all even numbers in\
    \ a given list. We'll start by writing a function that takes in a list of integers\
    \ and returns the sum of all even numbers in the list. We'll then use recursion\
    \ to solve the problem by calling the function on all numbers in the list except\
    \ the first.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n         \
    \   sum += i\n        end\n    end\n    return sum\nend", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return\
    \ sum(evens) + sum(odds)\nend", "    evens = filter(x -> x % 2 == 0, lst)\n  \
    \  odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1,\
    \ odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7,\
    \ 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13,\
    \ 24, 321]) == 0\n</cell>\n<text>\nPart II: More on maps and filtering", "   \
    \ sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n     \
    \   end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum Pairs\nGiven\
    \ a list of numbers, return a list of all pairs of numbers where the sum of the\
    \ numbers is equal to a given target.", "    \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nExercise 4\nWrite a function that returns the product of\
    \ the even elements in a list. For example, given [5, 8, 7, 1], return 50.", " \
    \   evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum even and odd\
    \ numbers in a vector", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds\
    \ = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1,\
    \ odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: More on lists\n\
    Lists are a core data structure in Julia. Lists are ordered sequences of elements.\
    \ Lists are mutable. Lists are heterogeneous. Lists are indexed by numbers. Lists\
    \ are mutable. Lists are heterogeneous. Lists are indexed by numbers. Lists are\
    \ mutable. Lists are heterogeneous. Lists are indexed by numbers. Lists are mutable.\
    \ Lists are heterogeneous. Lists are indexed by numbers. Lists are mutable. Lists\
    \ are heterogeneous. Lists are indexed by numbers. Lists are mutable. Lists are\
    \ heterogeneous. Lists are indexed by numbers. Lists are mutable. Lists are heterogeneous.\
    \ Lists are indexed by numbers. Lists are mutable. Lists are heterogeneous. Lists\
    \ are indexed by numbers. Lists are mutable. Lists are heterogeneous. Lists are\
    \ indexed by numbers. Lists are mutable. Lists are heterogeneous. Lists are indexed\
    \ by numbers. Lists are mutable. Lists are heterogeneous. Lists are indexed by\
    \ numbers. Lists are mutable. Lists are heterogeneous. Lists are indexed by numbers.\
    \ Lists are mutable. Lists are heterogeneous. Lists are indexed by numbers. Lists\
    \ are mutable. Lists are heterogeneous. Lists are indexed by numbers. Lists are\
    \ mutable. Lists are heterogeneous. Lists are indexed by numbers. Lists are mutable.\
    \ Lists are heterogeneous. Lists are indexed by numbers. Lists are mutable. Lists\
    \ are heterogeneous. Lists are indexed by numbers. Lists are mutable. Lists are\
    \ heterogeneous. Lists are indexed by numbers. Lists are mutable. Lists are heterogeneous.\
    \ Lists are indexed by numbers. Lists are mutable. Lists are heterogeneous. Lists\
    \ are indexed by numbers. Lists are mutable. Lists are heterogeneous. Lists are\
    \ indexed by numbers. Lists are mutable. Lists are heterogeneous. Lists are indexed\
    \ by numbers. Lists are mutable. Lists are heterogene", "    sum = 0\n    for\
    \ i in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ is a function that calls itself. A recursive function can call itself as many\
    \ times as it wants. A recursive function can call itself as many times as it\
    \ wants. A recursive function can call itself as many times as it wants. A recursive\
    \ function can call itself as many times as it wants. A recursive function can\
    \ call itself as many times as it wants. A recursive function can call itself\
    \ as many times as it wants. A recursive function can call itself as many times\
    \ as it wants. A recursive function can call itself as many times as it wants.\
    \ A recursive function can call itself as many times as it wants. A recursive\
    \ function can call itself as many times as it wants. A recursive function can\
    \ call itself as many times as it wants. A recursive function can call itself\
    \ as many times as it wants. A recursive function can call itself as many times\
    \ as it wants. A recursive function can call itself as many times as it wants.\
    \ A recursive function can call itself as many times as it wants. A recursive\
    \ function can call itself as many times as it wants. A recursive function can\
    \ call itself as many times as it wants. A recursive function can call itself\
    \ as many times as it wants. A recursive function can call itself as many times\
    \ as it wants. A recursive function can call itself as many times as it wants.\
    \ A recursive function can call itself as many times as it wants. A recursive\
    \ function can call itself as many times as it wants. A recursive function can\
    \ call itself as many times as it wants. A recursive function can call itself\
    \ as many times as it wants. A recursive function can call itself as many times\
    \ as it wants. A recursive function can call itself as many times as it wants.\
    \ A recursive function can call itself as many times as it wants. A recursive\
    \ function can call itself as many times as it wants. A recursive function can\
    \ call itself as many times as it wants. A recursive function can call itself\
    \ as many times as it wants. A recursive function can call itself as many times\
    \ as it wants. A recursive function can call itself as many times as it wants.\
    \ A recursive function can call itself as ", "    evens = lst[findall(x -> x %\
    \ 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part II: Recursion\nRecursion is a powerful tool for solving problems that involve\
    \ repeating a problem with smaller inputs. For example, if we wanted to find the\
    \ sum of all numbers from 1 to $n$ that are divisible by 3, we could write a function\
    \ that recursively called itself until it reached the base case:", "    sum =\
    \ 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum even numbers in a list",
  "    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum All Numbers\
    \ Except Self\nWrite a function that returns the sum of all integers in a given\
    \ range except the number itself. For example, if the given range is between 1\
    \ and 100, then your function should return 65. If the given range is between\
    \ -10 and -9, then your function should return -55.", "    evens = filter(x ->\
    \ x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return\
    \ sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a list that satisfy a condition. For example, how many numbers\
    \ in a list are greater than 5?", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x -> x %\
    \ 2 == 1, evens)) + sum(filter(x -> x % 2 != 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Boolean Functions\n\
    Boolean functions are a type of mathematical function that operates on Boolean\
    \ values, and are often used to test whether a certain condition is true or false.\
    \ For example, we can use them to test whether a number is even or odd:", "  \
    \  evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x ->\
    \ x % 2 != 0, lst)])\n    return odd + sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Palindrome\
    \ Partitioning", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n     \
    \       sum += x\n        end\n    end\n    return sum\nend", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@time solution(vec(primes))\n\
    </cell>\n<text>\nSolution 2\nThis solution takes advantage of the fact that Julia\
    \ is lazy and only evaluates what is needed.", "    \n    sum = 0\n    for i in\
    \ lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24,\
    \ 321]) == 0\n</cell>\n<text>\nPart III. Sum even numbers in a vector", "    evens\
    \ = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n  \
    \  return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be useful in many\
    \ situations, such as when you need to perform an operation on a set of data,\
    \ but you do not know in advance how many times the function will need to recurse.\
    \ For example, consider the following function:", "    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    Now that we have seen the basics of recursion, let's see how we can use it to\
    \ solve problems more complicated than addition.", "    sum = 0\n    for i in\
    \ lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n    return\
    \ sum\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Palindrome Partitioning\nGiven\
    \ a string, find all possible palindrome partitions of that string.", "    \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    Now that we have seen how recursion works, let's see how it can be used in Julia.",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 ==\
    \ 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Palindrome numbers\nA palindromic\
    \ number reads the same backward as forward, e.g. 321 is a palindrome while 3211\
    \ is not (0011 is not a palindrome).", "    \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart III. Sum All Numbers Except Self\nGiven a non-empty\
    \ vector of numbers, return a vector of the sum of all of the numbers in the vector\
    \ except the number itself.", "    sum = 0\n    for i in lst\n        if i%2 ==\
    \ 1\n            sum += i\n        end\n    end\n    return sum\nend", "    \n\
    \    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum All Numbers\
    \ Disappeared in an Array", "    sum = 0\n    for i in lst\n        if i%2 ==\
    \ 1\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code\
    \ language=julia-1.0>\n@code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns the number of elements\
    \ that are less than or equal to 10.", "    sum = 0\n    for x in lst\n      \
    \  if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart III. Sum even numbers in a list\nGiven a non-empty\
    \ list of integers, return a new list containing all of the even numbers from\
    \ the original list. \n    ", "    sum = 0\n    for x in lst\n        if x % 2\
    \ == 1\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Recursion\nA recursive function is a function that calls itself. This\
    \ can be very useful in many situations. Here is an example of a recursive fibonacci\
    \ function:", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    sum(filter(x -> x % 2 == 1, even))\nend\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes a list of numbers and returns the\
    \ sum of the numbers in the list. \nIf there are no numbers in the list, return\
    \ 0.\nIf there are multiple numbers in the list, return the sum of the numbers\
    \ in the list.", "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x\
    \ -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1, even))\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the number of elements that are less than or equal to each of the numbers in\
    \ the vector.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Palindrome numbers\nA palindromic\
    \ number reads the same backward as forward, e.g. 321 is a palindrome while 321\
    \ is not the reverse of 321.", "    sum = 0\n    for i in lst\n        if i%2\
    \ == 1\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of the even elements that\
    \ are in odd positions.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part II: Recursion\nA recursive function is a function that calls itself. This\
    \ can be useful in some cases, such as when you need to perform a calculation\
    \ on a large amount of data, but you do not want to have to write out the code\
    \ for the entire calculation yourself.", "    evens = lst[findall(x -> x % 2 ==\
    \ 1, lst)]\n    odds = lst[findall(x -> x % 2 != 1, lst)]\n    return sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion", "    sum = 0\n   \
    \ for i in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum All Numbers Except Self\n\
    Given a non-empty vector of numbers, return a vector of the sum of all of the\
    \ numbers in the vector except the number itself.", "    evens = filter(x -> x\
    \ % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part 4: Recursion\nA recursive function is a function that calls itself. A recursive\
    \ function can have one or more base cases. A base case is a case where the function\
    \ does not call itself. A recursive function can have one or more recursive cases.\
    \ A recursive case is a case where the function calls itself. A recursive function\
    \ can have one or more base cases. A base case is a case where the function does\
    \ not call itself. A recursive function can have one or more recursive cases.\
    \ A recursive case is a case where the function calls itself. A recursive function\
    \ can have one or more base cases. A base case is a case where the function does\
    \ not call itself. A recursive function can have one or more recursive cases.\
    \ A recursive case is a case where the function calls itself. A recursive function\
    \ can have one or more base cases. A base case is a case where the function does\
    \ not call itself. A recursive function can have one or more recursive cases.\
    \ A recursive case is a case where the function calls itself. A recursive function\
    \ can have one or more base cases. A base case is a case where the function does\
    \ not call itself. A recursive function can have one or more recursive cases.\
    \ A recursive case is a case where the function calls itself. A recursive function\
    \ can have one or more base cases. A base case is a case where the function does\
    \ not call itself. A recursive function can have one or more recursive cases.\
    \ A recursive case is a case where the function calls itself. A recursive function\
    \ can have one or more base cases. A base case is a case where the function does\
    \ not call itself. A recursive function can have one or more recursive cases.\
    \ A recursive case is a case where the function calls itself. A recursive function\
    \ can have one or more base cases. A base case is a case where the function does\
    \ not call itself. A recursive function can have one or more recursive cases.\
    \ A recursive case is a case where the function calls itself. A recursive function\
    \ can have one or more base cases. A base case is a case where the function does\
    \ not call itself. A recursive function can have one or more recursive cases.\
    \ A recursive case is a case where the function calls itself. A recursive function\
    \ can have one or more base cases. A base case is a case where the function does\
    \ not call itself. A recursive function can have one or more recursive cases.\
    \ A recursive case is a case where the function calls itself. A recursive function\
    \ can have one or more base case", "    sum = 0\n    for i in lst\n        if\
    \ i%2 == 1\n            sum += i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n\
    <text>\nPart III. Sum all the even numbers in a list", "    \n    sum = 0\n  \
    \  for i in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times the number $n$ is divisible by $k$. For example, if the\
    \ number $n$ is 12 and the number $k$ is 3, then the function should return 3.",
  "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n\
    \    sum(filter(x -> x % 2 == 1, even))\nend\n</cell>\n<text>\nProblem 9\nWrite\
    \ a function that returns the number of times a given number appears in a given\
    \ list.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x\
    \ % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum all the even numbers in a list\nWrite a function that returns the\
    \ sum of all the even numbers in a given list.", "    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function is a function that\
    \ calls itself. This can be very useful in many situations. For example, consider\
    \ the Fibonacci sequence:", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odds = lst[findall(x -> x % 2 != 0, lst)]\n    \n    sum(filter(x -> x %\
    \ 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the number of positive integers less\
    \ than or equal to n (that is, the sum of all the positive integers less than\
    \ or equal to n).", "    sum = 0\n    for i in lst\n        if i%2 == 1\n    \
    \        sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all of the odd elements that are in even positions.", "    sum = 0\n    for\
    \ x in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all even numbers in a list\n\
    Write a function that returns the sum of all the even numbers in a given list.",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    \n    return sum(evens) + sum(odds)\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the product of the even numbers in a\
    \ list.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    Now that we've seen how recursion works, let's see how we can use it to solve\
    \ a problem that doesn't fit well into any of the other solutions.", "    sum\
    \ = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend", "    evens = filter(x -> x % 2 == 0, lst)\n  \
    \  odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function is a function that\
    \ calls itself. A recursive function can have two types of inputs: base cases\
    \ and recursive cases.", "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x\
    \ -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 == 1, even))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of times the value 1 appears\
    \ in the list [1, 2, 3, 1, 1]. Your function should return a value of 2.", " \
    \   \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Recursion\n\
    A recursive function has two parts:", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    \n    sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n\
    <text>\nPart II: More on maps and filtering\nmap\nmap is a higher-order function\
    \ that takes a function and applies it to every element of a collection. map returns\
    \ a new collection that is the result of applying the function to each element\
    \ in the original collection. In Julia, map returns a new collection that is similar\
    \ to the original collection, but with the function applied to each element. For\
    \ example, map can be used to apply a function to every element of a collection:",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the product of all of the numbers in a given list.", " \
    \   \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number\
    \ of times a value appears in a list. ", "    sum = 0\n    for x in lst\n    \
    \    if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function is a function that\
    \ calls itself. This can be very powerful for solving problems that involve looping\
    \ or recursion.", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n    \
    \        sum += x\n        end\n    end\n    return sum\nend", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <code language=julia-1.4>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a given list.", "    \n    sum = 0\n    \n    for x in lst\n        if x\
    \ % 2 == 1\n            sum += x\n        end\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart III. Sum even numbers in an array", "    sum = 0\n\
    \    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the even numbers in a\
    \ list\nGiven a non-empty list of integers, return a new list containing all of\
    \ the even numbers from the original list. \n    \n    ", "    \n    sum = 0\n\
    \    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of the even elements\
    \ in a given list.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ sum of all of the odd elements that are in even positions.", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum All Numbers Disappeared in an Array", "    sum = 0\n    for i in\
    \ lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n    return\
    \ sum\nend", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, even) + filter(x\
    \ -> x % 2 != 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum square difference\nGiven\
    \ a non-empty list of integers, return a list of squared differences between the\
    \ consecutive elements.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds\
    \ = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x % 2 == 1,\
    \ odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7,\
    \ 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13,\
    \ 24, 321]) == 0\n</cell>\n<text>\nPart II: More on maps and filters \nmaps and\
    \ filters are extremely useful tools in Julia. Here are some examples:", "   \
    \ evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nSolution\
    \ 2", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    \n    sum(evens) + sum(odds)\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of elements in a list that\
    \ satisfy a predicate.", "    \n    sum = 0\n    for x in lst\n        if x %\
    \ 2 == 1\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part II: More on lists\nThe previous sections introduced some basic data structures,\
    \ such as lists and tuples. In this section, we will introduce more advanced data\
    \ structures such as dictionaries and sets. We will also introduce a package called\
    \ DataStructures.jl that has many of these data structures implemented for us.",
  "    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum Pairs\nGiven\
    \ a vector of positive integers, return a new vector consisting of the sums of\
    \ each pair of numbers.", "    even = lst[findall(x -> x % 2 == 0, lst)]\n   \
    \ odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 ==\
    \ 1, even) + filter(x -> x % 2 != 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(vec(collect(1:1000000)));\n</cell>\n<text>\nProblem 3\nWrite a\
    \ Julia function called solution that accepts a vector of integers and returns\
    \ the sum of the integers in the vector that are divisible by 3.", "    sum =\
    \ 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum Pairs\nGiven a collection\
    \ of numbers, return a new collection of numbers that includes the sum of the\
    \ two numbers adjacent to each other in the original collection.", "    evens\
    \ = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n  \
    \  return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nPart 3: Recursion\nA recursive function can be defined\
    \ as follows:", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n      \
    \      sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the product\
    \ of all even elements in a given list.", "    even = filter(x -> x % 2 == 0,\
    \ lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x %\
    \ 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8,\
    \ 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nProblem 8\nWrite a function that returns the number of times the number\
    \ $n$ appears in the list $l$.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x -> x %\
    \ 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum Pairs\n\
    Given a collection of numbers, return all pairs of numbers whose sum is equal\
    \ to a given target.", "    \n    sum = 0\n    for i in lst\n        if i%2 ==\
    \ 1\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Problem 7: Find the sum of the numbers in the array, except ignore sections of\
    \ numbers starting with a 6 and extending to the next 9 (every 6 will be followed\
    \ by at least one 9). Return 0 for no numbers.", "    \n    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of the even elements in a list. For example, given [5, 8, 7, 1],\
    \ return 50.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x\
    \ -> x % 2 != 0, lst)])\n    return odd + sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(lst)\n</cell>\n<text>\nPart II: Recursion\nNow let's try recursion!",
  "    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Recursion\n\
    A recursive function is a function that calls itself. A recursive function can\
    \ have two types of recursive calls: base cases and recursive cases.", "    evens\
    \ = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n  \
    \  \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum square\
    \ difference\nGiven a non-empty list of integers, return a list of squared differences\
    \ between the consecutive elements.", "    \n    sum = 0\n    for x in lst\n \
    \       if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24,\
    \ 321]) == 0\n</cell>\n<text>\nPart III. Sum Pairs\nGiven a collection of numbers,\
    \ return a list of all pairs (a, b) where a < b and pairs have the same sum.",
  "    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nPart 2\nWrite a function that takes in a list of numbers\
    \ and returns the number of even and odd numbers in the list. \nFor example, given\
    \ [5, 8, 7, 1], your function should return 2 because there are 2 even numbers\
    \ and 1 odd number. \nWrite a second function that takes in a list of numbers\
    \ and returns the number of even and odd numbers in the list. \nFor example, given\
    \ [3, 3, 3, 3, 3], your function should return 4 because there are 4 even numbers\
    \ and 3 odd numbers. \nWrite a third function that takes in a list of numbers\
    \ and returns the number of even and odd numbers in the list. \nFor example, given\
    \ [30, 13, 24, 321], your function should return 0 because there are no even or\
    \ odd numbers in the list. \nWrite a fourth function that takes in a list of numbers\
    \ and returns the number of even and odd numbers in the list. \nFor example, given\
    \ [5, 8, 7, 1, 3], your function should return 1 because there are 1 even number\
    \ and 1 odd number. \nWrite a fifth function that takes in a list of numbers and\
    \ returns the number of even and odd numbers in the list. \nFor example, given\
    \ [5, 8, 7, 1, 3, 3], your function should return 2 because there are 2 even numbers\
    \ and 2 odd numbers. ", "    evens = filter(x -> x % 2 == 0, lst)\n    odds =\
    \ filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odds))\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that returns the product of\
    \ all the even numbers in a list.", "    sum = 0\n    for i in lst\n        if\
    \ i%2 == 1\n            sum += i\n        end\n    end\n    return sum\nend",
  "    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function has two parts:", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: More on lists\nWe have seen that lists are a useful\
    \ data structure for organizing data. However, lists are also a useful data structure\
    \ for organizing computations. In this section, we will learn about two more data\
    \ structures: sets and dictionaries.", "    evens = lst[findall(x -> x % 2 ==\
    \ 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x\
    \ -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 == 0, evens))\nend\n</cell>\n\
    <text>\nProblem 9\nWrite a function that returns the number of elements in a list\
    \ that satisfy a predicate p.", "    sum = 0\n    for i in lst\n        if i%2\
    \ == 1\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Problem 7", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ can be defined recursively. A recursive function calls itself. A recursive function\
    \ has two parts:", "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part II: More on Vectors", "    even = filter(x -> x % 2 == 0, lst)\n    odd =\
    \ filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odd))\n\
    end\n</cell>\n<text>\nProblem 7\nWrite a function that returns a list of all numbers\
    \ between 1 and a given number that have no duplicates.", "    sum = 0\n    for\
    \ i in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the product of the even elements in a list. For example, given [5, 8, 7, 1],\
    \ return 50.", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n       \
    \     sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. A recursive function can\
    \ have one or more base cases. A base case is a case where the function stops\
    \ recursing. For example, a recursive function that calculates the factorial of\
    \ a number might have two base cases: one where it reaches 1, and another where\
    \ it reaches 0. The base cases are the base cases of the recursion.", "    \n\
    \    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n\
    \        end\n    end\n    return sum\nend", "    evens = lst[findall(x -> x %\
    \ 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(x\
    \ -> x % 2 == 0, evens) + sum(x -> x % 2 != 0, odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the even numbers in a given list.", "    evens = filter(x -> x % 2 == 0,\
    \ lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x\
    \ % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the even numbers in a\
    \ list\nWrite a function that returns the sum of all the even numbers in a given\
    \ list.", "    even = filter(x -> x % 2 == 0, lst)\n    odd = filter(x -> x %\
    \ 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odd))\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of times the number 2 is in\
    \ the given list. ", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds\
    \ = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(evens) + sum(odds)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the product of all even numbers in a given list.", "    evens =\
    \ filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return\
    \ sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<text>\nPart III: Recursion",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Practice with\
    \ Strings\nIn this section you will practice working with strings. We will start\
    \ by defining a function called count_chars that takes a string as input and returns\
    \ the number of times a particular character appears in the string.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(x -> x % 2 != 0, lst)\n\
    \    return odd + sum(x -> x in evens, lst)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nPart 2: Recursion\nThe previous example was a little\
    \ too simple. Let's try something more interesting.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise: Write a function that returns the sum of the even elements in\
    \ a given list. \n    \n    For example, given [5, 8, 7, 1], return 8.", "   \
    \ evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum All Numbers\
    \ Except Self\nGiven a non-empty array of integers, return a new array consisting\
    \ of the sum of all of the numbers in the original array, except the number itself.",
  "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns the number of times the value 1 appears in the list [1,\
    \ 2, 3, 1].", "    sum = 0\n    for i in lst\n        if i%2 == 1\n          \
    \  sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all even\
    \ numbers in a vector", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd\
    \ = sum(filter(x -> x % 2 != 0, lst))\n    return odd + sum(evens)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum all the odd digits in a number", "    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend", "    sum = 0\n    for i in lst\n        if i%2\
    \ == 1\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Difficulty\nThe difficulty level for this week's problem set is easy,\
    \ but we would like to get more practice with Julia. Let's do it!", "    \n  \
    \  sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n    \
    \    end\n    end\n    return sum\nend", "    evens = filter(x -> x % 2 == 0,\
    \ lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    sum(filter(x -> x % 2 ==\
    \ 1, odds))\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ product of the even numbers in a given list.", "    even = filter(x -> x % 2\
    \ == 0, lst)\n    odd = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: More on maps and filtering", " \
    \   \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Game of Life\n\
    In this section, we will implement the Game of Life using Julia. Game of Life\
    \ is a cellular automaton that consists of two rules:", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2 != 1, evens))\nend\n\
    </cell>\n<code language=julia-1.5>\n@time solution(vec(collect(1:10000)));\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in that vector.", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nPart 2: Vectorized Solutions\nA vectorized solution is one that does not\
    \ use loops. Julia has many built-in functions that operate on arrays. In this\
    \ case, you can use the sum function and filter to operate on arrays. Let's see\
    \ some examples.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    Recursion is a powerful tool for solving problems such as these. Let's see how\
    \ it works.", "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n    \
    \        sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    A recursive function is a function that calls itself. This can be very useful\
    \ in many situations. For example, if we want to find the factorial of a number,\
    \ we can write a recursive function as follows:", "    evens = lst[findall(x ->\
    \ x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    \n   \
    \ sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum square difference\nGiven\
    \ a vector of numbers, calculate the sum of the squares of the numbers in the\
    \ vector.", "    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n    \
    \        sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all of the odd elements that are in even positions.",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ element appears in a given list. For example, given [1, 1, 2, 3, 4, 4], return\
    \ 3.", "    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n         \
    \   sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the\
    \ even numbers in a list", "    sum = 0\n    for i in lst\n        if i%2 == 1\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum Pairs\nGiven a collection of numbers, return a new collection of\
    \ numbers that contains the same numbers, but rearranged so that all pairs of\
    \ numbers appear next to each other in the new order.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(filter(x -> x in evens, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: More on lists\n\
    A list is a mutable collection of objects. In Julia, lists are written with square\
    \ brackets [], and accessed with square brackets []. Lists are also known as vectors\
    \ in other languages. Vectors are a type of array that has fixed length and is\
    \ indexed by integers from 0 to length-1.", "    evens = filter(x -> x % 2 ==\
    \ 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x ->\
    \ x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nNow that we've seen\
    \ the basics of recursion, let's see how we can use it to solve problems more\
    \ efficiently. We'll start with a simple problem that asks for the sum of a list.\
    \ We'll start by writing a function that sums a list, and then we'll see how we\
    \ can use recursion to solve it.", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: More on maps and filtering\nmap\nmap is a higher-order\
    \ function that takes a function and applies it to every element of a collection.\
    \ map returns a new collection that is the result of applying the function to\
    \ each element in the original collection.", "    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24,\
    \ 321]) == 0\n</cell>\n<text>\nPart III. Sum all odd digits in a number", "  \
    \  sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum Pairs\n\
    Given a list of numbers, return a list of all pairs whose sum is equal to a given\
    \ value.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(lst[findall(x\
    \ -> x % 2 != 0, lst)])\n    return odd + sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the product of all the even elements in a list. For example, given [5,\
    \ 8, 7, 1], return 50.", "    \n    sum = 0\n    for i in lst\n        if i%2\
    \ == 1\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum All Numbers Disappeared in an Array\nGiven an array nums, for each\
    \ number that does not appear in another array appeared,\nreturn its sum. \nIf\
    \ there are multiple answers, return any answer that occurs first.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0,\
    \ lst)]\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution(vec(1:100000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the product of all of the numbers in a given list. For example,\
    \ given [1,2,3], return 6. Your function should work for any type of iterable\
    \ (including Array{Any,1}).", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = sum(x -> x % 2 != 0, lst)\n    return odd + sum(x -> x in evens, lst)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function can be defined\
    \ recursively, which means it calls itself. A recursive function can have one\
    \ or more base cases, which are cases that do not require recursion. These base\
    \ cases are usually the base cases of a recursive function, and are usually the\
    \ cases that do not require recursion.", "    evens = filter(x -> x % 2 == 0,\
    \ lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x\
    \ % 2 == 1, odds))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a string and returns a string where all spaces are replaced with an underscore\
    \ (_).", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(x -> x\
    \ % 2 == 1, lst)\n    return odd + sum(x -> x in evens, lst)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum All Even Elements", "    sum = 0\n    for i in lst\n        if i%2\
    \ == 1\n            sum += i\n        end\n    end\n    return sum\nend", "  \
    \  sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nNow let's\
    \ see how we can use recursion to solve this problem. We'll start by writing a\
    \ function that can add up all the numbers in a list:", "    \n    sum = 0\n \
    \   for i in lst\n        if i%2 == 1\n            sum += i\n        end\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function\
    \ is a function that calls itself. This can be very useful in many situations.\
    \ For example, consider the Fibonacci numbers:", "    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n\
    <code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([30, 13, 24, 321])\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the number of times a given element appears in a given list. \n\
    For example, given [5, 7, 7, 7, 7], return 3.", "    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24,\
    \ 321]) == 0\n</cell>\n<text>\nPart III. Sum even numbers in a vector", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0,\
    \ lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2\
    \ == 0, evens))\nend\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a string and returns the number of words in that string.", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of times a given substring appears in a given string.", " \
    \   \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum +=\
    \ x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all even\
    \ numbers in a vector", "    evens = filter(x -> x % 2 == 0, lst)\n    odds =\
    \ filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odds))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function is a function that\
    \ calls itself. This can be done in Julia by defining a function with the function\
    \ keyword. For example, consider the following recursive function:", "    sum\
    \ = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the number of positive integers that do not exceed a given positive integer\
    \ n.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odd = sum(filter(x\
    \ -> x % 2 != 0, lst))\n    return odd + sum(evens)\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns a list of all the numbers from 1 to n that\
    \ are divisible by 3 or 5.", "    even = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(filter(x -> x %\
    \ 2 == 1, even) + filter(x -> x % 2 != 1, odd))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all even\
    \ numbers in a range\nGiven a range $[a, b]$, return the sum of all even numbers\
    \ in that range.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n     \
    \       sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and returns a vector of strings where\
    \ each string is the concatenation of all the strings in the original vector except\
    \ the string \"and\".", "    sum = 0\n    for i in lst\n        if i%2 == 1\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the numbers in the list that are divisible\
    \ by 7. \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    evens = lst[findall(x -> x % 2 == 1,\
    \ lst)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nNow let's\
    \ see how we can use recursion to solve this problem. We'll start by defining\
    \ a recursive function called sum_rec that takes in a list of integers and returns\
    \ the sum of all of the odd elements that are in even positions.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0,\
    \ lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x -> x % 2\
    \ == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum All Numbers Disappeared in\
    \ an Array", "    \n    sum = 0\n    for x in lst\n        if x % 2 == 1\n   \
    \         sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum all the even numbers in a list\nGiven a non-empty list of integers,\
    \ return a new list containing all of the even numbers from the original list.",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum All Numbers\
    \ Disappeared in an Array\nGiven a sorted array of integers, find the sum of all\
    \ of the numbers that appear exactly once in the array.", "    \n    sum = 0\n\
    \    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion", "    \n    sum = 0\n\
    \    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    return sum\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n\
    \    odd = sum(lst[findall(x -> x % 2 != 0, lst)])\n    return odd + sum(evens)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n\
    <code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([30, 13, 24, 321])\n</cell>\n<text>\nPart 2: Recursion\nRecursion\
    \ is a powerful tool for solving problems that involve repeating a problem with\
    \ smaller inputs. In this problem, we repeatedly call ourselves until we no longer\
    \ have enough information to solve the problem. For example, if we were to write\
    \ an algorithm to find the sum of all numbers from 1 to n, we would write something\
    \ like this:", "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n   \
    \         sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @time solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ product of the even elements that are in odd positions.", "    sum = 0\n   \
    \ for i in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum Pairs\nGiven a collection\
    \ of numbers, return a list of tuples, each containing the sum of the numbers\
    \ in the same position.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part II: Recursion\nNow let's see how we can use recursion to solve this problem.\
    \ We'll start by writing a function that takes in a list of integers and returns\
    \ the sum of all of the odd elements that are in even positions.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x -> x % 2 != 0,\
    \ lst)]\n    \n    sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum Pairs\n\
    Given a vector of positive integers, return a new vector where each element is\
    \ the sum of the two numbers directly before it in the original vector. You may\
    \ assume that the input vector has at least two elements.", "    evens = filter(x\
    \ -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    \n    return\
    \ sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that returns a list of all numbers from 1 to n that are divisible by\
    \ k.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2\
    \ != 0, lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 == 0, evens))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum square difference\nGiven\
    \ a vector of integers, find the sum of square differences between every pair\
    \ of consecutive elements.", "    even = filter(x -> x % 2 == 0, lst)\n    odd\
    \ = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odd))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: More on maps and filters and other higher-order\
    \ functions", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n        \
    \    sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the\
    \ even numbers in a list\nWrite a function that returns the sum of all the even\
    \ numbers in a given list.", "    \n    sum = 0\n    \n    for i in lst\n    \
    \    if i%2 == 1\n            sum += i\n        end\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.4>\n@assert solution([5, 8, 7, 1])\
    \ == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24,\
    \ 321]) == 0\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number\
    \ of times the value 1 appears in the list [1, 2, 3, 1].", "    sum = 0\n    for\
    \ i in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum All Even Elements", "   \
    \ evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nProblem 7: Sum square\
    \ difference\nGiven a vector of numbers, calculate the sum of the squares of the\
    \ numbers in the vector, but ignore the number 0 because it is square-free.",
  "    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\nA recursive\
    \ function is a function that calls itself. This can be done in Julia by using\
    \ the function keyword.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part II: Recursion\nRecursion is a powerful tool for solving problems that involve\
    \ repeating a problem until a base case is reached.", "    evens = filter(x ->\
    \ x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum even and odd numbers in a\
    \ vector", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    return sum(filter(x -> x % 2 == 1, odds)) + sum(filter(x\
    \ -> x % 2 != 1, evens))\nend\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns the number of times a given element appears in a given list.", "   \
    \ evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    return sum(evens) + sum(odds)\nend\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the product of the numbers in a list. Except the last, which should\
    \ remain unchanged. Assume that the list contains at least one element.", "  \
    \  sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion",
  "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n\
    \    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the\
    \ even numbers in a list", "    \n    sum = 0\n    for i in lst\n        if i%2\
    \ == 1\n            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part II: Recursion\nNow let's use recursion to solve the problem of finding the\
    \ sum of all even numbers in a given list. We'll start by writing a function that\
    \ takes in a list and returns the sum of all even numbers in that list.", "  \
    \  sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@code_warntype solution([30,\
    \ 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the odd elements that are\
    \ in even positions.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n \
    \           sum += i\n        end\n    end\n    return sum\nend", "    \n    sum\
    \ = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@time solution([5,\
    \ 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3, 3, 3, 3, 3])\n\
    </cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24, 321])\n</cell>\n\
    <text>\nPart 3: Finding all subsets of a set", "    evens = filter(x -> x % 2\
    \ == 0, lst)\n    odds = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x\
    \ -> x % 2 == 1, odds))\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5,\
    \ 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Game of Life\nIn this part of\
    \ the exercise, you will implement the Game of Life using Julia. As before, you\
    \ are given an infinite grid of \"living\" cells, each cell being a 1\u2264x\u2264\
    10 integer grid of 0s and 1s. You will then apply the following update rules:",
  "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum Pairs\n\
    Given a collection of numbers, return a list of all pairs (a, b) where a < b and\
    \ a + b is in the list.", "    even = filter(x -> x % 2 == 0, lst)\n    odd =\
    \ filter(x -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x % 2 == 1, odd))\n\
    end\n</cell>\n<code language=julia-1.4>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function is a function that\
    \ calls itself. This can be done in Julia by using the function keyword.", " \
    \   \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: More on lists\n\
    Lists are a core data structure in Julia, and Julia has many built-in methods\
    \ for working with them.  Here are a few examples:", "    sum = 0\n    for i in\
    \ lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n    return\
    \ sum\nend", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n         \
    \   sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum all the\
    \ odd integers in a given list", "    sum = 0\n    for i in lst\n        if i%2\
    \ == 1\n            sum += i\n        end\n    end\n    return sum\nend", "  \
    \  sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum All Numbers\
    \ Disappeared in an Array", "    evens = filter(x -> x % 2 == 0, lst)\n    odds\
    \ = filter(x -> x % 2 != 0, lst)\n    return sum(filter(x -> x % 2 == 1, odds))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart 4: Recursion\nThe previous section showed how to solve\
    \ a problem using loops. In this section we will show how to solve a problem using\
    \ recursion.", "    evens = lst[findall(x -> x % 2 == 1, lst)]\n    odds = lst[findall(x\
    \ -> x % 2 != 1, lst)]\n    \n    return sum(filter(x -> x % 2 == 1, odds)) +\
    \ sum(filter(x -> x % 2 != 1, evens))\nend\n</cell>\n<code language=julia-1.5>\n\
    @time solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n@time solution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n@time solution([30, 13, 24,\
    \ 321])\n</cell>\n<text>\nProblem 7\nWrite a function that returns a list of all\
    \ numbers from 1 to n that are divisible by 3.", "    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart III. Sum all the even numbers in a list\nGiven a non-empty\
    \ list of integers, return a new list containing all of the even numbers from\
    \ the original list.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n \
    \           sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Problem 4\nWrite a function that returns a list of all integers between two given\
    \ integers, inclusive.", "    sum = 0\n    for i in lst\n        if i%2 == 1\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert solution([3,\
    \ 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\n\
    Part III. Sum even numbers in a vector", "    sum = 0\n    for x in lst\n    \
    \    if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function is a function that\
    \ calls itself. In Julia, functions are defined using the function keyword.",
  "    \n    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n\
    @assert solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart II: Recursion\n\
    The previous sections showed how to use loops to solve problems. In this section,\
    \ we'll see how to use recursion to solve problems. We'll see how recursive functions\
    \ can make solving problems much easier than loops.", "    sum = 0\n    for i\
    \ in lst\n        if i%2 == 1\n            sum += i\n        end\n    end\n  \
    \  return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8,\
    \ 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30,\
    \ 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Recursion\nNow that we've seen\
    \ how recursion works, let's see how we can use it to solve a problem that didn't\
    \ involve looping or iteration.", "    evens = filter(x -> x % 2 == 0, lst)\n\
    \    odds = filter(x -> x % 2 != 0, lst)\n    \n    return sum(odds[end-1:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n\
    @assert solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) ==\
    \ 0\n</cell>\n<text>\nPart II: Recursion\nA recursive function has two parts:",
  "    sum = 0\n    for i in lst\n        if i%2 == 1\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solution([5, 8, 7, 1]) == 12\n@assert solution([3, 3, 3, 3, 3]) == 9\n@assert\
    \ solution([30, 13, 24, 321]) == 0\n</cell>\n<text>\nPart III. Sum even numbers\
    \ in a list", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    sum(filter(x -> x % 2 == 0, even))\nend\n</cell>\n\
    <code language=julia-1.3>\n@time solution(vec(1:100000));\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of times a given element appears\
    \ in a given vector.", "    evens = filter(x -> x % 2 == 0, lst)\n    odds = filter(x\
    \ -> x % 2 != 0, lst)\n    \n    return sum(filter(x -> x % 2 == 1, odds))\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solution([5, 8, 7, 1]) == 12\n@assert\
    \ solution([3, 3, 3, 3, 3]) == 9\n@assert solution([30, 13, 24, 321]) == 0\n</cell>\n\
    <text>\nPart II: Recursion\nA recursive function is a function that calls itself.\
    \ This can be very useful in many situations. For example, consider the Fibonacci\
    \ sequence defined as:", "    sum = 0\n    for i in lst\n        if i%2 == 1\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype solution([5, 8, 7, 1])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([3, 3, 3, 3, 3])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype solution([30, 13, 24, 321])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all of the odd elements that are in even\
    \ positions."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
