name: HumanEval_104_unique_digits
language: jl
prompt: "\"\"\"Given a list of positive integers x. return a sorted list of all \n\
  \    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted\
  \ in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422,\
  \ 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n  \
  \  \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
  \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
  \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
  \ 103, 31]) == [31, 135])\nend\n"
completions: ["    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n \
    \       if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n  \
    \  end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ unique_digits(rand(1:100000));\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a number is prime or not. \nThe function should take one integer\
    \ argument and return true or false accordingly.", "    \n    unique_digits =\
    \ Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n           \
    \ push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    unique_digits = Set()\n   \
    \ for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n \
    \       end\n    end\n    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n    \
    \        unique_digits.add(x)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\n\
    Problem 9\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.", "    \n    unique_digits = Vector{Int64}()\n    \n   \
    \ for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n \
    \       end\n    end\n    \n    return unique_digits\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    unique_digits = Set()\n    for i\
    \ in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n       \
    \ end\n    end\n    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.0>", "    \n   \
    \ unique_digits = Set{Int64}()\n    for x in x\n        if x mod 2 == 0\n    \
    \        unique_digits.add(x)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n    \n   \
    \ for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n \
    \       end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set{Int64}()\n    for n in x\n        if n % 2 == 0\n\
    \            unique_digits.add(n)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take one integer as input. \nThe function should return true if the number\
    \ is prime and false if \nthe number is composite.", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x % 2 == 0\n            unique_digits +=\
    \ x\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 9\nGiven a vector of positive integers\
    \ x, return a sorted vector of all \n    elements that hasn't any even digit in\
    \ it.", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n   \
    \     if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    \n    return unique_digits\nend", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend", "    \n    unique_digits = Set()\n    \n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    unique_digits\nend", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    unique_digits = Set()\n    for x\
    \ in x\n        if x % 2 == 0\n            push!(unique_digits, x)\n        end\n\
    \    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in\
    \ x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n\
    \    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n    \
    \        push!(unique_digits, x)\n        end\n    end\n    return sort(unique_digits)\n\
    end\n</cell>\n<code language=julia-1.5>\n@test unique_digits([15, 33, 1422, 1])\
    \ == [1, 15, 33]\n@test unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns all positive integers less than or equal\
    \ to n.", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n \
    \       if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n  \
    \  end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime or not. \nThe function should take one integer as input\
    \ and return true or false accordingly.", "    \n    unique_digits = Set()\n \
    \   for x in x\n        if x % 2 == 0\n            push!(unique_digits, x)\n \
    \       end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nProblem 9\nGiven a list of positive\
    \ integers x. return a sorted list of all \n    elements that hasn't any odd digit.",
  "    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<text>\nProblem 9\nGiven a list of positive integers x. return a\
    \ sorted list of all \n    elements that hasn't any odd digit.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits(rand(1:1000000000));\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ unique_digits = Set()\n    \n    for x in x\n        if x mod 2 == 0\n     \
    \       push!(unique_digits, x)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    unique_digits = Set()\n    for\
    \ i in x\n        if i mod 2 != 0\n            unique_digits.add(i)\n        end\n\
    \    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n    \
    \        push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<text>\nProblem 9\nGiven a list of integers, return a new list containing\
    \ only the numbers which are the \nsame distance apart from each other. ", " \
    \   \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer as input and returns a list of all positive integers\
    \ less than or equal to that integer.", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>", "    unique_digits = Vector{Int64}()\n    for i in x\n\
    \        if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n \
    \   end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.3>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.3>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 3\nGiven a list of integers, return a new\
    \ list containing only the even integers.", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n \
    \       if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n  \
    \  end\n    \n    return unique_digits\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    unique_digits = Set()\n    for i in x\n\
    \        if !contains(unique_digits, i)\n            unique_digits += i\n    \
    \    end\n    end\n    return unique_digits\nend", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    unique_digits = Set()\n    for x\
    \ in x\n        push!(unique_digits, x)\n    end\n    unique_digits\nend", " \
    \   \n    unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n   \
    \         push!(unique_digits, x)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.4>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.4>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    unique_digits = Set()\n    for n in x\n   \
    \     if n mod 2 != 0\n            push!(unique_digits, n)\n        end\n    end\n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.4>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<code language=julia-1.4>", "  \
    \  unique_digits_helper(x, [], 0)\nend", "    unique_digits = Vector{Int64}()\n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is prime or not. \nThe function should take\
    \ in a single integer and return a boolean.", "    \n    unique_digits = Set{Int64}()\n\
    \    \n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    \n    return sort(unique_digits)\nend\n</cell>\n\
    <code language=julia-1.3>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.3>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 7", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n    \n   \
    \ for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n \
    \       end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Set{Int64}()\n\
    \    for i in x\n        if i mod 2 == 0\n            unique_digits.add(i)\n \
    \       end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n    \
    \        push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 !=\
    \ 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.0>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<code language=julia-1.0>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<text>\nExercise 3\nWrite a function that returns all elements\
    \ that has even digit in a given list.", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.3>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.3>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.3>", "    \n    unique_digits =\
    \ Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n           \
    \ push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nProblem 3\nGiven a list of positive integers x. return a sorted list of\
    \ all \n    elements that hasn't any odd digit.", "    unique_digits_helper(x,\
    \ [], 0)\nend", "    \n    unique_digits = Set()\n    for n in x\n        if n\
    \ % 2 == 0\n            unique_digits += n\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.4>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.4>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    unique_digits = Set{Int64}()\n    \n    for\
    \ x in x\n        if x % 2 == 0\n            push!(unique_digits, x)\n       \
    \ end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x % 2 == 0\n            unique_digits +=\
    \ x\n        end\n    end\n    unique_digits\nend", "    \n    unique_digits =\
    \ Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n           \
    \ push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end", "    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 ==\
    \ 0\n            push!(unique_digits, i)\n        end\n    end\n    return sort(unique_digits)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:100000));\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the number of \n    unique digits in it.", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.4>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.4>", "    \n    unique_digits\
    \ = Set{Int64}()\n    for i in x\n        if i mod 2 == 0\n            unique_digits.add(i)\n\
    \        end\n    end\n    unique_digits\nend", "    unique_digits_helper(x, [],\
    \ 0)\nend", "    unique_digits = Vector{Int64}()\n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Set()\n \
    \   for n in x\n        if n % 2 == 0\n            push!(unique_digits, n) \n\
    \        end\n    end\n    unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a number is prime or not. \nThe function should take\
    \ one integer as input. \nThe function should return true if the number is prime\
    \ and false otherwise.", "    \n    unique_digits = Set()\n    for x in x\n  \
    \      if x % 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.4>", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    unique_digits = Set()\n   \
    \ for x in x\n        if x mod 2 != 0\n            push!(unique_digits, x)\n \
    \       end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nExercise 2", "    unique_digits_helper(x,\
    \ [], 0)\nend", "    \n    unique_digits = Set()\n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end", "    \n    unique_digits = Set()\n    for x in x\n        push!(unique_digits,\
    \ x)\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.4>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer and returns the number of digits in it.", "    unique_digits = Set{Int64}()\n\
    \    for i in x\n        if !contains(unique_digits, i)\n            unique_digits\
    \ += i\n        end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.4>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ all numbers from 1 to n that have no even digit.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for n in x\n        if n % 2 == 0\n           \
    \ push!(unique_digits, n)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ prime or not. \nThe function should take one integer as input and return true\
    \ or false.", "    \n    unique_digits = Set()\n    \n    for i in x\n       \
    \ if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n          \
    \  push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n</cell>\n\
    <code language=julia-1.4>\n@time unique_digits(rand(1:1000000000));\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a given vector.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    unique_digits_ = Set()\n    unique_digits_.add(x)\n    \n    for i in\
    \ x\n        if i mod 2 != 0\n            unique_digits_.add(i)\n        end\n\
    \    end\n    \n    unique_digits_\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n    \
    \        push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend",
  "    \n    unique_digits = Set{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            unique_digits.add(i)\n        end\n    end\n    \n    return\
    \ sort(unique_digits)\nend", "    \n    unique_digits = Vector{Int64}()\n    \n\
    \    for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    return unique_digits\nend", "    unique_digits_helper(x,\
    \ [], 0)\nend", "    unique_digits = Vector{Int64}()\n    for i in x\n       \
    \ if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    unique_digits\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of positive integers and returns a sorted list of all elements that has\
    \ any even digit.", "    unique_digits = Set()\n    for i in x\n        if !contains(unique_digits,\
    \ i)\n            unique_digits += i\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.4>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.4>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns all elements that has even digit.",
  "    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n    \
    \        push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.3>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits_set = Set()\n    unique_digits_set = unique_digits_set\
    \ + x\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n", "    \n    unique_digits = Set{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return sort(unique_digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns all elements that has at least two unique digits. \n    \n    For\
    \ example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>>\
    \ unique_digits([152, 323, 1422, 10])\n    [10, 152, 323]\n    \"\"\"", "    \n\
    \    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2\
    \ == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    return\
    \ unique_digits\nend", "    unique_digits = Set()\n    for x in x\n        if\
    \ x mod 2 == 0\n            unique_digits += x\n        end\n    end\n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.3>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<code language=julia-1.3>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<code language=julia-1.3>", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    unique_digits = Set()\n    for i in x\n     \
    \   if i mod 2 != 0\n            unique_digits.add(i)\n        end\n    end\n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    unique_digits_helper(x,\
    \ [], 0)\nend", "    \n    unique_digits_set = Set()\n    unique_digits_set =\
    \ unique_digits_set + x\n    unique_digits_set = unique_digits_set - Set(x...)\n\
    \    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n", "    \n\
    \    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2\
    \ != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    return\
    \ unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        unique_digits += findall(x->x%10==0, i)\n \
    \   end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Set{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return sort(unique_digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    unique_digits = Set{Int64}()\n    \n    for i in x\n        if !iszero(i)\n\
    \            if iszero(i mod 10)\n                unique_digits.add(i)\n     \
    \       else\n                unique_digits.add(i/10)\n        end\n    end\n\
    \    \n    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        if !contains(unique_digits, i)\n          \
    \  unique_digits += i\n        end\n    end\n    unique_digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    unique_digits = Set()\n    for x in x\n\
    \        if x % 2 == 0\n            unique_digits += x\n        end\n    end\n\
    \    unique_digits\nend", "    \n    unique_digits = Set()\n    for x in x\n \
    \       unique_digits += findall(x == digits(x))\n    end\n    unique_digits\n\
    end", "    unique_digits_helper(x, [], 0)\nend", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    unique_digits = Set()\n    \n   \
    \ for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n \
    \       end\n    end\n    \n    return sort(unique_digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ unique_digits = Vector{Int64}()\n    for i in x\n        if i mod 2 == 0\n \
    \           push!(unique_digits, i)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.3>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.3>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns all numbers from 1 to n that have exactly\
    \ two digits.", "    \n    unique_digits = Vector{Int64}()\n    for i in x\n \
    \       if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n  \
    \  end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7\nWrite a function that checks if a number is\
    \ prime or not. \nA number is prime if all its digits except one are prime.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    unique_digits =\
    \ Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.0>",
  "    unique_digits_helper(x, [], 0)\nend", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    unique_digits = Set()\n    for i in x\n   \
    \     if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 7\nWrite a function that returns all elements\
    \ that has at least two unique digits.", "    \n    unique_digits = Set()\n  \
    \  for x in x\n        if x mod 2 != 0\n            push!(unique_digits, x)\n\
    \        end\n    end\n    unique_digits\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    unique_digits = Set()\n    for x in x\n\
    \        if x mod 2 != 0\n            push!(unique_digits, x)\n        end\n \
    \   end\n    unique_digits\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer and returns the number of digits in it.", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits_set\
    \ = Set()\n    unique_digits_set = unique_digits_set + Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x...)\n    unique_digits_set = unique_digits_set - Set(x...)\n    unique_digits_set\
    \ = unique_digits_set - Set(x...)\n    unique_digits_set = unique_digits_set -\
    \ Set(x", "    unique_digits = Vector{Int64}()\n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n          \
    \  push!(unique_digits, i)\n        end\n    end\n    return sort(unique_digits)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:100000));\n\
    </cell>\n<text>\nExercise 2", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    unique_digits = Set()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    unique_digits = Set{Int64}()\n  \
    \  for i in x\n        if !contains(unique_digits, i)\n            unique_digits\
    \ += i\n        end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            unique_digits\
    \ += i\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x %\
    \ 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n  \
    \  unique_digits\nend", "    unique_digits = Set()\n    for n in x\n        if\
    \ n % 2 == 0\n            unique_digits += n\n        end\n    end\n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    </cell>\n<text>\nProblem 7\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any odd digit.", "    unique_digits_helper(x)\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    return sort(unique_digits)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.3>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns all elements that hasn't any even digit from a given list of positive\
    \ integers. \nFor example, given [15, 33, 1422, 1] it should return [1, 15, 33].",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n  \
    \  \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime or not. \nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself. \nWrite a function that checks if a number is prime or not.\
    \ \nA prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself. \nWrite a function that checks if a number is prime\
    \ or not. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself. \nWrite a function that checks if a number\
    \ is prime or not. \nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself. \nWrite a function that checks\
    \ if a number is prime or not. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself. \nWrite a function\
    \ that checks if a number is prime or not. \nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself. \nWrite\
    \ a function that checks if a number is prime or not. \nA prime number is a natural\
    \ number greater than 1 that has no positive divisors other than 1 and itself.\
    \ \nWrite a function that checks if a number is prime or not. \nA prime number\
    \ is a natural number greater than 1 that has no positive divisors other than\
    \ 1 and itself. \nWrite a function that checks if a number is prime or not. \n\
    A prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself. \nWrite a function that checks if a number is prime\
    \ or not. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself. \nWrite a function that checks if a number\
    \ is prime or not. \nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself. \nWrite a function that checks\
    \ if a number is prime or not. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself. \nWrite a function\
    \ that checks if a number is prime or not. \nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself. \nWrite\
    \ a function that checks if a number is prime or not. \nA prime number is a natural\
    \ number greater than 1 that has no positive divisors other than 1 and itself.\
    \ \nWrite a function that checks if a number is prime or not. \nA prime number\
    \ is a natural number greater than 1 that has no positive divisors other than\
    \ 1 and itself. \nWrite a function that checks if a number is prime or not. \n\
    A prime number is a natural number greater than 1 that has no positive divisor",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.3>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.3>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.3>", "    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return sort(unique_digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that given a positive integer x, returns True if x is even, False otherwise.",
  "    \n    unique_digits = Set{Int64}()\n    \n    for i in x\n        if !contains(unique_digits,\
    \ i)\n            unique_digits += i\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    unique_digits = Set()\n    for\
    \ i in x\n        if !contains(unique_digits, i)\n            unique_digits +=\
    \ i\n        end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set{Int64}()\n    \n    for i in x\n        if !iszero(i)\n\
    \            unique_digits.add(i)\n        end\n    end\n    \n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nProblem 7\nWrite a function that checks if a number is prime or not. \n\
    A prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself.", "    unique_digits_helper(x, [], 0)\nend", "    \n\
    \    unique_digits = Set()\n    for x in x\n        if x mod 2 == 0\n        \
    \    unique_digits += x\n        end\n    end\n    unique_digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n    \n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nExercise 3\nWrite a function that checks\
    \ if a number is prime or not. \nThe function should take one integer as input,\
    \ and return a boolean.", "    \n    unique_digits = Set()\n    for n in x\n \
    \       if n % 2 == 0\n            push!(unique_digits, n)\n        end\n    end\n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7: Sum square difference\nGiven an array of integers,\
    \ find the sum of square difference between each pair of consecutive elements.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.3>\n\
    @test unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@test unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nExercise 3.2\nWrite a function that\
    \ given a list of integers returns a sorted list of all elements that hasn't any\
    \ even digit and that hasn't any odd digit.", "    \n    unique_digits = Set()\n\
    \    for x in x\n        if x mod 2 != 0\n            push!(unique_digits, x)\n\
    \        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    for x in x\n        if x mod 2 == 0\n    \
    \        unique_digits += x\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    unique_digits_helper(x, [], 0)\n\
    end", "    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 !=\
    \ 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    unique_digits = Set()\n    for x in x\n     \
    \   if x % 2 == 0\n            unique_digits += x\n        end\n    end\n    return\
    \ unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ positive integer as input and returns a list of all positive integers less than\
    \ or equal to that integer.", "    unique_digits = Set()\n    for i in x\n   \
    \     if i mod 2 != 0\n            unique_digits += i\n        end\n    end\n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.5>", "    unique_digits_helper(x,\
    \ [], 0)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n   \
    \         push!(unique_digits, i)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.4>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.4>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    unique_digits = Set{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n@time\
    \ unique_digits([152, 323, 1422, 10])\n</cell>\n<code language=julia-1.5>\n@time\
    \ unique_digits([15, 33, 1422, 1])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that checks if a number is prime or not. \nThe function should take one argument\
    \ and return a boolean.", "    \n    unique_digits = Vector{Int64}()\n    \n \
    \   for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take one integer argument and return a boolean.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    unique_digits = Set{Int64}()\n    for i in x\n\
    \        if !contains(unique_digits, i)\n            unique_digits += i\n    \
    \    end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set{Int64}()\n    for x in x\n        if x % 2 == 0\n\
    \            unique_digits.add(x)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    unique_digits\
    \ = Set()\n    for x in x\n        unique_digits += x % 10\n    end\n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that given a list of positive integers x. return\
    \ a sorted list of all \n    elements that hasn't any odd digit.", "    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    \n    for i in x\n        if i mod 2 != 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    unique_digits = Set()\n    for i in x\n     \
    \   if !contains(unique_digits, i)\n            unique_digits += i\n        end\n\
    \    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that returns all elements\
    \ that has any even digit.", "    \n    unique_digits = Set{Int64}()\n    for\
    \ i in x\n        if !contains(unique_digits, i)\n            unique_digits +=\
    \ i\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.3>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.3>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.3>", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    unique_digits_set = Set{Int64}()\n\
    \    \n    for i in x\n        if !iszero(i)\n            if unique_digits_set.add(i)\n\
    \                push!(unique_digits_set, i)\n            end\n        end\n \
    \   end\n    \n    unique_digits_set\nend\n</cell>\n<code language=julia-1.4>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.4>", "    unique_digits = Set()\n\
    \    for x in x\n        if x % 2 == 0\n            unique_digits += x\n     \
    \   end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    unique_digits = Vector{Int64}()\n    for x in x\n        if x mod 2 == 0\n\
    \            push!(unique_digits, x)\n        end\n    end\n    return unique_digits\n\
    end", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n     \
    \   if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer as input and returns a list of all positive integers less than or equal\
    \ to that integer.", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ x in x\n        if x mod 2 == 0\n            push!(unique_digits, x)\n     \
    \   end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 9\nWrite a function that returns all\
    \ numbers from 1 to n that have exactly two digits.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\n\
    Problem 9\nWrite a function that checks if a number is prime or not. \nA number\
    \ is prime if its only prime factor (other than 1) is 1. \nA number is prime if\
    \ its only prime factor is 1 or itself.", "    unique_digits_helper(x, [], [])\n\
    end"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
