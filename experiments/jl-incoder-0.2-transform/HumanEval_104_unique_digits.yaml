name: HumanEval_104_unique_digits
language: jl
prompt: "\"\"\"Given a list of positive integers x. return a sorted list of all \n\
  \    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted\
  \ in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422,\
  \ 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n  \
  \  \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
  \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
  \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
  \ 103, 31]) == [31, 135])\nend\n"
completions: ["    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n \
    \       if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n  \
    \  end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ unique_digits(rand(1:100000));\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a number is prime or not. \nThe function should take one integer\
    \ argument and return true or false accordingly.", "    \n    unique_digits =\
    \ Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n           \
    \ push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    unique_digits = Set()\n   \
    \ for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n \
    \       end\n    end\n    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n    \
    \        unique_digits.add(x)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\n\
    Problem 9\nWrite a function that returns the number of positive integers less\
    \ than or equal to n.", "    \n    unique_digits = Vector{Int64}()\n    \n   \
    \ for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n \
    \       end\n    end\n    \n    return unique_digits\nend", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    unique_digits = Set()\n    for i\
    \ in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n       \
    \ end\n    end\n    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.0>", "    \n   \
    \ unique_digits = Set{Int64}()\n    for x in x\n        if x mod 2 == 0\n    \
    \        unique_digits.add(x)\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n    \n   \
    \ for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n \
    \       end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set{Int64}()\n    for n in x\n        if n % 2 == 0\n\
    \            unique_digits.add(n)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take one integer as input. \nThe function should return true if the number\
    \ is prime and false if \nthe number is composite.", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x % 2 == 0\n            unique_digits +=\
    \ x\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nProblem 9\nGiven a vector of positive integers\
    \ x, return a sorted vector of all \n    elements that hasn't any even digit in\
    \ it.", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n   \
    \     if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    \n    return unique_digits\nend", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
