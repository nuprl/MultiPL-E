name: HumanEval_27_flip_case
language: jl
prompt: "\"\"\" For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    \"\"\"\nfunction\
  \ flip_case(string::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = flip_case;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"Hello!\") == \"hELLO!\")\n\t@test(candidate(\"\
  These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")\nend\n"
completions: ["    local result = \"\"\n    for char in string:\n        if char ==\
    \ char:\n            result += char\n        elseif char < \"a\" and char > \"\
    z\":\n            result += \"A\"\n        elif char < \"A\" and char > \"Z\"\
    :\n            result += \"a\"\n        else\n            result += char\n   \
    \ end\n    return result\nend", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n            result += char.lower()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        elseif char == char.upper():\n          \
    \  result += char.lower()\n        elseif char == char.lower():\n            result\
    \ += char.upper()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local result = \"\"\n    for c in string:\n     \
    \   if c.islower() then\n            c = toupper(c)\n        end\n        if c.isupper()\
    \ then\n            c = tolower(c)\n        end\n        result = result .. c\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for c in string:\n        if c.islower() then\n         \
    \   result = result .. toupper(c)\n        elseif c.isupper() then\n         \
    \   result = result .. tolower(c)\n        else\n            result = result ..\
    \ c\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        else if char == char.upper():\n         \
    \   result += char.lower()\n        else if char == char.lower():\n          \
    \  result += char.upper()\n        else :\n            result += char\n    return\
    \ result\nend", "    local result = \"\"\n    for c in string:\n        if c.isupper():\n\
    \            result += \"_\"\n            result += c.lower()\n        else:\n\
    \            result += c\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += \"_\"\n        else if char == char.upper():\n          \
    \  result += \"_\"\n            result += char.lower()\n        else if char ==\
    \ char.lower():\n            result += \"_\"\n            result += char.upper()\n\
    \        else :\n            result += char\n    return result\n</code>\n<|/ a\
    \ tags=string,lowercase,uppercase,haskell |>\n<| a tags=string,lowercase,uppercase,haskell\
    \ |>\n<code>\nimport Data.List", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n            result += char.lower()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>\n@time flip_case(\"\
    Hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the string with all vowels replaced by an underscore.", "    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    ", "    local result = \"\"\n    for char in string:\n        if char ==\
    \ char:\n            result += \"_\"\n        else\n            result += char\n\
    \        end\n    end\n    return result\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += \"_\"\n        else\n       \
    \     result += char.upper()\n        end\n    end\n    return result\nend", " \
    \   local result = \"\"\n    for char in string:\n        if char == char.toUpper():\n\
    \            result += char.toLower()\n        else\n            result += char\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n    \n\
    \    return uppercase+lowercase\nend\n</cell>\n<code language=julia-1.5>", " \
    \   local result = \"\"\n    for char in string:\n        if char == char:\n \
    \           result += \"_\"\n        else\n            result += char.upper()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.4>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result = result + char\n        elseif char == char:\n            result\
    \ = result + char.upper()\n        elseif char == char.upper():\n            result\
    \ = result + char.lower()\n        elseif char == char.lower():\n            result\
    \ = result + char.upper()\n        else\n            result = result + char\n\
    \        end\n    end\n    return result\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis doesn't work for `flip_case(\"Hello\")`\n<|/ c |>\n<| c |>\n\
    I fixed the bug and added a more general solution.\n<|/ c |>\n<| a |>\n<code>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    local result =\
    \ \"\"\n    for c in string:\n        if c.isupper():\n            result = result\
    \ + c.lower()\n        else:\n            result = result + c.upper()\n    return\
    \ result\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for strings with\
    \ non-ASCII characters, e.g. `\xC4` becomes `A`.\n<|/ c |>\n<| a |>\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
