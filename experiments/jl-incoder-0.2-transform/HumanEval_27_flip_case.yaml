name: HumanEval_27_flip_case
language: jl
prompt: "\"\"\" For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    \"\"\"\nfunction\
  \ flip_case(string::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = flip_case;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"Hello!\") == \"hELLO!\")\n\t@test(candidate(\"\
  These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")\nend\n"
completions: ["    local result = \"\"\n    for char in string:\n        if char ==\
    \ char:\n            result += char\n        elseif char < \"a\" and char > \"\
    z\":\n            result += \"A\"\n        elif char < \"A\" and char > \"Z\"\
    :\n            result += \"a\"\n        else\n            result += char\n   \
    \ end\n    return result\nend", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n            result += char.lower()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        elseif char == char.upper():\n          \
    \  result += char.lower()\n        elseif char == char.lower():\n            result\
    \ += char.upper()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local result = \"\"\n    for c in string:\n     \
    \   if c.islower() then\n            c = toupper(c)\n        end\n        if c.isupper()\
    \ then\n            c = tolower(c)\n        end\n        result = result .. c\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for c in string:\n        if c.islower() then\n         \
    \   result = result .. toupper(c)\n        elseif c.isupper() then\n         \
    \   result = result .. tolower(c)\n        else\n            result = result ..\
    \ c\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        else if char == char.upper():\n         \
    \   result += char.lower()\n        else if char == char.lower():\n          \
    \  result += char.upper()\n        else :\n            result += char\n    return\
    \ result\nend", "    local result = \"\"\n    for c in string:\n        if c.isupper():\n\
    \            result += \"_\"\n            result += c.lower()\n        else:\n\
    \            result += c\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += \"_\"\n        else if char == char.upper():\n          \
    \  result += \"_\"\n            result += char.lower()\n        else if char ==\
    \ char.lower():\n            result += \"_\"\n            result += char.upper()\n\
    \        else :\n            result += char\n    return result\n</code>\n<|/ a\
    \ tags=string,lowercase,uppercase,haskell |>\n<| a tags=string,lowercase,uppercase,haskell\
    \ |>\n<code>\nimport Data.List", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n            result += char.lower()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>\n@time flip_case(\"\
    Hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the string with all vowels replaced by an underscore.", "    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    ", "    local result = \"\"\n    for char in string:\n        if char ==\
    \ char:\n            result += \"_\"\n        else\n            result += char\n\
    \        end\n    end\n    return result\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += \"_\"\n        else\n       \
    \     result += char.upper()\n        end\n    end\n    return result\nend", " \
    \   local result = \"\"\n    for char in string:\n        if char == char.toUpper():\n\
    \            result += char.toLower()\n        else\n            result += char\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n    \n\
    \    return uppercase+lowercase\nend\n</cell>\n<code language=julia-1.5>", " \
    \   local result = \"\"\n    for char in string:\n        if char == char:\n \
    \           result += \"_\"\n        else\n            result += char.upper()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.4>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result = result + char\n        elseif char == char:\n            result\
    \ = result + char.upper()\n        elseif char == char.upper():\n            result\
    \ = result + char.lower()\n        elseif char == char.lower():\n            result\
    \ = result + char.upper()\n        else\n            result = result + char\n\
    \        end\n    end\n    return result\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis doesn't work for `flip_case(\"Hello\")`\n<|/ c |>\n<| c |>\n\
    I fixed the bug and added a more general solution.\n<|/ c |>\n<| a |>\n<code>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    local result =\
    \ \"\"\n    for c in string:\n        if c.isupper():\n            result = result\
    \ + c.lower()\n        else:\n            result = result + c.upper()\n    return\
    \ result\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for strings with\
    \ non-ASCII characters, e.g. `\xC4` becomes `A`.\n<|/ c |>\n<| a |>\n<code>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else if char.isupper():\n            result\
    \ += char.lower()\n        else if char.islower():\n            result += char.upper()\n\
    \    return result\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if there are\
    \ multiple consecutive uppercase letters.\n<|/ c |>\n<| a tags=string,lowercase,uppercase,haskell,char\
    \ |>\n<code>\nimport Data.List (foldl')", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += char\n        elseif\
    \ char == char.upper():\n            result += char.lower()\n        elseif char\
    \ == char.lower():\n            result += char.upper()\n        else\n       \
    \     result += char\n        end\n    end\n    return result\nend", "    \n \
    \   uppercase = string.uppercase()\n    lowercase = string.lowercase()\n    \n\
    \    return lowercase+uppercase\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2: Write a function\
    \ that takes a string and returns a new string where all characters have been\
    \ converted to lowercase and all characters have been converted to uppercase.\n\
    Hint: Use lowercase() and uppercase() functions.", "    local result = \"\"\n\
    \    for c in string:\n        if c.isupper():\n            result += \"_\"\n\
    \            result += c.lower()\n        else:\n            result += c\n   \
    \ return result\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for all cases.\
    \ For example, `flip_case(\"aBcD\")` returns `aBcD_D`.\n<|/ c |>\n<| c |>\nYes,\
    \ I agree with you. My solution is only a proof of concept. As I said, it can\
    \ be easily adapted to other cases. I only wanted to show that it is possible\
    \ to do it in one line with some functional programming techniques.\n<|/ c |>\n\
    <| c |>\nI agree with you. I just wanted to point out that your solution doesn't\
    \ work for all cases. For example, `flip_case(\"aBcD\")` returns `aBcD_D`.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. I just wanted to show that it is possible\
    \ to do it in one line with some functional programming techniques.\n<|/ c |>\n\
    <| c |>\nI agree with you. I just wanted to point out that your solution doesn't\
    \ work for all cases. For example, `flip_case(\"aBcD\")` returns `aBcD_D`.\n<|/\
    \ c |>\n<| a dscore=4 |>\n<code>", "    \n    lowercase = string.lower()\n   \
    \ uppercase = string.upper()\n    \n    return lowercase + uppercase\nend\n</cell>\n\
    <code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns a string where\
    \ all characters have been converted to lowercase and all characters have been\
    \ converted to uppercase. Test your function with some examples. What happens\
    \ if you pass in a string that has both lowercase and uppercase characters?",
  "    \n    local result = \"\"\n    \n    for character in string:\n        if character\
    \ == character:\n            result += character\n        else\n            result\
    \ += character.toupper()\n        end\n    end\n    \n    return result\nend",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return uppercase + lowercase\nend\n</cell>\n<code language=julia-1.5>\n\
    @test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of characters in the string.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    ", "    \n    string::String \n    \n    lowercase_chars = string.chars()\n\
    \    uppercase_chars = string.chars().map(|c| if c.is_upper() then c else c.to_upper())\n\
    \    \n    string.chars().zip(uppercase_chars).map(|(c,uc)| if c == uc then c\
    \ else uc)\nend\n</cell>\n<code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase\nend\n\
    </cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns a\
    \ new string where all characters are reversed\n(e.g., \"Hello\" becomes \"olleH\"\
    )", "    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        elseif char == char.upper():\n          \
    \  result += char.lower()\n        elseif char == char.lower():\n            result\
    \ += char.upper()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local result = \"\"\n    for char in string:\n  \
    \      if char == char:\n            result += char\n        else\n          \
    \  result += char.upper()\n            result += char.lower()\n        end\n \
    \   end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n    \n\
    \    return uppercase + lowercase\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the string with all uppercase letters replaced\
    \ by lowercase letters.", "    \n    uppercase = string.uppercase()\n    lowercase\
    \ = string.lowercase()\n    \n    uppercase = uppercase.replace(lowercase, lowercase)\n\
    \    lowercase = lowercase.replace(uppercase, uppercase)\n    \n    return lowercase\
    \ + uppercase\nend\n</cell>\n<code language=julia-1.5>", "    local result = \"\
    \"\n    for char in string:\n        if char == char:\n            result += \"\
    _\"\n        else\n            result += char\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return uppercase+lowercase\nend\n\
    </cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n\
    </cell>\n<text>\nExercise 2: Write a function that takes a string and returns\
    \ the number of uppercase letters.\nHint: Use string.uppercase and string.lowercase.",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return lowercase+uppercase[1:] \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the string with all non-alphabetic\
    \ characters removed.", "    local result = \"\"\n    for character in string:\n\
    \        if character == character then\n            result = result .. character\n\
    \        else\n            result = result .. tostring(toupper(character))\n \
    \       end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.4>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += \"_\"\n        else\n            result += char:lower()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    string::String \n    \n    local result = \"\"\n    \n    for char in\
    \ string:\n        if char == char.toUpper():\n            char::Char\n      \
    \      char = char.toLower()\n        else \n            char::Char\n        \
    \    char = char.toUpper()\n        end\n        result = result + char\n    end\n\
    \    \n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for character in string:\n        if character == character.upper():\n\
    \            character = character.lower()\n        result += character\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    lowercase_string = string.lower()\n\
    \    uppercase_string = string.upper()\n    \n    return uppercase_string + lowercase_string\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function \nprintln(flip_case(\"\
    Hello\"))\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the string with all vowels replaced by an underscore.\n>>> replace_vowels(\"\
    Hello\")\n\"_hELLO\"\n>>> replace_vowels(\"Hello World\")\n\"_hELLO _WORLD\"\n\
    >>> replace_vowels(\"Hello World!\")\n\"_hELLO _WORLD!\"\n>>> replace_vowels(\"\
    Hello World! How are you?\")\n\"_hELLO _WORLD! _HOW _ARE_YOU?\"\n>>> replace_vowels(\"\
    Hello World! How are you?\", keep_vowels = true)\n\"_hELLO _WORLD! _HOW _ARE_YOU?\"\
    \n>>> replace_vowels(\"Hello World! How are you?\", keep_vowels = false)\n\"Hello\
    \ World! How are you?\"\n>>> replace_vowels(\"Hello World! How are you?\", keep_vowels\
    \ = true)\n\"_hELLO _WORLD! _HOW _ARE_YOU?\"\n>>> replace_vowels(\"Hello World!\
    \ How are you?\", keep_vowels = false)\n\"Hello World! How are you?\"\n>>> replace_vowels(\"\
    Hello World! How are you?\", keep_vowels = true)\n\"_hELLO _WORLD! _HOW _ARE_YOU?\"\
    \n>>> replace_vowels(\"Hello World! How are you?\", keep_vowels = false)\n\"Hello\
    \ World! How are you?\"\n>>> replace_vowels(\"Hello World! How are you?\", keep_vowels\
    \ = true)\n\"_hELLO _WORLD! _HOW _ARE_YOU?\"\n>>> replace_vowels(\"Hello World!\
    \ How are you?\", keep_vowels = false)\n\"Hello World! How are you?\"\n>>> replace_vowels(\"\
    Hello World! How are you?\", keep_vowels = true)\n\"_hELLO _WORLD! _HOW _ARE_YOU?\"\
    \n>>> replace_vowels(\"Hello World! How are you?\", keep_vowels = false)\n\"Hello\
    \ World! How are you?\"\n>>> replace_vowels(\"Hello World! How are you?\", keep_vowels\
    \ = true)\n\"_hELLO _WORLD! _HOW _ARE_YOU?\"\n>>> ", "    local result = \"\"\n\
    \    for char in string:\n        if char == char:\n            result += char\n\
    \        elseif char == char.upper():\n            result += char.lower()\n  \
    \      elseif char == char.lower():\n            result += char.upper()\n    \
    \    end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result += \"_\"\n            result += c.lower()\n        else:\n     \
    \       result += c\n    return result\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>", "    local result = \"\"\n    for c in string:\n        if c.isupper():\n\
    \            result = result + c.lower()\n        else:\n            result =\
    \ result + c.upper()\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.List",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        elseif char == char:\n            result +=\
    \ \"_\"\n        else\n            result += char.upper()\n        end\n    end\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += \"_\"\n        else\n            result += char\n        end\n    end\n \
    \   return result\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    local result = \"\"\n    for\
    \ c in string:\n        if c.isupper():\n            result += \"_\"\n       \
    \     result += c.lower()\n        else:\n            result += c\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.4>\n# Test the function above\n\
    println(flip_case(\"hello\"))\nprintln(flip_case(\"HELLO\"))\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string where all\
    \ characters are capitalized. For example, if the input string is \"hello\", the\
    \ output should be \"Hello\".", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\n</code>\n<|/ a tags=string,uppercase,lowercase,haskell\
    \ |>\n<| c |>\nThis doesn't work for `flip_case(\"Hello\")` which should return\
    \ `\"hELLO\"`.\n<|/ c |>\n<| c |>\nThe question says \"flip lowercase characters\
    \ to uppercase and uppercase to lowercase\"\n<|/ c |>\n<| c |>\nYes, but your\
    \ function doesn't do that. `flip_case(\"Hello\")` should return `\"hELLO\"`,\
    \ not `\"hEllo\"`.\n<|/ c |>\n<| c |>\nOh I see what you mean. Yeah I missed that\
    \ part. I'll edit my answer.\n<|/ c |>\n<| a |>\n<code>\nimport Data.Char", " \
    \   local result = \"\"\n    for char in string:\n        if char == char:\n \
    \           result += \"_\"\n        else\n            result += char\n      \
    \  end\n    end\n    return result\nend", "    local result = \"\"\n    for c\
    \ in string:\n        if c.isupper():\n            result = result + c.lower()\n\
    \        else:\n            result = result + c.upper()\n    return result\n</code>\n\
    <|/ a tags=string,lowercase,uppercase,haskell |>\n<| c |>\n`map` doesn't modify\
    \ the original string. `map` returns a new list with the results of the function\
    \ applied to each element of the original list. `map` doesn't modify the original\
    \ string. `map` returns a new list with the results of the function applied to\
    \ each element of the original list. `map` doesn't modify the original string.\
    \ `map` returns a new list with the results of the function applied to each element\
    \ of the original list. `map` doesn't modify the original string. `map` returns\
    \ a new list with the results of the function applied to each element of the original\
    \ list. `map` doesn't modify the original string. `map` returns a new list with\
    \ the results of the function applied to each element of the original list. `map`\
    \ doesn't modify the original string. `map` returns a new list with the results\
    \ of the function applied to each element of the original list. `map` doesn't\
    \ modify the original string. `map` returns a new list with the results of the\
    \ function applied to each element of the original list. `map` doesn't modify\
    \ the original string. `map` returns a new list with the results of the function\
    \ applied to each element of the original list. `map` doesn't modify the original\
    \ string. `map` returns a new list with the results of the function applied to\
    \ each element of the original list. `map` doesn't modify the original string.\
    \ `map` returns a new list with the results of the function applied to each element\
    \ of the original list. `map` doesn't modify the original string. `map` returns\
    \ a new list with the results of the function applied to each element of the original\
    \ list. `map` doesn't modify the original string. `map` returns a new list with\
    \ the results of the function applied to each element of the original list. `map`\
    \ doesn't modify the original string. `map` returns a new list with the results\
    \ of the function applied to each element of the original list. `map` doesn't\
    \ modify the original string. `map` returns a new list with the results of the\
    \ function applied to each element of the original list. `map` doesn't modify\
    \ the original string. `map` returns a new list with the results of the function\
    \ applied to each element of the original list. `map` doesn't modify the original\
    \ string. `map` returns a new list with the results of the function applied to\
    \ each element of the original list. `map` doesn't modify the original string.\
    \ `map` returns a new list with the results of the function applied to each element\
    \ of the original list. `map` doesn't modify the original string. `map` returns\
    \ a new list with the results of the function applied to each element of the original\
    \ list. `map` doesn't modify the original string. `", "    local result = \"\"\
    \n    for char in string:\n        if char == char:\n            result += \"\
    _\"\n        else\n            result += char.upper()\n        end\n    end\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n    uppercase\
    \ = string.uppercase()\n    lowercase = string.lowercase()\n    \n    return lowercase+uppercase\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for c\
    \ in string:\n        if c.isupper():\n            result += \"_\"\n         \
    \   result += c.lower()\n        else:\n            result += c\n    return result\n\
    </code>\n<|/ a tags=string,julia |>\n<| c |>\nThanks for your answer! I didn't\
    \ know about `isupper` function. I will try your solution and let you know if\
    \ it works.\n<|/ c |>\n<| c |>\nI tested your solution and it works perfectly.\
    \ Thank you very much!\n<|/ c |>\n<| c |>\nI tested your solution and it works\
    \ perfectly. Thank you very much!\n<|/ c |>\n<| a tags=string,julia |>\n<code>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    lowercase = string.lower()\n\
    \    uppercase = string.upper()\n    \n    return lowercase + uppercase\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert flip_case(\"hello\") == \"hELLO\"\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ string with all uppercase letters replaced by their lowercase counterparts.",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend", "    local result\
    \ = \"\"\n    for character in string:\n        if character == character.upper():\n\
    \            character = character.lower()\n        elif character == character.lower():\n\
    \            character = character.upper()\n        result += character\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    \n    lowercase_chars\
    \ = string.chars\n    uppercase_chars = string.chars.map(char.upper)\n    \n \
    \   return \"\".join(lowercase_chars) + \"\".join(uppercase_chars)\nend", "  \
    \  \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    ", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    uppercase = string.uppercase()\n    lowercase\
    \ = string.lowercase()\n    \n    return uppercase+lowercase\nend\n</cell>\n<code\
    \ language=julia-1.4>\n# Test Cases\n@test flip_case(\"hello\") == \"hELLO\"\n\
    @test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\") == \"hELLO\"\n@test flip_case(\"HellO\") == \"hELLO\"\
    \n@test flip_case(\"HellO\"", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else if char.isupper():\n\
    \            result += char.lower()\n        else if char.islower():\n       \
    \     result += char.upper()\n    return result\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char", " \
    \   \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += \"_\"\n        else:\n            result += char.upper()\n\
    \    return result\nend", "    local result = \"\"\n    for character in string:\n\
    \        if character == character:\n            result += character\n       \
    \ else\n            result += character.toupper()\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n\
    \    for char in string:\n        if char == char:\n            result += char\n\
    \        else\n            result += char.upper()\n            result += char.lower()\n\
    \        end\n    end\n    return result\nend", "    \n    local result = \"\"\
    \n    for char in string:\n        if char == char:\n            result += char\n\
    \        elseif char == char.upper():\n            result += char.lower()\n  \
    \      elseif char == char.lower():\n            result += char.upper()\n    \
    \    end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += \"_\"\n        else\n            result += char:upper()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for character in string:\n        if character ==\
    \ character then\n            character = character .. \"A\"\n        else\n \
    \           character = character .. \"a\"\n        end\n        result = result\
    \ .. character\n    end\n    return result\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    lowercase_chars = string.lowercase()\n    uppercase_chars = string.uppercase()\n\
    \    \n    string = lowercase_chars + uppercase_chars\n    \n    return string\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\ndef flip_case(string):\n    string\
    \ = string.lower()\n    string = string.replace(string[0], string[0].upper())\n\
    \    string = string.replace(string[-1], string[-1].lower())\n    return string\n\
    </code>\n<|/ a tags=string,python |>\n<| a dscore=0 |>\n<code>\ndef flip_case(string):\n\
    \    string = string.lower()\n    string = string.replace(string[0], string[0].upper())\n\
    \    string = string.replace(string[-1], string[-1].lower())\n    return string\n\
    </code>\n<|/ a tags=string,python |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    def flip_case(string):\n    string = string.lower()\n    string = string.replace(string[0],\
    \ string[0].upper())\n    string = string.replace(string[-1], string[-1].lower())\n\
    \    return string\n</code>\n<|/ a tags=string,python |>\n<| c |>\nWhile this\
    \ code may answer the question, providing additional context regarding why and/or\
    \ how this code answers the question improves its long-term value.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\ndef flip_case(string):\n    string = string.lower()\n\
    \    string = string.replace(string[0], string[0].upper())\n    string = string.replace(string[-1],\
    \ string[-1].lower())\n    return string\n</code>\n<|/ a tags=string,python |>\n\
    <| a dscore=0 |>\n<code>\ndef flip_case(string):\n    string = string.lower()\n\
    \    string = string.replace(string[0], string[0].upper())\n    string = string.replace(string[-1],\
    \ string[-1].lower())\n    return string\n</code>\n<|/ a tags=string,python |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef flip_case(string):\n    string\
    \ = string.lower()\n    string = string.replace(string[0], string[0].upper())\n\
    \    string = string.replace(string[-1], string[-1].lower())\n    return string\n\
    </code>\n<|/ a tags=string,python |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its ", "    \n    uppercase = string.uppercase()\n   \
    \ lowercase = string.lowercase()\n    \n    return lowercase+uppercase[1:] \n\
    end\n</cell>\n<code language=julia-1.5>\n# Test Cases\nprintln(flip_case(\"hello\"\
    ))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"\
    HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(flip_case(\"HellO\"))\nprintln(fli",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\nend", "    \n    mutable result = \"\"\n   \
    \ for c in string\n        if islower(c)\n            result = result + uppercase(c)\n\
    \        else\n            result = result + lowercase(c)\n    end\n    return\
    \ result\nend", "    local result = \"\"\n    for c in string:\n        if c.isupper():\n\
    \            result = result + c.lower()\n        else:\n            result =\
    \ result + c.upper()\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell,function\
    \ |>\n<| c |>\nI like your use of local variables. I didn't know about that until\
    \ now. Thanks!\n<|/ c |>\n<| c |>\n`local result = \"\"` can be written `result\
    \ <- \"\"`\n<|/ c |>\n<| c |>\n`local result = \"\"` can be written `result <-\
    \ \"\"`\n<|/ c |>\n<| c |>\n`local result = \"\"` can be written `result <- \"\
    \"`\n<|/ c |>\n<| a tags=string,lowercase,uppercase,haskell,function |>\n<code>\n\
    import Data.Char", "    \n    local result = \"\"\n    \n    for char in string:\n\
    \        if char == char.toUpper():\n            result += char.toLower()\n  \
    \      elseif char == char.toLower():\n            result += char.toUpper()\n\
    \        else\n            result += char\n        end\n    end\n    \n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n\
    \    for c in string:\n        if c.isupper():\n            result = result +\
    \ c.lower()\n        else:\n            result = result + c.upper()\n    return\
    \ result\nend", "    local result = \"\"\n    for character in string:\n     \
    \   if character == toupper(character):\n            character = tolower(character)\n\
    \        result += character\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += \"_\"\n        elseif char == char.upper():\n         \
    \   result += \"_\"\n            result += char.lower()\n        elseif char ==\
    \ char.lower():\n            result += char.upper()\n        else\n          \
    \  result += char\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    ", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else\n            result += char.upper()\n            result\
    \ += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local result = \"\"\n    for char in string:\n  \
    \      if char == char:\n            result += \"_\"\n        else\n         \
    \   result += char\n        end\n    end\n    return result\nend", "    \n   \
    \ local result = \"\"\n    for char in string:\n        if char == char:\n   \
    \         result += \"_\"\n        elseif char == char.upper():\n            result\
    \ += \"_\"\n            result += char.lower()\n        elseif char == char.lower():\n\
    \            result += \"_\"\n            result += char.upper()\n        else\n\
    \            result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for char in string:\n\
    \        if char == char.toupper():\n            result += \"_\"\n           \
    \ result += char.tolower()\n        else:\n            result += char\n    return\
    \ result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell |>\n<| a dscore=2\
    \ |>\nI came up with this solution:\n<code>\nimport Data.Char", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else\n            result += char.upper()\n            result\
    \ += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    lowercase_chars = string.chars\n    uppercase_chars\
    \ = string.chars.map(char.upper)\n    \n    string.chars = uppercase_chars\n \
    \   string.chars = lowercase_chars\n    \n    return string\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nI like your solution, but I feel like it could be made more efficient\
    \ by avoiding `map`. `map` has O(n) complexity, where n is the length of the string.\
    \ Instead, we can use a list comprehension to iterate over the string in one pass.\
    \ `string.chars = [char.upper(char) for char in string.chars]`\n<|/ c |>\n<| c\
    \ |>\nI agree with you. `map` can be very inefficient in some cases. I added your\
    \ solution to my answer.\n<|/ c |>\n<| c |>\nI like your solution, but I feel\
    \ like it could be made more efficient by avoiding `map`. `map` has O(n) complexity,\
    \ where n is the length of the string. Instead, we can use a list comprehension\
    \ to iterate over the string in one pass. `string.chars = [char.upper(char) for\
    \ char in string.chars]`\n<|/ c |>\n<| c |>\nI agree with you. `map` can be very\
    \ inefficient in some cases. I added your solution to my answer.\n<|/ c |>\n<|\
    \ a dscore=1 |>\nI like your solution, but I feel like it could be made more efficient\
    \ by avoiding map. map has O(n) complexity, where n is the length of the string.\
    \ Instead, we can use a list comprehension to iterate over the string in one pass.\
    \ string.chars = [char.upper(char) for char in string.chars]\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a tags=string,haskell,functional-programming |>\nI like your solution,\
    \ but I feel like it could be made more efficient by avoiding map. map has O(n)\
    \ complexity, where n is the length of the string. Instead, we can use a list\
    \ comprehension to iterate over the string in one pass. string.chars = [char.upper(char)\
    \ for char in string.chars]\n<|/ a dscore=1 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\nI like your solution, but I feel like it could be made more efficient by\
    \ avoiding map. map has O(n) complexity, where n is the length of the string.\
    \ Instead, we can use a list comprehension", "    local result = \"\"\n    for\
    \ char in string:\n        if char == char:\n            result += char\n    \
    \    else\n            result += char.upper()\n            result += char.lower()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        else if char == char.upper():\n         \
    \   result += char.lower()\n        else if char == char.lower():\n          \
    \  result += char.upper()\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\nend", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += char\n        elseif\
    \ char == char.upper():\n            result += char.lower()\n        elseif char\
    \ == char.lower():\n            result += char.upper()\n        end\n    end\n\
    \    return result\nend", "    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    ", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    local result = \"\"\n\
    \    for char in string:\n        if char == char:\n            result += char\n\
    \        else\n            result += char.upper()\n            result += char.lower()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return lowercase+uppercase[1:len(uppercase)]\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nprintln(flip_case(\"hello\"))\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nFor example, if the string is 'hello', the function should return\
    \ 5.", "    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.3>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += char\n        else\n\
    \            result += char.upper()\n            result += char.lower()\n    \
    \    end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>\n\
    @time flip_case(\"Hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the string with all the vowels replaced by an underscore.",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\nend", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char.toUpper():\n            result += \"_\"\n\
    \            result += char.toLower()\n        elseif char == char.toLower():\n\
    \            result += \"_\"\n            result += char.toUpper()\n        else\n\
    \            result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for character in string:\n\
    \        if character == character:\n            result += \"_\"\n        else\n\
    \            result += character\n        end\n    end\n    return result\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase[1:]\
    \ \nend\n</cell>\n<code language=julia-1.5>\n@assert flip_case(\"hello\") == \"\
    hELLO\"\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of uppercase and lowercase letters.", "    local result =\
    \ \"\"\n    for c in string:\n        if c.isupper():\n            result += \"\
    _\"\n            result += c.lower()\n        else:\n            result += c\n\
    \    return result\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia\
    \ |>\nIn Julia 1.5 you can also use transcode which does exactly what you want:\n\
    <code>\njulia> transcode(\"Hello\", \"upper\", \"lower\")\n\"hELLO\"\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=string,julia |>\nIn Julia 1.5 you can also use transcode\
    \ which does exactly what you want:\n<code>\njulia> transcode(\"Hello\", \"upper\"\
    , \"lower\")\n\"hELLO\"\n</code>\n<|/ a dscore=3 |>\n<| a dscore=2 |>\nIn Julia\
    \ 1.5 you can also use transcode which does exactly what you want:\n<code>\njulia>\
    \ transcode(\"Hello\", \"upper\", \"lower\")\n\"hELLO\"\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\nIn Julia 1.5 you can also use transcode which\
    \ does exactly what you want:\n<code>\njulia> transcode(\"Hello\", \"upper\",\
    \ \"lower\")\n\"hELLO\"\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia\
    \ 1.5 you can also use transcode which does exactly what you want:\n<code>\njulia>\
    \ transcode(\"Hello\", \"upper\", \"lower\")\n\"hELLO\"\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a dscore=2 |>\nIn Julia 1.5 you can also use transcode which does exactly\
    \ what you want:\n<code>\njulia> transcode(\"Hello\", \"upper\", \"lower\")\n\"\
    hELLO\"\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=2 |>\nIn Julia 1.5 you\
    \ can also use transcode which does exactly what you want:\n<code>\njulia> transcode(\"\
    Hello\", \"upper\", \"lower\")\n\"hELLO\"\n</code>\n<|/ a tags=string,julia |>\n\
    <| a dscore=2 |>\nIn Julia 1.5 you can also use transcode which does exactly what\
    \ you want:\n<code>\njulia> transcode(\"Hello\", \"upper\", \"lower\")\n\"hELLO\"\
    \n</code>\n<|/ a tags=string,julia |>\n<| a dscore=2 |>\nIn Julia ", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += \"_\"\n        elseif char == char.upper():\n            result\
    \ += \"_\"\n            result += char.lower()\n        elseif char == char.lower():\n\
    \            result += char.upper()\n        else\n            result += char\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    string::String \n    \n    lowercase_chars::Set[Char] = Set(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n    uppercase_chars::Set[Char] = Set(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    \n\
    \    lowercase_chars::Set[Char] & uppercase_chars\n    \n    uppercase_chars::Set[Char]\
    \ & lowercase_chars\n    \n    lowercase_chars::Set[Char] & uppercase_chars\n\
    \    \n    uppercase_chars::Set[Char] & lowercase_chars\n    \n    lowercase_chars::Set[Char]\
    \ & uppercase_chars\n    \n    uppercase_chars::Set[Char] & lowercase_chars\n\
    \    \n    lowercase_chars::Set[Char] & uppercase_chars\n    \n    uppercase_chars::Set[Char]\
    \ & lowercase_chars\n    \n    lowercase_chars::Set[Char] & uppercase_chars\n\
    \    \n    uppercase_chars::Set[Char] & lowercase_chars\n    \n    lowercase_chars::Set[Char]\
    \ & uppercase_chars\n    \n    uppercase_chars::Set[Char] & lowercase_chars\n\
    \    \n    lowercase_chars::Set[Char] & uppercase_chars\n    \n    uppercase_chars::Set[Char]\
    \ & lowercase_chars\n    \n    lowercase_chars::Set[Char] & uppercase_chars\n\
    \    \n    uppercase_chars::Set[Char] & lowercase_chars\n    \n    lowercase_chars::Set[Char]\
    \ & uppercase_chars\n    \n    uppercase_chars::Set[Char] & lowercase_chars\n\
    \    \n    lowercase_chars::Set[Char] & uppercase_chars\n    \n    uppercase_chars::Set[Char]\
    \ & lowercase_chars\n    \n    lowercase_chars::Set[Char] & uppercase_chars\n\
    \    \n    uppercase_chars::Set[Char] & lowercase_chars\n    \n    lowercase_chars::Set[Char]\
    \ & uppercase_chars\n    \n    uppercase_chars::Set[Char] & lowercase_chars\n\
    \    \n    lowercase_chars::Set[Char] & uppercase_chars\n    \n    uppercase_chars::Set[Char]\
    \ & lowercase_chars\n    \n    lowercase_chars::Set[Char] ", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else\n            result += char.upper()\n            result\
    \ += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local result = \"\"\n    for c in string:\n     \
    \   if c.isupper():\n            result = result + c.lower()\n        elseif c.islower():\n\
    \            result = result + c.upper()\n        else\n            result = result\
    \ + c\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    ", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result += \"_\"\n            result += c.lower()\n\
    \        else:\n            result += c\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a |>\n<code>\nimport Data.List\nimport Data.Char", "    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    ", "    local result = \"\"\n    for c in string:\n        if c.isupper():\n\
    \            result += \"_\"\n            result += c.lower()\n        else:\n\
    \            result += c\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        else if char.isupper():\n            result\
    \ += char.lower()\n        else if char.islower():\n            result += char.upper()\n\
    \        else :\n            result += char\n    return result\n</code>\n<|/ a\
    \ tags=string,uppercase,lowercase,haskell |>\n<| a dscore=2 |>\n<code>\nimport\
    \ Data.Char", "    local result = \"\"\n    for char in string:\n        if char\
    \ == char:\n            result += char\n        elseif char == char:\n       \
    \     result += char.upper()\n            result += char.lower()\n        else\n\
    \            result += char\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += \"_\"\n        else\n\
    \            result += char:upper()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += \"_\"\n        else\n\
    \            result += char:lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    uppercase = string.uppercase()\n    lowercase\
    \ = string.lowercase()\n    \n    return lowercase+uppercase[1:len(uppercase)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert flip_case(\"hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all characters in lower case and all characters in upper case.\
    \ For example, \"hello\" -> \"Hello\" and \"HELLO\" -> \"HELLO\".", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        elseif char == char.upper():\n            result +=\
    \ char.lower()\n        elseif char == char.lower():\n            result += char.upper()\n\
    \        else\n            result += char\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result = result + char\n \
    \       else\n            result = result + char.upper()\n        end\n    end\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n    lowercase_string\
    \ = string.lower()\n    uppercase_string = string.upper()\n    \n    return uppercase_string\
    \ + lowercase_string\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else\n            result += char.upper()\n            result\
    \ += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    lowercase_string = string.lower()\n    uppercase_string\
    \ = string.upper()\n    \n    return uppercase_string + lowercase_string\nend\n\
    </cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result += \"_\"\n            result += c.lower()\n\
    \        else:\n            result += c\n    return result\nend", "    \n    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += \"_\"\n        else\n            result += char.upper()\n      \
    \  end\n    end\n    return result\nend", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    uppercase = uppercase.replace(uppercase,lowercase)\n\
    \    lowercase = lowercase.replace(lowercase,uppercase)\n    \n    return lowercase\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for character\
    \ in string:\n        if character == character.upper():\n            character\
    \ = character.lower()\n        elif character == character.lower():\n        \
    \    character = character.upper()\n        result =  result + character\n   \
    \ return result\nend\n</cell>\n<code language=julia-1.5>", "    local result =\
    \ \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else\n            result += char.upper()\n            result\
    \ += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    lowercase_string = string.lower()\n    uppercase_string\
    \ = string.upper()\n    \n    return uppercase_string + lowercase_string\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nprintln(flip_case(\"\
    Hello\"))\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in the string.\nHint: Use length", "    \n\
    \    string = string.lower()\n    \n    for char in string:\n        if char.isupper():\n\
    \            string = string.replace(char, char.upper())\n        else:\n    \
    \        string = string.replace(char, char.lower())\n    \n    return string\n\
    </cell>\n<cell>\n# Test your function\nresult = flip_case(\"hello\")\nassert result\
    \ == \"hELLO\", \"Your function returned {}, expected {}\".format(result, \n \
    \                                                                            \"\
    hELLO\")\n</cell>\n<text>\nAvoiding loops\nEarlier in this notebook, you wrote\
    \ a function that capitalized the first letter of each word in a string. Now,\
    \ you will modify that function so that it avoids using loops in its implementation.",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += \"_\"\n        else\n            result += char\n     \
    \   end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    uppercase = uppercase.replace(uppercase,lowercase)\n    lowercase =\
    \ lowercase.replace(lowercase,uppercase)\n    \n    return lowercase\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n            result += char.lower()\n        end\n\
    \    end\n    return result\nend", "    \n    local result = \"\"\n    \n    for\
    \ char in string:\n        if char == char:\n            result += \"_\"\n   \
    \     else if char == char.upper():\n            result += char.lower()\n    \
    \    else if char == char.lower():\n            result += char.upper()\n     \
    \   else :\n            result += char\n    end\n    \n    return result\nend",
  "    local result = \"\"\n    for c in string.gmatch(\"%a\")::Vector{String}\n \
    \       result = result + c.toupper()\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for character in string:\n\
    \        if character == character then\n            character = character ..\
    \ \"a\"\n        else\n            character = character .. \"A\"\n        end\n\
    \        result = result .. character\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for c in string:\n \
    \       if c.isupper():\n            result += \"_\"\n            result += c.lower()\n\
    \        else:\n            result += c\n    return result\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += \"_\"\n        else\n            result += char\n       \
    \ end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", " \
    \   local result = \"\"\n    for char in string:\n        if char == char.toUpper():\n\
    \            char = toLower()\n        elif char == char.toLower():\n        \
    \    char = toUpper()\n        end\n        result = result + char\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    \n    local result =\
    \ \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += \"_\"\n        else\n            result += char\n        end\n    end\n \
    \   return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for c in string:\n        if c.isupper():\n            result =\
    \ result + c.lower()\n        elseif c.islower():\n            result = result\
    \ + c.upper()\n        else\n            result = result + c\n        end\n  \
    \  end\n    return result\nend\n</cell>\n<code language=julia-1.4>", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += \"_\"\n        else\n            result += char\n        end\n \
    \   end\n    return result\nend", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\nend", "    local\
    \ result = \"\"\n    for c in string:\n        if c.isupper():\n            result\
    \ = result + c.lower()\n        else:\n            result = result + c.upper()\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for c in string:\n        if c.isupper():\n            result =\
    \ result + c.lower()\n        else:\n            result = result + c.upper()\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else if char >= \"a\" and char <= \"z\":\n            result\
    \ += char.upper()\n        else if char >= \"A\" and char <= \"Z\":\n        \
    \    result += char.lower()\n        else if char >= \"0\" and char <= \"9\":\n\
    \            result += char\n        else if char >= \"a\" and char <= \"z\":\n\
    \            result += char.upper()\n        else if char >= \"A\" and char <=\
    \ \"Z\":\n            result += char.lower()\n        else if char >= \"0\" and\
    \ char <= \"9\":\n            result += char\n    return result\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work for all cases. For example, `flip_case(\"\
    A\")` returns `\"a\"`.\n<|/ c |>\n<| c |>\nI fixed the issue you mentioned, thank\
    \ you!\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    local result = \"\"\n    for\
    \ char in string:\n        if char == char:\n            result += char\n    \
    \    else\n            result += char.upper()\n            result += char.lower()\n\
    \        end\n    end\n    return result\nend", "    local result = \"\"\n   \
    \ for char in string:\n        if char == char:\n            result += char\n\
    \        else\n            result += char.upper()\n            result += char.lower()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return uppercase+lowercase\nend\n</cell>\n<code language=julia-1.5>\n\
    @test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of characters in the string.",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ answer the question. He wants to flip uppercase to lowercase and vice versa,\
    \ not just uppercase to lowercase.\n<|/ c |>\n<| c |>\nI agree with you, my answer\
    \ was more of a \"how to flip uppercase to lowercase and vice versa\" rather than\
    \ \"how to flip lowercase to uppercase and vice versa\"\n<|/ c |>\n<| a |>\n<code>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    local result = \"\"\n   \
    \ for c in string:\n        if c:lower() == c:upper():\n            result = \
    \ result + c:lower()\n        else\n            result =  result + c:upper()\n\
    \    end\n    return result\nend", "    \n    local result = \"\"\n    for char\
    \ in string:\n        if char == char.toUpper():\n            result = result\
    \ + char.toLower()\n        elseif char == char.toLower():\n            result\
    \ = result + char.toUpper()\n        else\n            result = result + char\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for character in string:\n        if character ==\
    \ character then\n            character = character:upper()\n        end\n   \
    \     result = result .. character\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n            result += char.lower()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    string::String \n    \n    lowercase_chars = string.chars\n    uppercase_chars\
    \ = string.chars.map(&:upcase)\n    \n    string.chars = lowercase_chars + uppercase_chars\n\
    \    \n    return string\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for c in string:\n        if c.isupper():\n            result\
    \ = result + c.lower()\n        elseif c.islower():\n            result = result\
    \ + c.upper()\n        else\n            result = result + c\n        end\n  \
    \  end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        else\n            result += char.upper()\n       \
    \     result += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for c in string:\n \
    \       if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local result = \"\"\n    for c in string:\n     \
    \   if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    uppercase = string.uppercase()\n    lowercase\
    \ = string.lowercase()\n    \n    return uppercase+lowercase\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test the function \nprintln(flip_case(\"Hello\"))\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the string\
    \ with all spaces replaced by underscores.", "    \n    local result = \"\"\n\
    \    for char in string:\n        if char == char:\n            result += char\n\
    \        else if char.isupper():\n            result += char.lower()\n       \
    \ else if char.islower():\n            result += char.upper()\n        else :\n\
    \            result += char\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function\n@test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the string with all\
    \ non-alphanumeric characters removed.\ne.g. \"Hello World!\" -> \"Hello World\"",
  "    local result = \"\"\n    for character in string:\n        if character ==\
    \ character then\n            character = character .. \"A\"\n        else\n \
    \           character = character .. \"a\"\n        end\n        result = result\
    \ .. character\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    ", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result += \"_\"\n            result += c.lower()\n\
    \        else:\n            result += c\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| c |>\nThis doesn't work for `flip_case(\"Hello\")`\n<|/ c |>\n<| c |>\n\
    It does work for me. `flip_case(\"Hello\")` returns `\"hELLO\"`.\n<|/ c |>\n<|\
    \ c |>\nI guess you meant `flip_case(\"Hello\")` returns `\"hELLO\"`.\n<|/ c |>\n\
    <| c |>\nYes, thanks for pointing that out. I've corrected the answer.\n<|/ c\
    \ |>\n<| a dscore=3 |>\n<code>\nimport Data.Char", "    \n    lowercase_string\
    \ = string.lower()\n    uppercase_string = string.upper()\n    \n    return uppercase_string\
    \ + lowercase_string\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else\n            result += char.upper()\n            result\
    \ += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    lowercase_string = string.lower()\n\
    \    uppercase_string = string.upper()\n    \n    return uppercase_string + lowercase_string\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result += \"_\"\n            result += c.lower()\n        else:\n     \
    \       result += c\n    return result\n</code>\n<|/ a |>\n<| a tags=string,lowercase,uppercase,haskell\
    \ |>\n<code>\nimport Data.List", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    local result = \"\"\n    for char in string:\n        if\
    \ char == char:\n            result += char\n        else\n            result\
    \ += char.upper()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local result = \"\"\n    for char in string:\n  \
    \      if char == char:\n            result += \"_\"\n        elseif char == char.upper():\n\
    \            result += \"_\"\n            result += char.lower()\n        elseif\
    \ char == char.lower():\n            result += char.upper()\n        else\n  \
    \          result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    local result = \"\"\n    for char in string:\n        if char ==\
    \ char:\n            result = result + char\n        elseif char == char.upper():\n\
    \            result = result + char.lower()\n        elseif char == char.lower():\n\
    \            result = result + char.upper()\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase[1:len(uppercase)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a new string where all characters have been converted to lowercase and all uppercase\
    \ characters have been converted to uppercase.", "    local result = \"\"\n  \
    \  for character in string:\n        if character == character:\n            result\
    \ += character\n        else\n            result += tostring(toupper(character))\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        elseif c.islower():\n            result\
    \ = result + c.upper()\n        else\n            result = result + c\n      \
    \  end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lowercase_chars = string.chars\n    uppercase_chars = string.chars.map(char.upper)\n\
    \    \n    return \"\".join(lowercase_chars) + \"\".join(uppercase_chars)\nend\n\
    </cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char in\
    \ string:\n        if char == char:\n            result += char\n        else\n\
    \            result += char.upper()\n            result += char.lower()\n    \
    \    end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local result = \"\"\n    \n    for char in string:\n        if char ==\
    \ char:\n            result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    \n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase[1:uppercase.len()-1]\n\
    end\n</cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all uppercase letters replaced by their lowercase counterparts.\
    \ For example, if the input string is \"hello\", the output should be \"hELLO\"\
    .", "    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    ", "    local result = \"\"\n    for char in string:\n\
    \        if char == char.toUpper():\n            char = char.toLower()\n     \
    \   end\n        result = result + char\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += \"_\"\n        else\n       \
    \     result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for char in string:\n\
    \        if char >= 'a' and char <= 'z':\n            char = char - 32\n     \
    \   elif char >= 'A' and char <= 'Z':\n            char = char - 64\n        else\n\
    \            char = char\n        end\n        result = result .. char\n    end\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n    string::String\n\
    \    \n    local result = \"\"\n    \n    for char in string:\n        if char\
    \ == char:\n            result += \"_\"\n        else:\n            result +=\
    \ char\n    \n    return result\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += char\n        elseif\
    \ char == char.upper():\n            result += char.lower()\n        elseif char\
    \ == char.lower():\n            result += char.upper()\n        else\n       \
    \     result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    chars = string.chars\n    \n    for i in 0..(length(chars)-1)\n\
    \        chars[i] = chars[i].toUpper()\n    end\n    \n    return join(chars,\
    \ \"\")\nend", "    local result = \"\"\n    for c in string:\n        if c:islower()\
    \ then\n            c = c:upper()\n        else\n            c = c:lower()\n \
    \       end\n        result = result .. c\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>\n@time flip_case(\"Hello\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nHint: Use length", "    \n    lowercase_chars = string.chars\n\
    \    uppercase_chars = string.chars.map(&:upcase)\n    \n    string.chars = lowercase_chars\
    \ + uppercase_chars\n    \n    return string\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
