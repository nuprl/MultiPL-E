name: HumanEval_79_decimal_to_binary
language: jl
prompt: "\"\"\"You will be given a number in decimal form and your task is to convert\
  \ it to\n    binary format. The function should return a string, with each character\
  \ representing a binary\n    number. Each character in the string will be '0' or\
  \ '1'.\n\n    There will be an extra couple of characters 'db' at the beginning\
  \ and at the end of the string.\n    The extra characters are there to help with\
  \ the format.\n\n    Examples:\n    >>> decimal_to_binary(15)\n    \"db1111db\"\n\
  \    >>> decimal_to_binary(32)\n    \"db100000db\"\n    \"\"\"\nfunction decimal_to_binary(decimal::Int64)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = decimal_to_binary;\n\t@test(candidate(0)\
  \ == \"db0db\")\n\t@test(candidate(32) == \"db100000db\")\n\t@test(candidate(103)\
  \ == \"db1100111db\")\n\t@test(candidate(15) == \"db1111db\")\nend\n"
completions: ["    \n    binary = \"\"\n    \n    for digit in decimal\n        binary\
    \ = binary + str((digit==1)*1)\n        binary = binary + str((digit==0)*1)\n\
    \    \n    binary = binary + \"db\"\n    binary = binary + str((decimal==0)*1)\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. You will\
    \ be given a string of binary numbers and your task is to convert it to decimal\
    \ numbers. The function should return a string.", "    binary = \"\"\n    for\
    \ digit in decimal::Int64\n        if digit == 0\n            binary += \"0\"\n\
    \        else\n            binary += \"1\"\n    end\n    binary = \"db\" + binary\
    \ + \"db\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. Your function should take in a string and return a string.",
  "    \n    if decimal < 0\n        error(\"Decimal cannot be negative\")\n    end",
  "    binary = \"\"\n    decimal = decimal % 2\n    while decimal != 0\n        binary\
    \ = binary + \"0\"\n        decimal = decimal // 2\n    binary = binary + \"1\"\
    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. \nThe function\
    \ should take in a string and return the decimal number. \nThe string will always\
    \ have 'db' at the start and end.", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2:\n        binary = binary + \"0\"\n        return binary\n    \n    decimal\
    \ = decimal % 2\n    \n    while decimal > 0:\n        decimal = decimal // 2\n\
    \        binary = binary + \"1\"\n    \n    return binary + \"db\"", "    \n \
    \   binary = \"\"\n    \n    if decimal < 2:\n        binary = \"0\"\n       \
    \ return binary\n    \n    decimal = decimal % 2\n    \n    while decimal > 0:\n\
    \        binary = binary + \"1\"\n        decimal = decimal // 2\n    \n    binary\
    \ = binary + \"0\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts binary numbers to\
    \ decimal numbers. A binary number consists of a\nstring of 1s and 0s. The function\
    \ should take in a string of 1s and 0s and return an Int64.", "    \n    if decimal\
    \ < 0\n        error(\"Decimal number must be positive\")\n    end\n    \n   \
    \ binary = \"\"\n    \n    while decimal > 0\n        binary = string(decimal%2)\
    \ + binary\n        decimal = decimal/2\n    end\n    \n    binary = string(decimal%2)\
    \ + binary\n    \n    return binary\nend", "    if decimal < 0 \n        error(\"\
    decimal must be positive\")\n    else if decimal > 2^(64 - 1) \n        error(\"\
    decimal must be less than 2^64\")\n    else \n        binary = \"\"\n        while\
    \ decimal > 0 \n            binary = string(binary, 0, 64 - length(binary))\n\
    \            decimal = decimal / 2\n            binary = string(binary, 0, length(binary)\
    \ + 1)\n        end\n        binary = string(binary, 0, length(binary) + 1)\n\
    \        binary = string(binary, 0, 64 - length(binary))\n        return binary\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a decimal number to hexadecimal format. The function\
    \ should return a string.", "    \n    binary = \"\"\n    \n    if decimal < 2:\n\
    \        binary = binary + \"0\"\n        return binary\n    \n    decimal = decimal\
    \ - 2\n    \n    while decimal >= 2:\n        binary = binary + \"1\"\n      \
    \  decimal = decimal - 2\n    \n    binary = binary + \"0\"\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts binary numbers to decimal numbers. Your function\
    \ should take in a string and return a string.", "    if decimal < 0\n       \
    \ error(\"decimal must be positive\")\n    else if decimal > 2^(64 - 64)\n   \
    \     error(\"decimal too large\")\n    else\n        binary = \"\"\n        decimal\
    \ = decimal % 2\n        while decimal > 0\n            binary = binary + \"0\"\
    \n            decimal = decimal // 2\n        binary = binary + \"1\"\n      \
    \  binary = binary + \"db\"\n        return binary\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to a decimal number. Your function should take in a binary string\
    \ and return a decimal number.", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 0\n        error(\"Decimal cannot be negative\")\n    \n    if decimal < 1\n\
    \        error(\"Decimal cannot be less than 1\")\n    \n    if decimal > 2^(64-1)\n\
    \        error(\"Decimal cannot be greater than 2^(64-1)\")\n    \n    decimal\
    \ = decimal % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\
    \n        decimal = decimal // 2\n    \n    binary = binary + \"1\"\n    \n  \
    \  binary = binary + \"db\"\n    \n    return binary\nend", "    binary_string\
    \ = \"\"\n    \n    for digit in decimal\n        binary_string += \"0\"\n   \
    \     if decimal % 2 == 0\n            binary_string += \"1\"\n        end\n \
    \   end\n    \n    binary_string += \"db\"\n    \n    return binary_string\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that will convert a binary number\
    \ into a decimal number. The function should take in a string and return a Int64.",
  "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    The decimal number must be between 2 and 64\"))\n    end", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    if decimal < 0\n        error(\"\
    decimal number must be positive\")\n    end\n    \n    binary = \"\"\n    \n \
    \   if decimal < 0\n        error(\"decimal number must be positive\")\n    end\n\
    \    \n    binary = string(decimal, \"b\")\n    \n    if binary == \"\"\n    \
    \    error(\"decimal number must be positive\")\n    end\n    \n    if binary\
    \ == \"0\"\n        error(\"decimal number must be positive\")\n    end\n    \n\
    \    if binary == \"1\"\n        error(\"decimal number must be positive\")\n\
    \    end\n    \n    if binary == \"10\"\n        error(\"decimal number must be\
    \ positive\")\n    end\n    \n    if binary == \"11\"\n        error(\"decimal\
    \ number must be positive\")\n    end\n    \n    if binary == \"100\"\n      \
    \  error(\"decimal number must be positive\")\n    end\n    \n    if binary ==\
    \ \"101\"\n        error(\"decimal number must be positive\")\n    end\n    \n\
    \    if binary == \"110\"\n        error(\"decimal number must be positive\")\n\
    \    end\n    \n    if binary == \"111\"\n        error(\"decimal number must\
    \ be positive\")\n    end\n    \n    if binary == \"1000\"\n        error(\"decimal\
    \ number must be positive\")\n    end\n    \n    if binary == \"1001\"\n     \
    \   error(\"decimal number must be positive\")\n    end\n    \n    if binary ==\
    \ \"1010\"\n        error(\"decimal number must be positive\")\n    end\n    \n\
    \    if binary == \"1011\"\n        error(\"decimal number must be positive\"\
    )\n    end\n    \n    if binary == \"1100\"\n        error(\"decimal number must\
    \ be positive\")\n    end\n    \n    if binary == \"1101\"\n        error(\"decimal\
    \ number must be positive\")\n    end\n    \n    if binary == \"1110\"\n     \
    \   error(\"decimal number must be positive\")\n    end\n    \n    if binary ==\
    \ \"1111\"\n        error(\"decimal number must be positive\")\n    end\n    \n\
    \    if binary == \"10000\"\n        error(\"decimal number must be positive\"\
    )\n    end\n    \n    if binary == \"10001\"\n        error(\"decimal number must\
    \ be positive\")\n    end\n    \n    if binary == \"10010\"\n        error(\"\
    decimal number must be positive\")\n    end\n    \n    if binary == \"10011\"\n\
    \        error(\"decimal number must be positive\")\n    end\n    \n    if binary\
    \ == \"10100\"\n        error(\"decimal number must be positive\")\n    end\n\
    \    \n    if binary == \"10101\"\n        error(\"decimal number must be positive\"\
    )\n    end\n    \n    if binary == \"10110\"\n        error(\"decimal number must\
    \ be positive\")\n    end\n    \n    if binary == \"10111\"\n        error(\"\
    decimal number must be positive\")\n    end\n    \n    if binary == \"11000",
  "    \n    if decimal < 0\n        error(\"Decimal number must be positive\")\n\
    \    end", "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary\
    \ = binary + \"0\"\n        return binary\n    \n    decimal = decimal % 2\n \
    \   \n    binary = binary + decimal_to_binary(decimal / 2)\n    \n    if decimal\
    \ % 2 != 1:\n        binary = binary + \"0\"\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers.", "    \n    binary = \"\"\n    \n    if\
    \ decimal < 2:\n        binary = binary + \"0\"\n        return binary\n    \n\
    \    decimal = decimal - 2\n    \n    while decimal >= 2:\n        decimal = decimal\
    \ / 2\n        binary = binary + \"1\"\n    \n    decimal = decimal - 2\n    \n\
    \    while decimal >= 1:\n        decimal = decimal / 2\n        binary = binary\
    \ + \"0\"\n    \n    binary = binary + \"1\"\n    \n    return binary\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that converts a decimal number to binary\
    \ and returns the string in reverse order.", "    binary = \"\"\n    decimal =\
    \ decimal % 2\n    decimal = decimal / 2\n    while decimal != 0\n        binary\
    \ = binary + \"0\"\n        decimal = decimal / 2\n    binary = binary + \"1\"\
    \n    binary = binary + \"b\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary to decimal.",
  "    if decimal < 0\n        error(\"Decimal number must be positive\")\n    end\n\
    \    binary = \"\"\n    decimal = decimal % 2\n    while decimal > 0\n       \
    \ binary = string(decimal) + binary\n        decimal = decimal / 2\n    end\n\
    \    binary = string(decimal) + binary\n    binary = binary + \"db\"\n    return\
    \ binary\nend\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary\
    \ number to a decimal number. The function should take in a string and return\
    \ a Int64.", "    if decimal < 0\n        error(\"Decimal number must be positive\"\
    )\n    end\n    binary = \"\"\n    while decimal > 0\n        binary = string(decimal\
    \ % 2) + binary\n        decimal = decimal / 2\n    end\n    binary = string(decimal)\
    \ + binary\n    binary = string(binary)\n    binary = string(binary)\n    binary\
    \ = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(", "    \n    binary_string = \"\"\n    \n    binary_string\
    \ += \"db\"\n    \n    binary_string += decimal_to_binary(decimal % 2)\n    \n\
    \    binary_string += decimal_to_binary(decimal / 2)\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a decimal number to its binary representation in reverse\
    \ order. For example,\n    given decimal number 15, the function should return\
    \ \"11\"", "    if decimal < 0\n        error(\"Decimal cannot be negative\")\n\
    \    elseif decimal > 9223372036854775807\n        error(\"Decimal cannot be greater\
    \ than 9223372036854775807\")\n    else\n        binary = \"\"\n        decimal\
    \ = decimal % 2\n        while decimal > 0\n            binary = binary + \"0\"\
    \n            decimal = decimal - 1\n        binary = binary + \"1\"\n       \
    \ binary = binary + \"b\"\n        return binary\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nProblem 3\nWrite a function that converts\
    \ a binary number to decimal form. The function should take in a string\n    in\
    \ binary format and return the decimal number in decimal form.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    binary = \"\"\n    for digit\
    \ in decimal\n        binary = binary + digit2binary(digit)\n    return binary\n\
    end", "    \n    binary = \"\"\n    \n    if decimal > 0 \n        binary = decimal_to_binary(decimal\
    \ - 1)\n    \n    binary += \"0\"\n    \n    if decimal < 10 \n        binary\
    \ += \"1\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that converts a binary number to\
    \ a decimal number. \nThe function should take in a string and return a number.",
  "    if decimal < 0\n        error(\"Decimal number must be positive\")\n    end",
  "    \n    binary_string = \"\"\n    \n    if decimal < 2:\n        binary_string\
    \ = \"0\"\n    \n    if decimal < 10:\n        binary_string = \"0\" + binary_string\n\
    \    \n    if decimal < 100:\n        binary_string = \"1\" + binary_string\n\
    \    \n    if decimal < 1000:\n        binary_string = \"10\" + binary_string\n\
    \    \n    if decimal < 10000:\n        binary_string = \"100\" + binary_string\n\
    \    \n    if decimal < 100000:\n        binary_string = \"1000\" + binary_string\n\
    \    \n    if decimal < 1000000:\n        binary_string = \"10000\" + binary_string\n\
    \    \n    if decimal < 10000000:\n        binary_string = \"100000\" + binary_string\n\
    \    \n    if decimal < 100000000:\n        binary_string = \"1000000\" + binary_string\n\
    \    \n    if decimal < 1000000000:\n        binary_string = \"10000000\" + binary_string\n\
    \    \n    if decimal < 10000000000:\n        binary_string = \"100000000\" +\
    \ binary_string\n    \n    if decimal < 100000000000:\n        binary_string =\
    \ \"1000000000\" + binary_string\n    \n    if decimal < 1000000000000:\n    \
    \    binary_string = \"10000000000\" + binary_string\n    \n    if decimal < 1000000000000:\n\
    \        binary_string = \"100000000000\" + binary_string\n    \n    if decimal\
    \ < 10000000000000:\n        binary_string = \"1000000000000\" + binary_string\n\
    \    \n    if decimal < 100000000000000:\n        binary_string = \"10000000000000\"\
    \ + binary_string\n    \n    if decimal < 1000000000000000:\n        binary_string\
    \ = \"100000000000000\" + binary_string\n    \n    if decimal < 10000000000000000:\n\
    \        binary_string = \"1000000000000000\" + binary_string\n    \n    if decimal\
    \ < 100000000000000000:\n        binary_string = \"10000000000000000\" + binary_string\n\
    \    \n    if decimal < 1000000000000000000:\n        binary_string = \"100000000000000000\"\
    \ + binary_string\n    \n    if decimal < 10000000000000000000:\n        binary_string\
    \ = \"1000000000000000000\" + binary_string\n    \n    if decimal < 100000000000000000000:\n\
    \        binary_string = \"10000000000000000000\" + binary_string\n    \n    if\
    \ decimal < 1000000000000000000000:\n        binary_string = \"100000000000000000000\"\
    \ + binary_string\n    \n    if decimal < 10000000000000000000000:\n        binary_string\
    \ = \"1000000000000000000000\" + binary_string\n    \n    if decimal < 100000000000000000000000:\n\
    \        binary_string = \"10000000000000000000000\" + binary_string\n    \n \
    \   if decimal < 1000000000000000000000000:\n        binary_string = \"100000000000000000000000\"\
    \ + binary_string\n    \n    if decimal < 10000000000000000000000000:\n      \
    \  binary_string", "    \n    binary = \"\"\n    \n    if decimal > 0 \n     \
    \   \n        decimal = decimal % 2\n        \n        while decimal > 0 \n  \
    \          \n            binary = binary + \"1\"\n            decimal = decimal\
    \ - 1\n            \n        binary = binary + \"0\"\n        \n    else \n  \
    \      \n        decimal = decimal % 2\n        \n        while decimal > 0 \n\
    \            \n            binary = binary + \"0\"\n            decimal = decimal\
    \ - 1\n            \n        binary = binary + \"1\"\n        \n    return binary\n\
    end\n</cell>\n<text>\nNow let's test the function by printing out a few examples:",
  "    \n    binary = \"\"\n    \n    for digit in decimal\n        binary = binary\
    \ + str((digit % 2) == 0)\n        \n    return binary + \"db\"\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. Your function should take in a binary string\
    \ and return a decimal number.", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        throw(ArgumentError(\"decimal must be between 2\
    \ and 64\"))\n    end\n    \n    if decimal < 10\n        binary = string(decimal,\
    \ \"b\")\n    else\n        binary = string(decimal % 2, \"b\")\n        \n  \
    \      decimal /= 2\n        \n        while decimal > 0\n            binary =\
    \ string(decimal % 2, \"b\") + binary\n            decimal /= 2\n        end\n\
    \    end\n    \n    binary = string(binary, \"b\") + string(64 - decimal, \"b\"\
    )\n    \n    return binary\nend", "    if decimal < 0\n        error(\"decimal\
    \ number must be positive\")\n    end\n    binary = \"\"\n    decimal = decimal\
    \ % 2\n    while decimal > 0\n        binary = string(decimal) + binary\n    \
    \    decimal = decimal / 2\n    end\n    binary = string(decimal) + binary\n \
    \   binary = string(binary, length(binary) - 2)\n    return binary\nend", "  \
    \  \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return\
    \ binary\n    \n    decimal = decimal % 2\n    \n    if decimal < 10\n       \
    \ binary = \"0\" + binary\n    \n    binary = binary + decimal_to_binary(decimal\
    \ / 2)\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string with each character representing a binary number\
    \ and return a string with each character representing a decimal number. Each\
    \ character in the string will be '0' or '1'.", "    binary_string = \"\"\n  \
    \  \n    for digit in decimal\n        binary_string += \"0\"\n        if digit\
    \ == 1\n            binary_string += \"1\"\n        else\n            binary_string\
    \ += \"0\"\n    end\n    \n    binary_string += \"db\"\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts binary numbers to decimal numbers. Your function should\
    \ take in a binary string and return a decimal number.", "    \n    binary = \"\
    \"\n    \n    decimal = decimal % 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary + \"\
    0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary + \"\
    0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary + \"\
    0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n", "    binary_string = \"\"\
    \n    for digit in decimal\n        binary_string += if digit == 0 then \"0\"\
    \ else \"1\"\n    end\n    binary_string += \"db\"\n    return binary_string\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary string\
    \ to decimal form.", "    binary = \"\"\n    for digit in decimal_to_binary(decimal)\n\
    \        binary += \"0\"\n    binary += \"1\"\n    return binary\nend\n</cell>\n\
    <code language=julia-1.0>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.0>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a decimal number to binary and returns the string in reverse order. \nThe function\
    \ should take one argument, decimal::Int64.", "    \n    binary_string = \"\"\n\
    \    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\n\
    \    \n    binary_string = decimal_to_binary(decimal / 2)\n    \n    if decimal\
    \ % 2 == 1\n        binary_string += \"1\"\n    else\n        binary_string +=\
    \ \"0\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ a binary number with leading zeros. For example the decimal number 15 should\
    \ become \"00000000000011\".", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2:\n        binary = \"0\"\n    \n    decimal %= 2\n    \n    while decimal\
    \ != 0:\n        binary = binary + \"1\"\n        decimal %= 2\n    \n    binary\
    \ = binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal.", "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary\
    \ = binary + \"0\"\n        return binary\n    \n    decimal = decimal % 2\n \
    \   \n    while decimal > 0:\n        decimal = decimal // 2\n        binary =\
    \ binary + \"1\"\n    \n    return binary + \"db\"", "    if decimal < 0\n   \
    \     error(\"Decimal cannot be negative\")\n    end", "    \n    binary_string\
    \ = \"\"\n    \n    for digit in decimal\n        binary_string += \"0\"\n   \
    \ \n    binary_string += \"1\"\n    \n    return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ binary numbers to decimal numbers. Your function should take in a string and\
    \ return a string.", "    binary_string = \"\"\n    \n    for digit in decimal:\n\
    \        binary_string += if digit == 0 then \"0\" else \"1\"\n    return binary_string\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef decimal_to_binary(decimal):\n\
    \    binary_string = \"\"\n    \n    for digit in decimal:\n        binary_string\
    \ += if digit == 0 then \"0\" else \"1\"\n    return binary_string\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal >\
    \ 64\n        return \"Invalid input\"\n    \n    decimal = decimal % 2\n    \n\
    \    while decimal != 0\n        decimal = decimal / 2\n        binary = \"0\"\
    \ + binary\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a binary number to\
    \ a decimal number. Your function should take in a binary string and return a\
    \ decimal number.", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        error(\"Invalid decimal number\")\n    end", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"0\"\n       \
    \ return binary\n    \n    decimal = decimal - 2\n    \n    while decimal >= 1:\n\
    \        binary = binary + \"1\"\n        decimal = decimal - 1\n    \n    binary\
    \ = binary + \"0\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal.", "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary\
    \ = binary + \"0\"\n        return binary\n    \n    decimal = decimal - 2\n \
    \   \n    while decimal >= 1:\n        binary = binary + \"1\"\n        decimal\
    \ = decimal - 1\n    \n    binary = binary + \"0\"\n    \n    return binary",
  "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"\
    0\"\n        return binary\n    \n    decimal = decimal - 2\n    \n    while decimal\
    \ > 0:\n        binary = binary + \"1\"\n        decimal = decimal - 1\n    \n\
    \    binary = binary + \"b\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ its binary equivalent. \nThe function should take one argument, decimal number.\
    \ \nThe function should return a string with each character representing a binary\
    \ number. \nEach character in the string will be '0' or '1'.", "    binary = \"\
    \"\n    for digit in decimal\n        binary = binary + str((digit % 2) == 0 ?\
    \ \"0\" : \"1\")\n    end\n    binary = binary + \"db\"\n    return binary\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary to decimal.", "    binary_string =\
    \ \"\"\n    \n    for digit in decimal\n        binary_string += \"0\"\n    \n\
    \    binary_string += \"1\"\n    \n    return binary_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ a binary number to a decimal number. \nThe function should take in a string\
    \ with each character representing a binary number and\nreturn an Int64.", " \
    \   \n    binary_string = \"\"\n    \n    decimal = decimal % 2\n    \n    if\
    \ decimal > 0 \n        binary_string = \"1\" + binary_string\n    else \n   \
    \     binary_string = \"0\" + binary_string\n    \n    decimal_to_binary(decimal\
    \ / 2)\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. The function should take in a string and return a number.",
  "    if decimal < 0\n        error(\"decimal number must be positive\")\n    end\n\
    \    binary = \"\"\n    while decimal > 0\n        binary = string(decimal % 2)\
    \ + binary\n        decimal = decimal / 2\n    end\n    binary = string(decimal)\
    \ + binary\n    binary = string(binary, \"db\")\n    return binary\nend", "  \
    \  \n    binary = \"\"\n    \n    if decimal > 0 \n        binary = decimal_to_binary(decimal\
    \ - 1)\n        \n    binary = binary + \"0\"\n    \n    if decimal < 10 \n  \
    \      binary = binary + \"1\"\n    \n    return binary\nend", "    \n    if decimal\
    \ < 0\n        error(\"Decimal number must be positive\")\n    \n    binary =\
    \ \"\"\n    \n    if decimal < 2\n        binary = \"0\"\n    \n    else if decimal\
    \ < 10\n        binary = \"0\"\n    \n    else if decimal < 16\n        binary\
    \ = \"1\"\n    \n    else if decimal < 32\n        binary = \"1\"\n    \n    else\
    \ if decimal < 64\n        binary = \"10\"\n    \n    else if decimal < 128\n\
    \        binary = \"11\"\n    \n    else if decimal < 256\n        binary = \"\
    100\"\n    \n    else if decimal < 512\n        binary = \"101\"\n    \n    else\
    \ if decimal < 1024\n        binary = \"110\"\n    \n    else if decimal < 2048\n\
    \        binary = \"111\"\n    \n    else if decimal < 4096\n        binary =\
    \ \"1000\"\n    \n    else if decimal < 8192\n        binary = \"1001\"\n    \n\
    \    else if decimal < 16384\n        binary = \"1010\"\n    \n    else if decimal\
    \ < 32768\n        binary = \"1011\"\n    \n    else if decimal < 65536\n    \
    \    binary = \"1100\"\n    \n    else if decimal < 131072\n        binary = \"\
    1101\"\n    \n    else if decimal < 262144\n        binary = \"1110\"\n    \n\
    \    else if decimal < 524288\n        binary = \"1111\"\n    \n    else\n   \
    \     error(\"Decimal number too large\")\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(64)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(128)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(256)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(512)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(1024)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(2048)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(4096)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(8192)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(16384)\n</cell>\n<code language=julia-1.5", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\
    \n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n        binary_string\
    \ = binary_string + \"0\"\n        decimal = decimal / 2\n    \n    binary_string\
    \ = binary_string + \"1\"\n    \n    binary_string = \"db\" + binary_string\n\
    \    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to decimal.", "    binary\
    \ = \"\"\n    decimal = decimal % 2\n    while decimal != 0\n        binary =\
    \ binary + \"0\"\n        decimal = decimal - 1\n    binary = binary + \"1\"\n\
    \    return binary\nend", "    \n    binary = \"\"\n    \n    if decimal < 2:\n\
    \        binary = binary + \"0\"\n        return binary\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal > 0:\n        decimal = decimal // 2\n        binary\
    \ = binary + \"1\"\n    \n    return binary + \"db\"", "    \n    binary = \"\"\
    \n    \n    for i in decimal:\n        \n        if i != 0:\n            \n  \
    \          binary += \"1\"\n            \n        else:\n            \n      \
    \      binary += \"0\"\n            \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ decimal.", "    \n    binary_string = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        binary_string = \"Invalid input\"\n        return binary_string\n\
    \    \n    binary_string = \"db\"\n    \n    decimal = decimal % 2\n    \n   \
    \ while decimal != 0\n        binary_string = binary_string + \"0\"\n        decimal\
    \ = decimal / 2\n    \n    binary_string = binary_string + \"1\"\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. Your function\
    \ should take in a string with each character representing a binary number and\n\
    return a string with each character representing a decimal number. Each character\
    \ in the string will be a decimal number.", "    \n    binary = \"\"\n    \n \
    \   if decimal < 2:\n        binary = binary + \"0\"\n        return binary\n\
    \    \n    decimal = decimal - 2\n    \n    while decimal >= 1:\n        binary\
    \ = binary + \"1\"\n        decimal = decimal - 1\n    \n    binary = binary +\
    \ \"0\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string and return a number.", "    binary = \"\"\n\
    \    for digit in decimal\n        binary = binary + digit2binary(digit)\n   \
    \ return binary + \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a binary string and return a decimal number.", "   \
    \ \n    binary_string = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary_string += i\n    \n    return binary_string\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary numbers to decimal numbers. A binary number is represented by a string\n\
    of 0s and 1s. Each character in the string represents a binary digit. For example,\
    \ the string \"1001\" represents\nthe number 5 in decimal.", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        binary_string = \"\
    Invalid input\"\n        return binary_string\n    \n    binary_string = \"db\"\
    \n    \n    while decimal > 1\n        binary_string = binary_string + \"0\"\n\
    \        decimal = decimal - 1\n    \n    binary_string = binary_string + binary_string(decimal)\n\
    \    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that will convert a binary string to a decimal number. Your\
    \ function should take in a binary string as input and return the decimal number\
    \ in decimal form.", "    if decimal < 0\n        error(\"decimal must be positive\"\
    )\n    else if decimal > 2^(64 - 64)\n        error(\"decimal must be less than\
    \ 2^64\")\n    else\n        binary = \"\"\n        while decimal > 0\n      \
    \      binary = string(binary, 0, ceil(log2(decimal))) |> to_string() |> char\n\
    \            decimal = decimal / 2\n        end\n        binary = string(binary,\
    \ 0, 64) |> to_string() |> char\n        binary = string(binary, 0, \"db\") |>\
    \ to_string() |> char\n        return binary\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that converts binary numbers to decimal numbers. A\
    \ binary number consists of a\nsequence of 0s and 1s. A decimal number consists\
    \ of a sequence of digits. Each digit consists of a\nsingle '0' or '1'.", "  \
    \  if decimal == 0 \n        return \"0\"\n    else \n        binary_string =\
    \ \"\"\n        binary_string += \"0\"\n        binary_string += decimal_to_binary(decimal\
    \ - 1)\n        binary_string += \"1\"\n        return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary numbers to decimal numbers. Your function should take in a string and\
    \ return a string.", "    \n    binary = \"\"\n    \n    if decimal > 0 \n   \
    \     \n        decimal = decimal % 2\n        \n        while decimal > 0 \n\
    \            \n            binary = binary + \"1\"\n            decimal = decimal\
    \ / 2\n            \n        binary = binary + \"0\"\n        \n    else \n  \
    \      \n        decimal = decimal % 2\n        \n        while decimal < 0 \n\
    \            \n            binary = binary + \"0\"\n            decimal = decimal\
    \ / 2\n            \n        binary = binary + \"1\"\n        \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that converts decimal numbers to binary numbers. \nThe function should\
    \ take a single argument that is a decimal number. \nThe function should return\
    \ a string with each character representing a binary number. \nEach character\
    \ in the string will be '0' or '1'.", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2:\n        binary = binary + \"0\"\n        return binary\n    \n    decimal\
    \ = decimal - 2\n    \n    while decimal >= 2:\n        binary = binary + \"1\"\
    \n        decimal = decimal - 2\n    \n    binary = binary + \"0\"\n    \n   \
    \ return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a binary number to decimal form. The function\
    \ should take in a string with each character\nrepresenting a binary number and\
    \ return the decimal form of the binary number. There will be an extra couple\
    \ of characters\n'db' at the beginning and at the end of the string. The extra\
    \ characters are there to help with the format.", "    binary_string = \"\"\n\
    \    decimal = decimal % 2\n    while decimal != 0\n        binary_string += \"\
    0\"\n        decimal = decimal / 2\n    binary_string += \"1\"\n    return binary_string\n\
    end", "    if decimal < 0 \n        error(\"decimal must be positive\")\n    else\
    \ if decimal > 2^(64 - 1) \n        error(\"decimal must be less than 2^(64 -\
    \ 1)\")\n    else \n        binary = \"\"\n        while decimal != 0 \n     \
    \       binary = binary + (\"1\" if decimal % 2 == 0 else \"0\")\n           \
    \ decimal = decimal / 2\n        end\n        binary = binary + \"db\"\n     \
    \   return binary\n    end\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts binary to decimal.", "    \n    binary = \"\
    \"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"Decimal\
    \ number must be between 2 and 64\"))\n    end\n    \n    for i in decimal_to_binary(decimal-1)\n\
    \        binary += \"0\"\n    end\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary += \"1\"\n    end\n    \n    binary = \"db\" + binary + \"db\"\
    \n    \n    return binary\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that converts a binary number to decimal.", "    \n    binary = \"\"\n    \n\
    \    if decimal < 2:\n        binary = \"0\"\n    \n    decimal = decimal % 2\n\
    \    \n    while decimal != 0:\n        binary = binary + \"1\"\n        decimal\
    \ = decimal // 2\n    \n    binary = binary + \"db\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to decimal.", "    binary = \"\"\n\
    \    for digit in decimal\n        binary = binary + str((digit % 2) == 0)\n \
    \   end\n    binary = binary + \"db\"\n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to decimal.", "    \n    binary_string = \"\"\n    \n    if\
    \ decimal < 2:\n        binary_string = \"0\"\n    \n    if decimal < 16:\n  \
    \      binary_string = \"1\" + binary_string\n    \n    if decimal < 256:\n  \
    \      binary_string = \"1\" + binary_string\n    \n    if decimal < 65536:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 16777216:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 4294967296:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1\" + binary_string\n    \n    if ", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    binary = \"\"\n    \n\
    \    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\n    \n\
    \    decimal = decimal % 2\n    \n    while decimal != 0\n        binary = binary\
    \ + \"0\"\n        decimal = decimal / 2\n    \n    binary = binary + \"1\"\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. A binary\
    \ number consists of a\nsequence of 0s and 1s. Each character in the string will\
    \ be either '0' or '1'.", "    \n    binary_string = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        binary_string = \"Invalid Input\"\n        return\
    \ binary_string\n    \n    binary_string = decimal_to_binary(decimal / 2)\n  \
    \  \n    if decimal % 2 == 1\n        binary_string += \"1\"\n    else\n     \
    \   binary_string += \"0\"\n    \n    return binary_string + decimal_to_binary(decimal\
    \ - binary_string.length + 1)\nend", "    \n    binary_string = \"\"\n    \n \
    \   if decimal < 2:\n        binary_string = \"0\"\n        return binary_string\n\
    \    \n    binary_string = \"1\"\n    \n    decimal = decimal - 2\n    \n    while\
    \ decimal >= 2:\n        binary_string = \"0\" + binary_string\n        decimal\
    \ = decimal - 2\n    \n    binary_string = \"db\" + binary_string\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string with each character representing a binary number.\
    \ Your function should return the decimal number represented by the binary number.\
    \ There will be an extra couple of characters 'db' at the beginning and at the\
    \ end of the string.", "    \n    binary = \"\"\n    \n    for digit in decimal\n\
    \        binary = binary + str((digit % 2) == 0)\n    end\n    \n    binary =\
    \ binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order. \nThe function should take a\
    \ single decimal number as an argument and return a string.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"0\"\n       \
    \ return binary\n    \n    decimal = decimal % 2\n    \n    binary = binary +\
    \ \"1\"\n    \n    decimal = decimal / 2\n    \n    binary = binary + decimal_to_binary(decimal)\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to decimal.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"0\"\n       \
    \ return binary\n    \n    decimal = decimal % 2\n    \n    while decimal > 0:\n\
    \        decimal = decimal // 2\n        binary = binary + \"1\"\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts binary numbers to decimal numbers. A binary number\
    \ consists of a\nsequence of '0' and '1' characters. Each character represents\
    \ a number. For example, the binary number '11'\nrepresents the decimal number\
    \ 11.", "    binary_string = \"\"\n    \n    for digit in decimal\n        binary_string\
    \ += if digit == 0 then \"0\" else \"1\"\n    end\n    \n    binary_string +=\
    \ \"db\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary string to\
    \ a decimal number. Your function should take in a string and return a number.",
  "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"\
    0\"\n        return binary\n    \n    decimal = decimal - 2\n    \n    while decimal\
    \ >= 1:\n        decimal = decimal / 2\n        binary = binary + \"1\"\n    \n\
    \    binary = binary + \"0\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary to decimal.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    binary_string\
    \ = \"\"\n    \n    for digit in decimal\n        binary_string += \"0\"\n   \
    \ \n    binary_string += \"1\"\n    \n    return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a binary number to a decimal number. The function should take in a string and\
    \ return a Int64.", "    \n    binary = \"\"\n    \n    for digit in decimal\n\
    \        binary = binary + str((digit % 2) == 0)\n    end\n    \n    binary =\
    \ binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ hexadecimal format. The function should return a string.", "    \n    binary_string\
    \ = \"\"\n    \n    for digit in decimal\n        binary_string += \"0\"\n   \
    \ \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to decimal form. Your function\
    \ should take in a binary string and return the decimal number. \nThe function\
    \ should raise an error if the string is not in binary format. \nThe function\
    \ should raise an error if the string contains more than 1 '1'.", "    \n    if\
    \ decimal < 0\n        error(\"Decimal number must be positive\")\n    end", " \
    \   if decimal == 0 \n        return \"0\"\n    else \n        binary = \"\"\n\
    \        decimal = decimal % 2\n        while decimal != 0 \n            binary\
    \ = binary + \"0\"\n            decimal = decimal / 2\n        binary = binary\
    \ + \"1\"\n        return binary\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ hexadecimal format. The function should return a string.", "    \n    binary_string\
    \ = \"\"\n    \n    if decimal < 2:\n        binary_string = \"0\"\n    \n   \
    \ binary_string += decimal_to_binary(decimal / 2)\n    binary_string += decimal_to_binary(decimal\
    \ % 2)\n    \n    return binary_string\nend", "    \n    binary_string = \"\"\n\
    \    \n    for digit in decimal\n        binary_string += if digit == 0 then \"\
    0\" else \"1\"\n    end\n    \n    binary_string += \"db\"\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that converts a decimal number to binary and returns the string in\
    \ reverse order.", "    \n    binary = \"\"\n    \n    for i in decimal:\n   \
    \     if i != 0:\n            binary += \"1\"\n        else:\n            binary\
    \ += \"0\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will convert a binary number\
    \ to a decimal number. Your function should take in a string and return a Int64.",
  "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"\
    0\"\n        return binary\n    \n    decimal = decimal % 2\n    \n    if decimal\
    \ > 2:\n        binary = binary + \"1\"\n        return binary\n    \n    decimal\
    \ = decimal / 2\n    \n    binary = binary + decimal_to_binary(decimal)\n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts binary to decimal.", "    if decimal < 0\n    \
    \    error(\"Decimal cannot be negative\")\n    else if decimal > 2^(64 - 64)\n\
    \        error(\"Decimal cannot be greater than 2^64\")\n    else\n        binary\
    \ = \"\"\n        decimal = decimal % 2\n        decimal = decimal / 2\n     \
    \   decimal = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal\
    \ % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % 2\n        decimal\
    \ = decimal / 2\n        decimal = decimal % 2\n        decimal = decimal / 2\n\
    \        decimal = decimal % 2\n        decimal = decimal / 2\n        decimal\
    \ = decimal % 2\n        decimal = decimal / 2\n        decimal = decimal % 2\n\
    \        decimal = decimal / 2\n        decimal = decimal % ", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2:\n        binary = \"0\"\n    \n    decimal\
    \ = decimal % 2\n    \n    while decimal > 0:\n        binary = binary + \"1\"\
    \n        decimal = decimal // 2\n    \n    return binary + \"db\"", "    \n \
    \   binary = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"0\"\n\
    \        return binary\n    \n    decimal = decimal % 2\n    \n    binary = binary\
    \ + \"1\"\n    \n    decimal = decimal / 2\n    \n    binary = binary + decimal_to_binary(decimal)\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string and return a number.", "    \n    binary =\
    \ \"\"\n    \n    for digit in decimal\n        binary = binary + str((digit %\
    \ 2) == 0)\n        decimal = decimal / 2\n    \n    binary = binary + \"db\"\n\
    \    \n    return binary\nend", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        return \"Invalid input\"\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal // 2\n    \n    binary = binary + \"1\"\n    \n    return\
    \ binary\nend", "    \n    binary = \"\"\n    \n    for i in 0..(decimal.bit_length()-1)\n\
    \        binary = binary + \"0\"\n    \n    for i in 0..(decimal.bit_length()-1)\n\
    \        binary = binary + \"1\"\n    \n    binary = binary + \"db\"\n    \n \
    \   return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to decimal.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return \"Invalid input\"\
    \n    \n    decimal = decimal % 2\n    \n    while decimal != 0\n        \n  \
    \      binary = binary + \"0\"\n        decimal = decimal - 1\n    \n    binary\
    \ = binary + \"1\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    binary_string = \"\"\n\
    \    \n    for digit in decimal\n        binary_string += \"0\"\n    \n    binary_string\
    \ += \"1\"\n    \n    return binary_string\nend", "    if decimal < 0\n      \
    \  error(\"Decimal cannot be negative\")\n    else if decimal > 2^(64 - 64)\n\
    \        error(\"Decimal cannot be greater than 2^64\")\n    else\n        binary\
    \ = \"\"\n        decimal = decimal % 2\n        while decimal != 0\n        \
    \    binary = binary + \"0\"\n            decimal = decimal // 2\n        binary\
    \ = binary + \"1\"\n        binary = binary + \"db\"\n        return binary\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(0)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-1)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-32)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-0)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-64)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-65)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-66)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-67)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-68)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-69)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-70)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-71)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-72)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-73)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-74)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-75)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-76)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-77)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(-78)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(-79)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(-80)\n</cell>\n<code language=", "    binary = \"\"\n    for\
    \ i in decimal_to_binary(decimal)\n        binary = binary + i\n    return binary\n\
    end", "    \n    binary = \"\"\n    \n    for i in 0..(decimal.bit_length() -\
    \ 1)\n        binary = binary + \"0\"\n    \n    for i in 0..(decimal.bit_length()\
    \ - 1)\n        binary = binary + \"1\"\n    \n    binary = binary + \"db\"\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string and return a number.", "    \n    binary =\
    \ \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be between 2 and 64\"))\n    end", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    binary_string = \"\"\n    \n\
    \    if decimal < 2 || decimal > 64\n        error(\"Invalid input\")\n    end",
  "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be between 2 and 64\"))\n    end", "    \n    binary = \"\"\
    \n    \n    if decimal < 2:\n        binary = \"0\"\n        return binary\n \
    \   \n    decimal = decimal % 2\n    \n    while decimal > 0:\n        binary\
    \ = binary + \"1\"\n        decimal = decimal // 2\n    \n    binary = binary\
    \ + \"0\"\n    \n    return binary", "    \n    binary = \"\"\n    \n    for digit\
    \ in decimal:\n        if digit == 0:\n            binary += \"0\"\n        elif\
    \ digit == 1:\n            binary += \"1\"\n        else:\n            binary\
    \ += \"0\"\n    \n    binary = binary[2:]\n    binary = binary[:len(binary)-1]\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a binary number as a string\nand return a decimal number.",
  "    \n    binary = \"\"\n    \n    for digit in decimal\n        \n        if digit\
    \ == 0\n            binary += \"0\"\n        elseif digit == 1\n            binary\
    \ += \"1\"\n        else\n            error \"Invalid input\"\n        end\n \
    \   end\n    \n    binary = binary[2:end]\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<text>\nExercise 3\n\
    Write a function that converts a binary number to a decimal number. The function\
    \ should take in a string and return a Int64.", "    \n    binary = \"\"\n   \
    \ \n    if decimal < 2:\n        binary = binary + \"0\"\n        return binary\n\
    \    \n    decimal = decimal % 2\n    \n    if decimal > 0 :\n        binary =\
    \ binary + \"1\"\n        return binary\n    \n    decimal = decimal / 2\n   \
    \ \n    if decimal > 0 :\n        binary = binary + \"1\"\n        return binary\n\
    \    \n    decimal = decimal / 2\n    \n    if decimal > 0 :\n        binary =\
    \ binary + \"1\"\n        return binary\n    \n    decimal = decimal / 2\n   \
    \ \n    if decimal > 0 :\n        binary = binary + \"1\"\n        return binary\n\
    \    \n    decimal = decimal / 2\n    \n    if decimal > 0 :\n        binary =\
    \ binary + \"1\"\n        return binary\n    \n    decimal = decimal / 2\n   \
    \ \n    if decimal > 0 :\n        binary = binary + \"1\"\n        return binary\n\
    \    \n    decimal = decimal / 2\n    \n    if decimal > 0 :\n        binary =\
    \ binary + \"1\"\n        return binary\n    \n    decimal = decimal / 2\n   \
    \ \n    if decimal > 0 :\n        binary = binary + \"1\"\n        return binary\n\
    \    \n    decimal = decimal / 2\n    \n    if decimal > 0 :\n        binary =\
    \ binary + \"1\"\n        return binary\n    \n    decimal = decimal / 2\n   \
    \ \n    if decimal > 0 :\n        binary = binary + \"1\"\n        return binary\n\
    \    \n    decimal = decimal / 2\n    \n    if decimal > 0 :\n        binary =\
    \ binary + \"1\"\n        return binary\n    \n    decimal = decimal / 2\n   \
    \ \n    if decimal > 0 :\n        binary = binary + \"1\"\n        return binary\n\
    \    \n    decimal = decimal / 2\n    \n    if decimal > 0 :\n        binary =\
    \ binary + \"1\"\n        return binary\n    \n    decimal = decimal / 2\n   \
    \ \n    if decimal > 0 :\n        binary = binary + \"1\"\n        return binary\n\
    \    \n    decimal = decimal / 2\n    \n    if decimal > 0 :\n        binary =\
    \ binary + \"1\"\n        return binary\n    \n    decimal = decimal / 2\n   \
    \ \n    if decimal > 0 :\n        binary = binary + \"1\"\n        return binary\n\
    \    \n    decimal = decimal / 2\n    \n    if decimal > 0 :\n        binary =\
    \ binary + \"1\"\n        return binary\n    \n    decimal = decimal / 2\n   \
    \ \n    if decimal > 0 :\n        binary = binary + \"1\"\n        return binary\n\
    \    \n", "    \n    binary = \"\"\n    \n    decimal = decimal % 2\n    \n  \
    \  if decimal > 0 \n        binary = binary + \"1\"\n    else\n        binary\
    \ = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0\
    \ \n        binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\
    \n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary =\
    \ binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary + \"\
    0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary + \"\
    0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary + \"\
    0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n", "    \n    binary = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary = binary + i\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary to decimal.",
  "    \n    binary = \"\"\n    \n    for digit in decimal\n        binary = binary\
    \ + str((digit % 2) == 0)\n        \n    return binary + \"db\"\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite a function that will\
    \ convert a binary number to a decimal number. \nThe function should take in a\
    \ string and return a Int64.", "    if decimal < 0\n        error(\"Decimal cannot\
    \ be negative\")\n    end\n    \n    binary = \"\"\n    \n    if decimal < 2\n\
    \        binary = \"0\"\n    else\n        binary = \"1\"\n    end\n    \n   \
    \ decimal = decimal / 2\n    \n    while decimal > 0\n        binary = binary\
    \ + \"0\"\n        decimal = decimal - 1\n    end\n    \n    binary = binary +\
    \ \"b\"\n    \n    return binary\nend", "    \n    binary = \"\"\n    \n    for\
    \ i in decimal_to_binary(decimal)\n        binary = binary + i\n    \n    return\
    \ binary\nend", "    if decimal < 0\n        error(\"decimal number must be positive\"\
    )\n    else if decimal > 2^(64-1)\n        error(\"decimal number must be less\
    \ than 2^64\")\n    else\n        binary = \"\"\n        decimal = decimal % 2\n\
    \        while decimal != 0\n            binary = binary + \"0\"\n           \
    \ decimal = decimal // 2\n        binary = binary + \"1\"\n        return binary\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts binary numbers to decimal numbers.\
    \ Your function should take in a string with each character representing a binary\
    \ number and return the decimal number. There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string. The extra characters are\
    \ there to help with the format.", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        throw(ArgumentError(\"Decimal number must be between\
    \ 2 and 64\"))\n    end", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    binary = \"\"\n    for digit in decimal\n        binary = binary\
    \ + str((digit % 2) == 0)\n    end\n    binary = binary + \"db\"\n    return binary\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that converts a binary number\
    \ to a decimal number. The function should take in a string and return a string.",
  "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be between 2 and 64\"))\n    \n    decimal = decimal % 2\n\
    \    \n    while decimal > 0\n        binary = binary + \"0\"\n        decimal\
    \ = decimal - 1\n    \n    decimal = decimal / 2\n    \n    while decimal > 0\n\
    \        binary = binary + \"1\"\n        decimal = decimal - 1\n    \n    binary\
    \ = binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. Your function should take in a string and return a Int64.",
  "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary = \"0\"\n  \
    \  \n    decimal = decimal % 2\n    \n    while decimal > 0:\n        binary =\
    \ binary + \"1\"\n        decimal = decimal // 2\n    \n    binary = binary +\
    \ \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the string in reverse\
    \ order.", "    \n    binary = \"\"\n    \n    for digit in decimal:\n       \
    \ binary = binary + str((digit % 2) == 0)\n        digit = digit // 2\n    \n\
    \    binary = binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary numbers to\
    \ decimal numbers. Your function should take in a string and return a number.",
  "    \n    if decimal < 0\n        error(\"decimal must be positive\")\n    \n \
    \   binary = \"\"\n    \n    if decimal < 2\n        binary = binary + \"0\"\n\
    \    else\n        binary = binary + \"1\"\n    \n    decimal = decimal - 2\n\
    \    \n    while decimal >= 0\n        binary = binary + \"0\"\n        decimal\
    \ = decimal - 1\n    \n    binary = binary + \"b\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that will convert a decimal number to a binary number with leading\
    \ zeros.", "    \n    binary = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary = binary + i\n    \n    return binary\nend", "    if decimal <\
    \ 0\n        error(\"Decimal number must be positive\")\n    else if decimal >\
    \ 2^(64 - 64)\n        error(\"Decimal number too large\")\n    else\n       \
    \ binary = \"\"\n        while decimal > 0\n            binary = binary + \"0\"\
    \n            decimal = decimal / 2\n        end\n        binary = binary + \"\
    1\"\n        binary = binary + string(64 - binary.length, \"b\")\n        return\
    \ binary\n    end\nend\n</cell>\n<code language=julia-1.0>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.0>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a decimal number to hexadecimal format.",
  "    \n    binary = \"\"\n    \n    if decimal < 0 \n        error(\"Decimal cannot\
    \ be negative\")\n    \n    decimal = decimal % 2\n    \n    while decimal !=\
    \ 0\n        binary = binary + \"0\"\n        decimal = decimal / 2\n    \n  \
    \  binary = binary + \"1\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts binary to decimal.",
  "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be between 2 and 64\"))\n    end", "    binary_string = \"\
    \"\n    for digit in decimal\n        binary_string += \"0\"\n    binary_string\
    \ += \"1\"\n    return binary_string\nend\n</cell>\n<code language=julia-1.4>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.4>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a binary number to\
    \ decimal form. For example, if the binary number is\n    \"0100\", the function\
    \ should return 5.", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        return \"Invalid input\"\n    \n    decimal = decimal % 2\n  \
    \  \n    if decimal < 10\n        binary = \"0\"\n    else\n        binary = \"\
    1\"\n    end\n    \n    binary = binary * decimal\n    \n    if decimal > 1\n\
    \        binary = binary * decimal_to_binary(decimal - 1)\n    end\n    \n   \
    \ binary = binary + \"db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a decimal number to\
    \ binary and returns the string in reverse order.", "    \n    binary = \"\"\n\
    \    \n    decimal = decimal % 2\n    \n    if decimal > 0 \n        binary =\
    \ binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary + \"\
    0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary + \"\
    0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n        binary = binary + \"\
    0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else\n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else\n      \
    \  binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else\n", "    binary = \"\"\n   \
    \ decimal = decimal % 2\n    decimal = decimal / 2\n    while decimal != 0\n \
    \       binary = binary + \"0\"\n        decimal = decimal / 2\n    binary = binary\
    \ + \"1\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. The function\
    \ should take in a string and return a Int64.", "    \n    binary_string = \"\"\
    \n    \n    for digit in decimal\n        binary_string += \"0\"\n    \n    binary_string\
    \ += \"1\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that will convert a binary string\
    \ to a decimal number. Your function should take in a binary string and return\
    \ a decimal number.", "    \n    binary = \"\"\n    \n    decimal = decimal %\
    \ 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n \
    \       binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary = binary\
    \ + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n\
    \        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n      \
    \  binary = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n\
    \    decimal = decimal / 2\n    ", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2 || decimal > 64\n        return \"Invalid input\"\n    \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal - 1\n    \n    binary = binary + \"1\"\n    \n    binary =\
    \ binary + \"db\"\n    \n    return binary\nend", "    \n    binary = \"\"\n \
    \   \n    for digit in decimal\n        binary = binary + str((digit % 2) == 0)\n\
    \        decimal = decimal / 2\n    \n    binary = binary + \"db\"\n    \n   \
    \ return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. Your\
    \ function should take in a string and return a string.", "    \n    binary =\
    \ \"\"\n    \n    for digit in decimal\n        binary += if digit == 0 then \"\
    0\" else \"1\"\n    end\n    \n    binary += \"db\"\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number. Your function\
    \ should take in a string and return a string.", "    binary = \"\"\n    decimal\
    \ = decimal % 2\n    while decimal != 0\n        binary = binary + \"0\"\n   \
    \     decimal = decimal / 2\n    binary = binary + \"1\"\n    binary = binary\
    \ + \"db\"\n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. A binary\
    \ number consists of a\nsequence of '0' and '1' characters. Each character represents\
    \ either a '0' or a '1'. For example,\n'1000' represents a number equal to $2^4\
    \ + 2^3 + 2^2 + 2^1 + 2^0$. Write a function that takes a binary\nnumber as input\
    \ and returns the decimal equivalent of the binary number. For example, the\n\
    binary number '1000' represents the decimal number $2^4 + 2^3 + 2^2 + 2^1 + 2^0$.\
    \ Write a function\nthat takes a binary number as input and returns the decimal\
    \ equivalent of the binary number in\nreverse order. For example, the binary number\
    \ '1000' represents the decimal number $2^0 + 2^1 + 2^2 + 2^3 + 2^4$. Write a",
  "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"\
    0\"\n        return binary\n    \n    if decimal < 16:\n        binary = binary\
    \ + \"0\"\n        return binary\n    \n    if decimal < 256:\n        binary\
    \ = binary + \"0\"\n        return binary\n    \n    if decimal < 65536:\n   \
    \     binary = binary + \"0\"\n        return binary\n    \n    if decimal < 4294967296:\n\
    \        binary = binary + \"0\"\n        return binary\n    \n    if decimal\
    \ < 18446744073709551616:\n        binary = binary + \"0\"\n        return binary\n\
    \    \n    if decimal < 9223372036854775808:\n        binary = binary + \"0\"\n\
    \        return binary\n    \n    if decimal < 18446744073709551616:\n       \
    \ binary = binary + \"0\"\n        return binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = binary + \"0\"\n        return binary\n    \n    if decimal\
    \ < 18446744073709551616:\n        binary = binary + \"0\"\n        return binary\n\
    \    \n    if decimal < 9223372036854775808:\n        binary = binary + \"0\"\n\
    \        return binary\n    \n    if decimal < 18446744073709551616:\n       \
    \ binary = binary + \"0\"\n        return binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = binary + \"0\"\n        return binary\n    \n    if decimal\
    \ < 18446744073709551616:\n        binary = binary + \"0\"\n        return binary\n\
    \    \n    if decimal < 9223372036854775808:\n        binary = binary + \"0\"\n\
    \        return binary\n    \n    if decimal < 18446744073709551616:\n       \
    \ binary = binary + \"0\"\n        return binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = binary + \"0\"\n        return binary\n    \n    if decimal\
    \ < 18446744073709551616:\n        binary = binary + \"0\"\n        return binary\n\
    \    \n    if decimal < 9223372036854775808:\n        binary = binary + \"0\"\n\
    \        return binary\n    \n    if decimal < 18446744073709551616:\n       \
    \ binary = binary + \"0\"\n        return binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = binary + \"0\"\n", "    binary_string = \"\"\n    \n    for\
    \ digit in decimal\n        binary_string += \"0\"\n    \n    binary_string +=\
    \ \"1\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts binary numbers to\
    \ decimal numbers. A binary number consists of a\nsequence of 0s and 1s. Each\
    \ time you see a 0, you subtract 1 from the number represented by the binary\n\
    number. For example, if you have binary number \"11\", the function should return\
    \ 3.", "    \n    binary = \"\"\n    \n    for i in 0..(decimal.bit_length() -\
    \ 1):\n        binary += \"0\"\n    \n    for i in 0..(decimal.bit_length() -\
    \ 1):\n        binary += \"1\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that converts a binary number to\
    \ decimal.", "    \n    binary_string = \"\"\n    \n    if decimal < 2:\n    \
    \    binary_string = \"0\"\n    \n    if decimal < 16:\n        binary_string\
    \ = \"0\" + binary_string\n    \n    if decimal < 256:\n        binary_string\
    \ = \"1\" + binary_string\n    \n    if decimal < 65536:\n        binary_string\
    \ = \"10\" + binary_string\n    \n    if decimal < 4294967296:\n        binary_string\
    \ = \"11\" + binary_string\n    \n    if decimal < 18446744073709551616:\n   \
    \     binary_string = \"100\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"101\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"110\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"111\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1000\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1001\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1010\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1011\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1100\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1101\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"1110\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"1111\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"11000\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"11001\" + binary_string\n    \n    if decimal < 18446744073709551616:\n\
    \        binary_string = \"11010\" + binary_string\n    \n    if decimal < 9223372036854775808:\n\
    \        binary_string = \"11011\" + binary_string\n    \n    if decimal < 184467440737095516",
  "    \n    binary_string = \"\"\n    \n    if decimal < 0\n        binary_string\
    \ = \"-db\"\n        decimal = -decimal\n    end", "    \n    binary = \"\"\n\
    \    \n    if decimal < 2:\n        binary = binary + \"0\"\n        return binary\n\
    \    \n    decimal = decimal - 2\n    \n    while decimal >= 1:\n        binary\
    \ = binary + \"1\"\n        decimal = decimal - 1\n    \n    return binary + \"\
    db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nProblem 3\n\
    Write a function that converts binary numbers to decimal numbers.", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if decimal == 0 \n        return \"db0\"\n    else \n   \
    \     binary_string = \"\"\n        decimal = decimal % 2\n        while decimal\
    \ != 0 \n            binary_string = binary_string + \"0\"\n            decimal\
    \ = decimal - 1\n        binary_string = binary_string + \"1\"\n        return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will convert a binary number to a decimal number. The\
    \ function should take in a binary string and return the decimal number. There\
    \ will be an extra couple of characters 'db' at the beginning and at the end of\
    \ the string. The extra characters are there to help with the format.", "    if\
    \ decimal < 0 \n        error(\"decimal must be positive\")\n    else if decimal\
    \ >= 2^(64 - 1) \n        error(\"decimal must be smaller than 2^64\")\n    else\
    \ \n        binary = \"\"\n        while decimal > 0 \n            binary = string(decimal%2)\
    \ + binary \n            decimal = decimal / 2\n        end\n        binary =\
    \ string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64", "    \n\
    \    binary_string = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return\
    \ binary_string\n    \n    binary_string = \"db\"\n    \n    binary_string +=\
    \ decimal_to_binary(decimal / 2)\n    \n    binary_string += decimal_to_binary(decimal\
    \ % 2)\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary string to\
    \ a decimal number. \nThe function should take in a string and return the decimal\
    \ number. \nThe string will always begin with 'db'.", "    \n    if decimal <\
    \ 0\n        error(\"Decimal number must be positive\")\n    end", "    \n   \
    \ binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        throw(ArgumentError(\"\
    Decimal number must be between 2 and 64\"))\n    end", "    \n    binary = \"\"\
    \n    \n    for digit in decimal\n        binary = binary + str((digit % 2) ==\
    \ 0)\n        decimal = decimal / 2\n    end\n    \n    return binary + \"db\"\
    \nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to decimal form. Your function should\
    \ take in a string and return a string.", "    \n    binary = \"\"\n    \n   \
    \ if decimal < 0\n        decimal = -decimal\n        \n    decimal = decimal\
    \ % 2\n    \n    while decimal != 0\n        binary = binary + \"0\"\n       \
    \ decimal = decimal - 1\n    \n    binary = binary + \"1\"\n    \n    if decimal\
    \ > 1\n        binary = binary + \"b\"\n    \n    return binary\nend", "    \n\
    \    binary = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"0\"\
    \n        return binary\n    \n    decimal = decimal % 2\n    \n    while decimal\
    \ > 0:\n        decimal = decimal // 2\n        binary = binary + \"1\"\n    \n\
    \    return binary + \"db\"", "    if decimal < 0\n        error(\"Decimal number\
    \ must be positive\")\n    end", "    \n    binary = \"\"\n    \n    if decimal\
    \ < 2:\n        binary = binary + \"0\"\n        return binary\n    \n    decimal\
    \ = decimal - 2\n    \n    while decimal > 0:\n        binary = binary + \"1\"\
    \n        decimal = decimal - 1\n    \n    return binary + \"db\"", "    \n  \
    \  binary = \"\"\n    \n    if decimal < 2:\n        binary = \"0\"\n    \n  \
    \  if decimal < 16:\n        binary = \"0\" + binary\n    \n    if decimal < 256:\n\
    \        binary = \"1\" + binary\n    \n    if decimal < 65536:\n        binary\
    \ = \"10\" + binary\n    \n    if decimal < 4294967296:\n        binary = \"100\"\
    \ + binary\n    \n    if decimal < 18446744073709551616:\n        binary = \"\
    1000\" + binary\n    \n    if decimal < 9223372036854775808:\n        binary =\
    \ \"10000\" + binary\n    \n    if decimal < 18446744073709551616:\n        binary\
    \ = \"100000\" + binary\n    \n    if decimal < 9223372036854775808:\n       \
    \ binary = \"1000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"100000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"1000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"10000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"1000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"100000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"1000000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"10000000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100000000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"1000000000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000000000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        throw(ArgumentError(\"The decimal number must be between 2 and\
    \ 64\"))\n    \n    if decimal < 10\n        binary = binary + \"0\"\n    else\n\
    \        binary = binary + \"1\"\n    \n    decimal = decimal - 2\n    \n    while\
    \ decimal >= 2\n        decimal = decimal / 2\n        binary = binary + \"0\"\
    \n    \n    binary = binary + \"1\"\n    \n    return binary\nend", "    if decimal\
    \ < 0\n        error(\"decimal number must be positive\")\n    end\n    binary\
    \ = \"\"\n    decimal = decimal % 2\n    while decimal != 0\n        binary =\
    \ string(decimal) + binary\n        decimal = decimal / 2\n    end\n    binary\
    \ = string(decimal) + binary\n    binary = string(10) + binary\n    binary = string(1)\
    \ + binary\n    binary = string(1) + binary\n    binary = string(1) + binary\n\
    \    binary = string(1) + binary\n    binary = string(1) + binary\n    binary\
    \ = string(1) + binary\n    binary = string(1) + binary\n    binary = string(1)\
    \ + binary\n    binary = string(1) + binary\n    binary = string(1) + binary\n\
    \    binary = string(1) + binary\n    binary = string(1) + binary\n    binary\
    \ = string(1) + binary\n    binary = string(1) + binary\n    binary = string(1)\
    \ + binary\n    binary = string(1) + binary\n    binary = string(1) + binary\n\
    \    binary = string(1) + binary\n    binary = string(1) + binary\n    binary\
    \ = string(1) + binary\n    binary = string(1) + binary\n    binary = string(1)\
    \ + binary\n    binary = string(1) + binary\n    binary = string(1) + binary\n\
    \    binary = string(1) + binary\n    binary = string(1) + binary\n    binary\
    \ = string(1) + binary\n    binary = string(1) + binary\n    binary = string(1)\
    \ + binary\n    binary = string(1) + binary\n    binary = string(1) + binary\n\
    \    binary = string(1) + binary\n    binary = string(1) + binary\n    binary\
    \ = string(1) + binary\n    binary = string(1) + binary\n    binary = string(1)\
    \ + binary\n    binary = string(1) + binary\n    binary = string(1) + binary\n\
    \    binary = string(1) + binary\n    binary = string(1) + binary\n    binary\
    \ = string(1) + binary\n    binary = string(1) + binary\n    binary = string(1)\
    \ + binary\n    binary = string(1) + binary\n    binary = string(1) + binary\n\
    \    binary = string(1) + binary\n    binary = string(1) + binary\n    binary\
    \ = string(1) + binary\n    binary = string(1) + binary\n    binary = string(1)\
    \ + binary\n    binary = string(1) + binary\n    binary = string(1) + binary\n\
    \    binary = string(1) + binary\n    binary = string(1) + binary\n    binary\
    \ = string(1) + binary\n    binary = string(1) + binary\n    binary = string(1)\
    \ + binary\n    binary = string(1) + binary\n    binary = string(1) + binary\n\
    \    binary = string(1) + binary\n    binary = string(1) + binary\n    binary\
    \ = string(1) + binary\n    binary = string(1) + binary\n    binary = string(1)\
    \ + binary", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    if decimal < 0\n        error(\"Decimal number must be positive\")\n\
    \    \n    binary = \"\"\n    \n    while decimal > 0\n        binary = binary\
    \ + \"0\"\n        decimal = decimal - 1\n    \n    binary = binary + \"1\"\n\
    \    \n    binary = binary + \"db\"\n    \n    return binary\nend", "    if decimal\
    \ < 0\n        error(\"Decimal number must be positive\")\n    else if decimal\
    \ > 2^(64 - 64)\n        error(\"Decimal number must be less than 2^64\")\n  \
    \  else\n        binary = \"\"\n        decimal = decimal % 2\n        while decimal\
    \ != 0\n            binary = binary + \"0\"\n            decimal = decimal //\
    \ 2\n        binary = binary + \"1\"\n        binary = binary + \"b\"\n      \
    \  binary = binary + \"b\"\n        binary = binary + \"b\"\n        binary =\
    \ binary + \"b\"\n        binary = binary + \"b\"\n        binary = binary + \"\
    b\"\n        binary = binary + \"b\"\n        binary = binary + \"b\"\n      \
    \  binary = binary + \"b\"\n        binary = binary + \"b\"\n        binary =\
    \ binary + \"b\"\n        binary = binary + \"b\"\n        binary = binary + \"\
    b\"\n        binary = binary + \"b\"\n        binary = binary + \"b\"\n      \
    \  binary = binary + \"b\"\n        binary = binary + \"b\"\n        binary =\
    \ binary + \"b\"\n        binary = binary + \"b\"\n        binary = binary + \"\
    b\"\n        binary = binary + \"b\"\n        binary = binary + \"b\"\n      \
    \  binary = binary + \"b\"\n        binary = binary + \"b\"\n        binary =\
    \ binary + \"b\"\n        binary = binary + \"b\"\n        binary = binary + \"\
    b\"\n        binary = binary + \"b\"\n        binary = binary + \"b\"\n      \
    \  binary = binary + \"b\"\n        binary = binary + \"b\"\n        binary =\
    \ binary + \"b\"\n        binary = binary + \"b\"\n        binary = binary + \"\
    b\"\n        binary = binary + \"b\"\n        binary = binary + \"b\"\n      \
    \  binary = binary + \"b\"\n        binary = binary + \"b\"\n        binary =\
    \ binary + \"b\"\n        binary = binary + \"b\"\n        binary = binary + \"\
    b\"\n        binary = binary + \"b\"\n        binary = binary + \"b\"\n      \
    \  binary = binary + \"b\"\n        binary = binary + \"b\"\n        binary =\
    \ binary + \"b\"\n        binary = binary + \"b\"\n        binary = binary + \"\
    b\"\n        binary = binary + \"b\"\n        binary = binary + \"b\"\n      \
    \  binary = binary + \"b\"\n        binary = binary + \"b\"\n        binary =\
    \ binary + \"b\"\n        binary = binary + \"b\"\n        binary = binary + \"\
    b\"\n        binary = binary + \"b\"\n        binary = binary + \"b\"\n      \
    \  binary = binary + \"b\"\n        binary = binary + \"b\"\n        binary =\
    \ binary + \"b\"\n        binary = binary + \"b\"\n        binary = binary + \"\
    b\"", "    \n    binary_string = \"\"\n    \n    for digit in decimal\n      \
    \  binary_string += if digit == 0 then \"0\" else \"1\"\n    end\n    \n    return\
    \ binary_string + \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will convert a decimal number to binary and will return\
    \ the string with '0' or '1' characters.", "    \n    binary_string = \"\"\n \
    \   \n    if decimal > 0 \n        binary_string += \"1\"\n        \n        decimal_to_binary(decimal\
    \ - 1)\n        \n    binary_string += \"0\"\n    \n    return binary_string\n\
    </code>\n<|/ a tags=recursion,haskell,binary,decimal |>\n<| a dscore=0 |>\n<code>\n\
    import Data.List", "    binary_string = \"\"\n    \n    for digit in decimal\n\
    \        binary_string += \"0\"\n    \n    binary_string += \"1\"\n    \n    return\
    \ binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that will convert a binary number to a decimal number. Your\
    \ function should take in a string and return a Int64.", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    binary = \"\"\n    decimal = decimal\
    \ % 2\n    while decimal != 0\n        binary = binary + \"0\"\n        decimal\
    \ = decimal - 1\n    binary = binary + \"1\"\n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary numbers to decimal numbers. Your function should take in a string and\
    \ return a number.", "    \n    binary_string = \"\"\n    \n    if decimal < 2:\n\
    \        binary_string = \"0\"\n    \n    binary_string += decimal_to_binary(decimal\
    \ - 2)\n    \n    return binary_string\n</code>\n<|/ a tags=recursion,haskell,binary,decimal\
    \ |>\n<| a |>\n<code>\nimport Data.List", "    binary_string = \"\"\n    for digit\
    \ in decimal\n        binary_string += \"0\"\n    binary_string += \"1\"\n   \
    \ return binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary string to a decimal number. Your\
    \ function should take in a binary string and return a decimal number.", "   \
    \ \n    binary = \"\"\n    \n    if decimal < 0\n        decimal = -decimal\n\
    \        binary = reverse binary\n    end", "    \n    binary = \"\"\n    \n \
    \   for i in decimal_to_binary(decimal)\n        binary = binary + i\n    \n \
    \   return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts a binary number to a decimal number. The function\
    \ should take in a binary number as a\n    string, and return the decimal number\
    \ as a string.", "    \n    binary = \"\"\n    \n    for digit in decimal\n  \
    \      binary = binary + str((digit % 2) == 0)\n        decimal = decimal / 2\n\
    \    \n    return binary + \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary to decimal.", "    \n    binary = \"\
    \"\n    \n    decimal = decimal % 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary +\
    \ \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary +\
    \ \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal\
    \ > 0 \n        binary = binary + \"1\"\n    else \n        binary = binary +\
    \ \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 0 \n        binary\
    \ = binary + \"1\"\n    else \n        binary = binary + \"0\"\n    \n    decimal\
    \ = decimal / 2\n    \n    if decimal > 0 \n        binary = binary + \"1\"\n\
    \    else \n        binary = binary + \"0\"\n    \n    decimal = decimal / 2\n\
    \    \n    if decimal > 0 \n        binary = binary + \"1\"\n    else \n     \
    \   binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    ", "    binary_string\
    \ = \"\"\n    for digit in decimal::Int64\n        binary_string += if digit ==\
    \ 0 then \"0\" else \"1\"\n    end\n    binary_string += \"db\"\n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number. Your function\
    \ should take in a binary string and return a decimal number.", "    \n    binary\
    \ = \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal < 10:\n      \
    \  binary = \"0\"\n    \n    if decimal < 100:\n        binary = \"1\" + binary\n\
    \    \n    if decimal < 1000:\n        binary = \"10\" + binary\n    \n    if\
    \ decimal < 10000:\n        binary = \"100\" + binary\n    \n    if decimal <\
    \ 100000:\n        binary = \"1000\" + binary\n    \n    if decimal < 1000000:\n\
    \        binary = \"10000\" + binary\n    \n    if decimal < 10000000:\n     \
    \   binary = \"100000\" + binary\n    \n    if decimal < 100000000:\n        binary\
    \ = \"1000000\" + binary\n    \n    if decimal < 1000000000:\n        binary =\
    \ \"10000000\" + binary\n    \n    if decimal < 10000000000:\n        binary =\
    \ \"100000000\" + binary\n    \n    if decimal < 100000000000:\n        binary\
    \ = \"1000000000\" + binary\n    \n    if decimal < 1000000000000:\n        binary\
    \ = \"10000000000\" + binary\n    \n    if decimal < 10000000000000:\n       \
    \ binary = \"100000000000\" + binary\n    \n    if decimal < 100000000000000:\n\
    \        binary = \"1000000000000\" + binary\n    \n    if decimal < 1000000000000000:\n\
    \        binary = \"10000000000000\" + binary\n    \n    if decimal < 10000000000000000:\n\
    \        binary = \"100000000000000\" + binary\n    \n    if decimal < 100000000000000000:\n\
    \        binary = \"1000000000000000\" + binary\n    \n    if decimal < 1000000000000000000:\n\
    \        binary = \"10000000000000000\" + binary\n    \n    if decimal < 10000000000000000000:\n\
    \        binary = \"100000000000000000\" + binary\n    \n    if decimal < 1000000000000000000:\n\
    \        binary = \"1000000000000000000\" + binary\n    \n    return binary\n\
    end", "    \n    binary = \"\"\n    \n    decimal = decimal % 2\n    \n    while\
    \ decimal != 0\n        \n        binary = binary + \"0\"\n        decimal = decimal\
    \ // 2\n        \n    binary = binary + \"1\"\n    \n    binary = binary + \"\
    db\"\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. \nThe function\
    \ should take in a string and return a number.", "    if decimal < 0\n       \
    \ error(\"Decimal number must be positive\")\n    end\n    binary = \"\"\n   \
    \ while decimal > 0\n        binary = string(decimal % 2) + binary\n        decimal\
    \ = decimal / 2\n    end\n    binary = string(decimal) + binary\n    binary =\
    \ string(binary)\n    binary = string(binary)\n    binary = string(binary)\n \
    \   binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(binary)\n\
    \    binary = string(binary)\n    binary = string(binary)\n    binary = string(",
  "    binary_string = \"\"\n    \n    for i in decimal_to_binary(decimal)\n     \
    \   binary_string += i\n    end\n    \n    return binary_string\nend", "    \n\
    \    binary = \"\"\n    \n    if decimal < 0: \n        decimal = -decimal\n \
    \       \n    decimal = decimal % 2\n    \n    while decimal > 0: \n        binary\
    \ = binary + \"0\"\n        decimal = decimal - 1\n    \n    decimal = decimal\
    \ / 2\n    \n    while decimal > 0: \n        binary = binary + \"1\"\n      \
    \  decimal = decimal - 1\n    \n    binary = binary + \"b\"\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a binary number to a decimal number. \nThe function\
    \ should take in a string and return the decimal number.", "    \n    binary_string\
    \ = \"\"\n    \n    for digit in decimal:\n        if digit == 0:\n          \
    \  binary_string += \"0\"\n        elif digit == 1:\n            binary_string\
    \ += \"1\"\n        else:\n            binary_string += \"0\"\n    \n    binary_string\
    \ += \"db\"\n    \n    return binary_string\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. Your function should take in a string with each character\
    \ representing a binary number and return a string with each character representing\
    \ a decimal number. Each character in the string will be a digit between 0 and\
    \ 9.", "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary = binary\
    \ + \"0\"\n        return binary\n    \n    decimal = decimal % 2\n    \n    while\
    \ decimal > 0:\n        decimal = decimal // 2\n        binary = binary + \"1\"\
    \n    \n    return binary + \"db\"", "    \n    binary_string = \"\"\n    \n \
    \   decimal = decimal % 2\n    \n    if decimal > 0 \n        binary_string =\
    \ \"1\" + binary_string\n    else\n        binary_string = \"0\" + binary_string\n\
    \    \n    binary_string = decimal_to_binary(decimal / 2)\n    \n    return binary_string\
    \ + binary_string\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that converts binary numbers to decimal numbers. \nThe function\
    \ should take in a string and return a number.", "    \n    binary_string = \"\
    \"\n    \n    for digit in decimal:\n        if digit == 0 or digit == 1:\n  \
    \          binary_string += \"0\"\n        elif digit == 2:\n            binary_string\
    \ += \"1\"\n        elif digit == 3:\n            binary_string += \"10\"\n  \
    \      elif digit == 4:\n            binary_string += \"11\"\n        elif digit\
    \ == 5:\n            binary_string += \"100\"\n        elif digit == 6:\n    \
    \        binary_string += \"101\"\n        elif digit == 7:\n            binary_string\
    \ += \"110\"\n        elif digit == 8:\n            binary_string += \"111\"\n\
    \        elif digit == 9:\n            binary_string += \"1000\"\n        elif\
    \ digit == 10:\n            binary_string += \"1001\"\n        elif digit == 11:\n\
    \            binary_string += \"1010\"\n        elif digit == 12:\n          \
    \  binary_string += \"1011\"\n        elif digit == 13:\n            binary_string\
    \ += \"1100\"\n        elif digit == 14:\n            binary_string += \"1101\"\
    \n        elif digit == 15:\n            binary_string += \"1110\"\n        elif\
    \ digit == 16:\n            binary_string += \"1111\"\n    \n    return binary_string\n\
    </code>\n<|/ a tags=julia,binary,decimal |>\n<| a tags=julia,binary,decimal |>\n\
    I wrote a function that converts decimal to binary in Julia 1.0:\n<code>", " \
    \   \n    binary = \"\"\n    \n    if decimal < 2 || decimal > 64\n        return\
    \ \"Invalid input\"\n    \n    decimal = decimal % 2\n    \n    if decimal < 10\n\
    \        binary = \"0\"\n    \n    else if decimal < 16\n        binary = \"1\"\
    \n    \n    else\n        decimal = decimal / 2\n        \n        if decimal\
    \ < 10\n            binary = \"0\"\n        \n        else if decimal < 16\n \
    \           binary = \"1\"\n        \n        else\n            decimal = decimal\
    \ / 2\n            \n            if decimal < 10\n                binary = \"\
    0\"\n            \n            else if decimal < 16\n                binary =\
    \ \"1\"\n            \n            else\n                decimal = decimal / 2\n\
    \                \n                if decimal < 10\n                    binary\
    \ = \"0\"\n                \n                else if decimal < 16\n          \
    \          binary = \"1\"\n                \n                else\n          \
    \          decimal = decimal / 2\n                    \n                    if\
    \ decimal < 10\n                        binary = \"0\"\n                    \n\
    \                    else if decimal < 16\n                        binary = \"\
    1\"\n                    \n                    else\n                        decimal\
    \ = decimal / 2\n                        \n                        if decimal\
    \ < 10\n                            binary = \"0\"\n                        \n\
    \                        else if decimal < 16\n                            binary\
    \ = \"1\"\n                        \n                        else\n          \
    \                  decimal = decimal / 2\n                            \n     \
    \                       if decimal < 10\n                                binary\
    \ = \"0\"\n                            \n                            else if decimal\
    \ < 16\n                                binary = \"1\"\n                     \
    \       \n                            else\n                                decimal\
    \ = decimal / 2\n                                \n                          \
    \      if decimal < 10\n                                    binary = \"0\"\n \
    \                               \n                                else if decimal\
    \ < 16\n                                    binary = \"1\"\n                 \
    \               \n                                else\n                     \
    \               decimal = decimal / 2\n                                    \n\
    \                                    if decimal < 10\n                       \
    \                 binary = \"0\"\n                                    \n     \
    \                               else if decimal < 16\n                       \
    \                 binary = \"1\"\n                                    \n     \
    \                               else\n                                       \
    \ decimal = decimal / 2\n                                        \n          \
    \                              if decimal < 10\n                             \
    \               binary = \"0\"\n                                        \n   \
    \                                     else if decimal < 16\n                 \
    \                           binary = \"1\"\n                                 \
    \       \n                                        else\n                     \
    \                       decimal = decimal / 2\n                              \
    \              \n                                            if decimal < 10\n\
    \                                                binary = \"0\"\n            \
    \                                \n                                          \
    \  else if decimal < 16\n                                                binary\
    \ = \"1\"\n                                            \n                    \
    \                        else\n                                              \
    \  decimal = decimal / 2\n                                                \n \
    \                                               if decimal < 10\n            \
    \                                        binary = \"0\"\n                    \
    \                            \n                                              \
    \  else if decimal < 16\n                                                    binary\
    \ = \"1\"\n                                                \n                \
    \                                else\n                                      \
    \              decimal = decimal / 2\n                                       \
    \             \n                                                    if decimal\
    \ < 10\n                                                        binary = \"0\"\
    \n                                                    \n                     \
    \                               else if decimal < 16\n                       \
    \                                 binary = \"", "    if decimal < 0\n        error(\"\
    decimal number must be positive\")\n    else if decimal > 2^(64 - 64)\n      \
    \  error(\"decimal number too large\")\n    else\n        binary = \"\"\n    \
    \    while decimal > 0\n            binary = string(decimal % 2) + binary\n  \
    \          decimal = decimal / 2\n        end\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(binary)) + binary\n        binary\
    \ = string(64 - length(binary)) + binary\n        binary = string(64 - length(binary))\
    \ + binary\n        binary = string(64 - length(", "    if decimal < 0\n     \
    \   error(\"Decimal cannot be negative\")\n    elseif decimal > 2^(64 - 64)\n\
    \        error(\"Decimal cannot be greater than 2^64\")\n    else\n        binary\
    \ = \"\"\n        for i = 64 - 64 + 1 downto 0\n            binary = binary +\
    \ string(64 - i, 64 - i).reverse\n            binary = binary + string(64 - i,\
    \ 64 - i)\n        end\n        binary = binary + string(64 - 64, 64 - 64)\n \
    \       binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - 64)\n        binary = binary + string(64 - 64, 64 - 64)\n\
    \        binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - 64)\n        binary = binary + string(64 - 64, 64 - 64)\n\
    \        binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - 64)\n        binary = binary + string(64 - 64, 64 - 64)\n\
    \        binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - 64)\n        binary = binary + string(64 - 64, 64 - 64)\n\
    \        binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - 64)\n        binary = binary + string(64 - 64, 64 - 64)\n\
    \        binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - 64)\n        binary = binary + string(64 - 64, 64 - 64)\n\
    \        binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - 64)\n        binary = binary + string(64 - 64, 64 - 64)\n\
    \        binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - 64)\n        binary = binary + string(64 - 64, 64 - 64)\n\
    \        binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - 64)\n        binary = binary + string(64 - 64, 64 - 64)\n\
    \        binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - 64)\n        binary = binary + string(64 - 64, 64 - 64)\n\
    \        binary = binary + string(64 - 64, 64 - 64)\n        binary = binary +\
    \ string(64 - 64, 64 - ", "    binary_string = \"\"\n    for digit in decimal::Int64\n\
    \        binary_string += \"0\" \n        if digit == 1\n            binary_string\
    \ += \"1\"\n        else\n            binary_string += \"0\"\n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that converts binary to decimal.", "    \n    binary\
    \ = \"\"\n    \n    if decimal < 2:\n        binary = binary + \"0\"\n       \
    \ return binary\n    \n    decimal = decimal - 2\n    \n    while decimal >= 1:\n\
    \        decimal = decimal / 2\n        binary = binary + \"1\"\n    \n    return\
    \ binary + \"db\"", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        error(\"Invalid decimal number\")\n    \n    decimal = decimal\
    \ % 2\n    \n    if decimal > 1\n        binary = binary + \"1\"\n    else\n \
    \       binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 1\n        binary = binary + \"1\"\n    else\n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 1\n       \
    \ binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n \
    \   decimal = decimal / 2\n    \n    if decimal > 1\n        binary = binary +\
    \ \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 1\n        binary = binary + \"1\"\n    else\n \
    \       binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 1\n        binary = binary + \"1\"\n    else\n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 1\n       \
    \ binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n \
    \   decimal = decimal / 2\n    \n    if decimal > 1\n        binary = binary +\
    \ \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 1\n        binary = binary + \"1\"\n    else\n \
    \       binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 1\n        binary = binary + \"1\"\n    else\n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 1\n       \
    \ binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n \
    \   decimal = decimal / 2\n    \n    if decimal > 1\n        binary = binary +\
    \ \"1\"\n    else\n        binary = binary + \"0\"\n    \n    decimal = decimal\
    \ / 2\n    \n    if decimal > 1\n        binary = binary + \"1\"\n    else\n \
    \       binary = binary + \"0\"\n    \n    decimal = decimal / 2\n    \n    if\
    \ decimal > 1\n        binary = binary + \"1\"\n    else\n        binary = binary\
    \ + \"0\"\n    \n    decimal = decimal / 2\n    \n    if decimal > 1\n       \
    \ binary = binary + \"1\"\n    else\n        binary = binary + \"0\"\n    \n \
    \   decimal = decimal / ", "    binary_string = \"\"\n    \n    for i in decimal_to_binary(decimal)\n\
    \        binary_string += i\n    end\n    \n    return binary_string\nend\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nProblem 3\nWrite a function that converts\
    \ binary to decimal.", "    \n    binary = \"\"\n    \n    if decimal < 2 || decimal\
    \ > 64\n        throw(ArgumentError(\"decimal must be between 2 and 64\"))\n \
    \   end", "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary\
    \ = binary + \"0\"\n        return binary\n    \n    decimal = decimal - 2\n \
    \   \n    while decimal != 0:\n        binary = binary + \"1\"\n        decimal\
    \ = decimal - 1\n    \n    binary = binary + \"db\"\n    return binary\nend\n\
    </cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(32)\n</cell>\n<text>\nExercise 3\nWrite a function that converts\
    \ binary numbers to decimal numbers. Your function should take in a string with\
    \ each character representing a binary number and return a string with each character\
    \ representing a decimal number. Each character in the string will be '0' or '1'.",
  "    \n    if decimal < 0\n        error(\"Decimal cannot be negative\")\n    \n\
    \    binary = \"\"\n    \n    decimal = decimal % 2\n    \n    while decimal >\
    \ 0\n        binary = binary + \"0\"\n        decimal = decimal - 1\n    \n  \
    \  decimal = decimal % 2\n    \n    while decimal > 0\n        binary = binary\
    \ + \"1\"\n        decimal = decimal - 1\n    \n    binary = binary + \"b\"\n\
    \    \n    return binary\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ converts a binary number to decimal.", "    binary_string = \"\"\n    for digit\
    \ in decimal\n        binary_string += \"0\"\n        if digit == 1\n        \
    \    binary_string += \"1\"\n        end\n    end\n    return binary_string +\
    \ \"db\"\nend\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n\
    <code language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\n\
    Write a function that will convert a binary string to a decimal string. Your function\
    \ should take in a binary string and return a decimal string.", "    \n    binary\
    \ = \"\"\n    \n    if decimal > 0 \n        binary = decimal_to_binary(decimal\
    \ - 1)\n        \n    binary += \"1\"\n    \n    if decimal < 0 \n        binary\
    \ = binary + \"0\"\n        \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a binary number to\
    \ a decimal number. The function should take in a string with each character representing\
    \ a binary number, and return the decimal number. There will be an extra couple\
    \ of characters 'db' at the beginning and at the end of the string.", "    \n\
    \    binary_string = \"\"\n    \n    decimal = decimal % 2\n    \n    if decimal\
    \ > 0 \n        binary_string = \"1\" + binary_string\n    else\n        binary_string\
    \ = \"0\" + binary_string\n    \n    binary_string = binary_string * 8\n    \n\
    \    binary_string = \"db\" + binary_string\n    \n    return binary_string\n\
    end\n</cell>\n<code language=julia-1.5>\ndecimal_to_binary(15)\n</cell>\n<code\
    \ language=julia-1.5>\ndecimal_to_binary(32)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a binary number to a decimal number. Your function\
    \ should take in a binary string and return a decimal number.", "    \n    binary\
    \ = \"\"\n    \n    for digit in decimal\n        binary = binary + str((digit\
    \ % 2) == 0)\n        \n    return binary + \"db\"\nend\n</cell>\n<code language=julia-1.4>\n\
    decimal_to_binary(15)\n</cell>\n<code language=julia-1.4>\ndecimal_to_binary(32)\n\
    </cell>\n<text>\nExercise\nWrite a function that converts binary to decimal.",
  "    \n    binary = \"\"\n    \n    if decimal < 2:\n        binary = \"0\"\n  \
    \  \n    if decimal < 16:\n        binary = \"0\" + binary\n    \n    if decimal\
    \ < 256:\n        binary = \"1\" + binary\n    \n    if decimal < 65536:\n   \
    \     binary = \"10\" + binary\n    \n    if decimal < 4294967296:\n        binary\
    \ = \"100\" + binary\n    \n    if decimal < 18446744073709551616:\n        binary\
    \ = \"1000\" + binary\n    \n    if decimal < 9223372036854775808:\n        binary\
    \ = \"10000\" + binary\n    \n    if decimal < 18446744073709551616:\n       \
    \ binary = \"100000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"1000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"100000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"1000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"10000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"1000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"100000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"1000000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"10000000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"100000000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary = \"1000000000000000000\" + binary\n    \n    if decimal < 18446744073709551616:\n\
    \        binary = \"10000000000000000000\" + binary\n    \n    if decimal < 9223372036854775808:\n\
    \        binary", "    \n    binary_string = \"\"\n    \n    if decimal < 2:\n\
    \        binary_string = \"0\"\n    \n    else if decimal < 16:\n        binary_string\
    \ = \"1\"\n    \n    else:\n        binary_string = \"1\"\n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        "]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
