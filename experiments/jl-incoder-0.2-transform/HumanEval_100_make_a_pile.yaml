name: HumanEval_100_make_a_pile
language: jl
prompt: "\"\"\"\n    Given a positive integer n, you have to make a pile of n levels\
  \ of stones.\n    The first level has n stones.\n    The number of stones in the\
  \ next level is:\n        - the next odd number if n is odd.\n        - the next\
  \ even number if n is even.\n    Return the number of stones in each level in a\
  \ list, where element at index\n    i represents the number of stones in the level\
  \ (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\nfunction\
  \ make_a_pile(n::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = make_a_pile;\n\t@test(candidate(3)\
  \ == [3, 5, 7])\n\t@test(candidate(4) == [4, 6, 8, 10])\n\t@test(candidate(5) ==\
  \ [5, 7, 9, 11, 13])\n\t@test(candidate(6) == [6, 8, 10, 12, 14, 16])\n\t@test(candidate(8)\
  \ == [8, 10, 12, 14, 16, 18, 20, 22])\nend\n"
completions: ["    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a positive integer\
    \ n and returns the number of ways to arrange the stones in a pile of n stones.",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        return odd\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to arrange the n stones in a pile of n levels of stones.", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else if n%2==0 \n        return make_a_pile(n/2)+make_a_pile(n/2+1) + Vector{Int64}(n/2+1)\n\
    \    else \n        return make_a_pile(n/2)+make_a_pile(n/2+1) + Vector{Int64}(n/2+2)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n - 1) \n        push!(make_a_pile(n mod 2), n\
    \ mod 2)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the number of ways to make a pile of n levels\
    \ of stones.", "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ div 2) + [n mod 2] \n    end\nend\n</cell>\n<code language=julia-1.0>", "  \
    \  if n % 2 == 0 \n        make_a_pile(n / 2)\n    else\n        make_a_pile(n\
    \ / 2) + [n mod 2]\n    end\nend", "    if n==1 \n        return [1]\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n\
    \        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n==0 \n        []\n    else\n        make_a_pile(n div 2) + [n mod 2]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(100);\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes an integer n and returns the number of ways\
    \ to make a pile of n levels of stones.", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd_nums\
    \ = make_a_pile(n-1)\n        even_nums = make_a_pile(n-2)\n        odd_nums.insert(1,odd_nums[end])\n\
    \        even_nums.insert(1,even_nums[end])\n        odd_nums.insert(1,odd_nums[end])\n\
    \        even_nums.insert(1,even_nums[end])\n        return odd_nums + even_nums\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if n == 1 \n        return [1]\n    \n    even =\
    \ make_a_pile(n / 2)\n    odd = make_a_pile(n / 2)\n    \n    if n % 2 == 1 \n\
    \        odd[end] = odd[end] + 1\n    else \n        even[end] = even[end] + 1\n\
    \    end\n    \n    return even ++ odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}()\n    else \n        odd_count =\
    \ make_a_pile(n / 2)\n        even_count = make_a_pile(n / 2)\n        odd_count[end]\
    \ = odd_count[end] + n % 2 == 0 ? odd_count[end] + 1 : odd_count[end]\n      \
    \  even_count[end] = even_count[end] + n % 2 == 0 ? even_count[end] + 1 : even_count[end]\n\
    \        return odd_count ++ even_count\nend", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n div 2),\
    \ n mod 2) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an integer n and returns the number of ways to arrange the stones in a\
    \ pile. \nFor example, given n = 4, there are 4 ways to arrange the stones in\
    \ a pile:", "    if n == 0 \n        Vector{Int64}()\n    else\n        make_a_pile(n\
    \ - 1) .+ [n mod 2 ? n : n - 1]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n-1)\n\
    \    if n % 2 == 0 \n        push!(pile, n / 2)\n    else\n        push!(pile,\
    \ n / 2 + 1)\n    end\n    return pile\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a\
    \ list of integers and returns the number of unique elements in the list.", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n mod 2) \n        push!(make_a_pile(n /\
    \ 2), n mod 2) \n    end\nend\n</cell>\n<code language=julia-1.0>", "    if n==0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))\n    \
    \    push!(make_a_pile(n%2), n%2)\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes in a positive integer n and returns the number of\
    \ ways to make n piles.", "    if n % 2 == 0 \n        odds = n / 2\n        evens\
    \ = n - odds\n        return [odds, evens]\n    else\n        odds = n / 2\n \
    \       evens = n - odds\n        return [odds, evens]\n    end\nend", "    if\
    \ n == 0 \n        return Vector{Int64}()\n    else \n        if n % 2 == 0 \n\
    \            pile = make_a_pile(n / 2)\n            push!(pile, n / 2)\n     \
    \       return pile\n        else \n            pile = make_a_pile(n / 2)\n  \
    \          push!(pile, n / 2)\n            push!(pile, n / 2)\n            return\
    \ pile\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ n and returns the number of levels of stones needed to make n stones.", "  \
    \  if n==0 \n        []\n    else\n        make_a_pile(n div 2) + [n mod 2]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of levels of stones needed to form a pile with n stones.", "    if\
    \ n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 0 \n        make_a_pile(n\
    \ / 2)\n    else\n        make_a_pile(n / 2) + [n mod 2]\n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n==0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes an integer n and returns the number of ways\
    \ to make a pile of n levels of stones.", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n % 2 == 1 \n        return make_a_pile(n / 2) + [n / 2]\n    else\
    \ \n        return make_a_pile(n / 2) + [n / 2]\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise\nWrite a function that takes an integer\
    \ n and returns the number of ways to make a pile of n levels of stones.", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n / 2)\
    \ ++ [n % 2 == 0 ? n : 2 * n + 1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ n stones in a pile.", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer n and returns the number of\
    \ levels \nof stones needed to make a pile of n stones.", "    if n == 0 \n  \
    \      Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}()\n    else \n        pile = make_a_pile(n\
    \ div 2)\n        push!(pile, n mod 2)\n        return pile\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==1 \n        return [1]\n    else \n   \
    \     odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n       \
    \ push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer n and returns\
    \ the number of levels of stones needed to make a pile. \nThe first level has\
    \ n stones.\nThe number of stones in the next level is:\n        - the next odd\
    \ number if n is odd.\n        - the next even number if n is even.\n    \n  \
    \  Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"", "    if n %\
    \ 2 == 1 \n        odds = make_a_pile(n / 2)\n        odds[end] = odds[end] +\
    \ 1\n        return odds\n    else\n        evens = make_a_pile(n / 2)\n     \
    \   evens[end] = evens[end] + 1\n        return evens\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer n and returns the number\
    \ of ways to arrange the stones in a pile of n levels of stones.", "    if n==1\
    \ \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        return odd\nend\n</cell>\n<code language=julia-1.3>",
  "    if n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n\
    \ / 2)\n    pile = pile + [n mod 2]\n    \n    return pile\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n\
    \ : n / 2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3)\
    \ == [3, 5, 7]\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0\
    \ ? n+1 : n) \n    end\nend\n</cell>\n<code language=julia-1.3>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes as input a positive integer\
    \ n and returns the number of ways to arrange the n stones in a pile of n levels.\
    \ \nThe first level has n stones.\nThe number of stones in the next level is:\n\
    \        - the next odd number if n is odd.\n        - the next even number if\
    \ n is even.\n    \nExamples:\n    >>> count_ways(3)\n    3\n    >>> count_ways(4)\n\
    \    3\n    >>> count_ways(5)\n    6\n    >>> count_ways(6)\n    8\n    >>> count_ways(7)\n\
    \    8\n    >>> count_ways(8)\n    8\n    >>> count_ways(9)\n    8\n    >>> count_ways(10)\n\
    \    10\n    >>> count_ways(11)\n    10\n    >>> count_ways(12)\n    12\n    >>>\
    \ count_ways(13)\n    12\n    >>> count_ways(14)\n    14\n    >>> count_ways(15)\n\
    \    14\n    >>> count_ways(16)\n    16\n    >>> count_ways(17)\n    16\n    >>>\
    \ count_ways(18)\n    18\n    >>> count_ways(19)\n    18\n    >>> count_ways(20)\n\
    \    20\n    >>> count_ways(21)\n    20\n    >>> count_ways(22)\n    22\n    >>>\
    \ count_ways(23)\n    22\n    >>> count_ways(24)\n    24\n    >>> count_ways(25)\n\
    \    24\n    >>> count_ways(26)\n    24\n    >>> count_ways(27)\n    24\n    >>>\
    \ count_ways(28)\n    24\n    >>> count_ways(29)\n    24\n    >>> count_ways(30)\n\
    \    24\n    >>> count_ways(31)\n    24\n    >>> count_ways(32)\n    24\n    >>>\
    \ count_ways(33)\n    24\n    >>> count_ways(34)\n    24\n    >>> count_ways(35)\n\
    \    24\n    >>> count_ways(36)\n    24\n    >>> count_ways(37)\n    24\n    >>>\
    \ count_ways(38)\n    24\n    >>> count_ways(39)\n    24\n    >>> count_ways(40)\n\
    \    24\n    >>> count_ways(41)\n    24\n    >>> count_ways(", "    if n==0 \n\
    \        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd[end-1:end]\n        return odd\n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n div 2) + [n mod 2]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n==0 \n        Vector{Int64}() \n    else \n \
    \       make_a_pile(ceil(n/2))+[ceil(n%2)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a positive integer n and returns the number of ways to make n piles.", "   \
    \ if n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 0 \n      \
    \  make_a_pile(n/2)\n    else \n        make_a_pile(n/2)+1\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n==1 \n        return [1]\n    else \n       \
    \ odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd+odd\n        return odd\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n - 1) \n        push!(make_a_pile(n mod 2), n / 2) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd+odd\n        return odd\nend\n</cell>\n<code language=julia-1.0>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        return odd\nend", "    if n == 1 \n        [1]\n  \
    \  else \n        make_a_pile(n / 2) ++ [n % 2 == 0 ? n : n / 2]\nend", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return [1]\n\
    \    else \n        odd::Int64 = if n%2==1 \n            n \n        else \n \
    \           n \n        even::Int64 = if n%2==0 \n            n \n        else\
    \ \n            n \n        pile = make_a_pile(odd) + make_a_pile(even)\n    \
    \    return pile\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n  \
    \      []\n    else\n        make_a_pile(n-1)+[(n%2==0)?(n-1):(n-1)+(n%2==0?2:1)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    return odd\n    end\nend\n</cell>\n<code language=julia-1.4>", "    if n==1\
    \ \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        return odd+odd\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 return []\n    if n==1 return [1]\n    if n%2==0 return make_a_pile(n-1)+make_a_pile(n-2)\n\
    \    else return make_a_pile(n-1)+make_a_pile(n-2)+make_a_pile(n-3)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ called count_piles(n::Int64) that returns the number of piles needed to make\
    \ n levels.", "    if n==0 \n        Vector{Int64}()\n    elseif n==1\n      \
    \  Vector{Int64}(1)\n    else\n        odd=n%2\n        even=n//2\n        make_a_pile(odd)\
    \ + make_a_pile(even)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange n\
    \ items in n piles.", "    if n==1 \n        return [1]\n    \n    evens = make_a_pile(n/2)\n\
    \    odds = make_a_pile(n-evens)\n    \n    evens = evens[2:end-1]\n    odds =\
    \ odds[2:end-1]\n    \n    return evens + odds\nend\n</cell>\n<code language=julia-1.3>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise: Write a function that takes an integer\
    \ n and returns the number of ways to make n piles.", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n    else\
    \ \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        return odd+even\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a positive integer n and returns the number of ways to make\
    \ a pile of n levels of stones.", "    if n==1 \n        return [1]\n    \n  \
    \  pile = make_a_pile(n-1)\n    \n    if n%2 == 1 \n        push!(pile, 2*pile[n-1])\n\
    \    else \n        push!(pile, pile[n-1])\n    end\n    \n    return pile\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to arrange the n stones in a pile of n levels. \nThe first level has n\
    \ stones.\nThe number of stones in the next level is:\n        - the next odd\
    \ number if n is odd.\n        - the next even number if n is even.\n    \n  \
    \  Examples:\n    >>> arrange_pile(3)\n    6\n    >>> arrange_pile(4)\n    12\n\
    \    >>> arrange_pile(5)\n    25\n    \"\"\"", "    if n==0 \n        Vector{Int64}()\n\
    \    elseif n==1\n        Vector{Int64}(1)\n    elseif n==2\n        Vector{Int64}(1,2)\n\
    \    elseif n==3\n        Vector{Int64}(1,3,5)\n    elseif n==4\n        Vector{Int64}(1,3,5,7)\n\
    \    elseif n==5\n        Vector{Int64}(1,3,5,7,9)\n    elseif n==6\n        Vector{Int64}(1,3,5,7,9,11)\n\
    \    elseif n==7\n        Vector{Int64}(1,3,5,7,9,11,13)\n    elseif n==8\n  \
    \      Vector{Int64}(1,3,5,7,9,11,13,15)\n    elseif n==9\n        Vector{Int64}(1,3,5,7,9,11,13,15,17)\n\
    \    elseif n==10\n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19)\n    elseif\
    \ n==11\n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21)\n    elseif n==12\n\
    \        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23)\n    elseif n==13\n   \
    \     Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25)\n    elseif n==14\n   \
    \     Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27)\n    elseif n==15\n\
    \        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29)\n    elseif n==16\n\
    \        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31)\n    elseif\
    \ n==17\n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33)\n\
    \    elseif n==18\n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35)\n\
    \    elseif n==19\n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37)\n\
    \    elseif n==20\n        Vector{Int64}(1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39)\n\
    \    elseif n==21\n        Vector{Int64}(1,3,5,7,9,11,13,15,17,", "    if n %\
    \ 2 == 0 \n        make_a_pile(n/2)\n    else \n        make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2) + make_a_pile(n/2)\
    \ + make_a_pile(n", "    if n==0 \n        Vector{Int64}() \n    else \n     \
    \   make_a_pile(ceil(n/2)) |> push!(make_a_pile(n-floor(n/2)))\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes as input a positive integer\
    \ n and returns the number of ways to make a pile of n levels of stones.", " \
    \   if n==0 \n        Vector{Int64}()\n    elseif n==1 \n        Vector{Int64}(1)\n\
    \    elseif n==2 \n        Vector{Int64}(1, 2)\n    elseif n==3 \n        Vector{Int64}(1,\
    \ 3)\n    elseif n==4 \n        Vector{Int64}(2, 3)\n    elseif n==5 \n      \
    \  Vector{Int64}(2, 4)\n    elseif n==6 \n        Vector{Int64}(3, 4)\n    elseif\
    \ n==7 \n        Vector{Int64}(3, 5)\n    elseif n==8 \n        Vector{Int64}(4,\
    \ 5)\n    elseif n==9 \n        Vector{Int64}(4, 6)\n    elseif n==10 \n     \
    \   Vector{Int64}(5, 6)\n    elseif n==11 \n        Vector{Int64}(5, 7)\n    elseif\
    \ n==12 \n        Vector{Int64}(6, 7)\n    elseif n==13 \n        Vector{Int64}(6,\
    \ 8)\n    elseif n==14 \n        Vector{Int64}(7, 8)\n    elseif n==15 \n    \
    \    Vector{Int64}(7, 9)\n    elseif n==16 \n        Vector{Int64}(8, 9)\n   \
    \ elseif n==17 \n        Vector{Int64}(8, 10)\n    elseif n==18 \n        Vector{Int64}(9,\
    \ 10)\n    elseif n==19 \n        Vector{Int64}(9, 11)\n    elseif n==20 \n  \
    \      Vector{Int64}(10, 11)\n    elseif n==21 \n        Vector{Int64}(10, 12)\n\
    \    elseif n==22 \n        Vector{Int64}(11, 12)\n    elseif n==23 \n       \
    \ Vector{Int64}(11, 13)\n    elseif n==24 \n        Vector{Int64}(12, 13)\n  \
    \  elseif n==25 \n        Vector{Int64}(12, 14)\n    elseif n==26 \n        Vector{Int64}(13,\
    \ 14)\n    elseif n==27 \n        Vector{Int64}(13, 15)\n    elseif n==28 \n \
    \       Vector{Int64}(14, 15)\n    elseif n==29 \n        Vector{Int64}(14, 16)\n\
    \    elseif n==30 \n        Vector{Int64}(15, 16)\n    elseif n==31 \n       \
    \ Vector{Int64}(15, 17)\n    elseif n==32 \n        Vector{Int64}(16, 17)\n  \
    \  elseif n==33 \n        Vector{Int64}(16, 18)\n    elseif n==34 ", "    if n\
    \ == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n / 2) + [n\
    \ % 2 == 0 ? 1 : 3]\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of numbers and returns the sum of the numbers in the list.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to arrange n stones.", "    if n==0 \n        Vector{Int64}()\n    else\
    \ \n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2),n)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n\
    \ : n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0\
    \ \n        return Vector{Int64}()\n    else if n % 2 == 1 \n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2]\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 0 \n     \
    \   return make_a_pile(n / 2) + [n / 2]\n    else \n        return make_a_pile(n\
    \ / 2) + [n / 2 + 1]\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n       \
    \ push!(make_a_pile(n / 2), n % 2 == 0 ? 1 : 2) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if n == 1 \n        return [1]\n    \n    evens =\
    \ make_a_pile(n / 2)\n    odds = make_a_pile(n / 2)\n    \n    evens = evens +\
    \ odds\n    \n    if n % 2 == 1 \n        evens = evens + [1]\n    end\n    \n\
    \    return evens\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n\
    \ : 2 * n) \n    end\nend\n</cell>\n<code language=julia-1.0>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of levels needed to make a pile of n stones.", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        return odd\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        []\n    else\n        if n%2 == 0\n            make_a_pile(n/2)\n\
    \        else\n            make_a_pile(n/2)+1\n        end\n    end\nend", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a positive integer n and returns the number\
    \ of ways to arrange n stones in a pile.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n mod 2) \n        push!(make_a_pile(n / 2), n mod 2) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise\nWrite a\
    \ function that takes an integer n and returns the number of levels of stones\
    \ needed to make a pile of n stones.", "    if n==1 \n        return [1]\n   \
    \ else \n        odds = make_a_pile(n div 2)\n        evens = make_a_pile(n div\
    \ 2)\n        evens = [evens[i] + odds[i] for i in 1:length(odds)]\n        return\
    \ evens\n    end\nend\n</cell>\n<code language=julia-1.0>\nmake_a_pile(4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the stones in a pile of n levels. \nFor example,\
    \ make_a_pile(3) should return [3, 5, 7].", "    if n == 0 \n        return Vector{Int64}()\n\
    \    \n    pile = make_a_pile(n / 2)\n    \n    if n % 2 == 1 \n        push!(pile,\
    \ n / 2)\n    else \n        push!(pile, n / 2 + 1)\n    end\n    \n    return\
    \ pile\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 1 \n        [1]\n    else\n        make_a_pile(n\
    \ / 2)\n        push!(make_a_pile(n / 2), n mod 2)\n    end\nend\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of stones in a pile.", "  \
    \  if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange the n stones in a pile.", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n\
    \        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n / 2) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the stones in a pile of n stones.", "    if n\
    \ % 2 == 0 \n        make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + [(n+1)/2]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n % 2 == 0 \n    \
    \    make_a_pile(n/2)\n    else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\n\
    end\n</cell>\n<code language=julia-1.3>", "    if n==0 return []\n    else if\
    \ n==1 return [1]\n    else if n%2 == 0 return make_a_pile(n/2)+[(n+1)/2]\n  \
    \  else return make_a_pile(n/2) + [(n+1)/2]\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 0 \n     \
    \   return make_a_pile(n / 2) + [n / 2]\n    else \n        return make_a_pile(n\
    \ / 2) + [n / 2]\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange the n stones in a pile.", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        return\
    \ [1]\n    else \n        odd = n % 2\n        if odd \n            even = n /\
    \ 2\n        else \n            even = n / 2\n        \n        pile = make_a_pile(even)\
    \ + make_a_pile(odd)\n        return pile\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(10)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a positive integer n and returns the number of ways to arrange the n stones\
    \ in a pile.", "    if n == 0 \n        Vector{Int64}()\n    else\n        make_a_pile(n\
    \ / 2) + [n % 2 == 0 ? 1 : 2]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert make_a_pile(3) == [3, 5, 7]\n@assert make_a_pile(5) == [5, 7, 9, 11, 13]\n\
    @assert make_a_pile(10) == [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the n stones in a pile of n levels of stones.",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))+[ceil(n/2)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a positive integer n and returns\
    \ the number of levels of stones needed to make a pile of n stones.", "    if\
    \ n == 0 \n        return Vector{Int64}()\n    \n    pile = make_a_pile(n div\
    \ 2)\n    \n    if n % 2 == 0 \n        push!(pile, n div 2)\n    else \n    \
    \    push!(pile, n div 2 + 1)\n    end\n    \n    return pile\nend", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=n%2\n        even=n%2\n        pile=make_a_pile(odd) +\
    \ make_a_pile(even)\n        if odd==1 \n            return pile\n        else\
    \ \n            return pile+[odd]\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n\
    <code language=julia-1.5>", "    if n==0 \n        Vector{Int64}()\n    else\n\
    \        make_a_pile(n mod 2)+[n div 2]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n-1)\n   \
    \ end\nend\n</cell>\n<text>\nExercise: Write a function that takes a positive\
    \ integer n and returns the number of levels of stones needed to make a pile.\
    \ For example, make_a_pile(3) should return [3, 5, 7].", "    if n == 0 \n   \
    \     return Vector{Int64}()\n    \n    pile = make_a_pile(n / 2)\n    pile =\
    \ pile:append(n mod 2)\n    return pile\nend", "    if n==1 \n        [1]\n  \
    \  else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-2),n%2==0?n+1:n+1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(ceil(n/2)).+(ceil(n%2==0)*ceil(n/2))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer n and returns the number of\
    \ ways to make a pile of n levels of stones.", "    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n div 2) + [n mod 2]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? 1\
    \ : 2) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n  \
    \      return Vector{Int64}() \n    else \n        odd=make_a_pile(n-1)\n    \
    \    even=make_a_pile(n-2)\n        odd=odd+odd\n        even=even+even\n    \
    \    return odd+even\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n / 2) + [n % 2 ==\
    \ 0 ? 1 : 3]\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3)\
    \ == [3, 5, 7]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile.",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n \
    \       push!(make_a_pile(n-1), n%2 == 0 ? 1 : 2)\n    end\nend", "    if n==0\
    \ \n        Vector{Int64}()\n    else\n        make_a_pile(n div 2) + [n mod 2]\n\
    \    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to make a pile of n levels of stones.",
  "    if n==0 return []\n    if n==1 return [1]\n    if n%2 == 0 return make_a_pile(n//2)+make_a_pile(n//2)\n\
    \    else return make_a_pile(n//2)+make_a_pile(n//2)+make_a_pile(n//2)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        return odd\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a positive integer n and returns the number of levels\
    \ of stones needed to make a pile of n stones.", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? n : n+1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a positive integer\
    \ n and returns the number of ways to arrange the n stones in a pile.", "    if\
    \ n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n     \
    \   push!(make_a_pile(n-1), n%2 == 0 ? n : n+1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a positive integer n and returns the number of ways to\
    \ arrange n items in n piles.", "    if n==0 return []\n    if n==1 return [1]\n\
    \    if n%2==0 return make_a_pile(n/2)+make_a_pile(n/2+1) \n    else return make_a_pile(n/2)\
    \ + make_a_pile(n/2+1) + make_a_pile(n/2+2)\nend", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(10)\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a positive integer n and returns the number of levels of stones needed to make\
    \ n piles.", "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2)).*(ceil(n/2))+make_a_pile(floor(n/2)).*(floor(n/2))\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n@time make_a_pile(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the n stones in a pile of n levels. \nThe first\
    \ level has n stones.\nThe number of stones in the next level is:\n        - the\
    \ next odd number if n is odd.\n        - the next even number if n is even.\n\
    \    Return the number of ways to arrange the n stones in a pile of n levels.",
  "    if n==1 \n        return [1]\n    \n    even = make_a_pile(n-1)\n    odd =\
    \ make_a_pile(n-2)\n    \n    even = even.*(2:2:end) + odd.*(1:2:end)\n    \n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3)\
    \ == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function that takes as input\
    \ a positive integer n and returns the number of ways to make a pile of n levels\
    \ of stones.", "    if n==1 \n        return [1]\n    else \n        odd = make_a_pile(n-1)\n\
    \        even = make_a_pile(n-2)\n        odd[end] = odd[end] + even[end]\n  \
    \      return odd\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of ways\
    \ to arrange n items in k piles.", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd::Int64\
    \ = if n%2==1 \n            n \n        else \n            n \n        even::Int64\
    \ = if n%2==0 \n            n \n        else \n            n \n        pile =\
    \ make_a_pile(odd) + make_a_pile(even)\n        return pile\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        make_a_pile(n / 2) + [n mod 2 + 1]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))\n\
    \        push!(make_a_pile(n%2),n%2)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a positive integer n and returns the\
    \ number of ways to arrange the n stones in a pile.", "    if n == 0 \n      \
    \  Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise\nWrite a function that takes a positive\
    \ integer n and returns the number of levels of stones needed to make a pile.\
    \ \nFor example, make_a_pile(3) should return [3, 5, 7].", "    if n==0 \n   \
    \     return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd_nums = make_a_pile(n-1)\n        even_nums = make_a_pile(n-2)\n\
    \        \n        odd_nums = odd_nums + even_nums\n        odd_nums = odd_nums[2:end]\n\
    \        even_nums = even_nums[1:end-1]\n        \n        return odd_nums + even_nums\n\
    end", "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\n\
    end\n</cell>\n<text>\nExercise: Write a function that takes an integer n and returns\
    \ the number of stones in the first level of the pile. Test your function with\
    \ n = 4.", "    if n == 0 \n        return Vector{Int64}()\n    else if n % 2\
    \ == 1\n        return make_a_pile(n / 2) + [n / 2]\n    else\n        return\
    \ make_a_pile(n / 2) + [n / 2]\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if n == 0 \n        Vector{Int64}()\n    else\n        make_a_pile(n - 1) +\
    \ (n & 1 ? 2 : 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nmake_a_pile(4)\n\
    </cell>\n<code language=julia-1.0>", "    if n==0 \n        Vector{Int64}() \n\
    \    else \n        make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n % 2 == 0 \n        make_a_pile(n/2)\n  \
    \  else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time make_a_pile(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer n and returns the number of ways to arrange the n stones\
    \ in a pile of n levels. \nFor example, given n = 4, there are 4 ways to arrange\
    \ the 4 stones in a pile of 4 levels:", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a positive integer n and returns the number of levels of\
    \ stones needed to make n stones.", "    if n % 2 == 0 \n        make_a_pile(n/2)\n\
    \    else\n        make_a_pile(n/2) + [(n%2)+1]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n % 2 == 0 \n        make_a_pile(n/2)\n    else\n\
    \        make_a_pile(n/2) + [(n+1)/2]\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    make_a_pile(5)\n</cell>\n<code language=julia-1.3>", "    if n==0 \n        return\
    \ Vector{Int64}()\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n\
    \        odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n    \
    \    odd=odd+even\n        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n\
    \        even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n    \
    \    even=even[end-1]\n        odd=odd+even\n        odd=odd[end-1]\n", "    if\
    \ n % 2 == 0 \n        make_a_pile(n/2)\n    else\n        make_a_pile(n/2) +\
    \ [(n+1)/2]\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n\
    \        Vector{Int64}()\n    else\n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?1:2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 1\nWrite a function that takes a positive\
    \ integer n and returns the number of levels of stones needed to make a pile of\
    \ n stones.", "    if n == 0 \n        return Vector{Int64}()\n    else if n %\
    \ 2 == 0\n        return make_a_pile(n / 2) + [n / 2]\n    else\n        return\
    \ make_a_pile(n / 2) + [n / 2 + 1]\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n \
    \       push!(make_a_pile(n-1), n%2 == 0 ? n : n+1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd::Int64 = if n%2==1 \n            n\
    \ \n        else \n            n \n        even::Int64 = if n%2==0 \n        \
    \    n \n        else \n            n \n        pile = make_a_pile(odd) + make_a_pile(even)\n\
    \        return pile\nend\n</cell>\n<code language=julia-1.4>", "    if n == 0\
    \ \n        return Vector{Int64}()\n    else if n % 2 == 0 \n        return make_a_pile(n\
    \ / 2) + [n / 2]\n    else \n        return make_a_pile(n / 2) + [n / 2 + 1]\n\
    end", "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n\
    \ - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n - 1) \n    end\n\
    end\n</cell>\n<text>\nExercise\nWrite a function that takes an integer n and returns\
    \ the number of levels in the pile.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? 1 : 2) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of ways to arrange the\
    \ n stones in a pile.", "    if n == 0 \n        return Vector{Int64}()\n    else\
    \ if n % 2 == 0 \n        return make_a_pile(n / 2) + [n / 2]\n    else \n   \
    \     return make_a_pile(n / 2) + [n / 2]\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise\nWrite a function that takes an integer\
    \ n and returns the number of ways to make a pile of n levels of stones.", " \
    \   if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(ceil(n/2))\n\
    \        push!(make_a_pile(n%2), n//2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    make_a_pile(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange n stones in a pile of n\
    \ levels. \nFor example, for n = 4, there are 4 ways to arrange 4 stones in a\
    \ pile of 4 levels:", "    if n == 0 \n        Vector{Int64}() \n    else \n \
    \       make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n\
    \ : n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3)\
    \ == [3, 5, 7]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to make piles of n levels with n stones.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n mod 2), n mod 2) \n        push!(make_a_pile(n\
    \ div 2), n div 2) \n    end\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ make_a_pile(3) == [3, 5, 7]\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to make a pile of\
    \ n levels of stones.", "    if n==0 \n        return Vector{Int64}()\n    else\
    \ if n==1 \n        return Vector{Int64}(1)\n    else \n        odd::Int64 = if\
    \ n%2==1 \n            n \n        else \n            n \n        even::Int64\
    \ = if n%2==0 \n            n \n        else \n            n \n        \n    \
    \    pile = make_a_pile(odd) + make_a_pile(even)\n        return pile\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n==1 \n        return [1]\n    else \n   \
    \     odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd[end-1:end]\n        even=even[end-1:end]\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd[end-1:end]\n        even=", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n \
    \       push!(make_a_pile(n-1),n%2==0?1:2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n % 2 == 0 \n        make_a_pile(n/2)\n    else\n        make_a_pile(n/2)\
    \ + [(n+1)/2]\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n\
    </cell>\n<text>\nExercise: Write a function that takes a positive integer n and\
    \ returns the number of stones in the first level of the pile. For example, make_a_pile(3)\
    \ should return [3, 5, 7].", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n - 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n   \
    \     even=make_a_pile(n-2)\n        odd=odd+[odd[n-1]]\n        even=even+[even[n-1]]\n\
    \        return odd+even\nend\n</cell>\n<code language=julia-1.0>", "    if n==1\
    \ \n        return [1]\n    else if n%2==0 \n        return make_a_pile(n-1)+make_a_pile(n-2)\n\
    \    else \n        return make_a_pile(n-1)+make_a_pile(n-2)+make_a_pile(n-3)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1), n%2 ==\
    \ 0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a positive integer n and returns the number of ways to arrange n stones\
    \ in a pile of n levels. \nFor example, given n = 4, there are 4 ways to arrange\
    \ 4 stones in a pile of 4 levels:", "    if n == 0 \n        return Vector{Int64}()\n\
    \    \n    pile = make_a_pile(n / 2)\n    pile = pile + [n mod 2 ? 1 : 0]\n  \
    \  \n    return pile\nend\n</cell>\n<code language=julia-1.5>", "    if n==1 \n\
    \        return [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        return odd+even\nend\n</cell>\n<code language=julia-1.5>", "    if n==0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n div 2) + [n mod\
    \ 2] \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3)\
    \ == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile.",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n-1)\n \
    \       push!(make_a_pile(n-2),n%2==0?n+1:n+2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    make_a_pile(4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to make n piles.", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n\
    \ / 2), n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes as input a positive integer n and returns the number of\
    \ ways to arrange n stones in a pile of n levels. \nFor example, given n = 4,\
    \ there are four ways to arrange 4 stones in a pile:", "    if n==1 \n       \
    \ return [1]\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        odd=odd[end-1:end]\n        even=even[end-1:end]\n\
    \        odd=odd+even\n        return odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\n\
    \        push!(make_a_pile(n div 2), n mod 2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else if n%2==0 \n        return make_a_pile(n-1)+make_a_pile(n-2)\n\
    \    else \n        return make_a_pile(n-1)+make_a_pile(n-2)+make_a_pile(n-3)\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?1:0)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n div 2) + [n mod 2] \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the stones in a pile. For example, given n = 4,\
    \ there are 4 ways to arrange the stones in a pile:", "    if n % 2 == 0 \n  \
    \      odds = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n       \
    \ odds[end] = odds[end] + evens[end]\n        evens[end] = evens[end] + odds[end]\n\
    \        return odds\n    else\n        evens = make_a_pile(n / 2)\n        odds\
    \ = make_a_pile(n / 2)\n        evens[end] = evens[end] + odds[end]\n        odds[end]\
    \ = odds[end] + evens[end]\n        return evens\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n@assert make_a_pile(4)\
    \ == [3, 5, 7, 11]\n@assert make_a_pile(5) == [3, 5, 7, 11, 13]\n@assert make_a_pile(6)\
    \ == [3, 5, 7, 11, 13, 17]\n@assert make_a_pile(7) == [3, 5, 7, 11, 13, 17, 21]\n\
    @assert make_a_pile(8) == [3, 5, 7, 11, 13, 17, 21, 25]\n@assert make_a_pile(9)\
    \ == [3, 5, 7, 11, 13, 17, 21, 25, 31]\n@assert make_a_pile(10) == [3, 5, 7, 11,\
    \ 13, 17, 21, 25, 31, 37]\n@assert make_a_pile(11) == [3, 5, 7, 11, 13, 17, 21,\
    \ 25, 31, 37, 41]\n@assert make_a_pile(12) == [3, 5, 7, 11, 13, 17, 21, 25, 31,\
    \ 37, 41, 45]\n@assert make_a_pile(13) == [3, 5, 7, 11, 13, 17, 21, 25, 31, 37,\
    \ 41, 45, 49]\n@assert make_a_pile(14) == [3, 5, 7, 11, 13, 17, 21, 25, 31, 37,\
    \ 41, 45, 49, 53]\n@assert make_a_pile(15) == [3, 5, 7, 11, 13, 17, 21, 25, 31,\
    \ 37, 41, 45, 49, 53, 57]\n@assert make_a_pile(16) == [3, 5, 7, 11, 13, 17, 21,\
    \ 25, 31, 37, 41, 45, 49, 53, 57, 61]\n@assert make_a_pile(17) == [3, 5, 7, 11,\
    \ 13, 17, 21, 25, 31, 37, 41, 45, 49, 53, 57, 61, 65]\n@assert make_a_pile(18)\
    \ == [3, 5, 7, 11, 13, 17, 21, 25, 31, 37, 41, 45, 49, 53, 57, 61, 65, 69]\n@assert\
    \ make_a_pile(19) == [3, 5, 7, 11, 13, 17, 21, 25, 31, 37, 41, 45, 49, 53, 57,\
    \ 61, 65, 69, 73]\n@assert make_a_pile(20) == [3, 5, 7, 11, 13, 17, 21, 25, 31,\
    \ 37, 41, 45, 49, 53, 57, ", "    if n % 2 == 0 \n        make_a_pile(n/2)\n \
    \   else\n        make_a_pile(n/2) + [(n+1)/2]\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n\
    \        odd=odd+even\n        return odd\nend", "    if n == 1 \n        return\
    \ [1]\n    \n    pile = make_a_pile(n / 2)\n    \n    if n % 2 == 1\n        pile\
    \ = pile + [n / 2]\n    end\n    \n    return pile\nend", "    if n==0 \n    \
    \    Vector{Int64}() \n    else \n        make_a_pile(ceil(n/2))\n        push!(make_a_pile(n%2),n%2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a positive\
    \ integer n and returns the number of levels of stones needed to make n piles.",
  "    if n==0 \n        Vector{Int64}()\n    else\n        make_a_pile(n-1)\n   \
    \     push!(make_a_pile(n-1), n%2==0 ? n : n+1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert make_a_pile(3) == [3, 5, 7]\n@assert make_a_pile(4)\
    \ == [4, 6, 8, 10]\n@assert make_a_pile(5) == [5, 7, 9, 11]\n@assert make_a_pile(6)\
    \ == [6, 8, 10, 12]\n@assert make_a_pile(7) == [7, 9, 11, 13]\n@assert make_a_pile(8)\
    \ == [8, 10, 12, 14]\n@assert make_a_pile(9) == [9, 11, 13, 15]\n@assert make_a_pile(10)\
    \ == [10, 12, 14, 16]\n@assert make_a_pile(11) == [11, 13, 15, 17]\n@assert make_a_pile(12)\
    \ == [12, 14, 16, 18]\n@assert make_a_pile(13) == [13, 15, 17, 19]\n@assert make_a_pile(14)\
    \ == [14, 16, 18, 20]\n@assert make_a_pile(15) == [15, 17, 19, 21]\n@assert make_a_pile(16)\
    \ == [16, 18, 20, 22]\n@assert make_a_pile(17) == [17, 19, 21, 23]\n@assert make_a_pile(18)\
    \ == [18, 20, 22, 24]\n@assert make_a_pile(19) == [19, 21, 23, 25]\n@assert make_a_pile(20)\
    \ == [20, 22, 24, 26]\n@assert make_a_pile(21) == [21, 23, 25, 27]\n@assert make_a_pile(22)\
    \ == [22, 24, 26, 28]\n@assert make_a_pile(23) == [23, 25, 27, 29]\n@assert make_a_pile(24)\
    \ == [24, 26, 28, 30]\n@assert make_a_pile(25) == [25, 27, 29, 31]\n@assert make_a_pile(26)\
    \ == [26, 28, 30, 32]\n@assert make_a_pile(27) == [27, 29, 31, 33]\n@assert make_a_pile(28)\
    \ == [28, 30, 32, 34]\n@assert make_a_pile(29) == [29, 31, 33, 35]\n@assert make_a_pile(30)\
    \ == [30, 32, 34, 36]\n@assert make_a_pile(31) == [31, 33, 35, 37]\n@assert make_a_pile(32)\
    \ == [32, 34, 36, 38]\n@assert make_a_pile(33) == [33, ", "    if n==0 return\
    \ []\n    if n==1 return [1]\n    if n%2==0 return make_a_pile(n/2)+make_a_pile(n/2+1)\
    \ \n    else return make_a_pile(n/2)+make_a_pile(n/2+1) + make_a_pile(n/2+2)\n\
    end", "    if n == 1 \n        return [1]\n    \n    even = make_a_pile(n/2)\n\
    \    odd = make_a_pile(n/2) \n    \n    if n % 2 == 0 \n        even = even ++\
    \ odd\n        odd = [1]\n    else \n        even = even ++ [1]\n        odd =\
    \ odd ++ [1]\n    \n    return even ++ odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1)\n    end\nend",
  "    if n==1 \n        [1]\n    else\n        make_a_pile(n-1)+[n%2]\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a positive\
    \ integer n and returns the number of ways to arrange n stones in a pile.", " \
    \   if n==0 \n        return Vector{Int64}()\n    else if n==1 \n        return\
    \ Vector{Int64}(1)\n    else \n        odd=n%2\n        even=n%2==0\n        stones=make_a_pile(n-1)\n\
    \        if odd \n            stones=[stones[1],stones[1]+stones[2]]\n       \
    \ else \n            stones=[stones[1]+stones[2],stones[1]+stones[2]]\n      \
    \  return stones\nend\n</cell>\n<code language=julia-1.4>", "    if n==0 \n  \
    \      Vector{Int64}() \n    else \n        make_a_pile(n div 2) + [n mod 2] \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3) == [3,\
    \ 5, 7]\n</cell>\n<code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+even\n        return odd\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n==0 \n        return Vector{Int64}()\n\
    \    else if n==1 \n        return Vector{Int64}(1)\n    else \n        odd::Int64\
    \ = if n%2 == 1 \n            n \n        else \n            n \n        even::Int64\
    \ = if n%2 == 0 \n            n \n        else \n            n \n        pile\
    \ = make_a_pile(odd) + make_a_pile(even)\n        return pile\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n % 2 == 0\
    \ ? n : n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3)\
    \ == [3, 5, 7]\n</cell>\n<text>\nExercise: Write a function that takes a positive\
    \ integer n and returns the number of levels of stones needed to make n piles.",
  "    if n==1 \n        return [1]\n    else \n        odd::Int64 = if n%2 == 1 then\
    \ n else n-1\n        even::Int64 = if n%2 == 0 then n else n-1\n        pile\
    \ = make_a_pile(odd)\n        push!(pile, even)\n        return pile\nend", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n - 1) \n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to arrange the n stones in a pile.", "    if\
    \ n==0 \n        return Vector{Int64}()\n    else \n        if n%2 == 0 \n   \
    \         pile = make_a_pile(n/2)\n            push!(pile, n%2)\n            return\
    \ pile\n        else \n            pile = make_a_pile(n/2)\n            push!(pile,\
    \ n/2)\n            return pile\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? n : n + 1) \n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer n\
    \ and returns the number of ways to make a pile of n levels of stones.", "   \
    \ if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n    \
    \    even=make_a_pile(n-2)\n        odd=odd+even\n        odd=odd[end-1:end]\n\
    \        even=even[end-1:end]\n        odd=odd+even\n        odd=odd[end-1:end]\n\
    \        return odd\n    end\nend\n</code>\n<|/ a tags=recursion,julia |>\n<|\
    \ a tags=recursion,julia |>\n<code>", "    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),n%2==0?n+1:n+1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange n items in k piles.", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n div 2), n mod 2) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmake_a_pile(5)\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a positive integer n and returns the number of stones in the first\
    \ level of a pile. For example, make_a_pile(5) should return [3, 5, 7].", "  \
    \  if n == 0 \n        return Vector{Int64}()\n    else if n % 2 == 0 \n     \
    \   return make_a_pile(n / 2) + [n / 2]\n    else \n        return make_a_pile(n\
    \ / 2) + [n / 2 + 1]\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1) \n       \
    \ push!(make_a_pile(n / 2), n % 2 == 0 ? n : n - 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to arrange the n stones in a pile.", "    if n==0 \n    \
    \    Vector{Int64}() \n    else \n        make_a_pile(n-1)\n        push!(make_a_pile(n-1),\
    \ n%2 == 0 ? n : n+1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer n and returns the number of levels of stones needed\
    \ to form a pile of n stones.", "    if n==1 \n        return [1]\n    else \n\
    \        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n        odd=odd+even\n\
    \        odd=odd[end-1]\n        even=even[end-1]\n        odd=odd+even\n    \
    \    return odd\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(4)\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a positive integer n and returns\
    \ the number of ways to make a pile of n levels of stones.", "    if n == 0 \n\
    \        Vector{Int64}()\n    else\n        make_a_pile(n - 1) ++ [n % 2 == 0\
    \ ? n : n + 2]\n    end\nend\n</cell>\n<code language=julia-1.5>\nmake_a_pile(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer n\
    \ and returns the number of levels of stones needed to make a pile of n stones.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        make_a_pile(n - 1)\
    \ \n        push!(make_a_pile(n / 2), n % 2 == 0 ? 1 : 2) \n    end\nend\n</cell>\n\
    <text>\nExercise\nWrite a function that takes an integer n and returns the number\
    \ of levels of stones needed to make a pile. For example, make_a_pile(3) should\
    \ return [3, 5, 7].", "    if n==1 \n        return [1]\n    else \n        odd=make_a_pile(n-1)\n\
    \        even=make_a_pile(n-2)\n        odd=odd+[odd[n-1]]\n        even=even+[even[n-2]]\n\
    \        return odd+even\nend", "    if n==1 \n        return [1]\n    else \n\
    \        odd = n%2\n        even = n/2\n        pile = make_a_pile(odd)+make_a_pile(even)\n\
    \        return pile\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        make_a_pile(n / 2) + [n mod 2]\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        make_a_pile(n - 1) \n        push!(make_a_pile(n / 2),\
    \ n % 2 == 0 ? n : n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    make_a_pile(4)\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n       \
    \ return [1]\n    else \n        odd = n % 2 == 1\n        even = n % 2 == 0\n\
    \        if odd \n            n = n / 2\n            pile = make_a_pile(n)\n \
    \           pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \        else \n            pile = make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pile = pile + make_a_pile(n)\n            pile = pile + make_a_pile(n)\n\
    \            pi", "    if n == 0 \n        Vector{Int64}() \n    else \n     \
    \   make_a_pile(n - 1) \n        push!(make_a_pile(n / 2), n mod 2) \n       \
    \ push!(make_a_pile(n / 2), n mod 2) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a positive integer n and returns the\
    \ number of ways to arrange the n stones in a pile.", "    if n % 2 == 1 \n  \
    \      odds = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n       \
    \ odds[end] = n\n        evens[end] = n\n        return odds + evens\n    else\n\
    \        odds = make_a_pile(n / 2)\n        evens = make_a_pile(n / 2)\n     \
    \   odds[end] = n\n        evens[end] = n\n        return odds\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n % 2 == 0 \n        odds = n / 2\n\
    \        evens = n - odds\n        return [odds, evens]\n    else\n        odds\
    \ = n / 2\n        evens = n - odds\n        return [odds, evens]\n    end\nend\n\
    </cell>\n<text>\nExercise 1\nWrite a function that takes a positive integer n\
    \ and returns the number of stones in the first level of the pile.", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=make_a_pile(n-1)\n        even=make_a_pile(n-2)\n    \
    \    odd=odd+even\n        odd=odd+odd\n        return odd\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n==1 \n        return [1]\n    else if n%2 ==\
    \ 0 \n        return make_a_pile(n-1) + [(n+1)/2]\n    else \n        return make_a_pile(n-1)\
    \ + [(n+1)/2]\nend\n</cell>\n<code language=julia-1.5>\n@assert make_a_pile(3)\
    \ == [3, 5, 7]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a positive\
    \ integer n and returns the number of ways to arrange the n stones in a pile.",
  "    if n==0 return []\n    if n==1 return [1]\n    if n%2==0 return make_a_pile(n/2)+make_a_pile(n/2+1)\
    \ \n    else return make_a_pile(n/2)+make_a_pile(n/2+1) + make_a_pile(n/2+2)\n\
    end\n</cell>\n<code language=julia-1.0>", "    if n==0 \n        Vector{Int64}()\n\
    \    else\n        make_a_pile(ceil(n/2)).*(ceil(n/2))+make_a_pile(n-ceil(n/2))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time make_a_pile(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of stones in a pile\
    \ of n stones.", "    if n==0 return []\n    if n==1 return [1]\n    if n%2 ==\
    \ 0 return make_a_pile(n/2)+make_a_pile(n/2+1) \n    else return make_a_pile(n/2)+make_a_pile(n/2+1)\
    \ + make_a_pile(n/2+2)\nend\n</cell>\n<code language=julia-1.5>", "    if n==0\
    \ \n        return Vector{Int64}()\n    else if n==1 \n        return Vector{Int64}(1)\n\
    \    else \n        odd=n%2\n        even=n-1\n        pile=make_a_pile(odd)\n\
    \        push!(pile,even)\n        return pile\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
