language: jl
name: HumanEval_76_is_simple_power
results:
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(x) && is_power_of_two(n)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(x::Int64)::Bool\
    \ = x > 0\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n</cell>\n<code\
    \ language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsa64xyr3.jl:25\nin expression starting at\
    \ /tmp/tmpsa64xyr3.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(x) && is_power_of_two(n)\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(x::Int64)::Bool\
    \ = x != 0 && x != 1 && x != -1 && x != Int64(-1)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(8)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n\
    <code language=julia-1.5>\nis_power_of_two(10)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(11)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(13)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(14)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(16)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(17)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(19)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(20)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(22)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(23)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(25)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(26)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(28)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(29)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(31)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(32)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwguvh5sv.jl:25\nin expression starting at\
    \ /tmp/tmpwguvh5sv.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if n==1 \n        true\n    else if n==0 \n        false\n\
    \    else if n==-1 \n        false\n    else if n==-2 \n        false\n    else\
    \ if n==-3 \n        false\n    else if n==-4 \n        false\n    else if n==-5\
    \ \n        false\n    else if n==-6 \n        false\n    else if n==-7 \n   \
    \     false\n    else if n==-8 \n        false\n    else if n==-9 \n        false\n\
    \    else if n==-10 \n        false\n    else if n==-11 \n        false\n    else\
    \ if n==-12 \n        false\n    else if n==-13 \n        false\n    else if n==-14\
    \ \n        false\n    else if n==-15 \n        false\n    else if n==-16 \n \
    \       false\n    else if n==-17 \n        false\n    else if n==-18 \n     \
    \   false\n    else if n==-19 \n        false\n    else if n==-20 \n        false\n\
    \    else if n==-21 \n        false\n    else if n==-22 \n        false\n    else\
    \ if n==-23 \n        false\n    else if n==-24 \n        false\n    else if n==-25\
    \ \n        false\n    else if n==-26 \n        false\n    else if n==-27 \n \
    \       false\n    else if n==-28 \n        false\n    else if n==-29 \n     \
    \   false\n    else if n==-30 \n        false\n    else if n==-31 \n        false\n\
    \    else if n==-32 \n        false\n    else if n==-33 \n        false\n    else\
    \ if n==-34 \n        false\n    else if n==-35 \n        false\n    else if n==-36\
    \ \n        false\n    else if n==-37 \n        false\n    else if n==-38 \n \
    \       false\n    else if n==-39 \n        false\n    else if n==-40 \n     \
    \   false\n    else if n==-41 \n        false\n    else if n==-42 \n        false\n\
    \    else if n==-43 \n        false\n    else if n==-44 \n        false\n    else\
    \ if n==-45 \n\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlk8lzi3.jl:21\nin expression starting at\
    \ /tmp/tmpxlk8lzi3.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(n) == true\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if a number x is a power of 2 and\nfalse in other cases.\nx is\
    \ a power of 2 if 2**int=x\nFor example:\n>>> is_power_of_two(1)\ntrue\n>>> is_power_of_two(2)\n\
    true\n>>> is_power_of_two(8)\ntrue\n>>> is_power_of_two(3)\nfalse\n>>> is_power_of_two(7)\n\
    false\n>>> is_power_of_two(15)\nfalse\n>>> is_power_of_two(17)\nfalse\n>>> is_power_of_two(23)\n\
    false\n>>> is_power_of_two(25)\nfalse\n>>> is_power_of_two(30)\nfalse\n>>> is_power_of_two(32)\n\
    false\n>>> is_power_of_two(33)\nfalse\n>>> is_power_of_two(35)\nfalse\n>>> is_power_of_two(37)\n\
    false\n>>> is_power_of_two(39)\nfalse\n>>> is_power_of_two(41)\nfalse\n>>> is_power_of_two(43)\n\
    false\n>>> is_power_of_two(45)\nfalse\n>>> is_power_of_two(47)\nfalse\n>>> is_power_of_two(49)\n\
    false\n>>> is_power_of_two(51)\nfalse\n>>> is_power_of_two(53)\nfalse\n>>> is_power_of_two(55)\n\
    false\n>>> is_power_of_two(57)\nfalse\n>>> is_power_of_two(59)\nfalse\n>>> is_power_of_two(61)\n\
    false\n>>> is_power_of_two(63)\nfalse\n>>> is_power_of_two(65)\nfalse\n>>> is_power_of_two(67)\n\
    false\n>>> is_power_of_two(69)\nfalse\n>>> is_power_of_two(71)\nfalse\n>>> is_power_of_two(73)\n\
    false\n>>> is_power_of_two(75)\nfalse\n>>> is_power_of_two(77)\nfalse\n>>> is_power_of_two(79)\n\
    false\n>>> is_power_of_two(81)\nfalse\n>>> is_power_of_two(83)\nfalse\n>>> is_power_of_two(85)\n\
    false\n>>> is_power_of_two(87)\nfalse\n>>> is_power_of_two(89)\nfalse\n>>> is_power_of_two(91)\n\
    false\n>>> is_power_of_two(93)\nfalse\n>>> is_power_of_two\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpooe6sx_k.jl:25\nin expression starting at\
    \ /tmp/tmpooe6sx_k.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if n==0 \n        true\n    else if n==1 \n        true\n\
    \    else if n==2 \n        true\n    else if n==3 \n        true\n    else if\
    \ n==4 \n        true\n    else if n==5 \n        true\n    else if n==6 \n  \
    \      true\n    else if n==7 \n        true\n    else if n==8 \n        true\n\
    \    else if n==9 \n        true\n    else if n==10 \n        true\n    else if\
    \ n==11 \n        true\n    else if n==12 \n        true\n    else if n==13 \n\
    \        true\n    else if n==14 \n        true\n    else if n==15 \n        true\n\
    \    else if n==16 \n        true\n    else if n==17 \n        true\n    else\
    \ if n==18 \n        true\n    else if n==19 \n        true\n    else if n==20\
    \ \n        true\n    else if n==21 \n        true\n    else if n==22 \n     \
    \   true\n    else if n==23 \n        true\n    else if n==24 \n        true\n\
    \    else if n==25 \n        true\n    else if n==26 \n        true\n    else\
    \ if n==27 \n        true\n    else if n==28 \n        true\n    else if n==29\
    \ \n        true\n    else if n==30 \n        true\n    else if n==31 \n     \
    \   true\n    else if n==32 \n        true\n    else if n==33 \n        true\n\
    \    else if n==34 \n        true\n    else if n==35 \n        true\n    else\
    \ if n==36 \n        true\n    else if n==37 \n        true\n    else if n==38\
    \ \n        true\n    else if n==39 \n        true\n    else if n==40 \n     \
    \   true\n    else if n==41 \n        true\n    else if n==42 \n        true\n\
    \    else if n==43 \n        true\n    else if n==44 \n        true\n    else\
    \ if n==45 \n        true\n    else if n==46 \n        true\n    else if n==47\
    \ \n        true\n    else if n==48 \n        true\n    else if n==49 \n     \
    \   true\n    else if n\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi688eop2.jl:21\nin expression starting at\
    \ /tmp/tmpi688eop2.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if n == 1 \n        return true\n    else if n % 2 ==\
    \ 0 \n        return is_simple_power(x, n / 2)\n    else \n        return is_simple_power(x,\
    \ n / 2) or is_simple_power(x, n / 4)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if a number x is a power of n and false in other\
    \ cases.\nx is a power of n if n**int=x\nFor example:\n>>> is_power(1, 4)\ntrue\n\
    >>> is_power(2, 2)\ntrue\n>>> is_power(8, 2)\ntrue\n>>> is_power(3, 2)\nfalse\n\
    >>> is_power(3, 1)\nfalse\n>>> is_power(5, 3)\nfalse\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2dv3k362.jl:21\nin expression starting at\
    \ /tmp/tmp2dv3k362.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if n==1 \n        true\n    else \n        if n==0 \n\
    \            false\n        else \n            if n%2==0 \n                is_simple_power(x,\
    \ n/2)\n            else \n                is_simple_power(x, n/2)\n         \
    \       is_simple_power(x, n-1)\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_simple_power(3, 2)\n</cell>\n<code language=julia-1.5>\nis_simple_power(3,\
    \ 1)\n</cell>\n<code language=julia-1.5>\nis_simple_power(5, 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if a number x is a power of n and\
    \ false in other cases.\nx is a power of n if n**int=x\nFor example:\n>>> is_power(1,\
    \ 4)\ntrue\n>>> is_power(2, 2)\ntrue\n>>> is_power(8, 2)\ntrue\n>>> is_power(3,\
    \ 2)\nfalse\n>>> is_power(3, 1)\nfalse\n>>> is_power(5, 3)\nfalse\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnkcegtp.jl:33\nin expression starting at\
    \ /tmp/tmpcnkcegtp.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(n) == true\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nis_power_of_two(x::Int64)::Bool\n\
    Returns true if x is a power of two.\nx must be a positive integer.\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9zak75mh.jl:25\nin expression starting at\
    \ /tmp/tmp9zak75mh.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if n==1\n        return true\n    else\n        return\
    \ (x==n**x)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@assert is_simple_power(1,\
    \ 4) == true\n@assert is_simple_power(2, 2) == true\n@assert is_simple_power(8,\
    \ 2) == true\n@assert is_simple_power(3, 2) == false\n@assert is_simple_power(3,\
    \ 1) == false\n@assert is_simple_power(5, 3) == false\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if a number x is a power of n and false\
    \ in other cases.\nx is a power of n if n**int=x\nFor example:\n>>> is_power(1,\
    \ 4)\ntrue\n>>> is_power(2, 2)\ntrue\n>>> is_power(8, 2)\ntrue\n>>> is_power(3,\
    \ 2)\nfalse\n>>> is_power(3, 1)\nfalse\n>>> is_power(5, 3)\nfalse\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"x^y\" instead of \"x**y\" for exponentiation,\
    \ and \"x...\" instead of \"**x\" for splatting.\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmk5r5rkh.jl:22\nin expression starting at /tmp/tmpmk5r5rkh.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(n) == true\n        \n    else\n  \
    \      return false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n\
    </cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gkl87ac.jl:25\nin expression starting at\
    \ /tmp/tmp0gkl87ac.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(n) == true\n        true\n    else\n\
    \        if n%x == 0\n            true\n        else\n            false\n    \
    \    end\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nis_power_\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdb99s__n.jl:29\nin expression starting at\
    \ /tmp/tmpdb99s__n.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if n==0 then return true\n    if n==1 then return x==1\n\
    \    if n==2 then return x==1\n    if n==3 then return x==1\n    if n==4 then\
    \ return x==1\n    if n==5 then return x==1\n    if n==6 then return x==1\n  \
    \  if n==7 then return x==1\n    if n==8 then return x==1\n    if n==9 then return\
    \ x==1\n    if n==10 then return x==1\n    if n==11 then return x==1\n    if n==12\
    \ then return x==1\n    if n==13 then return x==1\n    if n==14 then return x==1\n\
    \    if n==15 then return x==1\n    if n==16 then return x==1\n    if n==17 then\
    \ return x==1\n    if n==18 then return x==1\n    if n==19 then return x==1\n\
    \    if n==20 then return x==1\n    if n==21 then return x==1\n    if n==22 then\
    \ return x==1\n    if n==23 then return x==1\n    if n==24 then return x==1\n\
    \    if n==25 then return x==1\n    if n==26 then return x==1\n    if n==27 then\
    \ return x==1\n    if n==28 then return x==1\n    if n==29 then return x==1\n\
    \    if n==30 then return x==1\n    if n==31 then return x==1\n    if n==32 then\
    \ return x==1\n    if n==33 then return x==1\n    if n==34 then return x==1\n\
    \    if n==35 then return x==1\n    if n==36 then return x==1\n    if n==37 then\
    \ return x==1\n    if n==38 then return x==1\n    if n==39 then return x==1\n\
    \    if n==40 then return x==1\n    if n==41 then return x==1\n    if n==42 then\
    \ return x==1\n    if n==43 then return x==1\n    if n==44 then return x==1\n\
    \    if n==45 then return x==1\n    if n==46 then return x==1\n    if n==47 then\
    \ return x==1\n    if n==48 then return x==1\n    if n==49 then return x==1\n\
    \    if n==50 \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnpt33kfd.jl:19\nin expression starting at /tmp/tmpnpt33kfd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(n) == true\n        \n    else\n  \
    \      false\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if a number x is a power of 2 and a number y is a power of 3 and\
    \ false in other cases.\nx is a power of 2 if 2**int=x and y is a power of 3 if\
    \ 3**int=y.\nFor example:\n>>> is_power_of_two(8)\ntrue\n>>> is_power_of_two(16)\n\
    true\n>>> is_power_of_two(32)\ntrue\n>>> is_power_of_two(64)\ntrue\n>>> is_power_of_two(128)\n\
    true\n>>> is_power_of_two(256)\ntrue\n>>> is_power_of_two(512)\ntrue\n>>> is_power_of_two(1024)\n\
    true\n>>> is_power_of_two(2048)\ntrue\n>>> is_power_of_two(4096)\ntrue\n>>> is_power_of_two(8192)\n\
    true\n>>> is_power_of_two(16384)\ntrue\n>>> is_power_of_two(32768)\ntrue\n>>>\
    \ is_power_of_two(65536)\ntrue\n>>> is_power_of_two(131072)\ntrue\n>>> is_power_of_two(262144)\n\
    true\n>>> is_power_of_two(524288)\ntrue\n>>> is_power_of_two(1048576)\ntrue\n\
    >>> is_power_of_two(2097152)\ntrue\n>>> is_power_of_two(4194304)\ntrue\n>>> is_power_of_two(8388608)\n\
    true\n>>> is_power_of_two(16777216)\ntrue\n>>> is_power_of_two(33554432)\ntrue\n\
    >>> is_power_of_two(67108864)\ntrue\n>>> is_power_of_two(134217728)\ntrue\n>>>\
    \ is_power_of_two(268435456)\ntrue\n>>> is_power_of_two(536870912)\ntrue\n>>>\
    \ is_power_of_two(1073741824)\ntrue\n>>> is_power_of_two(2147483648)\ntrue\n>>>\
    \ is_power_of_two(4294967296)\ntrue\n>>> is_power_of_two(8589934592)\ntrue\n>>>\
    \ is_power_of_two(17179869184)\ntrue\n>>> is_power_of_two(34359738368)\ntrue\n\
    >>> is_power_of_two(68719476736)\ntrue\n>>> is_power_of_two(137438953472)\ntrue\n\
    >>> \nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn461bs1e.jl:25\nin expression starting at\
    \ /tmp/tmpn461bs1e.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(n) == true\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_power_of_two(8)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.3>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.3>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.3>\nis_power_of_two(35)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnc0xzgab.jl:25\nin expression starting at\
    \ /tmp/tmpnc0xzgab.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if n == 1 \n        true\n    else\n        if n % x ==\
    \ 0 \n            true\n        else\n            false\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_simple_power(1, 4) == true\n\
    @assert is_simple_power(2, 2) == true\n@assert is_simple_power(8, 2) == true\n\
    @assert is_simple_power(3, 2) == false\n@assert is_simple_power(3, 1) == false\n\
    @assert is_simple_power(5, 3) == false\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the number n is a power of 2 and\nfalse in other cases.\n\
    For example, \n>>> is_power_of_2(8)\ntrue\n>>> is_power_of_2(16)\ntrue\n>>> is_power_of_2(32)\n\
    true\n>>> is_power_of_2(64)\ntrue\n>>> is_power_of_2(128)\nfalse\n>>> is_power_of_2(256)\n\
    false\n>>> is_power_of_2(512)\nfalse\n>>> is_power_of_2(1024)\nfalse\n>>> is_power_of_2(2048)\n\
    false\n>>> is_power_of_2(4096)\nfalse\n>>> is_power_of_2(8192)\nfalse\n>>> is_power_of_2(16384)\n\
    false\n>>> is_power_of_2(32768)\nfalse\n>>> is_power_of_2(65536)\nfalse\n>>> is_power_of_2(131072)\n\
    false\n>>> is_power_of_2(262144)\nfalse\n>>> is_power_of_2(524288)\nfalse\n>>>\
    \ is_power_of_2(1048576)\nfalse\n>>> is_power_of_2(2097152)\nfalse\n>>> is_power_of_2(4194304)\n\
    false\n>>> is_power_of_2(8388608)\nfalse\n>>> is_power_of_2(16777216)\nfalse\n\
    >>> is_power_of_2(33554432)\nfalse\n>>> is_power_of_2(67108864)\nfalse\n>>> is_power_of_2(134217728)\n\
    false\n>>> is_power_of_2(268435456)\nfalse\n>>> is_power_of_2(536870912)\nfalse\n\
    >>> is_power_of_2(1073741824)\nfalse\n>>> is_power_of_2(2147483648)\nfalse\n>>>\
    \ is_power_of_2(4294967296)\nfalse\n>>> is_power_of_2(8589934592)\nfalse\n>>>\
    \ is_power_of_2(17179869184)\nfalse\n>>> is_power_of_2(34359738368)\nfalse\n>>>\
    \ is_power_of_2(68719476736)\nfalse\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfado6s9t.jl:29\nin expression starting at\
    \ /tmp/tmpfado6s9t.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(n) == true\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Your task\
    \ is to write a function that returns true if a number x is a power of n and false\
    \ in other cases.\n    x is a power of n if n**int=x\n    For example:\n    >>>\
    \ is_power_of_two(1)\n    true\n    >>> is_power_of_two(2)\n    true\n    >>>\
    \ is_power_of_two(8)\n    true\n    >>> is_power_of_two(3)\n    false\n    >>>\
    \ is_power_of_two(3)\n    false\n    >>> is_power_of_two(5)\n    false\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2duqnx5.jl:25\nin expression starting at\
    \ /tmp/tmp_2duqnx5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(n) == true\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(8)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(9)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(10)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(11)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(12)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(13)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(14)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(15)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(16)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(17)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(18)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(19)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(20)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(21)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(22)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(23)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(24)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(25)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(26)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(27)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(28)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(29)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(30)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(31)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(32)\n\
    </cell>\n<code language=julia-1.5>\nis_power_of_two(33)\n</cell>\n<code language=julia-1.5>\n\
    is_power_of_two(34)\n</cell>\n<code language=julia-1.5>\nis_power_of_two(35)\n\
    </cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjzba4knm.jl:25\nin expression starting at\
    \ /tmp/tmpjzba4knm.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(n) == true\n        true\n    else\n\
    \        if x == n\n            true\n        else\n            if x % n == 0\n\
    \                true\n            else\n                if x % n != 0\n     \
    \               false\n                else\n                    if n != 1\n \
    \                       false\n                    else\n                    \
    \    if n != 2\n                            false\n                        else\n\
    \                            if n != 4\n                                false\n\
    \                            else\n                                if n != 8\n\
    \                                    false\n                                else\n\
    \                                    if n != 16\n                            \
    \            false\n                                    else\n               \
    \                         if n != 32\n                                       \
    \     false\n                                        else\n                  \
    \                          if n != 64\n                                      \
    \          false\n                                            else\n         \
    \                                       if n != 128\n                        \
    \                            false\n                                         \
    \       else\n                                                    true\n     \
    \   end\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(x::Int64)::Bool\n\
    \    if x != 0\n        if x % 2 == 0\n            true\n        else\n      \
    \      false\n        end\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_power_of_two(x::Int64)::Bool\n    if x != 0\n      \
    \  if x % 2 == 0\n            true\n        else\n            false\n        end\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(x::Int64)::Bool\n\
    \    if x != 0\n        if x % 2 == 0\n            true\n        else\n      \
    \      false\n        end\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_power_of_two(x::Int64)::Bool\n    if x != 0\n      \
    \  if x % 2 == 0\n            true\n        else\n            false\n        end\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(x::Int64)::Bool\n\
    \    if x != 0\n        if x % 2 == 0\n            true\n        else\n      \
    \      false\n        end\n    else\n        false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_power_of_two(x::Int64)::Bool\n    if x != 0\n      \
    \  if x % 2 == 0\n            true\n        else\n            false\n        end\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_power_of_two(x::Int64)::Bool\n\
    \    if x != 0\n        if x % 2 == 0\n            true\n        else\n      \
    \      false\n        end\n    else\n        false\n    end\nend\n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmc7daasv.jl:59\nin expression starting at\
    \ /tmp/tmpmc7daasv.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if is_power_of_two(n) == true\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nis_power_of_two(x::Int64)::Bool\n\
    Check if x is a power of two.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptjr50in3.jl:25\nin expression starting at\
    \ /tmp/tmptjr50in3.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    >>> is_simple_power(1, 4)\n    true\n\
    \    >>> is_simple_power(2, 2)\n    true\n    >>> is_simple_power(8, 2)\n    true\n\
    \    >>> is_simple_power(3, 2)\n    false\n    >>> is_simple_power(3, 1)\n   \
    \ false\n    >>> is_simple_power(5, 3)\n    false\n    \"\"\"\nfunction is_simple_power(x::Int64,\
    \ n::Int64)::Bool \n    if n==1 \n        return true\n    else if n==0 \n   \
    \     return false\n    else if n==-1 \n        return false\n    else if n==-2\
    \ \n        return false\n    else if n==-3 \n        return false\n    else if\
    \ n==-4 \n        return false\n    else if n==-5 \n        return false\n   \
    \ else if n==-6 \n        return false\n    else if n==-7 \n        return false\n\
    \    else if n==-8 \n        return false\n    else if n==-9 \n        return\
    \ false\n    else if n==-10 \n        return false\n    else if n==-11 \n    \
    \    return false\n    else if n==-12 \n        return false\n    else if n==-13\
    \ \n        return false\n    else if n==-14 \n        return false\n    else\
    \ if n==-15 \n        return false\n    else if n==-16 \n        return false\n\
    \    else if n==-17 \n        return false\n    else if n==-18 \n        return\
    \ false\n    else if n==-19 \n        return false\n    else if n==-20 \n    \
    \    return false\n    else if n==-21 \n        return false\n    else if n==-22\
    \ \n        return false\n    else if n==-23 \n        return false\n    else\
    \ if n==-24 \n        return false\n    else if n==-25 \n        return false\n\
    \    else if n==-26 \n        return false\n    else if n==-27 \n        return\
    \ false\n    else if n==-28 \n        return false\n    else if n==-29 \n    \
    \    return false\n    else if n==-30 \n        return false\n    else if n==-31\
    \ \n        return false\n    else if n==-32 \n        return false\n    else\
    \ if n==-33 \n        return false\n    else if n==-34 \n        return false\n\
    \    else if n==-35 \n        return false\n    else if n==-36 \n        return\
    \ false\n    else if n==-37 \n        return false\n    else if n==-38 \n    \
    \    return false\n    else if n==-39 \n        return false\n    else if n==-40\
    \ \n        return false\n    else if n==-41 \n        return false\n    else\
    \ if n==-42 \n        return false\n    else if n==-43 \n        return false\n\
    \    else if n==-44 \n        return false\n    else if n==-45 \n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3o8efg8o.jl:21\nin expression starting at\
    \ /tmp/tmp3o8efg8o.jl:21\n"
  stdout: ''
