name: HumanEval_116_sort_array
language: jl
prompt: "\"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    number of ones in their binary representation in ascending order.\n\
  \    For similar number of ones, sort based on decimal value.\n\n    It must be\
  \ implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4])\n    [1, 2, 3, 4,\
  \ 5]\n    >>> sort_array([-2, -3, -4, -5, -6])\n    [-6, -5, -4, -3, -2]\n    >>>\
  \ sort_array([1, 0, 2, 3, 4])\n    [0, 1, 2, 3, 4]\n    \"\"\"\nfunction sort_array(arr::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate([1,\
  \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5])\n\t@test(candidate([-2, -3, -4, -5, -6]) == [-4,\
  \ -2, -6, -5, -3])\n\t@test(candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) ==\
  \ [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n\t@test(candidate([3, 6, 44, 12, 32, 5])\
  \ == [32, 3, 5, 6, 12, 44])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16,\
  \ 32])\n\t@test(candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32])\nend\n"
completions: ["    \n    arr = arr .+ 1\n    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr .== i)\n    end\n\
    \    \n    ones = ones .+ 1\n    \n    ones = ones ./ sum(ones)\n    \n    ones\
    \ = ones .* 100\n    \n    ones = ones .- 100\n    \n    ones = ones ./ sum(ones)\n\
    \    \n    ones = ones .* 100\n    \n    ones = ones .- 100\n    \n    ones =\
    \ ones ./ sum(ones)\n    \n    ones = ones .* 100\n    \n    ones = ones .- 100\n\
    \    \n    ones = ones ./ sum(ones)\n    \n    ones = ones .* 100\n    \n    ones\
    \ = ones .- 100\n    \n    ones = ones ./ sum(ones)\n    \n    ones = ones .*\
    \ 100\n    \n    ones = ones .- 100\n    \n    ones = ones ./ sum(ones)\n    \n\
    \    ones = ones .* 100\n    \n    ones = ones .- 100\n    \n    ones = ones ./\
    \ sum(ones)\n    \n    ones = ones .* 100\n    \n    ones = ones .- 100\n    \n\
    \    ones = ones ./ sum(ones)\n    \n    ones = ones .* 100\n    \n    ones =\
    \ ones .- 100\n    \n    ones = ones ./ sum(ones)\n    \n    ones = ones .* 100\n\
    \    \n    ones = ones .- 100\n    \n    ones = ones ./ sum(ones)\n    \n    ones\
    \ = ones .* 100\n    \n    ones = ones .- 100\n    \n    ones = ones ./ sum(ones)\n\
    \    \n    ones = ones .* 100\n    \n    ones = ones .- 100\n    \n    ones =\
    \ ones ./ sum(ones)\n    \n    ones = ones .* 100\n    \n    ones = ones .- 100\n\
    \    \n    ones = ones ./ sum(ones)\n    \n    ones = ones .* 100\n    \n    ones\
    \ = ones .- 100\n    \n    ones = ones ./ sum(ones)\n    \n    ones = ones .*\
    \ 100\n    \n    ones = ones .- 100\n    \n    ones = ones ./ sum(ones)\n    \n\
    \    one", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] =\
    \ 1\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n \
    \   \n    ones = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones .!= 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones .!= 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones .!= 0]\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones .!= 0]\n    \n\
    \    ones = ones[order(ones)]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[order(ones)]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n    \n\
    \    ones = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[order(ones)]\n    \n    ones = ones[one", "  \
    \  \n    ones = zeros(Int, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int, length(arr))\n    \n    ones_count = zeros(Int, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones_count[i] = sum(ones[arr .== i])\n\
    \    end\n    \n    for i in 1:length(arr)\n        sorted_arr[i] = arr[ones_count\
    \ .== i][1]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart III: Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm to find if given number exists in given\
    \ array.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .!= 0] =\
    \ 1\n    \n    ones = ones .> ones\n    \n    ones = ones .== ones\n    \n   \
    \ ones = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones = ones\
    \ .== ones\n    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n \
    \   \n    ones = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones\
    \ = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n\
    \    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones\
    \ = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n\
    \    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones\
    \ = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n\
    \    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones\
    \ = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n\
    \    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones\
    \ = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n\
    \    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones\
    \ = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n\
    \    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones\
    \ = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n\
    \    \n    ones = ones .== ones\n    \n    ones = ones .== ones\n    \n    ones\
    \ = ones .", "    \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    one", "    \n    ones =\
    \ zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted[i] = sum(ones[arr\
    \ .== i])\n    end\n    \n    return sorted\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=sorting,julia,arrays |>\nThe answer by is correct, but I thought I'd\
    \ add some explanation as to why it works.\nThe reason why it works is because\
    \ Julia's sort function sorts in-place. So, if you have an array arr = [1, 2,\
    \ 3, 4, 5] and you call sort(arr), arr will now be sorted as [1, 2, 3, 4, 5].\n\
    However, if you have an array arr = [1, 2, 3, 4, 5] and you call sort(arr) again,\
    \ arr will still be sorted as [1, 2, 3, 4, 5]. However, the sort function will\
    \ now be called on the sorted array [1, 2, 3, 4, 5] instead of the original array\
    \ [1, 2, 3, 4, 5]. Thus, if you call sort(arr) again, arr will now be sorted as\
    \ [5, 4, 3, 2, 1].\n<|/ a dscore=2 |>\n<| a tags=sorting,julia,arrays |>\nThe\
    \ answer by is correct, but I thought I'd add some explanation as to why it works.\n\
    The reason why it works is because Julia's sort function sorts in-place. So, if\
    \ you have an array arr = [1, 2, 3, 4, 5] and you call sort(arr), arr will now\
    \ be sorted as [1, 2, 3, 4, 5].\nHowever, if you have an array arr = [1, 2, 3,\
    \ 4, 5] and you call sort(arr) again, arr will still be sorted as [1, 2, 3, 4,\
    \ 5]. However, the sort function will now be called on the sorted array [1, 2,\
    \ 3, 4, 5] instead of the original array [1, 2, 3, 4, 5]. Thus, if you call sort(arr)\
    \ again, arr will now be sorted as [5, 4, 3, 2, 1].\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\nI wanted to add an additional answer that uses Julia's built-in sort function\
    \ and does not require a for loop:\n<code>\njulia> a = [1, 2, 3, 4, 5]\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    \n    for\
    \ i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones\
    \ = sort(ones)\n    \n    arr = zeros(Int64, length(arr))\n    for i in 1:length(arr)\n\
    \        arr[i] = arr[ones[i]]\n    end\n    \n    return arr\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= ones\n\
    \    \n    sorted_arr .= sort(ones)\n    \n    return sorted_arr\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=0 |>\n<code>", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    ones_sorted = sort(ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = arr[ones_sorted .== i]\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nProblem 3\nImplement a function\
    \ that counts how many times each unique number appears in an array.", "    \n\
    \    ones = zeros(Int, length(arr))\n    \n    for i in eachindex(arr)\n     \
    \   ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nPart\
    \ III: Binary Search Algorithm\nIn this Kata, you have to implement binary search\
    \ algorithm to find if an element is present in a sorted array.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted = zeros(Int64, length(arr))\n    \n\
    \    sorted[ones .== 1] = arr[ones .== 1]\n    \n    sorted[ones .!= 1] = arr[ones\
    \ .!= 1]\n    \n    sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\
    </cell>\n<text>\nPart II: Binary Search\nNow that you have implemented the binary\
    \ search algorithm, you can test it against the previous one. Remember that binary\
    \ search is really just a special case of binary search, where you only have to\
    \ search for the middle element of the array. Thus, you can use the binary search\
    \ algorithm to find the first and last elements of the array, and then use linear\
    \ search to find the middle element.", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted .== 0] =\
    \ -99\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.0>\n@test\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4,\
    \ -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1,\
    \ 2, 3, 4]\n</cell>\n<text>\nProblem 4\nImplement a function that returns the\
    \ number of ones in an integer.", "    \n    ones = zeros(Int, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int, length(arr))\n   \
    \ \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of ones in the binary\
    \ representation of an integer.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .!= 0] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    sorted_arr .= arr\n    \n    ones_idx = findall(ones .== 1)\n    \n\
    \    sorted_arr[ones_idx] .= sort(arr[ones_idx])\n    \n    sorted_arr[ones_idx]\
    \ .= ones[ones_idx]\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary Search Algorithm\nIn this Kata,\
    \ you have to implement binary search algorithm for searching in\nsorted array\
    \ of non-negative integers. Binary search algorithm is very useful for\nsearching\
    \ sorted arrays of non-negative integers because it is very efficient.", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<text>\nSolution\n\
    Let's test your function with the test cases:", "    \n    arr = sort(arr)\n \
    \   \n    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    arr = arr[ones]\n    \n\
    \    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n    \
    \    ones[i] = sum(arr[i] == 1)\n    end\n    \n    arr = arr[ones]\n    \n  \
    \  return arr\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n     \
    \   sorted[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1,2,3,4,5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6,-5,-4,-3,-2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0,1,2,3,4]\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ sorts integers according to their binary representation in descending order.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] = arr[arr\
    \ .== 1] .+ 1\n    \n    sorted_arr[ones .== 1] = sort(arr[ones .== 1])\n    \n\
    \    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5,\
    \ -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n\
    <text>\nPart II: Binary Search\nIn this Kata, you have to implement binary search\
    \ algorithm. Binary search algorithm is very useful when you have sorted array\
    \ and want to find some element in the array in O(logN) time. Binary search algorithm\
    \ is very similar to binary search algorithm in most of the programming languages.\
    \ You have to implement binary search algorithm with Julia language and test it\
    \ against the Python and Java implementations.", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[1:end]\n    \n    return arr[ones]\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nPart II: Binary Search Algorithm\n\
    In this Kata, you have to implement binary search algorithm for searching an\n\
    element in a sorted array.", "    \n    ones = zeros(Int, length(arr))\n    for\
    \ i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted\
    \ = zeros(Int, length(arr))\n    for i in 1:length(arr)\n        sorted[i] = arr[findfirst(x\
    \ -> x == ones[i], 1:length(ones))]\n    end\n    \n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart 2\nNow let's implement\
    \ the function count_ones(arr::Vector{Int64})::Int64 that returns the number of\
    \ ones in arr in ascending order.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = sum(ones[arr .== i])\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.0>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of ones in each position. For example, given\
    \ [1, 1, 0, 1], your function should return [1, 1, 2, 1].", "    \n    ones =\
    \ zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    ones = ones[sortperm(ones)]\n    \n \
    \   ones = ones[sortperm(ones)]\n    \n    return arr[ones]\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns an array of integers such that each element of the array is greater\
    \ than or equal to the previous element in the array. For example, given [1,2,3,4,5],\
    \ the function should return [2,3,4,5,6].", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    \n\
    \    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n\
    \    sorted = sort(ones)\n    \n    sorted[sorted .!= 0] .= arr[sorted .!= 0]\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III. Sort by frequency\nIn this Kata, you have to sort an array of\
    \ integers according to their frequency.\nFor similar frequencies, sort based\
    \ on their absolute value.", "    \n    sorted = sort(arr)\n    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        ones[i] = sum(arr ==\
    \ i)\n    end\n    \n    sorted = sort(ones)\n    \n    return sorted\nend", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n \
    \       sorted_arr[i] = arr[ones[i]]\n    end\n    \n    return sorted_arr\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted = zeros(Int64, length(arr))\n    sorted[ones .==\
    \ 1] = arr[ones .== 1]\n    \n    sorted[ones .!= 1] = arr[ones .!= 1]\n    \n\
    \    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that counts the number of zeros\
    \ in an array. Test it on all possible inputs. What do you observe?", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    arr = sort(arr)\n\
    \    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart III: Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm for searching elements in an array.", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n \
    \       sorted_arr[i] = maximum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<text>\nPart 2: Binary Search Algorithm\nNow that we have implemented\
    \ the sorting algorithm, let's implement the binary search algorithm.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i]==1)\n\
    \    end\n    \n    sorted = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted[i] = arr[findall(ones==i)[1]]\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Problem 4\nImplement a function that counts the number of elements in a vector\
    \ that are greater than a specified value.", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[2:end]\n    \n    ones = ones[2:end]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[2:end]\n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    ones = ones[ones > 0]\n    \n    ones = sort(ones)\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[reverse(ones)]\n    \n\
    \    ones = ones[reverse(ones)]\n    \n    return ones\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a dscore=2 |>\nHere's a solution using sortperm:\n<code>", "    \n  \
    \  ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n       \
    \ ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted[i] = arr[findfirstindex(ones,\
    \ i)]\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2,\
    \ -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the number of ones in each position. For example, for [1, 1, 0,\
    \ 1] it should return [1, 1, 2, 1]. Your function should work for any vector of\
    \ integers, not just for integers.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<text>\nPart III: Sorting\
    \ Algorithms\nIn this Kata, you have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm yourself. You have to implement a sorting algorithm yourself.\
    \ You have to implement a sorting algorithm yourself. You have to implement a\
    \ sorting algorithm your", "    \n    sorted = sort(arr)\n    \n    ones = zeros(length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr == i)\n    end\n \
    \   \n    sorted = sort(ones)\n    \n    return sorted\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_array([1, 5, 2, 3, 4])` returns\
    \ `[1, 2, 3, 4, 5]` instead of `[1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.2 and it works. I guess you used a different version?\n<|/ c\
    \ |>\n<| c |>\nYes, I used 0.6.2. I'll try it on 0.6.3\n<|/ c |>\n<| c |>\nI tested\
    \ it on 0.6.3 and it works. I guess you used a different version?\n<|/ c |>\n\
    <| c |>\nYes, I used 0.6.3. I'll try it on 0.6.4\n<|/ c |>\n<| a dscore=2 |>\n\
    I wrote a package called SortArrays.jl that does this for you. Here's an example:\n\
    <code>\njulia> using SortArrays", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .==\
    \ 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i =\
    \ 1:length(arr)\n        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n\
    \    return sorted_arr\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", " \
    \   \n    ones = zeros(Int, length(arr))\n    for x in arr\n        ones[x] +=\
    \ 1\n    end\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for\
    \ x in arr\n        sorted_arr[x] = ones[x]\n    end\n    \n    sorted_arr\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the number of 1's\
    \ in each position in the vector. For example, given [1, 1, 0, 1], your function\
    \ should return [2, 2, 0, 0].", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones(length(ones),\
    \ 1) .!= 1]\n    \n    ones = ones[ones(length(ones), 1) .!= 0]\n    \n    ones\
    \ = ones[ones(length(ones), 1) .!= 1]\n    \n    ones = ones[ones(length(ones),\
    \ 1) .!= 0]\n    \n    ones = ones[ones(length(ones), 1) .!= 1]\n    \n    ones\
    \ = ones[ones(length(ones), 1) .!= 0]\n    \n    ones = ones[ones(length(ones),\
    \ 1) .!= 1]\n    \n    ones = ones[ones(length(ones), 1) .!= 0]\n    \n    ones\
    \ = ones[ones(length(ones), 1) .!= 1]\n    \n    ones = ones[ones(length(ones),\
    \ 1) .!= 0]\n    \n    ones = ones[ones(length(ones), 1) .!= 1]\n    \n    ones\
    \ = ones[ones(length(ones), 1) .!= 0]\n    \n    ones = ones[ones(length(ones),\
    \ 1) .!= 1]\n    \n    ones = ones[ones(length(ones), 1) .!= 0]\n    \n    ones\
    \ = ones[ones(length(ones), 1) .!= 1]\n    \n    ones = ones[ones(length(ones),\
    \ 1) .!= 0]\n    \n    ones = ones[ones(length(ones), 1) .!= 1]\n    \n    ones\
    \ = ones[ones(length(ones), 1) .!= 0]\n    \n    ones = ones[ones(length(ones),\
    \ 1) .!= 1]\n    \n    ones = ones[ones(length(ones), 1) .!= 0]\n    \n    ones\
    \ = ones[ones(length(ones), 1) .!= 1]\n    \n    ones = ones[ones(length(ones),\
    \ 1) .!= 0]\n    \n    ones = ones[ones(length(ones), 1) .!= 1]\n    \n    ones\
    \ = ones[ones(length(ones), 1) .!= 0]\n    \n    ones = ones[ones(length(ones),\
    \ 1) .!= 1]\n    \n    ones = ones[ones(length(ones), 1) .!= 0]\n    \n    ones\
    \ = ones[ones(length(ones), 1) .!= 1]\n    \n    ones = ones[ones(length(ones),\
    \ 1) .!= 0]\n    \n    ones = ones[ones(length(ones), 1) .!= 1]", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    sorted = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        sorted[i] = arr[findfirst(ones > 0)]\n\
    \    end\n    \n    return sorted\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ seem to work if the array contains negative numbers. For example, `sort_array([1,\
    \ 5, 2, 3, 4])` returns `[5, 2, 3, 1, 4]` instead of `[1, 2, 3, 4, 5]`.\n<|/ c\
    \ |>\n<| c |>\nIt does work if you change the `ones = zeros(Int64, length(arr))`\
    \ to `ones = zeros(Int64, length(arr))` as pointed out by James McKay.\n<|/ c\
    \ |>\n<| c |>\nI didn't notice that ones = zeros(Int64, length(arr)) was missing.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    \n  \
    \  ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    ones_sorted\
    \ = sort(ones)\n    \n    decimals = zeros(Int64, length(arr))\n    decimals[ones_sorted\
    \ .== 1] .= ones_sorted[ones_sorted .== 1] .- 1\n    \n    decimals_sorted = sort(decimals)\n\
    \    \n    arr[ones_sorted .== 1] .= decimals_sorted[ones_sorted .== 1]\n    \n\
    \    return arr\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia\
    \ |>\nHere's a solution using sortperm:\n<code>", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i in eachindex(arr)\n        ones[i] = count_ones(arr[i])\n\
    \    end\n    \n    sort(ones)\n    \n    for i in eachindex(ones)\n        arr[i]\
    \ = ones[i]\n    end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2,\
    \ -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3,\
    \ 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns an array of\
    \ integers whose binary representation has length $n$, where $n$ is the length\
    \ of the input array. For example, for $n=3$, the output should be [0, 0, 1].",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Sort by frequency\nIn this Kata,\
    \ you have to sort an array of integers according to their frequency. \nFor similar\
    \ frequencies, sort based on their absolute value.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the number of 1's in that vector.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = sort(ones)\n    \n    sorted[end] = length(ones)\n    \n \
    \   return sorted\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of ones in an integer.",
  "    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n       \
    \ ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n    return\
    \ arr\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution. One thing\
    \ I noticed is that `ones` should be `zeros(Int64, length(arr))` instead of `zeros(Int64,\
    \ length(arr)+1)`.\n<|/ c |>\n<| c |>\nYes, you are right. I fixed it. Thanks.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a solution using sort!\n<code>", "    \n  \
    \  ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n      \
    \  ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = sort(ones)\n    \n\
    \    for i in 1:length(sorted)\n        arr[i] = sorted[i]\n    end\n    \n  \
    \  return arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5,\
    \ 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart 2\nThe second part of the kata requires you to implement a function\
    \ that counts the number of 1's in an array of integers. You have to do this in\
    \ Julia in a vectorized manner.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    ones = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n\
    \    \n    return sorted_arr\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    for idx in 1:length(arr)\n        ones[idx] = sum(arr[idx]\
    \ == 1)\n    end\n    \n    sorted_ones = zeros(Int64, length(arr))\n    sorted_ones[ones\
    \ == 1] = sort(arr[ones == 1])\n    sorted_ones[ones == 2] = sort(arr[ones ==\
    \ 2])\n    sorted_ones[ones == 3] = sort(arr[ones == 3])\n    sorted_ones[ones\
    \ == 4] = sort(arr[ones == 4])\n    sorted_ones[ones == 5] = sort(arr[ones ==\
    \ 5])\n    sorted_ones[ones == 6] = sort(arr[ones == 6])\n    \n    return sorted_ones\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Problem 7: Sort a vector of strings\nThe function sort_strings(arr::Vector{String})::Vector{String}\
    \ should sort arr according to\nalphabetical order of the strings in arr. For\
    \ example, sort_strings([\u201Ca\u201D, \u201Cb\u201D, \u201Cc\u201D, \u201Cd\u201D\
    , \u201Ce\u201D]) should return [\u201Ca\u201D, \u201Cb\u201D, \u201Cc\u201D,\
    \ \u201Cd\u201D, \u201Ce\u201D].", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n     \
    \   sorted[arr .== i] = ones[arr .== i]\n    end\n    \n    return sorted\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of ones in an array. For example, for\
    \ [1, 1, 0, 1] it should return 3.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of ones in an array.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[sorted[i]]\n   \
    \ end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nProblem 4\nImplement a function that counts the\
    \ number of elements in a vector that are greater than a given value.", "    \n\
    \    ones = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n    \
    \    ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n    \n\
    \    arr = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n     \
    \   arr[i] = arr[ones[i]]\n    end\n    \n    return arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the number of 1's in that vector.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n  \
    \      sorted_arr[i] = maximum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI wrote a solution that is\
    \ similar to other answers, but I believe it can be improved a little bit.\n<code>",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] = sort(ones[arr\
    \ .== 1])\n    \n    sorted_arr[arr .!= 1] .= sort(arr[arr .!= 1])\n    \n   \
    \ return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers where the integers are the sum of the integers in the input vector\
    \ except the integers themselves.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted[i] = arr[findall(ones == i)[1]]\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part III. Binary Search\nImplement binary search function which searches for an\
    \ element in an array\nand returns its index if it is found, or -1 otherwise.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted = zeros(Int64, length(arr))\n    sorted[ones .== 1] .= arr[ones .== 1]\n\
    \    sorted[ones .!= 1] .= arr[ones .!= 1]\n    \n    sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the number of ones in each position\
    \ in the vector. For example, for [1, 1, 0, 1] it should return [1, 1, 2, 1].",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted[i] = arr[findall(ones == 1)][i]\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Problem 7\nImplement a function that counts the number of 1's in a binary representation\
    \ of an integer.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .==\
    \ 1] = 1\n    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n  \
    \  ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= 0]\n  \
    \  \n    ones = ones[2:end]\n    \n    ones = ones[ones .!= ", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .!= 0] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = sum(ones[arr .== i])\n\
    \    end\n    \n    return sorted_arr\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_array([1,5,2,3,4])` returns `[1,2,3,4,5]`\
    \ instead of `[1,2,3,4,5]`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and\
    \ it works. What version are you using?\n<|/ c |>\n<| c |>\nI tested it on Julia\
    \ 0.6.2\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.2\n<|/ c |>\n<| a dscore=2 |>\nI came up with a solution that\
    \ is quite similar to what was suggested by but uses Julia's built-in sort function\
    \ instead of writing a custom sorting function. \n<code>", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = zeros(Int64, length(arr))\n\
    \    sorted[ones .== 1] .= 1\n    sorted[ones .== 0] .= 2\n    \n    sorted[sorted\
    \ .== 2] = sort(arr[sorted .== 2])\n    sorted[sorted .== 1] = sort(arr[sorted\
    \ .== 1])\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nProblem 7: Sort a vector in descending order\n\
    Implement a function that sorts a vector in descending order. \nThe function should\
    \ return a new vector with the sorted elements. \nThe function should take one\
    \ argument, an array of integers. \nThe function should return a new vector with\
    \ the sorted elements. \nThe function should return a new vector with the sorted\
    \ elements. \nThe function should return a new vector with the sorted elements.\
    \ \nThe function should return a new vector with the sorted elements. \nThe function\
    \ should return a new vector with the sorted elements. \nThe function should return\
    \ a new vector with the sorted elements. \nThe function should return a new vector\
    \ with the sorted elements. \nThe function should return a new vector with the\
    \ sorted elements. \nThe function should return a new vector with the sorted elements.\
    \ \nThe function should return a new vector with the sorted elements. \nThe function\
    \ should return a new vector with the sorted elements. \nThe function should return\
    \ a new vector with the sorted elements. \nThe function should return a new vector\
    \ with the sorted elements. \nThe function should return a new vector with the\
    \ sorted elements. \nThe function should return a new vector with the sorted elements.\
    \ \nThe function should return a new vector with the sorted elements. \nThe function\
    \ should return a new vector with the sorted elements. \nThe function should return\
    \ a new vector with the sorted elements. \nThe function should return a new vector\
    \ with the sorted elements. \nThe function should return a new vector with the\
    \ sorted elements. \nThe function should return a new vector with the sorted elements.\
    \ \nThe function should return a new vector with the sorted elements. \nThe function\
    \ should return a new vector with the sorted elements. \nThe function should return\
    \ a new vector with the sorted elements. \nThe function should return a new vector\
    \ with the sorted elements. \nThe function should return a new vector with the\
    \ sorted elements. \nThe function should return a new vector with the sorted elements.\
    \ \nThe function should return a new vector with the sorted elements. \nThe function\
    \ should ", "    \n    ones = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted[i] = arr[findfirst(ones\
    \ > 0, ones)]\n    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nProblem 7: Binary Search Algorithm (Optional)\n\
    Implement binary search algorithm to find if an element exists in an array. \n\
    If it exists, return the index. Otherwise, return -1.", "    \n    arr = arr .>\
    \ 0 # convert to boolean\n    \n    ones = arr .== 1\n    \n    ones_count = sum(ones)\n\
    \    \n    if ones_count == 0\n        return arr\n    end\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = ones_count - 1\n    \n    ones_count = ones_count * 2\n    \n    ones_count\
    \ = one", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i]\
    \ = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n\
    <text>\nSolution\nLet's test our solution:", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in eachindex(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sort(ones)\n    \n    return arr\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| c |>\nThanks for your answer! I thought about this solution, but I thought\
    \ there might be a more elegant solution. Your solution is very elegant, but I\
    \ think it would be more efficient to sort the array in place. Do you know if\
    \ there is a way to do that?\n<|/ c |>\n<| c |>\nI believe that sorting in place\
    \ is possible in Julia by using the `sort!` function, but I haven't tested it\
    \ myself. I believe that `sort!` will create a new array and copy the sorted elements\
    \ to the new array. Since you only want to sort the array in-place, I don't think\
    \ you can avoid copying the elements. However, I believe that `sort!` will also\
    \ create a new array and copy the sorted elements to the new array, so it might\
    \ not be more efficient.\n<|/ c |>\n<| c |>\nI believe that `sort!` will create\
    \ a new array and copy the sorted elements to the new array. Since you only want\
    \ to sort the array in-place, I don't think you can avoid copying the elements.\
    \ However, I believe that `sort!` will also create a new array and copy the sorted\
    \ elements to the new array, so it might not be more efficient.\n<|/ c |>\n<|\
    \ c |>\nI believe that `sort!` will create a new array and copy the sorted elements\
    \ to the new array. Since you only want to sort the array in-place, I don't think\
    \ you can avoid copying the elements. However, I believe that `sort!` will also\
    \ create a new array and copy the sorted elements to the new array, so it might\
    \ not be more efficient.\n<|/ c |>\n<| a tags=sorting,julia |>\nHere's a solution\
    \ using Julia's built-in sort function:\n<code>", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    ones = ones[sortperm(ones)]\n    \n    ones = ones[sortperm(ones)]\n\
    \    \n    return arr[ones]\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5,\
    \ -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n\
    <text>\nPart III: Binary Search Algorithm\nIn this Kata, you have to implement\
    \ binary search algorithm for searching elements in a sorted array.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_ones[i] = sum(ones[arr .== i])\n\
    \    end\n    \n    sorted_ones = sort(sorted_ones)\n    \n    return sorted_ones\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Problem 7: Find all unique permutations of an array\nGiven an array, find all\
    \ unique permutations of that array.", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    for (i,val) in enumerate(arr)\n\
    \        ones[i] = val == 1\n    end\n    \n    ones = ones[sort(ones, rev=true)]\n\
    \    \n    ones = ones[sort(ones, rev=true)]\n    \n    ones = ones[sort(ones,\
    \ rev=true)]\n    \n    ones = ones[sort(ones, rev=true)]\n    \n    return ones\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1,2,3,4,5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,-5,-4,-3,-2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) == [0,1,2,3,4]\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that sorts integers in ascending order according to their binary\
    \ representation in descending order.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   sorted_arr[arr .== 1] = arr[arr .== 1] .+ 1\n    \n    sorted_arr[ones .==\
    \ 1] = sort(ones[ones .== 1])\n    \n    return sorted_arr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 0, 2, 3, 4])\n</cell>\n<text>\nPart III: Binary Search Algorithm", "    \n \
    \   ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] = arr[arr .== 1] .+ 1\n\
    \    \n    sorted_arr[ones .== 1] = sort(arr[ones .== 1])\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the number of ones in an array. Test\
    \ it on some examples:", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for\
    \ i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .== i])\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of ones in an array.\
    \ For example, for [1, 1, 0, 1] it should return 3.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    arr = sort(arr)\n    \n    ones =\
    \ zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n    \n    arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) ==\
    \ [0, 1, 2, 3, 4]\n</cell>\n<text>\nProblem 3\nWrite a function that takes an\
    \ array of integers and returns the number of 1's in each position in the array.",
  "    \n    ones = zeros(Int, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted\
    \ = sort(ones)\n    \n    sorted = sorted[sorted.!=0]\n    \n    sorted = sorted[sorted.!=1]\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart 2\nImplement a function that checks if a given binary string is a\
    \ palindrome or not.", "    \n    ones = zeros(Int64, length(arr))\n    for i\
    \ = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted\
    \ = zeros(Int64, length(arr))\n    for i = 1:length(arr)\n        sorted[i] =\
    \ arr[findfirstindex(ones[i], sorted, rev=true)]\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the number\
    \ of ones in each position in the vector. For example, for [1, 1, 0, 1] it should\
    \ return [1, 1, 2, 1]. Your function should work for vectors of any length.",
  "    \n    ones = zeros(Int, length(arr))\n    ones[arr .!= 0] = 1\n    \n    sorted\
    \ = zeros(Int, length(arr))\n    sorted[arr .!= 0] = arr[arr .!= 0] .+ ones[arr\
    \ .!= 0]\n    \n    sorted[sorted .< 0] = -sorted[sorted .< 0]\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.0>\nsort_array([1, 5, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.0>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n\
    <code language=julia-1.0>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that checks if a number is prime. \nThe function should\
    \ return true or false depending on whether a number is prime or not. \nThe function\
    \ should work for any positive integer $n$. \nThe function should work for any\
    \ $n \\in \\mathbb{N}$.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .!= 0] = 1\n    \n    sorted = sort(ones)\n    \n    sorted[sorted .!= 1] .=\
    \ 0\n    \n    return arr .- sorted\nend\n</cell>\n<code language=julia-1.0>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the number of ones in each position. For example, for\
    \ [1, 1, 0, 1] it should return [1, 1, 2, 1].", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    ones_sorted = sort(ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = arr[ones_sorted .== i]\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part III: Binary Search\nIn this Kata, you have to implement binary search algorithm\
    \ for searching \nin sorted array of non-negative integers.", "    \n    ones\
    \ = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n    \n    for i in\
    \ 1:length(arr)\n        arr[i] = ones[i]\n    end\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nPart 2: Binary Search Algorithm\n\
    In this Kata, you have to implement binary search algorithm for searching in\n\
    sorted array of non-negative integers. Binary search algorithm is very similar\n\
    to linear search algorithm, but instead of comparing elements with <, > operators,\n\
    it compares elements with == operator. Binary search algorithm is also very similar\n\
    to linear search algorithm, but instead of comparing elements with <, > operators,\n\
    it compares elements with <= and >= operators.", "    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    arr = sort(arr)\n    \n    ones =\
    \ zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    ones = sort(ones)\n    \n    arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return arr\nend\n</cell>\n<text>\nPart III: Binary Search\
    \ Algorithm\nIn this Kata, you have to implement binary search algorithm for searching\
    \ elements in an array. \nThe algorithm should return index of the element if\
    \ it is in the array, or -1 otherwise.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted_arr[i] = arr[findfirst(x -> x == ones[i], 1:length(ones))]\n \
    \   end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2,\
    \ -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3,\
    \ 4])\n</cell>\n<text>\nPart III: Binary Search Algorithm\nIn this Kata, you have\
    \ to implement binary search algorithm for searching element in sorted array.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones_sorted .==\
    \ i]\n    end\n    \n    return sorted_arr\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=sorting,julia,arrays |>\nThe answer by is good, but I thought I'd add\
    \ an alternative that uses Julia's built-in sort function.  It doesn't require\
    \ any additional packages.\n<code>", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    ones = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n\
    \    \n    return sorted_arr\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    <code>", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted_arr[i] = sum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</code>\n<|/ a tags=sorting,julia,arrays |>\n<| a dscore=1 |>\nI came up\
    \ with a solution which uses Julia's built-in sort function, and also uses Julia's\
    \ built-in function bits to convert the integers to their binary representation.\
    \ \n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n \
    \       sorted_arr[i] = arr[ones[i]]\n    end\n    \n    return sorted_arr\nend\n\
    </code>\n<|/ a tags=sorting,julia,arrays |>\n<| a dscore=1 |>\nI came up with\
    \ this solution:\n<code>", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for\
    \ i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n    end\n    \n   \
    \ return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart II: Binary Search\nThe binary search algorithm is very useful in\
    \ many applications. It is also the most common algorithm for searching in a sorted\
    \ array. Let's implement it for our Kata.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   sorted_arr[arr .== 1] = sort(ones[arr .== 1])\n    \n    sorted_arr[arr .!=\
    \ 1] = (sort(ones[arr .!= 1]) .+ 1) ./ 2\n    \n    return sorted_arr\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsort_array([1,\
    \ 0, 2, 3, 4])\n</cell>\n<text>\nPart 2\nNow let's implement a function that can\
    \ count the number of ones in a binary representation of a number.", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    sorted = zeros(Int64, length(arr))\n    \n    for\
    \ i in 1:length(arr)\n        sorted[i] = arr[findfirstindex(ones, i)]\n    end\n\
    \    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) ==\
    \ [-6, -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n\
    </cell>\n<text>\nPart III. Finding the first index of an element in a sorted array\n\
    In this Kata, you have to find the first index of an element in a sorted array.\n\
    For similar elements, sort based on decimal value.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    arr = arr .> 0 # convert negative numbers to positive ones\n\
    \    arr = arr .+ 1 # convert positive numbers to negative ones\n    arr = arr\
    \ .- 1 # convert negative numbers to positive ones\n    arr = arr ./ 2 # convert\
    \ negative numbers to positive ones\n    arr = arr .* 2 # convert positive numbers\
    \ to negative ones\n    arr = arr .+ 1 # convert negative numbers to positive\
    \ ones\n    arr = arr .- 1 # convert positive numbers to negative ones\n    arr\
    \ = arr ./ 2 # convert negative numbers to positive ones\n    arr = arr .* 2 #\
    \ convert positive numbers to negative ones\n    arr = arr .+ 1 # convert negative\
    \ numbers to positive ones\n    arr = arr .- 1 # convert positive numbers to negative\
    \ ones\n    arr = arr ./ 2 # convert negative numbers to positive ones\n    arr\
    \ = arr .* 2 # convert positive numbers to negative ones\n    arr = arr .+ 1 #\
    \ convert negative numbers to positive ones\n    arr = arr .- 1 # convert positive\
    \ numbers to negative ones\n    arr = arr ./ 2 # convert negative numbers to positive\
    \ ones\n    arr = arr .* 2 # convert positive numbers to negative ones\n    arr\
    \ = arr .+ 1 # convert negative numbers to positive ones\n    arr = arr .- 1 #\
    \ convert positive numbers to negative ones\n    arr = arr ./ 2 # convert negative\
    \ numbers to positive ones\n    arr = arr .* 2 # convert positive numbers to negative\
    \ ones\n    arr = arr .+ 1 # convert negative numbers to positive ones\n    arr\
    \ = arr .- 1 # convert positive numbers to negative ones\n    arr = arr ./ 2 #\
    \ convert negative numbers to positive ones\n    arr = arr .* 2 # convert positive\
    \ numbers to negative ones\n    arr = arr .+ 1 # convert negative numbers to positive\
    \ ones\n    arr = arr .- 1 # convert positive numbers to negative ones\n    arr\
    \ = arr ./ 2 # convert negative numbers to positive ones\n    arr = arr .* 2 #\
    \ convert positive numbers to negative ones\n    arr = arr .+ 1 # convert negative\
    \ numbers to positive ones\n    arr = arr .- 1 # convert positive numbers to negative\
    \ ones\n    arr = arr ./ 2 # convert negative numbers to positive ones\n    arr\
    \ = arr .* 2 # convert positive numbers to negative ones\n    arr = arr .+ 1 #\
    \ convert negative numbers to positive ones\n    arr = arr .- 1 # convert positive\
    \ numbers to negative ones\n    arr = arr ./ ", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = maximum(ones[arr .==\
    \ i])\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart III: Binary Search Algorithm\nIn this Kata,\
    \ you have to implement binary search algorithm for searching elements in sorted\
    \ array.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = zeros(Int64, length(arr))\n\
    \    sorted[ones .== 1] = sort(ones[ones .== 1])\n    sorted[ones .!= 1] = sort(arr[ones\
    \ .!= 1])\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart 2: Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm for searching \nin sorted array. Binary\
    \ search algorithm is very similar to linear search \nalgorithm, but instead of\
    \ searching for a specific value, it searches for a \nspecific range of values.\
    \ In binary search, you have to find whether a \nspecific value is in the array\
    \ or not, and if yes, return the index of \nthat value. For similar values, you\
    \ have to search for a range of values. \nFor similar range of values, you have\
    \ to search for a specific value.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    arr = sort(arr)\n    \n    ones = zeros(Int64, length(arr))\n    \n\
    \    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n\
    \    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    arr = arr[ones]\n\
    \    \n    return arr\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .!= 0] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n \
    \   \n    for i = 1:length(arr)\n        sorted_arr[i] = sum(ones[arr .!= i])\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of ones in an array. For example, given [1, 1, 0, 1], your function should\
    \ return 3.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1]\
    \ = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr\
    \ .= arr\n    \n    sorted_arr .= ones\n    \n    sorted_arr .= sort(sorted_arr)\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nProblem 9\nImplement the function count_ones(arr::Vector{Int64})::Int64\
    \ that returns the number of ones in an array.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted = sort(ones)\n    \n\
    \    sorted[sorted .== 0] = -99\n    \n    return sorted\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart III. Sort a vector of\
    \ integers\nIn this Kata, you have to sort an array of integers according to their\
    \ absolute value.\nFor similar values, sort based on their sign.", "    \n   \
    \ sorted = sort(arr)\n    \n    ones = zeros(length(arr))\n    \n    for i in\
    \ 1:length(arr)\n        ones[i] = sum(arr == i)\n    end\n    \n    sorted[ones\
    \ == 0] = sort(arr[ones == 0])\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nProblem 3\nImplement a function that checks if\
    \ a given string is a palindrome or not.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    sorted_ones = sort(ones)\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    sorted_arr[arr .== 1] = sorted_ones\n    \n\
    \    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the number of ones in each position in the array.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int, length(arr))\n\
    \    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n   \
    \ \n    sorted = zeros(Int, length(arr))\n    for i in 1:length(arr)\n       \
    \ sorted[i] = arr[findfirst(x -> x == ones[i], 1:length(ones))]\n    end\n   \
    \ \n    return sorted\nend\n</cell>\n<text>\nSolution\nClick below for the solution.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .!= 0] = 1\n    \n   \
    \ sorted = sort(ones)\n    \n    sorted[sorted .!= 0] .= arr .- sorted[sorted\
    \ .!= 0]\n    \n    return sorted\nend", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted_arr[i] = arr[findall(ones == i)[1]]\n    end\n    \n    return\
    \ sorted_arr\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\nHere's a solution using\
    \ Julia's built-in sort! function:\n<code>", "    \n    ones = zeros(Int, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = zeros(Int, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted[i] = arr[findfirst(ones > arr[i])]\n    end\n    \n    return\
    \ sorted\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1, 5, 2,\
    \ 3, 4]) == [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart II: Binary search algorithm\nNow let's implement binary search algorithm\
    \ in Julia. Binary search algorithm is very similar to linear search algorithm,\
    \ but instead of comparing elements with <, > operators, it compares them with\
    \ == operator. Binary search algorithm is also called \"binary search\" because\
    \ it searches for an element in the sorted array by comparing elements with ==\
    \ operator. Binary search algorithm has two main parts: divide and conquer.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    ones_sorted = sort(ones)\n\
    \    \n    ones_sorted_idx = zeros(Int64, length(ones_sorted))\n    ones_sorted_idx[ones_sorted\
    \ .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n    sorted_arr[ones_sorted_idx]\
    \ = arr[ones_sorted_idx]\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.3>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of ones in an array. Test it on several examples:", "    \n    ones =\
    \ zeros(Int64, length(arr))\n    for i = 1:length(arr)\n        ones[i] = sum(bitget(arr,\
    \ i))\n    end\n    \n    sorted_ones = zeros(Int64, length(arr))\n    \n    for\
    \ i = 1:length(arr)\n        sorted_ones[i] = ones[i]\n    end\n    \n    sorted_ones\
    \ = sort(sorted_ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n    \n\
    \    for i = 1:length(arr)\n        sorted_arr[i] = sorted_ones[i]\n    end\n\
    \    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of ones in an integer.",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted = zeros(Int64, length(arr))\n    sorted[arr .== 1] = 1\n    \n    sorted[ones\
    \ .== 1] .= 2\n    \n    sorted[ones .== 2] .= 3\n    \n    sorted[ones .== 3]\
    \ .= 4\n    \n    sorted[ones .== 4] .= 5\n    \n    sorted[ones .== 5] .= 6\n\
    \    \n    sorted[ones .== 6] .= 7\n    \n    sorted[ones .== 7] .= 8\n    \n\
    \    sorted[ones .== 8] .= 9\n    \n    sorted[ones .== 9] .= 10\n    \n    sorted[ones\
    \ .== 10] .= 11\n    \n    sorted[ones .== 11] .= 12\n    \n    sorted[ones .==\
    \ 12] .= 13\n    \n    sorted[ones .== 13] .= 14\n    \n    sorted[ones .== 14]\
    \ .= 15\n    \n    sorted[ones .== 15] .= 16\n    \n    sorted[ones .== 16] .=\
    \ 17\n    \n    sorted[ones .== 17] .= 18\n    \n    sorted[ones .== 18] .= 19\n\
    \    \n    sorted[ones .== 19] .= 20\n    \n    sorted[ones .== 20] .= 21\n  \
    \  \n    sorted[ones .== 21] .= 22\n    \n    sorted[ones .== 22] .= 23\n    \n\
    \    sorted[ones .== 23] .= 24\n    \n    sorted[ones .== 24] .= 25\n    \n  \
    \  sorted[ones .== 25] .= 26\n    \n    sorted[ones .== 26] .= 27\n    \n    sorted[ones\
    \ .== 27] .= 28\n    \n    sorted[ones .== 28] .= 29\n    \n    sorted[ones .==\
    \ 29] .= 30\n    \n    sorted[ones .== 30] .= 31\n    \n    sorted[ones .== 31]\
    \ .= 32\n    \n    sorted[ones .== 32] .= 33\n    \n    sorted[ones .== 33] .=\
    \ 34\n    \n    sorted[ones .== 34] .", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    \n    for\
    \ i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sorted\
    \ = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n        sorted[i]\
    \ = arr[findall(ones == i)][1]\n    end\n    \n    return sorted\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n\
    @test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1,\
    \ 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary search algorithm\n\
    Now let's implement binary search algorithm for finding the index of an element\
    \ in a sorted array.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .!= 0] = 1\n    \n    ones_sorted = sort(ones)\n\
    \    \n    sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(ones_sorted)\n\
    \        sorted_arr[ones_sorted == i] = i\n    end\n    \n    return sorted_arr\n\
    end", "    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[order(ones)]\n\
    \    \n    ones = ones[order(reverse(ones))]\n    \n    return arr[ones]\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nProblem 8\n\
    Implement the function count_ones(arr::Vector{Int64})::Int64 which counts the\
    \ number of ones in an array.", "    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n    \n    for i in\
    \ 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones =\
    \ sort(ones)\n    \n    ones = ones[2:end]\n    \n    return arr[ones]\nend\n\
    </cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) == [1, 2,\
    \ 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary\
    \ search algorithm\nNow let's implement binary search algorithm in Julia. Binary\
    \ search algorithm is very similar to linear search algorithm. \nThe only difference\
    \ is that binary search algorithm stops searching when it finds first element\
    \ that is greater than the given value.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    ones[arr .== 1] = 1\n    \n    ones_sorted = sort(ones)\n    \n    sorted_arr\
    \ = zeros(Int64, length(arr))\n    \n    for i in eachindex(arr)\n        sorted_arr[i]\
    \ = arr[i]\n    end\n    \n    for i in eachindex(ones_sorted)\n        sorted_arr[ones_sorted\
    \ .== i] = i\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart III: Binary Search\nIn this Kata, you have\
    \ to implement binary search algorithm for searching \nfor a number in a sorted\
    \ array.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    ones = sort(ones)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones[i]]\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.0>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary Search\nIn this Kata, you have\
    \ to implement binary search in Julia. Binary search is similar to linear search,\
    \ but instead of searching for a specific value, it searches for a specific position\
    \ in the array.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n \
    \       sorted_arr[i] = maximum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of ones in an array. For\
    \ example, for [1, 1, 0, 1] it should return 3.", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sort(ones)\n    \n    return arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of 1's in each position in the array.", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= arr .- ones\n\
    \    \n    sorted_arr .= sort(sorted_arr)\n    \n    return sorted_arr\nend\n\
    </cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3, 4])\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ will sort an array of non-negative integers according to their binary representation\
    \ in descending order.", "    \n    ones = zeros(Int64, length(arr))\n    \n \
    \   for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n    \n\
    \    sort(ones)\n    \n    return arr\nend\n</cell>\n<text>\nSolution\nLet's test\
    \ your function before submission.", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n \
    \       ones[i] = sum(bitget(arr, i))\n    end\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[findall(ones\
    \ == 1)][i]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nProblem 3\nWrite a function that checks if a number\
    \ is prime or not. \nThe function should take one integer as an argument and return\
    \ a boolean.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int,\
    \ length(arr))\n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n\
    \    end\n    \n    sorted = zeros(Int, length(arr))\n    for i in 1:length(arr)\n\
    \        sorted[i] = arr[findfirst(ones > arr[i])]\n    end\n    \n    return\
    \ sorted\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>",
  "    \n    ones = zeros(Int, length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr\
    \ = zeros(Int, length(arr))\n    sorted_arr[ones .== 1] = arr[ones .== 1]\n  \
    \  \n    sorted_arr .= sort(arr)\n    \n    return sorted_arr\nend", "    \n \
    \   ones = zeros(Int64, length(arr))\n    for x in arr\n        ones[x] += 1\n\
    \    end\n    \n    sorted_arr = zeros(Int64, length(arr))\n    for x in arr\n\
    \        sorted_arr[x] = ones[x]\n    end\n    \n    sorted_arr\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
    \ 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@assert\
    \ sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\nPart II: Binary\
    \ Search\nNow let's implement binary search. We'll start by implementing binary\
    \ search on a sorted array. We'll then compare our implementation to other implementations\
    \ and see which one is faster.", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = zeros(Int64, length(arr))\n    \n    for i in 1:length(arr)\n\
    \        sorted[i] = arr[findall(ones == i)[1]]\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@assert sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@assert sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part III. Finding all subsets of a set\nGiven a set $S$, find all subsets of $S$\
    \ that sum to $0$.", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64,\
    \ length(arr))\n    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones_sorted\
    \ .== ones[i]]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nPart III: Sorting by number of ones\nIn this Kata,\
    \ you have to sort an array of non-negative integers according to\nnumber of ones\
    \ in their binary representation in descending order.\nFor similar number of ones,\
    \ sort based on decimal value.", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  ones_sorted = sort(ones)\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        sorted_arr[i] = arr[ones_sorted .==\
    \ i]\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers representing the binary representation\
    \ of each integer in ascending order.", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    sorted_arr .= arr\n    \n\
    \    sorted_arr .= ones\n    \n    sorted_arr .= sort(sorted_arr)\n    \n    return\
    \ sorted_arr\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted[i] = arr[findfirst(ones == 1)][i]\n    end\n    \n    return sorted\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    3.3 Sort by number of zeros", "    \n    ones = zeros(Int64, length(arr))\n  \
    \  \n    for i = 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    sorted = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        sorted[i] = arr[findfirst(ones > arr[i])]\n    end\n    \n    return\
    \ sorted\nend\n</cell>\n<text>\nPart 2: Counting Bits\nIn this Kata, you have\
    \ to implement a function that counts the number of set bits in an integer.",
  "    \n    ones = zeros(Int, length(arr))\n    \n    for i = 1:length(arr)\n   \
    \     ones[i] = sum(arr[i] == 1)\n    end\n    \n    ones = ones[ones != 0]\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[ones != 0]\n    \n    ones\
    \ = ones[2:end]\n    \n    return arr[ones]\nend\n</code>\n<|/ a tags=sorting,julia,arrays\
    \ |>\n<| a dscore=2 |>\nI came up with a solution that is similar to what was\
    \ proposed in the other answers, but I thought I'd share it here for completeness.\n\
    <code>", "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n\
    \    \n    ones = sort(ones)\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ .!= 0]\n    \n    ones = ones[ones .!= 1]\n    \n    ones = ones[ones .!= -1]\n\
    \    \n    ones = ones[ones .!= -2]\n    \n    ones = ones[ones .!= -3]\n    \n\
    \    ones = ones[ones .!= -4]\n    \n    ones = ones[ones .!= -5]\n    \n    ones\
    \ = ones[ones .!= -6]\n    \n    ones = ones[ones .!= -7]\n    \n    ones = ones[ones\
    \ .!= -8]\n    \n    ones = ones[ones .!= -9]\n    \n    ones = ones[ones .!=\
    \ -10]\n    \n    ones = ones[ones .!= -11]\n    \n    ones = ones[ones .!= -12]\n\
    \    \n    ones = ones[ones .!= -13]\n    \n    ones = ones[ones .!= -14]\n  \
    \  \n    ones = ones[ones .!= -15]\n    \n    ones = ones[ones .!= -16]\n    \n\
    \    ones = ones[ones .!= -17]\n    \n    ones = ones[ones .!= -18]\n    \n  \
    \  ones = ones[ones .!= -19]\n    \n    ones = ones[ones .!= -20]\n    \n    ones\
    \ = ones[ones .!= -21]\n    \n    ones = ones[ones .!= -22]\n    \n    ones =\
    \ ones[ones .!= -23]\n    \n    ones = ones[ones .!= -24]\n    \n    ones = ones[ones\
    \ .!= -25]\n    \n    ones = ones[ones .!= -26]\n    \n    ones = ones[ones .!=\
    \ -27]\n    \n    ones = ones[ones .!= -28]\n    \n    ones = ones[ones .!= -29]\n\
    \    \n    ones = ones[ones .!= -30]\n    \n    ones = ones[ones .!= -31]\n  \
    \  \n    ones = ones[ones .!= -32]\n    \n    ones = ones[ones .!= -33]\n    \n\
    \    ones = ones[ones .!= -", "    \n    ones = zeros(Int64, length(arr))\n  \
    \  ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n   \
    \ \n    for i = 1:length(arr)\n        sorted_arr[i] = sum(ones[arr .== i])\n\
    \    end\n    \n    return sorted_arr\nend\n</cell>\n<text>\nSolution\nSolution\
    \ notebook", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n  \
    \  sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n \
    \       sorted_arr[i] = maximum(ones[arr .== i])\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part III. Counting and Sorting\nIn this Kata, you have to implement a function\
    \ that counts the number of occurrences of an element in a given array. \nThe\
    \ function should return the number of occurrences of x in arr if x is present\
    \ and 0 otherwise.", "    \n    ones = zeros(Int64, length(arr))\n    for x in\
    \ arr\n        ones[x] = 1\n    end\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    \n    for x in arr\n        idx = find(ones == x)\n        sorted_arr[idx]\
    \ = x\n    end\n    \n    return sorted_arr\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3,\
    \ -4, -5, -6]) == [-6, -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0,\
    \ 1, 2, 3, 4]\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns the number of 1's in each position in the array.", " \
    \   \n    ones = zeros(Int, length(arr))\n    for i = 1:length(arr)\n        ones[i]\
    \ = sum(arr[i] == 1)\n    end\n    \n    sorted_ones = zeros(Int, length(arr))\n\
    \    sorted_ones[findall(ones > 0)] = sort(arr[findall(ones > 0)])\n    \n   \
    \ sorted_zeros = zeros(Int, length(arr))\n    sorted_zeros[findall(ones == 0)]\
    \ = sort(arr[findall(ones == 0)])\n    \n    sorted_array = zeros(Int, length(arr))\n\
    \    sorted_array[findall(ones > 0)] = sorted_ones[findall(ones > 0)]\n    sorted_array[findall(ones\
    \ == 0)] = sorted_zeros[findall(ones == 0)]\n    \n    return sorted_array\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder how it\
    \ compares to other solutions posted so far.\n<|/ c |>\n<| c |>\nI like your solution\
    \ too, but I wonder how it compares to other solutions posted so far.\n<|/ c |>\n\
    <| c |>\nI like your solution too, but I wonder how it compares to other solutions\
    \ posted so far.\n<|/ c |>\n<| c |>\nI like your solution too, but I wonder how\
    \ it compares to other solutions posted so far.\n<|/ c |>\n<| c |>\nI like your\
    \ solution too, but I wonder how it compares to other solutions posted so far.\n\
    <|/ c |>\n<| a tags=sorting,julia |>\n<code>", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    ones[arr .== 1] = 1\n    \n    sorted_arr = zeros(Int64, length(arr))\n\
    \    sorted_arr[ones .== 1] = arr[ones .== 1]\n    \n    sorted_arr[ones .!= 1]\
    \ = (arr[ones .!= 1] .- 1)\n    \n    return sorted_arr\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    ones = zeros(Int64, length(arr))\n\
    \    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n\
    \    \n    ones = ones[order(ones)]\n    \n    ones = ones[order(reverse(ones))]\n\
    \    \n    return ones\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis\
    \ doesn't seem to work if there are multiple ones in the same position. For example,\
    \ `sort_array([1, 5, 2, 3, 4])` returns `[1, 1, 2, 3, 4]`.\n<|/ c |>\n<| c |>\n\
    Yes, it does. I edited my answer to fix it.\n<|/ c |>\n<| c |>\nI guess I misunderstood\
    \ your original answer. Your answer seems to work fine for me. Thanks!\n<|/ c\
    \ |>\n<| a tags=sorting,julia |>\nHere is a solution using Julia's built-in sort\
    \ function:\n<code>", "    \n    ones = zeros(Int, length(arr))\n    ones[arr\
    \ .== 1] = 1\n    \n    sorted_arr = zeros(Int, length(arr))\n    \n    sorted_arr\
    \ .= arr .- ones\n    \n    sorted_arr .= sort(sorted_arr)\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Part 2\nThe second part of the Kata is to implement a function that checks if\
    \ a given binary string is a palindrome or not.", "    \n    ones = zeros(Int64,\
    \ length(arr))\n    \n    for i in 1:length(arr)\n        ones[i] = sum(arr[i]\
    \ == 1)\n    end\n    \n    ones = ones[ones > 0]\n    \n    ones = sort(ones)\n\
    \    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones\
    \ = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n\
    \    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n   \
    \ ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones\
    \ != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n\
    \    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones =\
    \ ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n    ones = ones[ones !=\
    \ 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones > 0]\n    \n  \
    \  ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n    ones = ones[ones\
    \ > 0]\n    \n    ones = ones[ones != 0]\n    \n    ones = ones[2:end]\n    \n\
    \    ones = ones[ones > 0]\n    \n    ones = ones[ones != 0]\n    \n    one",
  "    \n    ones = zeros(Int64, length(arr))\n    ones[arr .== 1] = 1\n    \n   \
    \ sorted_arr = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n  \
    \      sorted_arr[i] = sort(ones[arr .== i])[1]\n    end\n    \n    return sorted_arr\n\
    end\n</cell>\n<code language=julia-1.5>\n@test sort_array([1, 5, 2, 3, 4]) ==\
    \ [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3,\
    \ -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that sorts an array of integers according to their\
    \ binary representation.", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    ones = zeros(Int64, length(arr))\n    \n    for i = 1:length(arr)\n\
    \        ones[i] = sum(arr[i] == 1)\n    end\n    \n    sort(ones)\n    \n   \
    \ return arr\nend\n</cell>\n<code language=julia-1.5>\nsort_array([1, 5, 2, 3,\
    \ 4])\n</cell>\n<code language=julia-1.5>\nsort_array([-2, -3, -4, -5, -6])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([1, 0, 2, 3, 4])\n</cell>\n<text>\n\
    Part III: Binary Search Algorithm", "    \n    ones = zeros(Int, length(arr))\n\
    \    for i in 1:length(arr)\n        ones[i] = sum(arr[i] == 1)\n    end\n   \
    \ \n    ones = ones[sort(ones)]\n    \n    ones = ones[sort(reverse(ones))]\n\
    \    \n    return ones\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([1,\
    \ 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n@test sort_array([-2, -3, -4, -5, -6]) == [-6,\
    \ -5, -4, -3, -2]\n@test sort_array([1, 0, 2, 3, 4]) == [0, 1, 2, 3, 4]\n</cell>\n\
    <text>\nPart III. Sort by frequency\nIn this Kata, you have to sort an array of\
    \ integers according to their frequency.\nFor similar frequencies, sort based\
    \ on their absolute value."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
