language: jl
name: HumanEval_47_median
results:
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlxl1zow.jl:16\nin expression starting at\
    \ /tmp/tmpqlxl1zow.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ 0.5 * (l[mid/2] + l[mid/2 - 1])\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the median of a list of numbers. \nThe function\
    \ should take a list of numbers as an argument, and return the median of the list.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfvhtdr7z.jl:16\nin expression starting at\
    \ /tmp/tmpfvhtdr7z.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    mid = round(Int, mid)\n    if\
    \ mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] +\
    \ l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function to compute the median of a\
    \ list of numbers. \nThe function should take a list of numbers as an argument\
    \ and return the median of the numbers. \nThe median is the number in the middle\
    \ of the list that has the highest value. \nIf the list is empty, return Inf.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5sbh6q7.jl:21\nin expression starting at\
    \ /tmp/tmpd5sbh6q7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return l[mid/2\
    \ - 1] + l[mid/2]/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for any number of arguments. \nThe function should\
    \ work for any type of numbers, not just integers. \nThe function should work\
    \ for any type of numbers, not just integers. \nThe function should work for any\
    \ type of numbers, not just integers. \nThe function should work for any type\
    \ of numbers, not just integers. \nThe function should work for any type of numbers,\
    \ not just integers. \nThe function should work for any type of numbers, not just\
    \ integers. \nThe function should work for any type of numbers, not just integers.\
    \ \nThe function should work for any type of numbers, not just integers. \nThe\
    \ function should work for any type of numbers, not just integers. \nThe function\
    \ should work for any type of numbers, not just integers. \nThe function should\
    \ work for any type of numbers, not just integers. \nThe function should work\
    \ for any type of numbers, not just integers. \nThe function should work for any\
    \ type of numbers, not just integers. \nThe function should work for any type\
    \ of numbers, not just integers. \nThe function should work for any type of numbers,\
    \ not just integers. \nThe function should work for any type of numbers, not just\
    \ integers. \nThe function should work for any type of numbers, not just integers.\
    \ \nThe function should work for any type of numbers, not just integers. \nThe\
    \ function should work for any type of numbers, not just integers. \nThe function\
    \ should work for any type of numbers, not just integers. \nThe function should\
    \ work for any type of numbers, not just integers. \nThe function should work\
    \ for any type of numbers, not just integers. \nThe function should work for any\
    \ type of numbers, not just integers. \nThe function should work for any type\
    \ of numbers, not just integers. \nThe function should work for any type of numbers,\
    \ not just integers. \nThe function should work for any type of numbers, not just\
    \ integers. \nThe function should work for any type of numbers, not just integers.\
    \ \nThe function should work for any type of numbers, not just integers. \nThe\
    \ function should work for any type of numbers, not just integers. \nThe function\
    \ should work for any type of numbers, not just integers. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzzwkbnk.jl:16\nin expression starting at\
    \ /tmp/tmpqzzwkbnk.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2==0\n        return l[mid]\n  \
    \  else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function to compute the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwjm_qml.jl:16\nin expression starting at\
    \ /tmp/tmpdwjm_qml.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvw6ja3m5.jl:15\nin expression starting at\
    \ /tmp/tmpvw6ja3m5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        return l\n\
    \    \n    mid = l / 2\n    \n    if l[i] < mid\n        return median(l[i+1..end])\n\
    \    else\n        return median(mid..l[i+1..end])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers, rounded to two decimal places.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vnzqoaq.jl:22\nin expression starting at\
    \ /tmp/tmp1vnzqoaq.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqf1z_wm.jl:16\nin expression starting at\
    \ /tmp/tmpcqf1z_wm.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    mid = length(l)\n    \n    if mid == 1\n        return l[1]\n    end\n\
    \    \n    if mid % 2 == 0\n        return (l[mid-1] + l[mid]) / 2\n    else\n\
    \        return l[mid]\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of\
    \ a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6mayfxf.jl:23\nin expression starting at\
    \ /tmp/tmpv6mayfxf.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function to compute the\
    \ mean of a list of numbers. \nThe function should take a list of numbers as an\
    \ argument and return the mean of the numbers.\nThe function should raise an error\
    \ if the list is empty.\nThe function should raise an error if the list contains\
    \ non-numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvuw70ncz.jl:16\nin expression starting at\
    \ /tmp/tmpvuw70ncz.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return NaN\n    \n    if mid == 1\n   \
    \     return l[1]\n    \n    if mid%2 == 0\n        return median(l[1..mid/2])\n\
    \    else\n        return median(l[mid/2..mid])\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3bhxu9jv.jl:1\nin expression starting at /tmp/tmp3bhxu9jv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    \n    if length(l)%2==0\n\
    \        return l[floor(length(l)/2)]\n    else\n        return (l[floor(length(l)/2)]+l[floor(length(l)/2)-1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the median of a list of numbers, rounded\
    \ to two decimal places.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq66k_ehc.jl:16\nin expression starting at\
    \ /tmp/tmpq66k_ehc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element\"))\n    end\n    half = floor(Int64, mid/2)\n    if half\
    \ == mid\n        return l[half]\n    else\n        return (l[half] + l[mid-1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm7ez740.jl:21\nin expression starting at\
    \ /tmp/tmpmm7ez740.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError())\n    end\n    \n  \
    \  if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ dims=1)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ dims=2)\n</cell>\n<text>\nMedian Absolute Deviation\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1ss8byf.jl:20\nin expression starting at\
    \ /tmp/tmpm1ss8byf.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = length(l)\n    if i <= 1\n        return l[1]\n    end\n    mid = floor(Int64,\
    \ i/2)\n    if l[mid] < l[mid+1]\n        return median(l[mid+1:end])\n    else\n\
    \        return median(l[mid+1:end-1]) + l[mid]\n    end\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis doesn't work if there are two equal numbers in the\
    \ list. Try it with `median([1, 1, 1])`.\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ there are two equal numbers in the list. Try it with `median([1, 1, 1])`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are two equal numbers in the list.\
    \ Try it with `median([1, 1, 1])`.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are two equal numbers in the list. Try it with `median([1, 1, 1])`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are two equal numbers in the list. Try it with\
    \ `median([1, 1, 1])`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdnp_62r.jl:21\nin expression starting at\
    \ /tmp/tmphdnp_62r.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2==0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the mean of a list of numbers. Write a test that calls the function\
    \ with lists of numbers from 1 to 10. Test your function with lists of numbers\
    \ from 1 to 10. Do you get the same results as in the previous exercise?\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpitn5159k.jl:16\nin expression starting at\
    \ /tmp/tmpitn5159k.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end]\n\
    \    \n    if median == 0\n        return median\n    end\n    \n    i = findfirst(x\
    \ -> x > median, l)\n    \n    if i == length(l) || i == 0\n        return median\n\
    \    end\n    \n    j = findfirst(x -> x < median, l)\n    \n    if j == length(l)\
    \ || j == 0\n        return median\n    end\n    \n    if i == j\n        return\
    \ median\n    end\n    \n    if l[i] < median\n        return median\n    end\n\
    \    \n    if l[j] > median\n        return median\n    end\n    \n    if l[i]\
    \ > median\n        return median\n    end\n    \n    if l[j] < median\n     \
    \   return median\n    end\n    \nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nMedian Absolute Deviation\nThe median absolute\
    \ deviation (MAD) is a measure of statistical dispersion, i.e. how far a data\
    \ point is from the median of the data set. MAD is defined as the median of the\
    \ absolute deviations from the median.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkp63u6_.jl:48\nin expression starting at\
    \ /tmp/tmpqkp63u6_.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the mean of a list of\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_gwcdnl.jl:11\nin expression starting at\
    \ /tmp/tmpl_gwcdnl.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the median of a list of numbers, rounded to two decimal places.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirm0hghi.jl:16\nin expression starting at\
    \ /tmp/tmpirm0hghi.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1 \n \
    \       return l[1]\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1] + 1 \n        return median(l)\n    \n    if\
    \ l[mid] == l[mid-1] - 1 \n        return median(l)\n    \n    return median(l)\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the median of a list of numbers. \nThe median\
    \ is the number in the middle of the sorted list of numbers. \nIf the length of\
    \ the list is even, the median is the mean of the two middle numbers. \nIf the\
    \ length of the list is odd, the median is the middle number of the two middle\
    \ numbers. \nThe function should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, \nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwmotpdtf.jl:27\nin expression starting at\
    \ /tmp/tmpwmotpdtf.jl:27\n"
  stdout: ''
