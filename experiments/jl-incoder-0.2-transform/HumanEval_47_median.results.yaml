language: jl
name: HumanEval_47_median
results:
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqlxl1zow.jl:16\nin expression starting at\
    \ /tmp/tmpqlxl1zow.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ 0.5 * (l[mid/2] + l[mid/2 - 1])\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the median of a list of numbers. \nThe function\
    \ should take a list of numbers as an argument, and return the median of the list.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfvhtdr7z.jl:16\nin expression starting at\
    \ /tmp/tmpfvhtdr7z.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    mid = round(Int, mid)\n    if\
    \ mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] +\
    \ l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function to compute the median of a\
    \ list of numbers. \nThe function should take a list of numbers as an argument\
    \ and return the median of the numbers. \nThe median is the number in the middle\
    \ of the list that has the highest value. \nIf the list is empty, return Inf.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5sbh6q7.jl:21\nin expression starting at\
    \ /tmp/tmpd5sbh6q7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return l[mid/2\
    \ - 1] + l[mid/2]/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for any number of arguments. \nThe function should\
    \ work for any type of numbers, not just integers. \nThe function should work\
    \ for any type of numbers, not just integers. \nThe function should work for any\
    \ type of numbers, not just integers. \nThe function should work for any type\
    \ of numbers, not just integers. \nThe function should work for any type of numbers,\
    \ not just integers. \nThe function should work for any type of numbers, not just\
    \ integers. \nThe function should work for any type of numbers, not just integers.\
    \ \nThe function should work for any type of numbers, not just integers. \nThe\
    \ function should work for any type of numbers, not just integers. \nThe function\
    \ should work for any type of numbers, not just integers. \nThe function should\
    \ work for any type of numbers, not just integers. \nThe function should work\
    \ for any type of numbers, not just integers. \nThe function should work for any\
    \ type of numbers, not just integers. \nThe function should work for any type\
    \ of numbers, not just integers. \nThe function should work for any type of numbers,\
    \ not just integers. \nThe function should work for any type of numbers, not just\
    \ integers. \nThe function should work for any type of numbers, not just integers.\
    \ \nThe function should work for any type of numbers, not just integers. \nThe\
    \ function should work for any type of numbers, not just integers. \nThe function\
    \ should work for any type of numbers, not just integers. \nThe function should\
    \ work for any type of numbers, not just integers. \nThe function should work\
    \ for any type of numbers, not just integers. \nThe function should work for any\
    \ type of numbers, not just integers. \nThe function should work for any type\
    \ of numbers, not just integers. \nThe function should work for any type of numbers,\
    \ not just integers. \nThe function should work for any type of numbers, not just\
    \ integers. \nThe function should work for any type of numbers, not just integers.\
    \ \nThe function should work for any type of numbers, not just integers. \nThe\
    \ function should work for any type of numbers, not just integers. \nThe function\
    \ should work for any type of numbers, not just integers. \nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzzwkbnk.jl:16\nin expression starting at\
    \ /tmp/tmpqzzwkbnk.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2==0\n        return l[mid]\n  \
    \  else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function to compute the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwjm_qml.jl:16\nin expression starting at\
    \ /tmp/tmpdwjm_qml.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvw6ja3m5.jl:15\nin expression starting at\
    \ /tmp/tmpvw6ja3m5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        return l\n\
    \    \n    mid = l / 2\n    \n    if l[i] < mid\n        return median(l[i+1..end])\n\
    \    else\n        return median(mid..l[i+1..end])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers, rounded to two decimal places.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1vnzqoaq.jl:22\nin expression starting at\
    \ /tmp/tmp1vnzqoaq.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqf1z_wm.jl:16\nin expression starting at\
    \ /tmp/tmpcqf1z_wm.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    mid = length(l)\n    \n    if mid == 1\n        return l[1]\n    end\n\
    \    \n    if mid % 2 == 0\n        return (l[mid-1] + l[mid]) / 2\n    else\n\
    \        return l[mid]\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of\
    \ a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6mayfxf.jl:23\nin expression starting at\
    \ /tmp/tmpv6mayfxf.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function to compute the\
    \ mean of a list of numbers. \nThe function should take a list of numbers as an\
    \ argument and return the mean of the numbers.\nThe function should raise an error\
    \ if the list is empty.\nThe function should raise an error if the list contains\
    \ non-numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvuw70ncz.jl:16\nin expression starting at\
    \ /tmp/tmpvuw70ncz.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return NaN\n    \n    if mid == 1\n   \
    \     return l[1]\n    \n    if mid%2 == 0\n        return median(l[1..mid/2])\n\
    \    else\n        return median(l[mid/2..mid])\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3bhxu9jv.jl:1\nin expression starting at /tmp/tmp3bhxu9jv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    \n    if length(l)%2==0\n\
    \        return l[floor(length(l)/2)]\n    else\n        return (l[floor(length(l)/2)]+l[floor(length(l)/2)-1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the median of a list of numbers, rounded\
    \ to two decimal places.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq66k_ehc.jl:16\nin expression starting at\
    \ /tmp/tmpq66k_ehc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element\"))\n    end\n    half = floor(Int64, mid/2)\n    if half\
    \ == mid\n        return l[half]\n    else\n        return (l[half] + l[mid-1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmm7ez740.jl:21\nin expression starting at\
    \ /tmp/tmpmm7ez740.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError())\n    end\n    \n  \
    \  if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ dims=1)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ dims=2)\n</cell>\n<text>\nMedian Absolute Deviation\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1ss8byf.jl:20\nin expression starting at\
    \ /tmp/tmpm1ss8byf.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = length(l)\n    if i <= 1\n        return l[1]\n    end\n    mid = floor(Int64,\
    \ i/2)\n    if l[mid] < l[mid+1]\n        return median(l[mid+1:end])\n    else\n\
    \        return median(l[mid+1:end-1]) + l[mid]\n    end\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| c |>\nThis doesn't work if there are two equal numbers in the\
    \ list. Try it with `median([1, 1, 1])`.\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ there are two equal numbers in the list. Try it with `median([1, 1, 1])`.\n\
    <|/ c |>\n<| c |>\nIt doesn't work if there are two equal numbers in the list.\
    \ Try it with `median([1, 1, 1])`.\n<|/ c |>\n<| c |>\nIt doesn't work if there\
    \ are two equal numbers in the list. Try it with `median([1, 1, 1])`.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if there are two equal numbers in the list. Try it with\
    \ `median([1, 1, 1])`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphdnp_62r.jl:21\nin expression starting at\
    \ /tmp/tmphdnp_62r.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2==0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the mean of a list of numbers. Write a test that calls the function\
    \ with lists of numbers from 1 to 10. Test your function with lists of numbers\
    \ from 1 to 10. Do you get the same results as in the previous exercise?\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpitn5159k.jl:16\nin expression starting at\
    \ /tmp/tmpitn5159k.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end]\n\
    \    \n    if median == 0\n        return median\n    end\n    \n    i = findfirst(x\
    \ -> x > median, l)\n    \n    if i == length(l) || i == 0\n        return median\n\
    \    end\n    \n    j = findfirst(x -> x < median, l)\n    \n    if j == length(l)\
    \ || j == 0\n        return median\n    end\n    \n    if i == j\n        return\
    \ median\n    end\n    \n    if l[i] < median\n        return median\n    end\n\
    \    \n    if l[j] > median\n        return median\n    end\n    \n    if l[i]\
    \ > median\n        return median\n    end\n    \n    if l[j] < median\n     \
    \   return median\n    end\n    \nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nMedian Absolute Deviation\nThe median absolute\
    \ deviation (MAD) is a measure of statistical dispersion, i.e. how far a data\
    \ point is from the median of the data set. MAD is defined as the median of the\
    \ absolute deviations from the median.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkp63u6_.jl:48\nin expression starting at\
    \ /tmp/tmpqkp63u6_.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the mean of a list of\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_gwcdnl.jl:11\nin expression starting at\
    \ /tmp/tmpl_gwcdnl.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the median of a list of numbers, rounded to two decimal places.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirm0hghi.jl:16\nin expression starting at\
    \ /tmp/tmpirm0hghi.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1 \n \
    \       return l[1]\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1] + 1 \n        return median(l)\n    \n    if\
    \ l[mid] == l[mid-1] - 1 \n        return median(l)\n    \n    return median(l)\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the median of a list of numbers. \nThe median\
    \ is the number in the middle of the sorted list of numbers. \nIf the length of\
    \ the list is even, the median is the mean of the two middle numbers. \nIf the\
    \ length of the list is odd, the median is the middle number of the two middle\
    \ numbers. \nThe function should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, and median([-10, 4, 6, 1000, 10, 20]) should return\
    \ 15. \nThe function median should work for any type of list. \nFor example, median([3,\
    \ 1, 2, 4, 5]) should return 3, \nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwmotpdtf.jl:27\nin expression starting at\
    \ /tmp/tmpwmotpdtf.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 1\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers, rounded to two decimal places.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9o5agbj.jl:16\nin expression starting at\
    \ /tmp/tmpb9o5agbj.jl:16\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1 \n        return l[1]\n    else \n        return\
    \ (l[mid-1] + l[mid]) / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of\
    \ a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbfp7_0qh.jl:15\nin expression starting at\
    \ /tmp/tmpbfp7_0qh.jl:15\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThis does not answer the question. He wants the median\
    \ of a list of numbers, not an array.\n<|/ c |>\n<| c |>\nThe question asks for\
    \ the median of a list of numbers, not an array. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that he wants the median of\
    \ a list of numbers. He also states that he wants the median of a list of numbers.\
    \ He also states that he wants the median of a list of numbers. He also states\
    \ that he wants the median of a list of numbers. He also states that he wants\
    \ the median of a list of numbers. He also states that \nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv8imqlec.jl:16\nin expression starting at\
    \ /tmp/tmpv8imqlec.jl:16\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median is defined as the value separating\
    \ the higher half of a sample from the lower half. For example, if the sample\
    \ is [3, 1, 2, 4, 5], the median is 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpms3s36ha.jl:11\nin expression starting at\
    \ /tmp/tmpms3s36ha.jl:11\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1] \n    else \n        return\
    \ l[mid//2]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nThe median of a set of numbers is called the \"middle-most\" number. For\
    \ example, in the set {1, 2, 3, 4}, the median is 3. If there are an even number\
    \ of elements in the set, the median is the mean of the two middle numbers. If\
    \ the set has an odd number of elements, then the median is the average of the\
    \ two middle numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzavulmn.jl:15\nin expression starting at\
    \ /tmp/tmpdzavulmn.jl:15\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_e_oeqny.jl:11\nin expression starting at\
    \ /tmp/tmp_e_oeqny.jl:11\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1] \n    \n    mid = floor(mid)\n\
    \    if mid == 1 \n        return l[1] \n    \n    mid = floor(mid)\n    if mid\
    \ == 2 \n        return l[2]\n    \n    mid = floor(mid)\n    if mid == 3 \n \
    \       return l[3]\n    \n    mid = floor(mid)\n    if mid == 4 \n        return\
    \ l[4]\n    \n    mid = floor(mid)\n    if mid == 5 \n        return l[5]\n  \
    \  \n    mid = floor(mid)\n    if mid == 6 \n        return l[6]\n    \n    mid\
    \ = floor(mid)\n    if mid == 7 \n        return l[7]\n    \n    mid = floor(mid)\n\
    \    if mid == 8 \n        return l[8]\n    \n    mid = floor(mid)\n    if mid\
    \ == 9 \n        return l[9]\n    \n    mid = floor(mid)\n    if mid == 10 \n\
    \        return l[10]\n    \n    mid = floor(mid)\n    if mid == 11 \n       \
    \ return l[11]\n    \n    mid = floor(mid)\n    if mid == 12 \n        return\
    \ l[12]\n    \n    mid = floor(mid)\n    if mid == 13 \n        return l[13]\n\
    \    \n    mid = floor(mid)\n    if mid == 14 \n        return l[14]\n    \n \
    \   mid = floor(mid)\n    if mid == 15 \n        return l[15]\n    \n    mid =\
    \ floor(mid)\n    if mid == 16 \n        return l[16]\n    \n    mid = floor(mid)\n\
    \    if mid == 17 \n        return l[17]\n    \n    mid = floor(mid)\n    if mid\
    \ == 18 \n        return l[18]\n    \n    mid = floor(mid)\n    if mid == 19 \n\
    \        return l[19]\n    \n    mid = floor(mid)\n    if mid == 20 \n       \
    \ return l[20]\n    \n    mid = floor(mid)\n    if mid == 21 \n        return\
    \ l[21]\n    \n    mid = floor(mid)\n    if mid == 22 \n        return l[22]\n\
    \    \n    mid = floor(mid)\n    if mid == 23 \n        return l[23]\n    \n \
    \   mid = floor(mid)\n    if mid == 24 \n        return l[24]\n    \n    mid =\
    \ floor(mid)\n    if mid == 25 \n        return l[25]\n    \n    mid = floor(mid)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppn8fpyj9.jl:1\nin expression starting at /tmp/tmppn8fpyj9.jl:1\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError())\n    end\n    return l[mid]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7d9swzci.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp7d9swzci.jl:20\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7d9swzci.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7d9swzci.jl:19\ntest set: Test Failed at /tmp/tmp7d9swzci.jl:21\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 20.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d9swzci.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d9swzci.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp7d9swzci.jl:23\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 5.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7d9swzci.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7d9swzci.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    2     3      5\n"
  timestamp: 1659822457
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers. Write a test that checks that\
    \ the function returns the correct value when given a list of numbers. Write a\
    \ function that returns the median of a list of strings. Write a test that checks\
    \ that the function returns the correct value when given a list of strings. Write\
    \ a function that returns the median of a list of vectors of numbers. Write a\
    \ test that checks that the function returns the correct value when given a list\
    \ of vectors of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgunhzkbj.jl:17\nin expression starting at\
    \ /tmp/tmpgunhzkbj.jl:17\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.3>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function to compute the mean\
    \ of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeog0_5wa.jl:16\nin expression starting at\
    \ /tmp/tmpeog0_5wa.jl:16\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplvtdoims.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplvtdoims.jl:1\n\
    in expression starting at /tmp/tmplvtdoims.jl:1\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1\n  \
    \      return l[1]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n \
    \   \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1] + l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\
    \ - l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1]\
    \ - l[mid]\n        return l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1] + l[mid]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1] - l[mid] -\
    \ l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1]\
    \ + l[mid] - l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\
    \ + l[mid+1] - l[mid] - l[mid+1] + l[mid]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid-1] - l[mid+1] + l[mid] - l[mid+1] + l[mid] + l[mid+1]\n    \
    \    return l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1] - l[mid] - l[mid+1]\
    \ + l[mid] - l[mid] + l[mid+1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1] - l[mid+1] + l[mid] - l[mid+1] + l[mid] - l[mid] + l[mid+1]\n     \
    \   return l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1] - l[mid] - l[mid+1]\
    \ + l[mid] - l[mid] + l[mid+1] + l[mid]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid-1] - l[mid+1] + l[mid] - l[mid+1] + l[mid] - l[mid] + l[mid+1]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpui9yqc1y.jl:1\nin expression starting at /tmp/tmpui9yqc1y.jl:1\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1 \n \
    \       return l[1]\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n\
    \    \n    i = mid - 1\n    j = mid + 1\n    \n    while i <= j \n        if l[i]\
    \ < l[j] \n            i += 1\n        else \n            j -= 1\n        end\
    \ \n    \n    if i == j \n        return l[i]\n    \n    return l[j]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmprgb6m9tj.jl:22\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprgb6m9tj.jl:1\n\
    in expression starting at /tmp/tmprgb6m9tj.jl:1\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        return l\n\
    \    else \n        return l[(i + 1) \xF7 2]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a list of numbers. Write a test that checks that your function works.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xzix1e3.jl:16\nin expression starting at\
    \ /tmp/tmp1xzix1e3.jl:16\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2-1])/2\n    end\nend\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    The median of a set of numbers is defined as the value that appears more than\
    \ n/2 times in the set. Your code returns the median of a set of numbers. To get\
    \ the median of a set of numbers, you need to sort the numbers and then return\
    \ the middle value.\n<|/ c |>\n<| c |>\nI believe that median is defined as the\
    \ value that appears more than n/2 times in the set. Your code returns the median\
    \ of a set of numbers. To get the median of a set of numbers, you need to sort\
    \ the numbers and then return the middle value.\n<|/ c |>\n<| c |>\nThe median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. Your code returns the median of a set of numbers. To get the median\
    \ of a set of numbers, you need to sort the numbers and then return the middle\
    \ value.\n<|/ c |>\n<| c |>\nThe median of a set of numbers is defined as the\
    \ value that appears more than n/2 times in the set. Your code returns the median\
    \ of a set of numbers. To get the median of a set of numbers, you need to sort\
    \ the numbers and then return the middle value.\n<|/ c |>\n<| c |>\nThe median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. Your code returns the median of a set of numbers. To get the median\
    \ of a set of numbers, you need to sort the numbers and then return the middle\
    \ value.\n<|/ c |>\n<| a tags=julia,median |>\nThe median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. Your code\
    \ returns the median of a set of numbers. To get the median of a set of numbers,\
    \ you need to sort the numbers and then return the middle value.\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9z0rzi0.jl:16\nin expression starting at\
    \ /tmp/tmpk9z0rzi0.jl:16\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<text>\nThe median of a list\
    \ of numbers is defined as the value separating the higher half of the list from\
    \ the lower half. For example, in the list [3, 1, 2, 4, 5], the median is 3.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjgvldwa7.jl:11\nin expression starting at\
    \ /tmp/tmpjgvldwa7.jl:11\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = floor(mid)\n\
    \    if mid % 2 == 0\n        return l[mid]\n    \n    return l[mid-1] + l[mid]/2\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the median of a list of numbers. \nThe median is\
    \ the number in the middle of the sorted list.\nIf the list is empty, return Inf.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqfi4klia.jl:19\nin expression starting at\
    \ /tmp/tmpqfi4klia.jl:19\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpxdv8g2je.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpxdv8g2je.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpxdv8g2je.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxdv8g2je.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxdv8g2je.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxdv8g2je.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpxdv8g2je.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpxdv8g2je.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpxdv8g2je.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpxdv8g2je.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmpxdv8g2je.jl:0\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpxdv8g2je.jl:23 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polygl"
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis is not an answer to the question. He is asking for a way to find\
    \ the median of a list of Int64s.\n<|/ c |>\n<| c |>\nThe question was \"How to\
    \ find the median of a list of Int64s?\" The answer was \"Use median() from Statistics.jl\"\
    \n<|/ c |>\n<| c |>\nThe question was \"How to find the median of a list of Int64s?\"\
    \ The answer was \"Use median() from Statistics.jl\"\n<|/ c |>\n<| a tags=julia\
    \ |>\nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of numbers is defined as the middle number of the set.\
    \ \nThe median of a set of number\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpweg2qi5x.jl:16\nin expression starting at\
    \ /tmp/tmpweg2qi5x.jl:16\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)+1)/2\n    if length(l) == 1 \n        return l\n\
    \    if mid == 1 \n        return l[mid]\n    if l[mid] < l[mid-1] \n        return\
    \ median(l[mid-1:end])\n    else \n        return median(l[mid-1:end])\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. \n\
    The function should take a list of numbers as an argument and return the median\
    \ of the numbers. \nThe median is the number in the middle of the sorted list.\
    \ \nIf the list is empty, return Inf.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplc4eepcx.jl:20\nin expression starting at\
    \ /tmp/tmplc4eepcx.jl:20\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    \n    if length(l)%2\
    \ == 1\n        return l[(length(l)+1)/2-1]\n    else\n        return l[(length(l)+1)/2]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. \n\
    The function should take a list of numbers as an argument. \nThe function should\
    \ return the median of the numbers in the list.\nThe median is the number in the\
    \ middle of the list that has the highest value.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jv3zkfp.jl:16\nin expression starting at\
    \ /tmp/tmp5jv3zkfp.jl:16\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2==0\n        return l[mid]\n    else\n     \
    \   return 0.5*(l[mid-1]+l[mid])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ft0ponn.jl:16\nin expression starting at\
    \ /tmp/tmp2ft0ponn.jl:16\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a list of numbers. Write a test that checks that your function works.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwm0ybu4b.jl:11\nin expression starting at\
    \ /tmp/tmpwm0ybu4b.jl:11\n"
  stdout: ''
  timestamp: 1659822456
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    typical\" number. For example, the median of the set {1, 2, 3} is (approximately)\
    \ 1.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmg3e35b0.jl:11\nin expression starting at\
    \ /tmp/tmpmg3e35b0.jl:11\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[end-1]\n    else\n        return\
    \ (l[end-1] + l[end])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should take a list of numbers as an argument.\
    \ \nThe function should return the median of the numbers in the list.\nThe median\
    \ is the number in the middle of the list that has the smallest absolute value.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4gyyx5j.jl:17\nin expression starting at\
    \ /tmp/tmpz4gyyx5j.jl:17\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l)%2==0\n        return l[mid]\n    else\n\
    \        return (l[mid] + l[mid-1])/2.0\n    end\nend\n</code>\n<|/ a tags=julia,median,statistics\
    \ |>\n<| c |>\nThis doesn't work if there are an even number of elements in the\
    \ list. For example, median([1,2,3]) returns 2 instead of 1.\n<|/ c |>\n<| c |>\n\
    I fixed the code so that it works with even number of elements. Thanks for pointing\
    \ out.\n<|/ c |>\n<| a dscore=4 |>\nThe median is defined as the middle value\
    \ of a sorted list. \n<code>\njulia> median([1,2,3])\n1.5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbsm_wk8k.jl:16\nin expression starting at\
    \ /tmp/tmpbsm_wk8k.jl:16\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1\n  \
    \      return l[1]\n    \n    if l[mid] == l[mid - 1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 2]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 3]\n        return l[mid]\n    \n    if l[mid] == l[mid - 4]\n  \
    \      return l[mid]\n    \n    if l[mid] == l[mid - 5]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 6]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 7]\n        return l[mid]\n    \n    if l[mid] == l[mid - 8]\n  \
    \      return l[mid]\n    \n    if l[mid] == l[mid - 9]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 10]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 11]\n        return l[mid]\n    \n    if l[mid] == l[mid - 12]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - 13]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 14]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 15]\n        return l[mid]\n    \n    if l[mid] == l[mid - 16]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - 17]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 18]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 19]\n        return l[mid]\n    \n    if l[mid] == l[mid - 20]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - 21]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 22]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 23]\n        return l[mid]\n    \n    if l[mid] == l[mid - 24]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - \nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvu136vz.jl:1\nin expression starting at /tmp/tmpkvu136vz.jl:1\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l)%2 == 0\n        return l[mid]\n  \
    \  else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fyu0egh.jl:16\nin expression starting at\
    \ /tmp/tmp5fyu0egh.jl:16\n"
  stdout: ''
  timestamp: 1659822457
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mode of a given list of numbers. \nThe mode is the number that appears most\
    \ often in the list.\nFor example, mode([3, 1, 2, 4, 5]) should return 3.\nHint:\
    \ use mode() from the Statistics package.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyx_99phy.jl:16\nin expression starting at\
    \ /tmp/tmpyx_99phy.jl:16\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1] \n    else \n        return\
    \ l[mid] \nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nThe median of a list of numbers is defined as the value separating the\
    \ higher half of the list from the lower half. For example, in the list [-10,\
    \ 4, 6, 1000, 10, 20], the median is 10.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5bcn95y_.jl:15\nin expression starting at\
    \ /tmp/tmp5bcn95y_.jl:15\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError(\"\"))\n    end\n    median = l[mid//2]\n\
    \    return median\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp21gt6bvq.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp21gt6bvq.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 5//2 of type Rational{Int64}\n  Stacktrace:\n    [1] to_index(i::Rational{Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n \
    \     @ Main /tmp/tmp21gt6bvq.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp21gt6bvq.jl:21 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp21gt6bvq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp21gt6bvq.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3//1 of type Rational{Int64}\n  Stacktrace:\n    [1] to_index(i::Rational{Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n \
    \     @ Main /tmp/tmp21gt6bvq.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp21gt6bvq.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp21gt6bvq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp21gt6bvq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 1//2 of type Rational{Int64}\n\
    \  Stacktra"
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    elseif mid == 2\n     \
    \   return 0.5 * (l[1] + l[2])\n    else\n        return 0.5 * (l[floor(Int64,\
    \ mid/2)]\n                     + l[ceil(Int64, mid/2)])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozi061z9.jl:19\nin expression starting at\
    \ /tmp/tmpozi061z9.jl:19\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpo0k31pn6.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpo0k31pn6.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpo0k31pn6.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo0k31pn6.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpo0k31pn6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo0k31pn6.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpo0k31pn6.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo0k31pn6.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpo0k31pn6.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo0k31pn6.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmpo0k31pn6.jl:0\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpo0k31pn6.jl:23 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polygl"
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = round(Int64,\
    \ mid)\n    \n    if mid%2 == 0\n        return l[mid/2]\n    \n    return median(l[mid/2:end])\
    \ + median(l[mid/2:mid-1])\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the median of\
    \ a list of numbers, rounded to a specified number of decimal places.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaw5a_xux.jl:20\nin expression starting at\
    \ /tmp/tmpaw5a_xux.jl:20\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        return l\n\
    \    else \n        return l[i-1]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should take a list of numbers as an argument\
    \ and return the median of the numbers. \nThe median is the number in the middle\
    \ of the list that has the highest number of elements. \nIf the list has an even\
    \ number of elements, then the median is the mean of the two middle numbers. \n\
    If the list has an odd number of elements, then the median is the number in the\
    \ middle of the list that has the lowest number of elements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_jbc9pvl.jl:16\nin expression starting at\
    \ /tmp/tmp_jbc9pvl.jl:16\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpg2dxwaet.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpg2dxwaet.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpg2dxwaet.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpg2dxwaet.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpg2dxwaet.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpg2dxwaet.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpg2dxwaet.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpg2dxwaet.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpg2dxwaet.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpg2dxwaet.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmpg2dxwaet.jl:0\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpg2dxwaet.jl:23 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polygl"
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</code>\n<|/ a tags=julia,median |>\n<| a dscore=2\
    \ |>\nThe median of a set of numbers is defined as the number in the middle of\
    \ the set that has the highest value.  \n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpho9h9qpp.jl:16\nin expression starting at\
    \ /tmp/tmpho9h9qpp.jl:16\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the standard deviation of a list of\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmqlmefso.jl:16\nin expression starting at\
    \ /tmp/tmpmqlmefso.jl:16\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = round(Int64(mid))\n\
    \    if mid == 1 \n        return l[1]\n    \n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid]\n    \n    mid = round(Int64(mid))\n    if mid == length(l)\n\
    \        return l[mid\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zmj4qti.jl:1\nin expression starting at /tmp/tmp4zmj4qti.jl:1\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError())\n    end\n    \n  \
    \  if mid == 1\n        return l[1]\n    end\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid+2]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+2]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid+2]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+2]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid+2]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid+2]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid+2]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == \nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprffmzvzd.jl:1\nin expression starting at /tmp/tmprffmzvzd.jl:1\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? Float64(\"NaN\") : l[floor(length(l) / 2)]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4q9ona4w.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp4q9ona4w.jl:16\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmp4q9ona4w.jl:9\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp4q9ona4w.jl:16 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp4q9ona4w.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4q9ona4w.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmp4q9ona4w.jl:9\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp4q9ona4w.jl:17 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp4q9ona4w.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp4q9ona4w.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.0 of type Float64\n \
    \ Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base ./indices.jl:30"
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if l % 2 == 0\n        return l[mid]\n\
    \    else\n        return l[mid-1] + l[mid]/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. \nThe median is the number in the middle of the\
    \ sorted list.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9le1_u9x.jl:17\nin expression starting at\
    \ /tmp/tmp9le1_u9x.jl:17\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. Write a test that passes when\
    \ the function returns the correct value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0s6kuje8.jl:16\nin expression starting at\
    \ /tmp/tmp0s6kuje8.jl:16\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[(length(l)+1)/2-1]\n    else\n \
    \       return 0.5 * (l[end] + l[end-1])\n    end\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the median of a list of numbers. Write a test\
    \ that checks that your function returns the correct value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ojq3c8x.jl:17\nin expression starting at\
    \ /tmp/tmp0ojq3c8x.jl:17\n"
  stdout: ''
  timestamp: 1659822458
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = floor(length(l)/2)\n\
    \    if length(l)%2==0\n        return l[mid]\n    else\n        return (l[mid]+l[mid-1])/2.0\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mean of a list of numbers. \nThe\
    \ function should take a list of numbers as an argument and return the mean of\
    \ the numbers. \nThe function should work for any type of numbers, not just Int64.\
    \ \nThe function should raise an error if the list contains any non-numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdr78ehoz.jl:16\nin expression starting at\
    \ /tmp/tmpdr78ehoz.jl:16\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[floor(length(l)/2)]\n    end\n \
    \   \n    mid = floor(length(l)/2)\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n  \
    \  end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n    \n\
    \    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid-1]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid+1]\n\
    \        return l\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkhlbpcb.jl:1\nin expression starting at /tmp/tmppkhlbpcb.jl:1\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers, rounded to two decimal places.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3n5hi7z.jl:11\nin expression starting at\
    \ /tmp/tmpe3n5hi7z.jl:11\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a list of numbers. \nThe function should take a list of numbers\
    \ as an argument. \nThe function should return the median of the numbers in the\
    \ list. \nThe median is the number in the middle of the list that has the highest\
    \ value.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpheihdsxe.jl:16\nin expression starting at\
    \ /tmp/tmpheihdsxe.jl:16\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function to compute the\
    \ mean of a list of numbers. If the list is empty, return 0.0.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu2b2nmjy.jl:16\nin expression starting at\
    \ /tmp/tmpu2b2nmjy.jl:16\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(length(l)/\
    \ 2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the median of a list of numbers, rounded\
    \ to a specified number of decimal places.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9l_wx0bq.jl:11\nin expression starting at\
    \ /tmp/tmp9l_wx0bq.jl:11\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2z7j_bxb.jl:16\nin expression starting at\
    \ /tmp/tmp2z7j_bxb.jl:16\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sort(l)\n    \n \
    \   mid = length(l)\n    \n    if mid % 2 == 0\n        return l[mid/2]\n    else\n\
    \        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mode of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5xhj1_5m.jl:19\nin expression starting at\
    \ /tmp/tmp5xhj1_5m.jl:19\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l) == 0 \n        return NaN\n    end\n    \n    mid = floor(Int,\
    \ length(l)/2)\n    \n    if length(l) % 2 == 0 \n        return l[mid]\n    else\n\
    \        return (l[mid] + l[mid-1])/2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp8c5aa9ee.jl:25

    '
  stdout: "test set: Test Failed at /tmp/tmp8c5aa9ee.jl:28\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp8c5aa9ee.jl:28 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp8c5aa9ee.jl:27\ntest set: Test Failed at /tmp/tmp8c5aa9ee.jl:29\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 6.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8c5aa9ee.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8c5aa9ee.jl:27\ntest set: Error\
    \ During Test at /tmp/tmp8c5aa9ee.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmp8c5aa9ee.jl:20\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8c5aa9ee.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8c5aa9ee.jl:27\ntest set:\
    \ Test Failed at /tmp/tmp8c5aa9ee.jl:31\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 5.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp8c5aa9ee.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp8c5aa9ee.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp8c5aa9ee.jl:32\n  Expressi"
  timestamp: 1659822462
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(BoundsError(\"median requires at\
    \ least one element\"))\n    end\n    \n    if mid == 1\n        return l[1]\n\
    \    end\n    \n    mid = round(Int64, mid)\n    \n    if mid == length(l)\n \
    \       return l[mid - 1]\n    end\n    \n    mid = round(Int64, mid)\n    \n\
    \    if mid > length(l)\n        return l[mid - 1]\n    end\n    \n    mid = round(Int64,\
    \ mid)\n    \n    if mid < length(l)\n        return l[mid]\n    end\n    \n \
    \   throw(BoundsError(\"median requires at least one element\"))\nend\n</cell>\n\
    <text>\nmedian\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1yt4fop.jl:38\nin expression starting at\
    \ /tmp/tmpx1yt4fop.jl:38\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ c |>\nThis does not answer the question. `median` does not return the median\
    \ of a vector, it returns the median of a sorted vector. `median` does not sort\
    \ the vector in place, it returns a sorted vector. `sort` returns a sorted vector.\
    \ `sort!` sorts the vector in place. `sort!` does not return a sorted vector.\
    \ `sort!` sorts the vector in place.\n<|/ c |>\n<| c |>\nI agree with you. My\
    \ answer was more of a general solution to median of a vector. He asked for a\
    \ function that returns the median of a vector. He didn't ask for median of a\
    \ sorted vector. He asked for a function that returns the median of a sorted vector.\
    \ He didn't ask for median of a vector. He asked for a function that returns the\
    \ median of a vector. He didn't ask for median of a sorted vector. He asked for\
    \ a function that returns the median of a sorted vector. He didn't ask for median\
    \ of a vector. He asked for a function that returns the median of a vector. He\
    \ didn't ask for median of a sorted vector. He asked for a function that returns\
    \ the median of a sorted vector. He didn't ask for median of a vector. He asked\
    \ for a function that returns the median of a vector. He didn't ask for median\
    \ of a sorted vector. He asked for a function that returns the median of a sorted\
    \ vector. He didn't ask for median of a vector. He asked for a function that returns\
    \ the median of a vector. He didn't ask for median of a sorted vector. He asked\
    \ for a function that returns the median of a sorted vector. He didn't ask for\
    \ median of a vector. He asked for a function that returns the median of a vector.\
    \ He didn't ask for median of a sorted vector. He asked for a function that returns\
    \ the median of a sorted vector. He didn't ask for median of a vector. He asked\
    \ for a function that returns the median of a vector. He didn't ask for median\
    \ of a sorted vector. He asked for a function that returns the median of a sorted\
    \ vector. He didn't ask for median of a vector. He asked for a function that returns\
    \ the median of a vector. He didn't ask for median of a sorted vector. He asked\
    \ for a function that returns the median of a sorted vector. He didn't ask for\
    \ median of a vector. He asked for a function that returns the median of a vector.\
    \ He didn't ask\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpku3y0qax.jl:16\nin expression starting at\
    \ /tmp/tmpku3y0qax.jl:16\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2==1\n        return l[mid]\n  \
    \  else\n        return (l[mid-1] + l[mid])/2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpy7u69cqb.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpy7u69cqb.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmpy7u69cqb.jl:11\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpy7u69cqb.jl:21 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpy7u69cqb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpy7u69cqb.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmpy7u69cqb.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpy7u69cqb.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpy7u69cqb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpy7u69cqb.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 1.0 of type Float64\n \
    \ Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base ./indices.jl:"
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ n = length(l)\n    \n    if n < 2\n        return l[1]\n    end\n    \n    mid\
    \ = floor((n+1)/2)\n    \n    if l[mid] == l[mid-1]\n        return median(l[mid-1:mid+1])\n\
    \    end\n    \n    if l[mid] == l[mid+1]\n        return median(l[mid-1:mid])\n\
    \    end\n    \n    if l[mid] == l[mid-1]\n        return median(l[mid+1:mid+2])\n\
    \    end\n    \n    if l[mid] == l[mid+1]\n        return median(l[mid+2:mid+3])\n\
    \    end\n    \n    if l[mid] == l[mid+2]\n        return median(l[mid+1:mid+3])\n\
    \    end\n    \n    if l[mid] == l[mid+3]\n        return median(l[mid+2:mid+4])\n\
    \    end\n    \n    if l[mid] == l[mid+4]\n        return median(l[mid+3:mid+5])\n\
    \    end\n    \n    if l[mid] == l[mid+5]\n        return median(l[mid+4:mid+6])\n\
    \    end\n    \n    if l[mid] == l[mid+6]\n        return median(l[mid+5:mid+7])\n\
    \    end\n    \n    if l[mid] == l[mid+7]\n        return median(l[mid+6:mid+8])\n\
    \    end\n    \n    if l[mid] == l[mid+8]\n        return median(l[mid+7:mid+9])\n\
    \    end\n    \n    if l[mid] == l[mid+9]\n        return median(l[mid+8:mid+10])\n\
    \    end\n    \n    if l[mid] == l[mid+10]\n        return median(l[mid+9:mid+11])\n\
    \    end\n    \n    if l[mid] == l[mid+11]\n        return median(l[mid+10:mid+12])\n\
    \    end\n    \n    if l[mid] == l[mid+12]\n        return median(l[mid+11:mid+13])\n\
    \    end\n    \n    if l[mid] == l[mid+13]\n        return median(l[mid+12:mid+14])\n\
    \    end\n    \n    if l[mid] == l[mid+14]\n        return median(l[mid+13:mid+15])\n\
    \    end\n    \n    if l[mid] == l[mid+15]\n        return median(l[mid+14:mid+16])\n\
    \    end\n    \n    if l\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkpddzn9.jl:1\nin expression starting at /tmp/tmplkpddzn9.jl:1\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2-1])/2\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector l and returns the mean of the elements in the\
    \ list l.\nTest your function on a few examples:\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehn7ocrl.jl:16\nin expression starting at\
    \ /tmp/tmpehn7ocrl.jl:16\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1\n  \
    \      return l[1]\n    \n    if l[mid] == l[mid - 1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 2]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 3]\n        return l[mid]\n    \n    return l[mid]\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers. Your function should take a list\
    \ of numbers as an argument, and return a Float64. Your function should also handle\
    \ empty lists.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2w5pe0_4.jl:27\nin expression starting at\
    \ /tmp/tmp2w5pe0_4.jl:27\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = floor(Int,\
    \ length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n    else\n \
    \       return (l[mid] + l[mid-1]) / 2\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpj4tcy7h4.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpj4tcy7h4.jl:21\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 2.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpj4tcy7h4.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpj4tcy7h4.jl:20\ntest set: Test Failed at /tmp/tmpj4tcy7h4.jl:22\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 6.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4tcy7h4.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4tcy7h4.jl:20\ntest set: Error\
    \ During Test at /tmp/tmpj4tcy7h4.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpj4tcy7h4.jl:13\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpj4tcy7h4.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpj4tcy7h4.jl:20\ntest set:\
    \ Test Failed at /tmp/tmpj4tcy7h4.jl:24\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj4tcy7h4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj4tcy7h4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpj4tcy7h4.jl:25\n  Expressi"
  timestamp: 1659822462
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers. Your function should take a list of numbers and return the median\
    \ of the numbers. If the length of the list is odd, return the middle number.\
    \ Otherwise, return the average of the two middle numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph5joitbv.jl:11\nin expression starting at\
    \ /tmp/tmph5joitbv.jl:11\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpo4j1v3m2.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpo4j1v3m2.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpo4j1v3m2.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo4j1v3m2.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpo4j1v3m2.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo4j1v3m2.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpo4j1v3m2.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo4j1v3m2.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpo4j1v3m2.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo4j1v3m2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmpo4j1v3m2.jl:0\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpo4j1v3m2.jl:23 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polygl"
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l) == 0 \n        return NaN\n    end\n    \n    mid = floor(Int,\
    \ length(l) / 2)\n    \n    if length(l) % 2 == 0\n        return l[mid]\n   \
    \ else\n        return (l[mid] + l[mid+1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyipzhtam.jl:23\nin expression starting at\
    \ /tmp/tmpyipzhtam.jl:23\n"
  stdout: ''
  timestamp: 1659822459
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return 0.5*(l[mid-1]\
    \ + l[mid])\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a list\
    \ of numbers. Your function should take a list of numbers as an argument, and\
    \ return a Float64 containing the median of the numbers in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5x8qyr_.jl:16\nin expression starting at\
    \ /tmp/tmpv5x8qyr_.jl:16\n"
  stdout: ''
  timestamp: 1659822460
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2==0\n        return l[mid]\n  \
    \  else\n        return (l[mid-1]+l[mid])/2\n    end\nend\n</code>\n<|/ a tags=julia,median\
    \ |>\n<| a |>\nI came up with a solution that is more efficient than sorting the\
    \ entire vector and uses only one pass:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8lm4ji3s.jl:16\nin expression starting at\
    \ /tmp/tmp8lm4ji3s.jl:16\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmp5fasvtgn.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmp5fasvtgn.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp5fasvtgn.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp5fasvtgn.jl:15\ntest set: Test Failed at /tmp/tmp5fasvtgn.jl:17\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 6.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fasvtgn.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fasvtgn.jl:15\ntest set: Error\
    \ During Test at /tmp/tmp5fasvtgn.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmp5fasvtgn.jl:9\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp5fasvtgn.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp5fasvtgn.jl:15\ntest set:\
    \ Test Failed at /tmp/tmp5fasvtgn.jl:19\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5fasvtgn.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5fasvtgn.jl:15\ntest set: Test\
    \ Failed at /tmp/tmp5fasvtgn.jl:20\n  Expressio"
  timestamp: 1659822464
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    \n    if length(l)%2\
    \ == 1\n        return l[end-1]\n    else\n        return (l[end-1] + l[end])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    The median of a list of numbers is defined as the value separating the higher\
    \ half of the numbers from the lower half. For example, in the list [-10, 4, 6,\
    \ 1000, 10, 20], the median is 4.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn7ifsq7e.jl:16\nin expression starting at\
    \ /tmp/tmpn7ifsq7e.jl:16\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvw6ja3m5.jl:15\nin expression starting at\
    \ /tmp/tmpvw6ja3m5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    end\n    \n    if mid %\
    \ 2 == 0\n        return (l[mid-1] + l[mid]) / 2\n    end\n    \n    return (l[mid-1]\
    \ + l[mid]) / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a list\
    \ of numbers. Write a test that checks that your function works.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptj0lh465.jl:20\nin expression starting at\
    \ /tmp/tmptj0lh465.jl:20\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[floor(length(l)/2)] + l[ceil(length(l)/2)])/2\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument, and return a single number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg7bq0wzk.jl:11\nin expression starting at\
    \ /tmp/tmpg7bq0wzk.jl:11\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    if mid % 2 == 0\n\
    \        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1]) /\
    \ 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the mean of a list of numbers.\
    \ If the list is empty, return NaN.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6rwhc_q.jl:18\nin expression starting at\
    \ /tmp/tmpl6rwhc_q.jl:18\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end]\n\
    \    \n    if length(l)%2==0\n        return median\n    else\n        return\
    \ median/2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz8y4vyij.jl:17\nin expression starting at\
    \ /tmp/tmpz8y4vyij.jl:17\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid % 2 == 0\
    \ \n        return l[mid / 2]\n    \n    return median(l[mid/2 : end]) + median(l[1\
    \ : mid/2])\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nThe median of a set of numbers is defined as the value separating the\
    \ higher half of the numbers from the lower half. For example, in the set {1,\
    \ 2, 3, 4}, the median is (2 + 3) / 2 = 2.5.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyf816lc1.jl:18\nin expression starting at\
    \ /tmp/tmpyf816lc1.jl:18\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxzpwfxf.jl:16\nin expression starting at\
    \ /tmp/tmpfxzpwfxf.jl:16\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.0>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument and return the median of the list.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm3mwew9z.jl:17\nin expression starting at\
    \ /tmp/tmpm3mwew9z.jl:17\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length = length(l)\n\
    \    if length < 2\n        return l[1]\n    end\n    mid = length/2\n    if length%2\
    \ == 1\n        return median(l[mid-1:mid+1])\n    else\n        return median(l[mid-1:mid+2])\n\
    \    end\nend\n</code>\n<|/ a tags=julia,median,statistics |>\n<| a tags=julia,median,statistics\
    \ |>\nI wrote a package for calculating medians in Julia. \nhttps://github.com/nathanh/median.jl\n\
    <code>\nusing median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,median,statistics\
    \ |>\nI wrote a package for calculating medians in Julia. \nhttps://github.com/nathanh/median.jl\n\
    <code>\nusing median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,median,statistics\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jf2hhrr.jl:20\nin expression starting at\
    \ /tmp/tmp9jf2hhrr.jl:20\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</code>\n<|/ a tags=julia,median\
    \ |>\n<| c |>\nThis does not answer the question. `median` does not return the\
    \ median of the list. It returns the median of the *elements* of the list. `median([3,\
    \ 1, 2, 4, 5])` returns `3`, not `1.5`.\n<|/ c |>\n<| c |>\nYes, I realized that\
    \ after I posted my answer. Thanks for pointing it out. I've updated my answer\
    \ accordingly.\n<|/ c |>\n<| a tags=julia,median |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxpwq9jyn.jl:16\nin expression starting at\
    \ /tmp/tmpxpwq9jyn.jl:16\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the median of a list of numbers, rounded to two\
    \ decimal places.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfu4qtj1u.jl:16\nin expression starting at\
    \ /tmp/tmpfu4qtj1u.jl:16\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a list of numbers, rounded to two decimal places.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_4ijtc8.jl:16\nin expression starting at\
    \ /tmp/tmp2_4ijtc8.jl:16\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element\"))\n    end\n    \n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set\
    \ of numbers is called the \"middle\" of the set. For example, the median of the\
    \ set {1, 2, 3, 4} is (2 + 3) / 2 = 2.5.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzl_gg8au.jl:21\nin expression starting at\
    \ /tmp/tmpzl_gg8au.jl:21\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp42ja23n6.jl:17\nin expression starting at\
    \ /tmp/tmp42ja23n6.jl:17\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return l[1]\n    else \n        return l[mid]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers, rounded to the nearest integer.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3i_7x6ne.jl:15\nin expression starting at\
    \ /tmp/tmp3i_7x6ne.jl:15\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\"\"))\n    end\n    \n\
    \    if mid == 1\n        return l[1]\n    end\n    \n    if mid%2 == 1\n    \
    \    return median(l[floor(mid/2):floor(mid/2)+1]) + median(l[mid-1:mid])\n  \
    \  end\n    \n    return median(l[floor(mid/2):floor(mid/2)+1]) + median(l[mid-1:mid-1:-1])\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the median of a list of numbers. Your function\
    \ should throw an error if there are any non-numeric elements in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc88mu6a8.jl:24\nin expression starting at\
    \ /tmp/tmpc88mu6a8.jl:24\n"
  stdout: ''
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError())\n    end\n    mid\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function to compute the mean of a list of numbers. \nThe function\
    \ should take a list of numbers as an argument and return the mean of the numbers\
    \ in the list.\nThe function should throw a DomainError if the list is empty.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mcz5maw.jl:15\nin expression starting at\
    \ /tmp/tmp2mcz5maw.jl:15\n"
  stdout: ''
  timestamp: 1659822462
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. Use median from above. How would you use it?\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ran0ces.jl:11\nin expression starting at\
    \ /tmp/tmp8ran0ces.jl:11\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument and return the median of the numbers. \nThe median is the number\
    \ in the middle of the list that has the highest value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qai_8_m.jl:16\nin expression starting at\
    \ /tmp/tmp8qai_8_m.jl:16\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mode of\
    \ a list of numbers. If the list has two or more modes, return any one of them.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppefdat11.jl:16\nin expression starting at\
    \ /tmp/tmppefdat11.jl:16\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n<|/ a tags=julia,median\
    \ |>\n<| c |>\nThis code doesn't work if `length(l)` is odd. `median([3, 1, 2,\
    \ 4, 5])` returns `3` instead of `2`.\n<|/ c |>\n<| c |>\nI fixed the bug, thank\
    \ you for pointing it out\n<|/ c |>\n<| a dscore=3 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqi1gt_x.jl:16\nin expression starting at\
    \ /tmp/tmpeqi1gt_x.jl:16\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sort(l)\n    \n \
    \   mid = length(l)\n    \n    if mid == 1\n        return l[1]\n    end\n   \
    \ \n    if mid == 2\n        return 0.5 * (l[1] + l[2])\n    end\n    \n    if\
    \ mid == 3\n        return 0.5 * (l[1] + l[2] + l[3])\n    end\n    \n    if mid\
    \ % 2 == 0\n        return 0.5 * (l[mid/2] + l[mid/2+1]) \n    end\n    \n   \
    \ return 0.5 * (l[mid/2] + l[mid/2-1]) \nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function to compute the\
    \ mean of a list of numbers. \nThe function should take a list of numbers as an\
    \ argument, and return a Float64 number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpesf790gu.jl:31\nin expression starting at\
    \ /tmp/tmpesf790gu.jl:31\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = floor(Int,\
    \ length(l)/2)\n    if length(l)%2 == 1\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgc9bel_.jl:16\nin expression starting at\
    \ /tmp/tmpxgc9bel_.jl:16\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=2 |>\nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set. \nThe median of a set of numbers is\
    \ defined as the middle number in the sorted set. \nThe median of a set of numbers\
    \ is defined as the middle number in the sorted set. \nThe median of a set of\
    \ numbers is defined as the middle number in the sorted set. \nThe median of a\
    \ set of numbers is defined as the middle number in the sorted set. \nThe median\
    \ of a set of numbers is defined as the middle number in the sorted set. \nThe\
    \ median of a set of numbers is defined as the middle number in the sorted set.\
    \ \nThe median of a set of numbers is defined as the middle number in the sorted\
    \ set. \nThe median of a set of numbers is defined as the middle number in the\
    \ sorted set. \nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set. \nThe median of a set of numbers is\
    \ defined as the middle number in the sorted set. \nThe median of a set of numbers\
    \ is defined as the middle number in the sorted set. \nThe median of a set of\
    \ numbers is defined as the middle number in the sorted set. \nThe median of a\
    \ set of numbers is defined as the middle number in the sorted set. \nThe median\
    \ of a set of numbers is defined as the middle number in the sorted set. \nThe\
    \ median of a set of numbers is defined as the middle number in the sorted set.\
    \ \nThe median of a set of numbers is defined as the middle number in the sorted\
    \ set. \nThe median of a set of numbers is defined as the middle number in the\
    \ sorted set. \nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set. \nThe median of a set of numbers is\
    \ defined as the middle number in the sorted set. \nThe median of a set of numbers\
    \ is defined as the middle number in the sorted \nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcizm8djz.jl:16\nin expression starting at\
    \ /tmp/tmpcizm8djz.jl:16\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpch2kpep5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpch2kpep5.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmpch2kpep5.jl:11\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpch2kpep5.jl:21 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpch2kpep5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpch2kpep5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmpch2kpep5.jl:13\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpch2kpep5.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpch2kpep5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpch2kpep5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 1.0 of type Float64\n \
    \ Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base ./indices.jl:"
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element in the list\"))\n    end\n    mid = floor(mid)\n\
    \    if mid % 2 == 0\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid]) / 2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the mode of a list of numbers. \nThe mode is the number that appears\
    \ most often in the list.\nThe function should throw an error if the list is not\
    \ sorted.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpixfi2k1y.jl:21\nin expression starting at\
    \ /tmp/tmpixfi2k1y.jl:21\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the mean of elements\
    \ in the list l.\n    >>> mean([3, 1, 2, 4, 5])\n    2.5\n    >>> mean([-10, 4,\
    \ 6, 1000, 10, 20])\n    20.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykih98uk.jl:11\nin expression starting at\
    \ /tmp/tmpykih98uk.jl:11\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sort(l)\n    \n \
    \   if length(l)%2==0\n        return l[floor(length(l)//2)]\n    else\n     \
    \   return (l[floor(length(l)//2)-1] + l[floor(length(l)//2)]) / 2\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp56hz2ggh.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp56hz2ggh.jl:22\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 1//1 of type Rational{Int64}\n  Stacktrace:\n    [1] to_index(i::Rational{Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n \
    \     @ Main /tmp/tmp56hz2ggh.jl:14\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp56hz2ggh.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp56hz2ggh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp56hz2ggh.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3//1 of type Rational{Int64}\n  Stacktrace:\n    [1] to_index(i::Rational{Int64})\n\
    \      @ Base ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \      @ Base ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n\
    \    [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n  \
    \    @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n \
    \     @ Main /tmp/tmp56hz2ggh.jl:12\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmp56hz2ggh.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmp56hz2ggh.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp56hz2ggh.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: -1//1 of type Rational{Int64}\n\
    \  Stacktr"
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the median of a list of numbers. Write a test that passes when\
    \ the function returns the correct result, and a test that fails when the function\
    \ returns the incorrect result.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuvc1g4wn.jl:16\nin expression starting at\
    \ /tmp/tmpuvc1g4wn.jl:16\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\n@assert median([3,\
    \ 1, 2, 4, 5]) == 3\n@assert median([-10, 4, 6, 1000, 10, 20]) == 15\n</cell>\n\
    <text>\nExercise 10\nWrite a function that returns the median of a list of numbers.\
    \ Your function should work for both Float64 and Int64 types.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2w7ocqu4.jl:11\nin expression starting at\
    \ /tmp/tmp2w7ocqu4.jl:11\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 0\n        return l[mid]\n\
    \    else\n        return l[mid-1] + l[mid]/2\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mean of a list of numbers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpejxchg2j.jl:16\nin expression starting at\
    \ /tmp/tmpejxchg2j.jl:16\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 0\n        return l[(length(l)+1)/2-1]\n    else\n \
    \       return l[length(l)-1]\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpxle9fuw1.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpxle9fuw1.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxle9fuw1.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpxle9fuw1.jl:21\ntest set: Error During Test\
    \ at /tmp/tmpxle9fuw1.jl:23\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 2.5 of type Float64\n\
    \  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base ./indices.jl:300\n\
    \    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base ./indices.jl:277\n\
    \    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n    [4] to_indices\n\
    \      @ ./indices.jl:325 [inlined]\n    [5] getindex\n      @ ./abstractarray.jl:1218\
    \ [inlined]\n    [6] median(l::Vector{Int64})\n      @ Main /tmp/tmpxle9fuw1.jl:12\n\
    \    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpxle9fuw1.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpxle9fuw1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxle9fuw1.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpxle9fuw1.jl:14\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxle9fuw1.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxle9fuw1.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpxle9fu"
  timestamp: 1659822466
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers. \nThe function should take an argument that is a list of numbers.\n\
    The function should return the median of the list.\nThe function should raise\
    \ an error if the list is empty.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnwlie5me.jl:11\nin expression starting at\
    \ /tmp/tmpnwlie5me.jl:11\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the mean of a list of numbers. Use a for loop to do\
    \ this.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdy246u0g.jl:16\nin expression starting at\
    \ /tmp/tmpdy246u0g.jl:16\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? return NaN : l[floor(length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median is defined as the value separating\
    \ the higher half of a data set from the lower half. For example, the median of\
    \ a set of data {1, 2, 3, 4} is (2 + 3 + 4) / 2 = 2.5. Median is the middle value\
    \ in a data set. Median is also known as the middle value in an ordered data set.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03_gdm9h.jl:10\nin expression starting at\
    \ /tmp/tmp03_gdm9h.jl:10\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument and return the median of the numbers. \nThe median\
    \ is the number in the middle of the list that is the smallest number in the list.\
    \ \nIf the list has an even number of elements, then the median is the mean of\
    \ the two middle numbers. \nIf the list has an odd number of elements, then the\
    \ median is the number in the middle of the list that is the largest number in\
    \ the list.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwm8_0_sg.jl:17\nin expression starting at\
    \ /tmp/tmpwm8_0_sg.jl:17\n"
  stdout: ''
  timestamp: 1659822463
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise: Write a function that returns the median\
    \ of a list of numbers. \nThe function should take a list of numbers and return\
    \ the median of the list.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsrl68fyk.jl:11\nin expression starting at\
    \ /tmp/tmpsrl68fyk.jl:11\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError(\"\"))\n    end\n    median = (l[mid-1]\
    \ + l[mid]) / 2\n    return median\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpvgn9a141.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpvgn9a141.jl:21\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvgn9a141.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvgn9a141.jl:20\ntest set: Test Failed at /tmp/tmpvgn9a141.jl:22\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 15.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpvgn9a141.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpvgn9a141.jl:20\ntest set: Error\
    \ During Test at /tmp/tmpvgn9a141.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpvgn9a141.jl:13\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvgn9a141.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvgn9a141.jl:20\ntest set:\
    \ Test Failed at /tmp/tmpvgn9a141.jl:25\n  Expression: candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n   Evaluated: 4.5 == 7\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpvgn9a141.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpvgn9a141.jl:20\nTest Summary: | Pass  Fail\
    \  Error  Total\ntest "
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mode of a given list of numbers. \nThe mode is the number that appears most\
    \ frequently in the list.\nFor example, mode([1, 1, 2, 3]) should return 1.\n\
    Hint: Use a dictionary to keep track of counts of numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp20w0magv.jl:16\nin expression starting at\
    \ /tmp/tmp20w0magv.jl:16\n"
  stdout: ''
  timestamp: 1659822464
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers. \nThe median is the number in the middle of the sorted list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdormfdi.jl:11\nin expression starting at\
    \ /tmp/tmpcdormfdi.jl:11\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ mode of a given list of numbers. \nThe mode is the number that appears most\
    \ frequently in the list.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxtdvbj1.jl:15\nin expression starting at\
    \ /tmp/tmpyxtdvbj1.jl:15\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5b5grch4.jl:16\nin expression starting at\
    \ /tmp/tmp5b5grch4.jl:16\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4w_lwkl5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4w_lwkl5.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 5//2 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n\
    \     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \     @ Base ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4w_lwkl5.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4w_lwkl5.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4w_lwkl5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4w_lwkl5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3//1 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n\
    \     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \     @ Base ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4w_lwkl5.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4w_lwkl5.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4w_lwkl5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4w_lwkl5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 1//2 of type Rational{Int64}\n\
    \  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n     @ Base ./indices.jl:300\n\
    \   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n     @ Base ./indices.jl:277\n\
    \   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4w_lwkl5.jl:0\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp"
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)+1)/2] \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ia8oa_y.jl:11\nin expression starting at\
    \ /tmp/tmp5ia8oa_y.jl:11\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return 0.5\
    \ * (l[mid] + l[mid-1])\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the median of\
    \ a list of numbers. \nThe function should take a list of numbers as an argument,\
    \ and return a single number.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8fap4m6.jl:16\nin expression starting at\
    \ /tmp/tmps8fap4m6.jl:16\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp3_wq8hcm.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp3_wq8hcm.jl:22\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./number.jl:98 [inlined]\n   [2] median(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp3_wq8hcm.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3_wq8hcm.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3_wq8hcm.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp3_wq8hcm.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./number.jl:98 [inlined]\n   [2] median(l::Vector{Int64})\n\
    \     @ Main /tmp/tmp3_wq8hcm.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3_wq8hcm.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3_wq8hcm.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp3_wq8hcm.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError\n  Stacktrace:\n   [1] getindex\n     @ ./number.jl:98\
    \ [inlined]\n   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmp3_wq8hcm.jl:14\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3_wq8hcm.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3_wq8hcm.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp3_wq8hcm.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([6, 5]) == 5.5\n  BoundsError\n  Stacktrace:\n   [1] getindex\n  \
    \   @ ./number.jl:98 [inlined]\n   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmp3_wq8hc"
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the mean of a list of numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5r3izt9.jl:16\nin expression starting at\
    \ /tmp/tmpm5r3izt9.jl:16\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? return 0.0 : median(l[floor(length(l)/2)])\nend\n</code>\n<|/ a tags=julia,median\
    \ |>\n<| c |>\nThis doesn't work for me. `median([3, 1, 2, 4, 5])` returns `3`\
    \ instead of `1.5`.\n<|/ c |>\n<| c |>\nI edited the answer to include a median\
    \ function which should work for you\n<|/ c |>\n<| c |>\nI added a median function\
    \ which should work for you\n<|/ c |>\n<| c |>\nI added a median function which\
    \ should work for you\n<|/ c |>\n<| c |>\nI added a median function which should\
    \ work for you\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0cqd2vj_.jl:10\nin expression starting at\
    \ /tmp/tmp0cqd2vj_.jl:10\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpo4j1v3m2.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpo4j1v3m2.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpo4j1v3m2.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo4j1v3m2.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpo4j1v3m2.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo4j1v3m2.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmpo4j1v3m2.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmpo4j1v3m2.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpo4j1v3m2.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpo4j1v3m2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmpo4j1v3m2.jl:0\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmpo4j1v3m2.jl:23 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polygl"
  timestamp: 1659822461
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length = length(l)\n\
    \    if length < 2\n        return l[1]\n    middle = length/2\n    if length%2\
    \ == 1\n        return median(l[middle-1:middle+1])\n    else\n        return\
    \ median(l[middle-1:middle+2])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a list of numbers is defined\
    \ as the value separating the higher half of the list from the lower half. For\
    \ example, if the list is [3, 1, 2, 4, 5], then the median is 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2k3ydli5.jl:19\nin expression starting at\
    \ /tmp/tmp2k3ydli5.jl:19\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return l[1]\n    else \n        return l[mid]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the median of a list of numbers, rounded to two decimal places.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvwxey1u.jl:15\nin expression starting at\
    \ /tmp/tmpxvwxey1u.jl:15\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. \nThe median is often called the \"middle number\" because\
    \ it is often the number in the middle. \nThe median is also called the \"middle\
    \ element\" because it is often the element in the middle. \nThe median is also\
    \ called the \"middle percentage\" because it is often the percentage of the data\
    \ that is in the middle.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptyo4zffv.jl:16\nin expression starting at\
    \ /tmp/tmptyo4zffv.jl:16\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpti38nhru.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpti38nhru.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpti38nhru.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpti38nhru.jl:15\ntest set: Test Failed at /tmp/tmpti38nhru.jl:17\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 15.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpti38nhru.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpti38nhru.jl:15\ntest set: Error\
    \ During Test at /tmp/tmpti38nhru.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpti38nhru.jl:9\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpti38nhru.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpti38nhru.jl:15\ntest set:\
    \ Test Failed at /tmp/tmpti38nhru.jl:20\n  Expression: candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n   Evaluated: 4.5 == 7\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpti38nhru.jl:20 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpti38nhru.jl:15\nTest Summary: | Pass  Fail\
    \  Error  Total\ntest s"
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l) == 0 \n        return Float64(0)\n    end\n    \n    mid\
    \ = floor(Int, length(l)/2)\n    \n    if length(l) % 2 == 0 \n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers, rounded to two decimal places.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3yhdc_86.jl:23\nin expression starting at\
    \ /tmp/tmp3yhdc_86.jl:23\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1 \n        return l[1]\n    else \n        return\
    \ (l[mid-1] + l[mid]) / 2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function to compute the mean\
    \ of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmplnlvd.jl:15\nin expression starting at\
    \ /tmp/tmpdmplnlvd.jl:15\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function to compute the mean of a list of\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpatqrj6p0.jl:11\nin expression starting at\
    \ /tmp/tmpatqrj6p0.jl:11\n"
  stdout: ''
  timestamp: 1659822465
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        return l\n\
    \    j = findfirst(x -> x > l, l)\n    if j == length(l) \n        return l\n\
    \    return l[j+1] - l[i]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers, rounded to two decimal places.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7ie29ra.jl:18\nin expression starting at\
    \ /tmp/tmpc7ie29ra.jl:18\n"
  stdout: ''
  timestamp: 1659822466
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ c |>\nI like your median function but I think it would be better to return `mid`\
    \ instead of `l[mid]` since `mid` will always be an integer.\n<|/ c |>\n<| c |>\n\
    Thanks, I changed it to `mid`\n<|/ c |>\n<| a tags=julia |>\nThe median of a set\
    \ of numbers is defined as the value that appears more than n/2 times in the set.\
    \ \n<code>\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3bbswli.jl:16\nin expression starting at\
    \ /tmp/tmpk3bbswli.jl:16\n"
  stdout: ''
  timestamp: 1659822466
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l) / 2)]\nend\n</cell>\n<code language=julia-1.1>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.1>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the median of a list\
    \ of numbers, rounded to two decimal places.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0xy2trqm.jl:11\nin expression starting at\
    \ /tmp/tmp0xy2trqm.jl:11\n"
  stdout: ''
  timestamp: 1659822466
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<text>\nThe median of a list is the\
    \ value that exists in the list at or below the middle of the list. For example,\
    \ in the list [3, 1, 2, 4, 5], the median is 3. The median is the value that exists\
    \ in the list at or below the middle of the list. For example, in the list [3,\
    \ 1, 2, 4, 5], the median is 3. The median is the value that exists in the list\
    \ at or below the middle of the list. For example, in the list [3, 1, 2, 4, 5],\
    \ the median is 3. The median is the value that exists in the list at or below\
    \ the middle of the list. For example, in the list [3, 1, 2, 4, 5], the median\
    \ is 3. The median is the value that exists in the list at or below the middle\
    \ of the list. For example, in the list [3, 1, 2, 4, 5], the median is 3. The\
    \ median is the value that exists in the list at or below the middle of the list.\
    \ For example, in the list [3, 1, 2, 4, 5], the median is 3. The median is the\
    \ value that exists in the list at or below the middle of the list. For example,\
    \ in the list [3, 1, 2, 4, 5], the median is 3. The median is the value that exists\
    \ in the list at or below the middle of the list. For example, in the list [3,\
    \ 1, 2, 4, 5], the median is 3. The median is the value that exists in the list\
    \ at or below the middle of the list. For example, in the list [3, 1, 2, 4, 5],\
    \ the median is 3. The median is the value that exists in the list at or below\
    \ the middle of the list. For example, in the list [3, 1, 2, 4, 5], the median\
    \ is 3. The median is the value that exists in the list at or below the middle\
    \ of the list. For example, in the list [3, 1, 2, 4, 5], the median is 3. The\
    \ median is the value that exists in the list at or below the middle of the list.\
    \ For example, in the list [3, 1, 2, 4, 5], the median is 3. The median is the\
    \ value that exists in the list at or below the middle of the list. For example,\
    \ in the list [3, 1, 2, 4, 5], the median is 3. The median is the value that exists\
    \ in the list at or below the middle of the list. For example, in the list [3,\
    \ 1, 2, 4, 5], the median is 3. The median is the value that exists in the list\
    \ at or below the middle of the list. For example, in the list [3, 1, 2, 4, 5],\
    \ the median is 3. The median is the value that exists in the list at or below\
    \ the middle of the list. For example, in the list [3, 1, 2, 4, 5], the median\
    \ is 3. The median is the value that exists in the list at or \nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbb0goj3v.jl:16\nin expression starting at\
    \ /tmp/tmpbb0goj3v.jl:16\n"
  stdout: ''
  timestamp: 1659822466
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ median of a list of numbers. \nThe median is the number in the middle of the\
    \ sorted list.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfgfa5v49.jl:16\nin expression starting at\
    \ /tmp/tmpfgfa5v49.jl:16\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2+1])/2.0\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe median\
    \ of [3, 1, 2, 4, 5] should be 3, not 2.\n<|/ c |>\n<| c |>\nThe median of [3,\
    \ 1, 2, 4, 5] should be 3, not 2.\n<|/ c |>\n<| c |>\nThe median of [3, 1, 2,\
    \ 4, 5] should be 3, not 2.\n<|/ c |>\n<| c |>\nThe median of [3, 1, 2, 4, 5]\
    \ should be 3, not 2.\n<|/ c |>\n<| c |>\nThe median of [3, 1, 2, 4, 5] should\
    \ be 3, not 2.\n<|/ c |>\n<| a tags=julia,median |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq69kluue.jl:16\nin expression starting at\
    \ /tmp/tmpq69kluue.jl:16\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(ZeroDivisionError())\n    end\n \
    \   median = (l[mid-1] + l[mid]) / 2.0\n    return median\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpiwpaufbj.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpiwpaufbj.jl:21\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.5 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiwpaufbj.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiwpaufbj.jl:20\ntest set: Test Failed at /tmp/tmpiwpaufbj.jl:22\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 510.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiwpaufbj.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiwpaufbj.jl:20\ntest set: Error\
    \ During Test at /tmp/tmpiwpaufbj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpiwpaufbj.jl:13\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiwpaufbj.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiwpaufbj.jl:20\ntest set:\
    \ Test Failed at /tmp/tmpiwpaufbj.jl:25\n  Expression: candidate([8, 1, 3, 9,\
    \ 9, 2, 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiwpaufbj.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiwpaufbj.jl:20\nTest Summary: | Pass  Fail\
    \  Error  Total\ntest"
  timestamp: 1659822469
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sort(l)\n    \n \
    \   if length(l)%2 == 1\n        return l[floor(length(l)/2)]\n    else\n    \
    \    return (l[floor(length(l)/2)-1] + l[floor(length(l)/2)])/2\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpesej60x2.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpesej60x2.jl:22\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmpesej60x2.jl:12\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpesej60x2.jl:22 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpesej60x2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpesej60x2.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 2.0 of type Float64\n  Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base\
    \ ./indices.jl:300\n    [2] to_index(A::Vector{Int64}, i::Float64)\n      @ Base\
    \ ./indices.jl:277\n    [3] to_indices\n      @ ./indices.jl:333 [inlined]\n \
    \   [4] to_indices\n      @ ./indices.jl:325 [inlined]\n    [5] getindex\n   \
    \   @ ./abstractarray.jl:1218 [inlined]\n    [6] median(l::Vector{Int64})\n  \
    \    @ Main /tmp/tmpesej60x2.jl:14\n    [7] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpesej60x2.jl:23 [inlined]\n\
    \    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpesej60x2.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpesej60x2.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.0 of type Float64\n \
    \ Stacktrace:\n    [1] to_index(i::Float64)\n      @ Base ./indices.jl:"
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2==0\n        return l[floor(length(l)/2)]\n    else\n  \
    \      return (l[floor(length(l)/2)]+l[floor(length(l)/2)-1])/2\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a set of numbers\
    \ is the middle number of the sorted set.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmg05h0ew.jl:17\nin expression starting at\
    \ /tmp/tmpmg05h0ew.jl:17\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = l/2\n    if l % 2 == 0\n        return mid\n    else\n        return\
    \ (mid + l)/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1,\
    \ 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of\
    \ a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5m0gytz2.jl:17\nin expression starting at\
    \ /tmp/tmp5m0gytz2.jl:17\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2+1])/2.0\n    end\nend\n</code>\n<|/ a tags=julia,median,sorting\
    \ |>\n<| a dscore=2 |>\nThe median of a set of numbers is defined as the value\
    \ that appears more than n/2 times in the set. \nThe median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. \nThe median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. \nThe median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. \nThe median of a set of numbers is defined\
    \ as the value that appears more than n/2 times in the set. \nThe median of a\
    \ set of numbers is defined as the value that appears more than n/2 times in the\
    \ set. \nThe median of a set of numbers is defined as the value that appears more\
    \ than n/2 times in the set. \nThe median of a set of numbers is defined as the\
    \ value that appears more than n/2 times in the set. \nThe median of a set of\
    \ numbers is defined as the value that appears more than n/2 times in the set.\
    \ \nThe median of a set of numbers is defined as the value that appears more than\
    \ n/2 times in the set. \nThe median of a set of numbers is defined as the value\
    \ that appears more than n/2 times in the set. \nThe median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. \nThe median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. \nThe median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. \nThe median of a set of numbers is defined\
    \ as the value that appears more than n/2 times in the set. \nThe median of a\
    \ set of numbers is defined as the value that appears more than n/2 times in the\
    \ set. \nThe median of a set of numbers is defined as the value that appears more\
    \ than n/2 times in the set. \nThe median of a set of numbers is defined as the\
    \ value that appears more than n/2 times in the set. \nThe median of a set of\
    \ numbers is defined as the value that appears more than n/2 times in the set.\
    \ \nThe median of a set of numbers is defined as the value that appears more than\
    \ n/2 times in the set. \nThe median of a set of numbers is defined as the value\
    \ that appears more than n/2 times in the set. \nThe median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. \nThe median\
    \ of a set of number\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprpf1iwr0.jl:16\nin expression starting at\
    \ /tmp/tmprpf1iwr0.jl:16\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end]\n\
    \    \n    if length(l)%2 == 1\n        return median\n    else\n        return\
    \ median/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwaxbenpi.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpwaxbenpi.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwaxbenpi.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwaxbenpi.jl:21\ntest set: Test Failed at /tmp/tmpwaxbenpi.jl:23\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 500.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwaxbenpi.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwaxbenpi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwaxbenpi.jl:25\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 3.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwaxbenpi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwaxbenpi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwaxbenpi.jl:26\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwaxbenpi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwaxbenpi.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2==1\n        return l[mid]\n    else\n        return (l[mid]+l[mid-1])/2\n\
    \    end\nend\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,median |>\nThe median\
    \ of a set of numbers is defined as the middle number in the sorted set. \nThe\
    \ median of a set of numbers is defined as the middle number in the sorted set.\
    \ \nThe median of a set of numbers is defined as the middle number in the sorted\
    \ set. \nThe median of a set of numbers is defined as the middle number in the\
    \ sorted set. \nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set. \nThe median of a set of numbers is\
    \ defined as the middle number in the sorted set. \nThe median of a set of numbers\
    \ is defined as the middle number in the sorted set. \nThe median of a set of\
    \ numbers is defined as the middle number in the sorted set. \nThe median of a\
    \ set of numbers is defined as the middle number in the sorted set. \nThe median\
    \ of a set of numbers is defined as the middle number in the sorted set. \nThe\
    \ median of a set of numbers is defined as the middle number in the sorted set.\
    \ \nThe median of a set of numbers is defined as the middle number in the sorted\
    \ set. \nThe median of a set of numbers is defined as the middle number in the\
    \ sorted set. \nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nThe median of a set of numbers is defined as the\
    \ middle number in the sorted set. \nThe median of a set of numbers is defined\
    \ as the middle number in the sorted set. \nThe median of a set of numbers is\
    \ defined as the middle number in the sorted set. \nThe median of a set of numbers\
    \ is defined as the middle number in the sorted set. \nThe median of a set of\
    \ numbers is defined as the middle number in the sorted set. \nThe median of a\
    \ set of numbers is defined as the middle number in the sorted set. \nThe median\
    \ of a set of numbers is defined as the middle number in the sorted set. \nThe\
    \ median of a set of numbers is defined as the middle number in the sorted set.\
    \ \nThe median of a set of numbers is defined as the middle number in the sorted\
    \ set. \nThe median of a set of numbers is defined as the middle number in the\
    \ sorted set. \nThe median of a set of numbers is defined as the middle number\
    \ in the sorted set. \nThe median of a set of numbers is defined as the middle\
    \ number in the sorted set. \nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgku4tv3.jl:16\nin expression starting at\
    \ /tmp/tmphgku4tv3.jl:16\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a list of numbers, rounded to two decimal places.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfa0s00gn.jl:16\nin expression starting at\
    \ /tmp/tmpfa0s00gn.jl:16\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmppe5_9s_b.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmppe5_9s_b.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 5//2 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n\
    \     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \     @ Base ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmppe5_9s_b.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppe5_9s_b.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppe5_9s_b.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppe5_9s_b.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3//1 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n\
    \     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \     @ Base ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmppe5_9s_b.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmppe5_9s_b.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmppe5_9s_b.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppe5_9s_b.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 1//2 of type Rational{Int64}\n\
    \  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n     @ Base ./indices.jl:300\n\
    \   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n     @ Base ./indices.jl:277\n\
    \   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmppe5_9s_b.jl:0\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp"
  timestamp: 1659822469
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end]\n\
    \    \n    if median == 0\n        return median\n    \n    i = length(l)\n  \
    \  \n    while i > 1\n        if l[i - 1] > median\n            median = l[i -\
    \ 1]\n        else\n            i = i - 1\n        end\n    end\n    \n    return\
    \ median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. If\
    \ the list is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjol976zl.jl:26\nin expression starting at\
    \ /tmp/tmpjol976zl.jl:26\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers, rounded to two decimal places.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw_wqc0a4.jl:11\nin expression starting at\
    \ /tmp/tmpw_wqc0a4.jl:11\n"
  stdout: ''
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4w_lwkl5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4w_lwkl5.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 5//2 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n\
    \     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \     @ Base ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4w_lwkl5.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4w_lwkl5.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4w_lwkl5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4w_lwkl5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3//1 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n\
    \     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \     @ Base ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4w_lwkl5.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4w_lwkl5.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4w_lwkl5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4w_lwkl5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 1//2 of type Rational{Int64}\n\
    \  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n     @ Base ./indices.jl:300\n\
    \   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n     @ Base ./indices.jl:277\n\
    \   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4w_lwkl5.jl:0\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp"
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end]\n\
    \    \n    if median == 0\n        return median\n    else\n        return median\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprm4ilz69.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmprm4ilz69.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprm4ilz69.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprm4ilz69.jl:21\ntest set: Test Failed at /tmp/tmprm4ilz69.jl:23\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 1000.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm4ilz69.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm4ilz69.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprm4ilz69.jl:25\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm4ilz69.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm4ilz69.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprm4ilz69.jl:26\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprm4ilz69.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprm4ilz69.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError())\n    end\n    \n  \
    \  if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ dims=1)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ dims=2)\n</cell>\n<text>\nMedian Absolute Deviation\nThe median absolute deviation\
    \ (MAD) is a robust measure of statistical dispersion, \nwhich measures the dispersion\
    \ of a set of data points from the mean.\nThe MAD can be calculated using the\
    \ median absolute deviation (MAD) formula:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgyor02zk.jl:20\nin expression starting at\
    \ /tmp/tmpgyor02zk.jl:20\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    \n    if mid % 2 == 0\n    \
    \    return (l[mid-1] + l[mid]) / 2\n    else\n        return l[mid]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the median of a list of numbers, rounded to two\
    \ decimal places.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrcgl6n4.jl:21\nin expression starting at\
    \ /tmp/tmpyrcgl6n4.jl:21\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6cj5u2cz.jl:16\nin expression starting at\
    \ /tmp/tmp6cj5u2cz.jl:16\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = floor(length(l)/2)\n\
    \    if length(l) % 2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpic87zf6y.jl:16\nin expression starting at\
    \ /tmp/tmpic87zf6y.jl:16\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (length(l) / 2)\nend\n</cell>\n<code language=julia-1.3>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"middle\" of the set. For example, in the set {1, 2, 3, 4}, the median\
    \ is (2 + 4) / 2 = 2.5.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsopegfyz.jl:11\nin expression starting at\
    \ /tmp/tmpsopegfyz.jl:11\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function to compute the mean of a list of\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpufukmc.jl:11\nin expression starting at\
    \ /tmp/tmpgpufukmc.jl:11\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nThe median of a list of numbers is defined as the value\
    \ separating the higher half of the list from the lower half. For example, in\
    \ the list [3, 1, 2, 4, 5], the median is 3.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_87buq06.jl:11\nin expression starting at\
    \ /tmp/tmp_87buq06.jl:11\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    mid = floor(mid)\n\
    \    if mid == 0\n        return l[mid]\n    \n    if mid == 1\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if\
    \ l[mid] == l[mid-1]\n        return l[mid]\n    \n    if l[mid] == l[mid+1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9nl1zte.jl:1\nin expression starting at /tmp/tmpq9nl1zte.jl:1\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = floor(mid)\n\
    \    if mid == 1 \n        return l[1]\n    \n    mid = floor(mid)\n    if mid\
    \ == 2 \n        return l[2]\n    \n    mid = floor(mid)\n    if mid == 3 \n \
    \       return l[2]\n    \n    mid = floor(mid)\n    if mid == 4 \n        return\
    \ l[3]\n    \n    mid = floor(mid)\n    if mid == 5 \n        return l[3]\n  \
    \  \n    mid = floor(mid)\n    if mid == 6 \n        return l[4]\n    \n    mid\
    \ = floor(mid)\n    if mid == 7 \n        return l[4]\n    \n    mid = floor(mid)\n\
    \    if mid == 8 \n        return l[5]\n    \n    mid = floor(mid)\n    if mid\
    \ == 9 \n        return l[5]\n    \n    mid = floor(mid)\n    if mid == 10 \n\
    \        return l[6]\n    \n    mid = floor(mid)\n    if mid == 11 \n        return\
    \ l[6]\n    \n    mid = floor(mid)\n    if mid == 12 \n        return l[7]\n \
    \   \n    mid = floor(mid)\n    if mid == 13 \n        return l[7]\n    \n   \
    \ mid = floor(mid)\n    if mid == 14 \n        return l[8]\n    \n    mid = floor(mid)\n\
    \    if mid == 15 \n        return l[8]\n    \n    mid = floor(mid)\n    if mid\
    \ == 16 \n        return l[9]\n    \n    mid = floor(mid)\n    if mid == 17 \n\
    \        return l[9]\n    \n    mid = floor(mid)\n    if mid == 18 \n        return\
    \ l[10]\n    \n    mid = floor(mid)\n    if mid == 19 \n        return l[10]\n\
    \    \n    mid = floor(mid)\n    if mid == 20 \n        return l[11]\n    \n \
    \   mid = floor(mid)\n    if mid == 21 \n        return l[11]\n    \n    mid =\
    \ floor(mid)\n    if mid == 22 \n        return l[12]\n    \n    mid = floor(mid)\n\
    \    if mid == 23 \n        return l[12]\n    \n    mid = floor(mid)\n    if mid\
    \ == 24 \n        return l[13]\n    \n    mid = floor(mid)\n    if mid == 25 \n\
    \        return l[13]\n    \n    mid = floor(mid)\n    if mid == 26 \n       \
    \ return l[14]\n    \n\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9u2sab3l.jl:1\nin expression starting at /tmp/tmp9u2sab3l.jl:1\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpngzl1b2b.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpngzl1b2b.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpngzl1b2b.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpngzl1b2b.jl:15\ntest set: Test Failed at /tmp/tmpngzl1b2b.jl:17\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 1000.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpngzl1b2b.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpngzl1b2b.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpngzl1b2b.jl:19\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpngzl1b2b.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpngzl1b2b.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpngzl1b2b.jl:20\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpngzl1b2b.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpngzl1b2b.jl:15\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822469
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 0\n        return l[mid]\n    else\n        return 0.5*(l[mid-1]\
    \ + l[mid])\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers. Your function should accept a list of numbers and return the median\
    \ of the numbers. Test your function on a list of numbers that you generated in\
    \ the previous exercise.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccv4biul.jl:16\nin expression starting at\
    \ /tmp/tmpccv4biul.jl:16\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pgeut33.jl:11\nin expression starting at\
    \ /tmp/tmp7pgeut33.jl:11\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sortedlist = sort(l)\n\
    \    \n    if length(sortedlist) == 0 \n        return NaN\n    \n    mid = length(sortedlist)\
    \ / 2\n    \n    if length(sortedlist) % 2 == 0 \n        return sortedlist[mid]\n\
    \    \n    else \n        return (sortedlist[mid] + sortedlist[mid + 1]) / 2\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the mean of a list of numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp9mzzjli.jl:22\nin expression starting at\
    \ /tmp/tmpp9mzzjli.jl:22\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2==0\n        return l[mid]\n  \
    \  else\n        return 0.5*(l[mid-1]+l[mid])\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the mode of a list of numbers. Your\
    \ function should return the number that appears most frequently in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2e6puh5.jl:16\nin expression starting at\
    \ /tmp/tmpn2e6puh5.jl:16\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,
    0 broken.

    in expression starting at /tmp/tmpiuw_quvt.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmpiuw_quvt.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpiuw_quvt.jl:16 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpiuw_quvt.jl:15\ntest set: Test Failed at /tmp/tmpiuw_quvt.jl:17\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 6.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuw_quvt.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuw_quvt.jl:15\ntest set: Error\
    \ During Test at /tmp/tmpiuw_quvt.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  BoundsError: attempt to access 1-element Vector{Int64}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] median(l::Vector{Int64})\n     @ Main /tmp/tmpiuw_quvt.jl:9\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpiuw_quvt.jl:18 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpiuw_quvt.jl:15\ntest set:\
    \ Test Failed at /tmp/tmpiuw_quvt.jl:19\n  Expression: candidate([6, 5]) == 5.5\n\
    \   Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpiuw_quvt.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpiuw_quvt.jl:15\ntest set: Test\
    \ Failed at /tmp/tmpiuw_quvt.jl:20\n  Expressio"
  timestamp: 1659822471
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    median = (l[mid-1]\
    \ + l[mid]) / 2.0\n    return median\nend\n</cell>\n<code language=julia-1.4>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument. \nThe function should return the median of the numbers in the list.\n\
    The function should raise an error if the list is empty.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54a7_vcb.jl:16\nin expression starting at\
    \ /tmp/tmp54a7_vcb.jl:16\n"
  stdout: ''
  timestamp: 1659822468
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median of a list of numbers is defined as the value\
    \ separating the higher half of the list from the lower half. For example, in\
    \ the list [-10, 4, 6, 1000, 10, 20], the median is 4.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjev_12sl.jl:16\nin expression starting at\
    \ /tmp/tmpjev_12sl.jl:16\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt53d0dof.jl:16\nin expression starting at\
    \ /tmp/tmpt53d0dof.jl:16\n"
  stdout: ''
  timestamp: 1659822469
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2-1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp628d26j1.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp628d26j1.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp628d26j1.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp628d26j1.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp628d26j1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp628d26j1.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base\
    \ ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Float64)\n     @ Base\
    \ ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp628d26j1.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp628d26j1.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp628d26j1.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp628d26j1.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n \
    \ Stacktrace:\n   [1] to_index(i::Float64)\n     @ Base ./indices.jl:300\n   [2]\
    \ to_index(A::Vector{Int64}, i::Float64)\n     @ Base ./indices.jl:277\n   [3]\
    \ median(l::Vector{Int64})\n     @ Main /tmp/tmp628d26j1.jl:0\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmp628d26j1.jl:23 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polygl"
  timestamp: 1659822471
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)==1\n        return l[1]\n    end\n    \n    mid = floor(Int,\
    \ length(l)/2)\n    \n    if l[mid] == l[mid+1]\n        return median(l[mid+1:end])\n\
    \    else\n        return median(l[mid:end-1])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. Write a test that checks that your function returns\
    \ the correct value.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ucitxr0.jl:23\nin expression starting at\
    \ /tmp/tmp2ucitxr0.jl:23\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4w_lwkl5.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp4w_lwkl5.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 5//2 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n\
    \     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \     @ Base ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4w_lwkl5.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4w_lwkl5.jl:21 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4w_lwkl5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4w_lwkl5.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index:\
    \ 3//1 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n\
    \     @ Base ./indices.jl:300\n   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n\
    \     @ Base ./indices.jl:277\n   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4w_lwkl5.jl:0\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp4w_lwkl5.jl:22 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp4w_lwkl5.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp4w_lwkl5.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([5]) == 5\n  ArgumentError: invalid index: 1//2 of type Rational{Int64}\n\
    \  Stacktrace:\n   [1] to_index(i::Rational{Int64})\n     @ Base ./indices.jl:300\n\
    \   [2] to_index(A::Vector{Int64}, i::Rational{Int64})\n     @ Base ./indices.jl:277\n\
    \   [3] median(l::Vector{Int64})\n     @ Main /tmp/tmp4w_lwkl5.jl:0\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp"
  timestamp: 1659822467
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ a measure of the center of mass. It is defined as:\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsoylfj57.jl:16\nin expression starting at\
    \ /tmp/tmpsoylfj57.jl:16\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise: Write a function that returns the median\
    \ of a list of numbers. Write a test that passes when the function returns the\
    \ correct value.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkg5c0v3j.jl:11\nin expression starting at\
    \ /tmp/tmpkg5c0v3j.jl:11\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = round(Int64,\
    \ mid)\n    if mid == 1 \n        return l[1]\n    \n    if mid == length(l)\n\
    \        return l[mid - 1]\n    \n    mid = round(Int64, mid)\n    if mid == length(l)\n\
    \        return l[mid - 1]\n    \n    if mid % 2 == 0\n        return median(l[mid-1:mid])\n\
    \    else\n        return median(l[mid-1:mid-1]) + median(l[mid+1:mid+2])\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=2)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=3)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=4)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=5)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=6)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=7)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=8)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=9)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=10)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=11)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=12)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=13)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=14)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], digits=15)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, \nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjgvasdf5.jl:30\nin expression starting at\
    \ /tmp/tmpjgvasdf5.jl:30\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    \n    if mid % 2 == 0\n\
    \        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the median of a list of numbers. If the length\
    \ of the list is even, the median is the mean of the two middle numbers. If the\
    \ length of the list is odd, the median is the middle number.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7qyifbb.jl:18\nin expression starting at\
    \ /tmp/tmpc7qyifbb.jl:18\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nThe median is defined as the value separating the higher half\
    \ of a data set from the lower half. For example, if the data set has N values,\
    \ the median is the value separating the lower half of the data set from the higher\
    \ half. Median is the middle value of a data set.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprm788drr.jl:11\nin expression starting at\
    \ /tmp/tmprm788drr.jl:11\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the mode of a list\
    \ of numbers. \nThe mode is the number that appears most frequently in the list.\n\
    For example, mode([1, 1, 2, 3]) should return 1.\nHint: Use a dictionary to keep\
    \ track of the frequencies of each number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprxbty0e4.jl:11\nin expression starting at\
    \ /tmp/tmprxbty0e4.jl:11\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError())\n    end\n    \n    if mid ==\
    \ 1\n        return l[1]\n    end\n    \n    mid = round(Int64, mid)\n    \n \
    \   if l[mid] == l[mid - 1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid - 2]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid\
    \ - 3]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 4]\n  \
    \      return l[mid]\n    end\n    \n    if l[mid] == l[mid - 5]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid - 6]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid - 7]\n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid - 8]\n        return l[mid]\n    end\n    \n   \
    \ if l[mid] == l[mid - 9]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid - 10]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid\
    \ - 11]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 12]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 13]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid - 14]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid - 15]\n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid - 16]\n        return l[mid]\n    end\n    \n  \
    \  if l[mid] == l[mid - 17]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid - 18]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid\
    \ - 19]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 20]\n\
    \        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 21]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid - 22\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7_0lmqzt.jl:1\nin expression starting at /tmp/tmp7_0lmqzt.jl:1\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument and return the median of the numbers. \nThe median\
    \ is the number in the middle of the sorted list of numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71ep3o61.jl:16\nin expression starting at\
    \ /tmp/tmp71ep3o61.jl:16\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return l[1]\n    else \n        return l[mid]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcmgw5ld6.jl:15\nin expression starting at\
    \ /tmp/tmpcmgw5ld6.jl:15\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end]\n\
    \    \n    if median == 0\n        median = median(sort(l)[1:end-1])\n    end\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers. Write a test that passes when the function returns the correct median\
    \ and fails otherwise.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_vfbmzt.jl:16\nin expression starting at\
    \ /tmp/tmp5_vfbmzt.jl:16\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(DomainError(\n            \"median\
    \ can only be applied to a non-empty vector\"))\n    end\n    return l[mid]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpht8s3vg5.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpht8s3vg5.jl:21\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpht8s3vg5.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpht8s3vg5.jl:20\ntest set: Test Failed at /tmp/tmpht8s3vg5.jl:22\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 1000.0\
    \ == 8.0\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht8s3vg5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht8s3vg5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpht8s3vg5.jl:24\n  Expression: candidate([6, 5]) == 5.5\n \
    \  Evaluated: 6.0 == 5.5\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht8s3vg5.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht8s3vg5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpht8s3vg5.jl:25\n  Expression: candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7\n   Evaluated: 9.0 == 7\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpht8s3vg5.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpht8s3vg5.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  timestamp: 1659822471
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)+1)/2] \nend\n</cell>\n<code language=julia-1.0>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that returns the median\
    \ of a list of numbers, rounded to two decimal places.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxr41_tw.jl:11\nin expression starting at\
    \ /tmp/tmpcxr41_tw.jl:11\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = floor(mid)\n\
    \    if mid == 1 \n        return l[1]\n    \n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    mid = floor(mid)\n    if mid == length(l)\n      \
    \  return l[mid\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_kwoz8oa.jl:1\nin expression starting at /tmp/tmp_kwoz8oa.jl:1\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the median of a list\
    \ of numbers. Write a test that checks the function works as expected.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvd6fzv91.jl:11\nin expression starting at\
    \ /tmp/tmpvd6fzv91.jl:11\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return 0.5 *\
    \ (l[mid/2] + l[mid/2 - 1])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1svyuvwx.jl:16\nin expression starting at\
    \ /tmp/tmp1svyuvwx.jl:16\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    mid = length(l)\n    \n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the median of a list of numbers. Your function should take a list\
    \ of numbers and return the median of the numbers. If the length of the list is\
    \ even, the median is the mean of the two middle numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmp216i6.jl:19\nin expression starting at\
    \ /tmp/tmpnmp216i6.jl:19\n"
  stdout: ''
  timestamp: 1659822470
- exit_code: 1
  program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return 0.5 * (l[mid-1] + l[mid])\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the mean of a list of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeuywcd5g.jl:17\nin expression starting at\
    \ /tmp/tmpeuywcd5g.jl:17\n"
  stdout: ''
  timestamp: 1659822470
