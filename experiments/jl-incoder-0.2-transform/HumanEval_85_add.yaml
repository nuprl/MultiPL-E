name: HumanEval_85_add
language: jl
prompt: "\"\"\"Given a non-empty list of integers lst. add the even elements that\
  \ are at odd indices..\n\n\n    Examples:\n    >>> add([4, 2, 6, 7])\n    2\n  \
  \  \"\"\"\nfunction add(lst::Vector{Int64})::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = add;\n\t@test(candidate([4, 88])\
  \ == 88)\n\t@test(candidate([4, 5, 6, 7, 2, 122]) == 122)\n\t@test(candidate([4,\
  \ 0, 6, 7]) == 0)\n\t@test(candidate([4, 4, 6, 8]) == 12)\nend\n"
completions: ["    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3\nWrite a function called sub that\
    \ subtracts two lists.", "    evens = lst[findall(x->x%2==0, lst)]\n    evens\
    \ = evens[2:end]\n    evens = sum(evens)\n    return evens\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the even numbers in a given list.", "    evens\
    \ = lst[1 : (end-1)]\n    odds = lst[(end-2):end]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even elements of a given\
    \ list.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \"add([1,2]) should equal 1\"\n@assert add([1,2,3]) == 6 \"add([1,2,3])\
    \ should equal 6\"\n@assert add([1,3,5]) == 9 \"add([1,3,5]) should equal 9\"\n\
    @assert add([1,3,5,7]) == 14 \"add([1,3,5,7]) should equal 14\"\n@assert add([1,3,5,7,9])\
    \ == 19 \"add([1,3,5,7,9]) should equal 19\"\n@assert add([1,3,5,7,9,11]) == 26\
    \ \"add([1,3,5,7,9,11]) should equal 26\"\n@assert add([1,3,5,7,9,11,13]) == 33\
    \ \"add([1,3,5,7,9,11,13]) should equal 33\"\n@assert add([1,3,5,7,9,11,13,15])\
    \ == 42 \"add([1,3,5,7,9,11,13,15]) should equal 42\"\n@assert add([1,3,5,7,9,11,13,15,17])\
    \ == 50 \"add([1,3,5,7,9,11,13,15,17]) should equal 50\"\n@assert add([1,3,5,7,9,11,13,15,17,19])\
    \ == 58 \"add([1,3,5,7,9,11,13,15,17,19]) should equal 58\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21])\
    \ == 66 \"add([1,3,5,7,9,11,13,15,17,19,21]) should equal 66\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21,23])\
    \ == 74 \"add([1,3,5,7,9,11,13,15,17,19,21,23]) should equal 74\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21,23,25])\
    \ == 82 \"add([1,3,5,7,9,11,13,15,17,19,21,23,25]) should equal 82\"\n@assert\
    \ add([1,3,5,7,9,11,13,15,17,19,21,23,25,27]) == 90 \"add([1,3,5,7,9,11,13,15,17,19,21,23,25,27])\
    \ should equal 90\"\n@assert add([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]) ==\
    \ 98 \"add([1,3,5,7,9,11,13,15,17,19,21,23,25,27,29]) ", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in the given list. For example, sum([4,\
    \ 9, 16, 25]) should return 52.", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n\
    \    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in the given list.", "    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the numbers in the list lst that are divisible\
    \ by 3", "    even = lst[1 : (end-1)]\n    odd = lst[(end-1) : end]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1])\
    \ == 1 \"add() should return 1 given an empty list\"\n@assert add([4, 2, 6, 7])\
    \ == 2 \"add() should return 2 given a list of length 3\"\n@assert add([4, 2,\
    \ 6, 7]) == 4 \"add() should return 4 given a list of length 4\"\n@assert add([4,\
    \ 2, 6, 7]) == 6 \"add() should return 6 given a list of length 5\"\n@assert add([4,\
    \ 2, 6, 7]) == 8 \"add() should return 8 given a list of length 6\"\n@assert add([4,\
    \ 2, 6, 7]) == 10 \"add() should return 10 given a list of length 7\"\n@assert\
    \ add([4, 2, 6, 7]) == 12 \"add() should return 12 given a list of length 8\"\n\
    @assert add([4, 2, 6, 7]) == 14 \"add() should return 14 given a list of length\
    \ 9\"\n@assert add([4, 2, 6, 7]) == 16 \"add() should return 16 given a list of\
    \ length 10\"\n@assert add([4, 2, 6, 7]) == 18 \"add() should return 18 given\
    \ a list of length 11\"\n@assert add([4, 2, 6, 7]) == 20 \"add() should return\
    \ 20 given a list of length 12\"\n@assert add([4, 2, 6, 7]) == 22 \"add() should\
    \ return 22 given a list of length 13\"\n@assert add([4, 2, 6, 7]) == 24 \"add()\
    \ should return 24 given a list of length 14\"\n@assert add([4, 2, 6, 7]) == 26\
    \ \"add() should return 26 given a list of length 15\"\n@assert add([4, 2, 6,\
    \ 7]) == 28 \"add() should return 28 given a list of length 16\"\n@assert add([4,\
    \ 2, 6, 7]) == 30 \"add() should return 30 given a list of length 17\"\n@assert\
    \ add([4, 2, 6, 7]) == 32 \"add() should return 32 given a list of length 18\"\
    \n@assert add([4, 2, 6, 7]) == 34 \"add() should return 34 given a list of length\
    \ 19\"\n@assert add([4, 2, 6, 7]) == 36 \"add() should return 36 given a list\
    \ of length 20\"\n@assert add([4, 2, 6, 7]) == 38 \"add() should return 38 given\
    \ a list of length 21\"\n@assert add([4, 2, 6, 7]) == 40 \"add() should return\
    \ 40 given a list of length 22\"\n@assert add([4, 2, 6, 7]) == 42 \"add() should\
    \ return ", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : (end)]\n \
    \   evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 != 0,\
    \ odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the product of all the numbers in a given list.",
  "    even = lst[1 :end]\n    odd = lst[2 :end]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even numbers in a list",
  "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2\
    \ != 0, lst)]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.4>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list.", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even elements in a list", " \
    \   even = lst[1 :end]\n    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return\
    \ even\nend", "    even = lst[1 :end]\n    odd = lst[2 :end]\n    return sum(even)\
    \ + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the even elements\
    \ in a list", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the numbers\
    \ in the list lst", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \"add() should return 1 given an empty list\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 3\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 4\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 5\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 6\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 7\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 8\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 9\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 10\"\n@assert\
    \ add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length 11\"\n\
    @assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length\
    \ 12\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of\
    \ length 13\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a\
    \ list of length 14\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2\
    \ given a list of length 15\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return\
    \ 2 given a list of length 16\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should\
    \ return 2 given a list of length 17\"\n@assert add([4, 2, 6, 7]) == 2 \"add()\
    \ should return 2 given a list of length 18\"\n@assert add([4, 2, 6, 7]) == 2\
    \ \"add() should return 2 given a list of length 19\"\n@assert add([4, 2, 6, 7])\
    \ == 2 \"add() should return 2 given a list of length 20\"\n@assert add([4, 2,\
    \ 6, 7]) == 2 \"add() should return 2 given a list of length 21\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 22\"\n@assert\
    \ add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of ", "    evens\
    \ = lst[1 : (end-1)]\n    odds = lst[(end-1) : end]\n    evens = filter(x -> x\
    \ % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements.", "    even = lst[1 : (end-1)]\n    odd = lst[2\
    \ : end]\n    even = even.+odd\n    return even\nend", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.+2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called subtract that takes two vectors of integers and returns the\
    \ difference between them.", "    even = lst[1 : (end-1)]\n    odd = lst[(end-1)\
    \ : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even numbers in a given list.",
  "    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = reduce(+, evens)\n    return evens\nend\n\
    </cell>\n<code language=julia-1.0>", "    evens = lst[findall(x -> x % 2 == 0,\
    \ lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n    return evens\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector and returns the sum of the squares\
    \ of the elements.", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.3>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements.", "    evens = lst[1 : (end-1)]\n  \
    \  evens = filter(x -> x % 2 == 0, evens)\n    return sum(evens)\nend", "    even\
    \ = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function called multiply that multiplies all the numbers in\
    \ a list by 2.", "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n\
    \    return even\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    return sum(evens)\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given list.", "   \
    \ even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a list. \nWrite a function that returns the sum of the odd numbers in a list.\
    \ \nWrite a function that returns the sum of the even numbers in a list and the\
    \ sum of the odd numbers in a list. \nWrite a function that returns the sum of\
    \ the even numbers in a list and the sum of the odd numbers in a list and the\
    \ sum of the even numbers in a list. \nWrite a function that returns the sum of\
    \ the even numbers in a list and the sum of the odd numbers in a list and the\
    \ sum of the even numbers in a list and the sum of the odd numbers in a list.\
    \ \nWrite a function that returns the sum of the even numbers in a list and the\
    \ sum of the odd numbers in a list and the sum of the even numbers in a list and\
    \ the sum of the odd numbers in a list and the sum of the even numbers in a list.\
    \ \nWrite a function that returns the sum of the even numbers in a list and the\
    \ sum of the odd numbers in a list and the sum of the even numbers in a list and\
    \ the sum of the odd numbers in a list and the sum of the even numbers in a list\
    \ and the sum of the odd numbers in a list. \nWrite a function that returns the\
    \ sum of the even numbers in a list and the sum of the odd numbers in a list and\
    \ the sum of the even numbers in a list and the sum of the odd numbers in a list\
    \ and the sum of the even numbers in a list and the sum of the odd numbers in\
    \ a list and the sum of the even numbers in a list. \nWrite a function that returns\
    \ the sum of the even numbers in a list and the sum of the odd numbers in a list\
    \ and the sum of the even numbers in a list and the sum of the odd numbers in\
    \ a list and the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list and the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list. \nWrite a function that returns the sum of the even numbers in a\
    \ list and the sum of the odd numbers in a list and the sum of the even numbers\
    \ in a list and the sum of the odd numbers in a list and the sum of the even numbers\
    \ in a list and the sum of the odd numbers in a list and the sum of the even numbers\
    \ in a list and the sum of the odd numbers in a list. \nWrite a function that\
    \ returns the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list and the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list and the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list and the sum of the even numbers in a list and the sum of the odd numbers\
    \ in a list. \nWrite a function that returns the sum of the even numbers in a\
    \ list and the sum of the odd numbers in a list and the sum of the even numbers\
    \ in a list and the sum", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1):end]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1,\
    \ odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n\
    \    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of all the numbers in a given list.", "    evens = lst[1 : (end-1)]\n\
    \    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n    odds\
    \ = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of a list of numbers.",
  "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even = even.+odd\n   \
    \ return even\nend\n</cell>\n<code language=julia-1.3>\n@assert add([1]) == 1;\n\
    @assert add([4, 2, 6, 7]) == 2;\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the numbers in the list lst.", "    evens = lst[1 :\
    \ (end-1)]\n    odds = lst[2 : end]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. For example, sum([1, 2,\
    \ 3]) should return 10. Make sure you use reduce to solve this problem.", "  \
    \  even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2\
    \ != 0, lst)]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector and returns the sum of the squares of the elements.", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    even\
    \ = collect(even)\n    odd = collect(odd)\n    even = sum(even)\n    odd = sum(odd)\n\
    \    return even + odd\nend\n</cell>\n<code language=julia-1.3>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ even numbers in a given list. For example, sum([4, 2, 6, 7]) == 2 + 4 + 6 +\
    \ 7.", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    return sum(even)\
    \ + sum(odd)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of all elements in a vector. \nWrite a function that returns the product\
    \ of all elements in a vector. \nWrite a function that returns the mean of all\
    \ elements in a vector. \nWrite a function that returns the median of all elements\
    \ in a vector. \nWrite a function that returns the mode of all elements in a vector.\
    \ \nWrite a function that returns the standard deviation of all elements in a\
    \ vector. \nWrite a function that returns the variance of all elements in a vector.\
    \ \nWrite a function that returns the minimum of all elements in a vector. \n\
    Write a function that returns the maximum of all elements in a vector. \nWrite\
    \ a function that returns the absolute maximum of all elements in a vector. \n\
    Write a function that returns the absolute minimum of all elements in a vector.\
    \ \nWrite a function that returns the absolute mean of all elements in a vector.\
    \ \nWrite a function that returns the absolute median of all elements in a vector.\
    \ \nWrite a function that returns the absolute mode of all elements in a vector.\
    \ \nWrite a function that returns the absolute standard deviation of all elements\
    \ in a vector. \nWrite a function that returns the absolute variance of all elements\
    \ in a vector. \nWrite a function that returns the absolute minimum of all elements\
    \ in a vector. \nWrite a function that returns the absolute maximum of all elements\
    \ in a vector. \nWrite a function that returns the absolute mean of all elements\
    \ in a vector. \nWrite a function that returns the absolute median of all elements\
    \ in a vector. \nWrite a function that returns the absolute mode of all elements\
    \ in a vector. \nWrite a function that returns the absolute standard deviation\
    \ of all elements in a vector. \nWrite a function that returns the absolute variance\
    \ of all elements in a vector. \nWrite a function that returns the absolute minimum\
    \ of all elements in a vector. \nWrite a function that returns the absolute maximum\
    \ of all elements in a vector. \nWrite a function that returns the absolute mean\
    \ of all elements in a vector. \nWrite a function that returns the absolute median\
    \ of all elements in a vector. \nWrite a function that returns the absolute mode\
    \ of all elements in a vector. \nWrite a function that returns the absolute standard\
    \ deviation of all elements in a vector. \nWrite a function that returns the absolute\
    \ variance of all elements in a vector. \nWrite a function that returns the absolute\
    \ minimum of all elements in a vector. \nWrite a function that returns the absolute\
    \ maximum of all elements in a vector. \nWrite a function that returns the absolute\
    \ mean of all elements in a vector. \nWrite a function that returns the absolute\
    \ median of all elements in a vector. \nWrite a function that returns the absolute\
    \ mode of all elements in a vector. \nWrite a function that returns the absolute\
    \ standard deviation of all elements in a vector. \nWrite a function that returns\
    \ the absolute variance of all elements in a vector. \nWrite a function that returns\
    \ the absolute minimum of all elements in a vector. \nWrite a function that returns\
    \ the absolute maximum of all elements in a vector", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ For example, add([1,2,3]) should return 9. Hint: use map()", "    evens = lst[1\
    \ : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x ->\
    \ x + 1, evens)\n    evens = reduce(+, evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([2, 3]) == 5 \n\
    @assert add([4, 5, 6]) == 10 \n@assert add([7, 8, 9]) == 17 \n@assert add([10,\
    \ 11, 12]) == 22 \n@assert add([13, 14, 15]) == 29 \n@assert add([16, 17, 18])\
    \ == 36 \n@assert add([19, 20, 21]) == 45 \n@assert add([22, 23, 24]) == 52 \n\
    @assert add([25, 26, 27]) == 59 \n@assert add([28, 29, 30]) == 66 \n@assert add([31,\
    \ 32, 33]) == 73 \n@assert add([34, 35, 36]) == 80 \n@assert add([37, 38, 39])\
    \ == 87 \n@assert add([40, 41, 42]) == 94 \n@assert add([43, 44, 45]) == 101 \n\
    @assert add([46, 47, 48]) == 107 \n@assert add([49, 50, 51]) == 114 \n@assert\
    \ add([52, 53, 54]) == 121 \n@assert add([55, 56, 57]) == 127 \n@assert add([58,\
    \ 59, 60]) == 134 \n@assert add([61, 62, 63]) == 141 \n@assert add([64, 65, 66])\
    \ == 148 \n@assert add([67, 68, 69]) == 155 \n@assert add([70, 71, 72]) == 162\
    \ \n@assert add([73, 74, 75]) == 169 \n@assert add([76, 77, 78]) == 176 \n@assert\
    \ add([79, 80, 81]) == 183 \n@assert add([82, 83, 84]) == 190 \n@assert add([85,\
    \ 86, 87]) == 197 \n@assert add([88, 89, 90]) == 204 \n@assert add([91, 92, 93])\
    \ == 211 \n@assert add([94, 95, 96]) == 218 \n@assert add([97, 98, 99]) == 225\
    \ \n@assert add([100, 101, 102]) == 232 \n@assert add([103, 104, 105]) == 239\
    \ \n@assert add([106, 107, 108]) == 24", "    even = lst[1 : (end-1)]\n    odd\
    \ = lst[2:end]\n    even.+ odd.\nend\n</cell>\n<code language=julia-1.5>\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that subtracts\
    \ the even elements that are at odd indices.", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sub that subtracts the even elements that are at odd indices.",
  "    even = lst[1::2]\n    odd = lst[1::2]\n    even = sum(even)\n    odd = sum(odd)\n\
    \    return even + odd\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ even numbers in a given list.", "    even = lst[1 :end] \n    odd = lst[2 :end]\
    \ \n    even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of all the elements\
    \ in a list.", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 3\nWrite a function called multiply that multiplies\
    \ all the numbers in a list together.", "    even = lst[1 :end] \n    odd = lst[2\
    \ :end] \n    even.+ odd.+ sum(even)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector and returns a vector where each element is the\
    \ sum of the elements before it.", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n\
    \    even = even.+odd\n    return even\nend\n</cell>\n<code language=julia-1.4>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ list of integers and returns the sum of the even elements that are at odd indices.",
  "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : (end)]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2,\
    \ 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the even numbers in a given list. \nWrite a function that returns the sum of\
    \ the odd numbers in a given list. \nWrite a function that returns the product\
    \ of the even numbers in a given list. \nWrite a function that returns the product\
    \ of the odd numbers in a given list. \nWrite a function that returns the maximum\
    \ of a given list. \nWrite a function that returns the minimum of a given list.\
    \ \nWrite a function that returns the product of the squares of the even numbers\
    \ in a given list. \nWrite a function that returns the product of the squares\
    \ of the odd numbers in a given list. \nWrite a function that returns the sum\
    \ of the squares of the even numbers in a given list. \nWrite a function that\
    \ returns the sum of the squares of the odd numbers in a given list. \nWrite a\
    \ function that returns the product of the squares of the even numbers in a given\
    \ list. \nWrite a function that returns the product of the squares of the odd\
    \ numbers in a given list. \nWrite a function that returns the sum of the cubes\
    \ of the even numbers in a given list. \nWrite a function that returns the sum\
    \ of the cubes of the odd numbers in a given list. \nWrite a function that returns\
    \ the product of the cubes of the even numbers in a given list. \nWrite a function\
    \ that returns the product of the cubes of the odd numbers in a given list. \n\
    Write a function that returns the sum of the reciprocals of the even numbers in\
    \ a given list. \nWrite a function that returns the sum of the reciprocals of\
    \ the odd numbers in a given list. \nWrite a function that returns the product\
    \ of the reciprocals of the even numbers in a given list. \nWrite a function that\
    \ returns the product of the reciprocals of the odd numbers in a given list. \n\
    Write a function that returns the sum of the reciprocals of the squares of the\
    \ even numbers in a given list. \nWrite a function that returns the sum of the\
    \ reciprocals of the squares of the odd numbers in a given list. \nWrite a function\
    \ that returns the product of the reciprocals of the squares of the even numbers\
    \ in a given list. \nWrite a function that returns the product of the reciprocals\
    \ of the squares of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the reciprocals of the cubes of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the reciprocals of the cubes of the\
    \ odd numbers in a given list. \nWrite a function that returns the product of\
    \ the reciprocals of the cubes of the even numbers in a given list. \nWrite a\
    \ function that ", "    even = lst[1 : (end-1)]\n    odd = lst[(end-1) : end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector and returns the sum of the squares of the elements.", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[2 : end]\n    even = sum(even)\n    odd = sum(odd)\n\
    \    return even + odd\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ even numbers in an array. \nWrite a function that returns the sum of the odd\
    \ numbers in an array.", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd\
    \ = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(even) + sum(odd)\nend\n\
    </cell>\n<code language=julia-1.4>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the product of all the numbers in a given list.",
  "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list. \n", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd\
    \ = lst[findall(x -> x % 2 != 0, lst)]\n    even.+=(odd.+.(even.-odd))\n    return\
    \ even\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the sum of the squares of the even elements of the vector.", " \
    \   evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x ->\
    \ x % 2 != 0, evens)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ even numbers in the list. \nWrite a function that takes a list of integers and\
    \ returns the sum of the odd numbers in the list.", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-2):end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the squares of the elements\
    \ in the vector.", "    even = lst[1 : (end-1)]\n    odd = lst[(end-1) : (end)]\n\
    \    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4,\
    \ 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the sum of the squares of the elements.", "    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the squares of the even numbers in a given\
    \ list.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = filter(x\
    \ -> x != 0, evens)\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the even numbers in a given list.", " \
    \   evens = lst[findall(x -> mod(x,2)==1, lst)]\n    evens = evens[2:end]\n  \
    \  evens = sum(evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in a given list.", "    even = lst[1 :\
    \ (end-1)]\n    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert add([1]) == 1 \n@assert add([2, 3]) == 5 \n\
    @assert add([4, 5, 6]) == 10 \n@assert add([7, 8, 9]) == 13 \n@assert add([10,\
    \ 11, 12, 13, 14, 15]) == 21 \n@assert add([16, 17, 18, 19, 20, 21, 22, 23, 24,\
    \ 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43,\
    \ 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,\
    \ 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81,\
    \ 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]) ==\
    \ 101 \n</cell>\n<text>\nExercise 3\nWrite a function called sub that subtracts\
    \ the even elements that are at odd indices from the odd elements that are at\
    \ even indices.", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.0>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the numbers in a given vector. Your function should work for both\
    \ vectors and matrices.", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the even\
    \ numbers in a given list.", "    even = lst[1 :] \n    odd = lst[2 :]\n    even.+\
    \ odd.\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector that are greater\
    \ than 10.", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the ",
  "    evens = lst[findall(x->x%2==0, lst)]\n    evens = evens[2:end]\n    evens =\
    \ map(add, evens)\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list.", "    evens = lst[1\
    \ : (end-1)]\n    odds = lst[(end-1) : (end)]\n    return sum(evens) + sum(odds)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 6\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the even numbers in a given list. For example, sum([4, 2, 6, 7]) == 6.", " \
    \   even = lst[1::2]\n    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend",
  "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the numbers in the\
    \ list lst that are divisible by 3.", "    even = lst[1 : (end-1)]\n    odd =\
    \ lst[2 : end]\n    return sum(even) + sum(odd)\nend", "    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 5\n</cell>\n\
    <text>\nExercise 4\nWrite a function called multiply that takes in a list of integers\
    \ and returns the product of the even elements that are at odd indices.", "  \
    \  evens = lst[findall(x -> mod(x,2)==0, lst)]\n    evens = evens[findall(x ->\
    \ mod(x,2)==1, lst)]\n    return sum(evens)\nend", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([1,2,3]) == 6 \n@assert\
    \ add([1,2,3,4,5]) == 10 \n@assert add([1,2,3,4,5,6,7,8,9,10]) == 15 \n@assert\
    \ add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ == 101 \n</cell>\n<text>\nExercise 2\nWrite a function called sub that takes\
    \ two vectors v1 and v2 as arguments and returns the difference between v1 and\
    \ v2. For example, v1 = [1,2,3] and v2 = [2,3,4] should return [1,2,0]. Write\
    \ a test that tests your function using @test. Make sure your function passes\
    \ all the tests.", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : (end)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1,\
    \ odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n\
    \    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4,\
    \ 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4,\
    \ 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ add([4, 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4,\
    \ 2, 6, 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6,\
    \ 7])\n</cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype add([4, 2, 6, 7])\n</cell>\n\
    <code language=julia-1.5>\n@code_", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n\
    \    return sum(even) + sum(odd)\nend", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even = sum(even)\n    odd = sum(odd)\n    return even + odd\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a list.", "    even = lst[1 : (end-1)]\n    odd = lst[(end-1) : (end)]\n\
    \    even.+=(odd.*2)\n    return even\nend", "    evens = lst[1 : (end-1)]\n \
    \   odds = lst[2 : end]\n    evens + sum(odds)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the even elements\
    \ and the sum of the odd elements.", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+ odd.\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sub that takes two vectors v1 and v2 as arguments and returns\
    \ the element-wise difference between them.", "    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    return sum(evens)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements.", "    even = lst[div(length(lst),2)]\n    lst\
    \ = lst[div(length(lst),2):end]\n    lst = lst + even\n    return sum(lst)\nend\n\
    </cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nGiven a non-empty list of integers lst. add the odd elements that are at\
    \ even indices..", "    even = lst[1::2]\n    odd = lst[1::2]\n    return sum(even)\
    \ + sum(odd)\nend\n</cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even elements\
    \ of a given list. \nWrite a function that returns the sum of the odd elements\
    \ of a given list. \nWrite a function that returns the sum of the even and odd\
    \ elements of a given list. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given list. \nWrite a function that returns the sum of\
    \ the even and odd elements of a given list. \nWrite a function that returns the\
    \ sum of the even and odd elements of a given list. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given list. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given list. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given list. \nWrite a\
    \ function that returns the sum of the even and odd elements of a given list.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ list. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given list. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given list. \nWrite a function that returns the sum of the even and odd\
    \ elements of a given list. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given list. \nWrite a function that returns the sum of\
    \ the even and odd elements of a given list. \nWrite a function that returns the\
    \ sum of the even and odd elements of a given list. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given list. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given list. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given list. \nWrite a\
    \ function that returns the sum of the even and odd elements of a given list.\
    \ \nWrite a function that returns the sum of the even and odd elements of a given\
    \ list. \nWrite a function that returns the sum of the even and odd elements of\
    \ a given list. \nWrite a function that returns the sum of the even and odd elements\
    \ of a given list. \nWrite a function that returns the sum of the even and odd\
    \ elements of a given list. \nWrite a function that returns the sum of the even\
    \ and odd elements of a given list. \nWrite a function that returns the sum of\
    \ the even and odd elements of a given list. \nWrite a function that returns the\
    \ sum of the even and odd elements of a given list. \nWrite a function that returns\
    \ the sum of the even and odd elements of a given list. \nWrite a function that\
    \ returns the sum of the even and odd elements of a given list. \nWrite a function\
    \ that returns the sum of the even and odd elements of a given list", "    even\
    \ = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 2\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector v of n integers and returns\
    \ a vector where each element is the sum of the elements with the same index.\
    \ For example, v = [1, 2, 3, 4, 5] should return a vector [3, 7].", "    evens\
    \ = lst[1 : (end-1)]\n    odds = lst[2 : end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    evens = reduce(+, evens)\n\
    \    odds = reduce(+, odds)\n    return evens + odds\nend", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \n@assert add([4, 2,\
    \ 6, 7]) == 2 \n@assert add([4, 2, 6, 7]) == 4 \n@assert add([4, 2, 6, 7]) ==\
    \ 6 \n@assert add([4, 2, 6, 7]) == 8 \n@assert add([4, 2, 6, 7]) == 10 \n@assert\
    \ add([4, 2, 6, 7]) == 12 \n@assert add([4, 2, 6, 7]) == 14 \n@assert add([4,\
    \ 2, 6, 7]) == 16 \n@assert add([4, 2, 6, 7]) == 18 \n@assert add([4, 2, 6, 7])\
    \ == 20 \n@assert add([4, 2, 6, 7]) == 22 \n@assert add([4, 2, 6, 7]) == 24 \n\
    @assert add([4, 2, 6, 7]) == 26 \n@assert add([4, 2, 6, 7]) == 28 \n@assert add([4,\
    \ 2, 6, 7]) == 30 \n@assert add([4, 2, 6, 7]) == 32 \n@assert add([4, 2, 6, 7])\
    \ == 34 \n@assert add([4, 2, 6, 7]) == 36 \n@assert add([4, 2, 6, 7]) == 38 \n\
    @assert add([4, 2, 6, 7]) == 40 \n@assert add([4, 2, 6, 7]) == 42 \n@assert add([4,\
    \ 2, 6, 7]) == 44 \n@assert add([4, 2, 6, 7]) == 46 \n@assert add([4, 2, 6, 7])\
    \ == 48 \n@assert add([4, 2, 6, 7]) == 50 \n@assert add([4, 2, 6, 7]) == 52 \n\
    @assert add([4, 2, 6, 7]) == 54 \n@assert add([4, 2, 6, 7]) == 56 \n@assert add([4,\
    \ 2, 6, 7]) == 58 \n@assert add([4, 2, 6, 7]) == 60 \n@assert add([4, 2, 6, 7])\
    \ == 62 \n@assert add([4, 2, 6, 7]) == 64 \n@assert add([4, 2, 6, 7]) == 66 \n\
    @assert add([4, 2, 6, 7]) == 68 \n@assert add([4, 2, 6, 7]) == 70 \n@assert add([4,\
    \ 2, 6, 7]) == 72 \n@assert add([4, 2, 6, 7]) == 74 \n@assert add([4, 2, 6, 7])\
    \ == 76 \n@assert add([4, 2, 6, 7]) == 78 \n@assert add([4, 2, 6, 7]) == 80 \n\
    @assert add([4, ", "    even = lst[1 : (end-1)]\n    odd = lst[(end-1) : end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend", "    even\
    \ = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7]))\
    \ == 5\n</cell>\n<text>\nExercise 2\nWrite a function called sub that subtracts\
    \ the even elements that are at odd indices.", "    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(even\
    \ + odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ even numbers in an array. For example, add([4, 2, 6, 7]) should return 24.",
  "    even = lst[1 :end]\n    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1;\n@assert\
    \ add([1,2,3]) == 3;\n@assert add([1,2,3,4,5]) == 10;\n@assert add([1,2,3,4,5,6,7,8,9,10])\
    \ == 55;\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of\
    \ the numbers in a vector. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. \nThe\
    \ function should work for both real and complex numbers. \nThe function should\
    \ work for both real and complex numbers. \nThe function should work for both\
    \ real and complex numbers. \nThe function should work for both real and complex\
    \ numbers. \nThe function should work for both real and complex numbers. ", " \
    \   evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n   \
    \ evens = sum(evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..", "    evens = lst[1 :\
    \ (end-1)]\n    odds = lst[2:end]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n\
    <code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the squares of the even\
    \ elements of the vector.", "    even = lst[1 :end]\n    odd = lst[2 :end]\n \
    \   even.+ odd.+\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a list. For example, sum([4, 2, 6, 7]) == 2.",
  "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2\
    \ != 0, lst)]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called multiply\
    \ that takes in two vectors of integers and multiplies them elementwise.", " \
    \   evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = filter(x -> x != 0,\
    \ evens)\n    even", "    even = lst[1 :end] \n    odd = lst[2 :end] \n    even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.+ even.+\
    \ odd.+ even.+ odd.+ even.+ odd.+ even.+ odd.", "    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return sum(even)\
    \ + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of the even elements\
    \ of lst", "    even = lst[1 :end] \n    odd = lst[2 :end] \n    even.+ odd.+\
    \ \nend\n</code>\n<|/ a tags=julia,list |>\n<| a |>\n<code>", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    evens = sum(evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \"add() should return 1 given\
    \ an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ [4, 2, 6, 7]\"\n@", "    even = lst[1 :end]\n    odd = lst[2 :end]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.0>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the numbers in the list lst that are divisible by 3.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \"add() should\
    \ return 1 for an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should\
    \ return 2 for [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 4 \"add() should return\
    \ 4 for [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 6 \"add() should return 6\
    \ for [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 8 \"add() should return 8 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 10 \"add() should return 10 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 12 \"add() should return 12 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 14 \"add() should return 14 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 16 \"add() should return 16 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 18 \"add() should return 18 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 20 \"add() should return 20 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 22 \"add() should return 22 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 24 \"add() should return 24 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 26 \"add() should return 26 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 28 \"add() should return 28 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 30 \"add() should return 30 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 32 \"add() should return 32 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 34 \"add() should return 34 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 36 \"add() should return 36 for\
    \ [4, 2, 6, 7]\"\n@assert add([4, 2, 6, 7]) == 38 \"add() should return 38 for\
    \ [4, 2, 6, 7]\"\n@", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1 \"\
    add() should return 1 given an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"\
    add() should return 2 given a list of length 2\"\n@assert add([4, 2, 6, 7, 8])\
    \ == 5 \"add() should return 5 given a list of length 3\"\n@assert add([4, 2,\
    \ 6, 7]) == 6 \"add() should return 6 given a list of length 4\"\n@assert add([4,\
    \ 2, 6, 7]) == 7 \"add() should return 7 given a list of length 5\"\n@assert add([4,\
    \ 2, 6, 7]) == 8 \"add() should return 8 given a list of length 6\"\n@assert add([4,\
    \ 2, 6, 7]) == 9 \"add() should return 9 given a list of length 7\"\n@assert add([4,\
    \ 2, 6, 7]) == 10 \"add() should return 10 given a list of length 8\"\n@assert\
    \ add([4, 2, 6, 7]) == 11 \"add() should return 11 given a list of length 9\"\n\
    @assert add([4, 2, 6, 7]) == 12 \"add() should return 12 given a list of length\
    \ 10\"\n@assert add([4, 2, 6, 7]) == 13 \"add() should return 13 given a list\
    \ of length 11\"\n@assert add([4, 2, 6, 7]) == 14 \"add() should return 14 given\
    \ a list of length 12\"\n@assert add([4, 2, 6, 7]) == 15 \"add() should return\
    \ 15 given a list of length 13\"\n@assert add([4, 2, 6, 7]) == 16 \"add() should\
    \ return 16 given a list of length 14\"\n@assert add([4, 2, 6, 7]) == 17 \"add()\
    \ should return 17 given a list of length 15\"\n@assert add([4, 2, 6, 7]) == 18\
    \ \"add() should return 18 given a list of length 16\"\n@assert add([4, 2, 6,\
    \ 7]) == 19 \"add() should return 19 given a list of length 17\"\n@assert add([4,\
    \ 2, 6, 7]) == 20 \"add() should return 20 given a list of length 18\"\n@assert\
    \ add([4, 2, 6, 7]) == 21 \"add() should return 21 given a list of length 19\"\
    \n@assert add([4, 2, 6, 7]) == 22 \"add() should return 22 given a list of length\
    \ 20\"\n@assert add([4, 2, 6, 7]) == 23 \"add() should return 23 given a list\
    \ of length 21\"\n@assert ", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n\
    \    return even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the numbers\
    \ in the list lst. \nIf the list is empty return 0.", "    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector and returns the sum of the squares of the even\
    \ numbers in the vector.", "    even = lst[findall(lst .%2 == 0)]\n    odd = lst[findall(lst\
    \ .%2 == 1)]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.4>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of a list of integers. \nThe function should work for any number\
    \ of integers in the list.", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list.", "    even = lst[1\
    \ :end]\n    odd = lst[2 :end]\n    even = even + sum(odd)\n    return even\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the even elements. \nWrite a function that takes a vector and returns\
    \ the sum of the odd elements. \nWrite a function that takes a vector and returns\
    \ the sum of the even and odd elements. \nWrite a function that takes a vector\
    \ and returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the ", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function called multiply\
    \ that multiplies all elements of a list by 2.", "    evens = lst[findall(x ->\
    \ mod(x,2)==0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend", " \
    \   even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x %\
    \ 2 != 0, lst)]\n    sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype add(lst)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list. \nWrite a function that returns\
    \ the sum of the odd numbers in a given list. \nWrite a function that returns\
    \ the sum of the even numbers in a given list and the sum of the odd numbers in\
    \ a given list. \nWrite a function that returns the sum of the even numbers in\
    \ a given list and the sum of the odd numbers in a given list and the sum of the\
    \ even numbers in a given list. \nWrite a function that returns the sum of the\
    \ even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list. \nWrite a function that returns the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list and the sum of the even numbers in a given list and the sum\
    \ of the odd numbers in a given list and the sum of the even numbers in a given\
    \ list and the sum of the odd numbers in a given list and the sum of the even\
    \ numbers in a given list and the sum of the odd numbers in a given list and the\
    \ sum of the even numbers in a given list and the sum of the odd numbers in a\
    \ given list and the sum of the even numbers in a given list and the sum of the\
    \ odd numbers in a given list and the sum of the even numbers in a given list\
    \ and the sum of the odd numbers in a given list and the sum of the even numbers\
    \ in a given list and the sum of the odd numbers in a given list and the sum of\
    \ the even numbers in a given list and the sum of the odd numbers in a given list\
    \ and the sum of the even numbers in a given list and the sum of the odd numbers\
    \ in a given list and the sum of the even numbers in a given list and the sum\
    \ of the odd numbers in a given list and the sum of the even numbers in a given\
    \ list and the sum of the odd numbers in a given list and the sum of the even\
    \ numbers in a given list and the sum of the odd numbers in a given list and the\
    \ sum of the even numbers in a given list and the sum of the odd numbers in a\
    \ given list and the sum of the even numbers in a given list and the sum of the\
    \ odd numbers in a given list and the sum", "    evens = lst[1 : (end-1)]\n  \
    \  odds = lst[(end-1) : end]\n    evens = filter(x -> x % 2 == 0, evens)\n   \
    \ odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n \
    \   odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x -\
    \ 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens\
    \ = map(x -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x\
    \ -> x + 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x +\
    \ 1, evens)\n    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds\
    \ = map(x -> x - 1, odds)\n    evens = map(x -> x + 1, evens)\n    odds = map(x\
    \ -> x - 1, odds)\n    evens = ", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called multiply\
    \ that multiplies all elements in a list by 2.", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called multiply that takes in a list of integers and multiplies\
    \ each element by 2.", "    even = lst[1 : (end-1)]\n    odd = lst[(end-1) : end]\n\
    \    even.+=(odd.*2)\n    return even\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the squares of the elements.",
  "    even = lst[1 :end]\n    odd = lst[2 :end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the even elements of the vector", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function called sub that subtracts the even elements that are at odd indices\
    \ from the even elements that are at even indices.", "    evens = lst[1 : (end-1)]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens\
    \ = map(x -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x\
    \ + 1, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x -> x + 1,\
    \ evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(", "    evens =\
    \ lst[findall(x->x%2==0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n\
    \    return evens\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 1 \"add([1,2]) should return 1\"\n@assert add([1,2]) == 2 \"add([1,2]) should\
    \ return 2\"\n@assert add([1,2,3]) == 3 \"add([1,2,3]) should return 3\"\n@assert\
    \ add([1,2,3,4]) == 4 \"add([1,2,3,4]) should return 4\"\n@assert add([1,2,3,4])\
    \ == 5 \"add([1,2,3,4]) should return 5\"\n@assert add([1,2,3,4]) == 6 \"add([1,2,3,4])\
    \ should return 6\"\n@assert add([1,2,3,4]) == 7 \"add([1,2,3,4]) should return\
    \ 7\"\n@assert add([1,2,3,4]) == 8 \"add([1,2,3,4]) should return 8\"\n@assert\
    \ add([1,2,3,4]) == 9 \"add([1,2,3,4]) should return 9\"\n@assert add([1,2,3,4])\
    \ == 10 \"add([1,2,3,4]) should return 10\"\n@assert add([1,2,3,4]) == 11 \"add([1,2,3,4])\
    \ should return 11\"\n@assert add([1,2,3,4]) == 12 \"add([1,2,3,4]) should return\
    \ 12\"\n@assert add([1,2,3,4]) == 13 \"add([1,2,3,4]) should return 13\"\n@assert\
    \ add([1,2,3,4]) == 14 \"add([1,2,3,4]) should return 14\"\n@assert add([1,2,3,4])\
    \ == 15 \"add([1,2,3,4]) should return 15\"\n@assert add([1,2,3,4]) == 16 \"add([1,2,3,4])\
    \ should return 16\"\n@assert add([1,2,3,4]) == 17 \"add([1,2,3,4]) should return\
    \ 17\"\n@assert add([1,2,3,4]) == 18 \"add([1,2,3,4]) should return 18\"\n@assert\
    \ add([1,2,3,4]) == 19 \"add([1,2,3,4]) should return 19\"\n@assert add([1,2,3,4])\
    \ == 20 \"add([1,2,3,4]) should return 20\"\n@assert add([1,2,3,4]) == 21 \"add([1,2,3,4])\
    \ should return 21\"\n@assert add([1,2,3,4]) == 22 \"add([1,2,3,4]) should return\
    \ 22\"\n@assert add([1,2,3,4]) == 23 \"add([1,2,3,4]) should return 23\"\n@assert\
    \ add([1,2,3,4]) == 24 \"add([1,2,3,4]) should return 24\"\n@assert add([1,2,3,4])\
    \ == 25 \"add([1,2,3,4]) should return 25", "    even = lst[1 : (end-1)]\n   \
    \ odd = lst[(end-1) : (end)]\n    even.+=(odd.+0)\n    return even\nend", "  \
    \  even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2\
    \ != 0, lst)]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the even numbers in the vector.",
  "    even = lst[1 :end] \n    odd = lst[2 :end] \n    even.+ odd.+ sum(even)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4, 2, 6, 7])) ==\
    \ 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the\
    \ even numbers in a given list of integers. \nWrite a function that returns the\
    \ sum of the odd numbers in a given list of integers. \nWrite a function that\
    \ returns the product of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the product of the odd numbers in a given list of integers.\
    \ \nWrite a function that returns the maximum of a given list of integers. \n\
    Write a function that returns the minimum of a given list of integers. \nWrite\
    \ a function that returns the product of the squares of the even numbers in a\
    \ given list of integers. \nWrite a function that returns the product of the squares\
    \ of the odd numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the sum of the squares of the odd numbers in a given\
    \ list of integers. \nWrite a function that returns the product of the squares\
    \ of the even numbers in a given list of integers. \nWrite a function that returns\
    \ the product of the squares of the odd numbers in a given list of integers. \n\
    Write a function that returns the sum of the cubes of the even numbers in a given\
    \ list of integers. \nWrite a function that returns the sum of the cubes of the\
    \ odd numbers in a given list of integers. \nWrite a function that returns the\
    \ product of the cubes of the even numbers in a given list of integers. \nWrite\
    \ a function that returns the product of the cubes of the odd numbers in a given\
    \ list of integers. \nWrite a function that returns the sum of the reciprocals\
    \ of the even numbers in a given list of integers. \nWrite a function that returns\
    \ the sum of the reciprocals of the odd numbers in a given list of integers. \n\
    Write a function that returns the product of the reciprocals of the even numbers\
    \ in a given list of integers. \nWrite a function that returns the product of\
    \ the reciprocals of the odd numbers in a given list of integers. \nWrite a function\
    \ that returns the sum of the reciprocals of the squares of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the sum of the reciprocals\
    \ of the squares of the odd numbers in a given list of integers. \nWrite a function\
    \ that returns the product of the reciprocals of the squares of the even numbers\
    \ in a given list of integers. \nWrite a function that returns the product of\
    \ the reciprocals of the squares of the odd numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the reciprocals of the cubes of the\
    \ even numbers in a given list of integers. \nWrite a function that returns the\
    \ sum of the reciprocals of the cubes of the odd numbers in a given list of integers.\
    \ \nWrite a function that returns the product of the reciprocals of the cubes\
    \ of the even ", "    even = lst[1 :end] \n    odd = lst[2 :end] \n    return\
    \ sum(even .+ odd)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even elements of a given list.", "    evens = lst[1 : (end-1)]\n\
    \    odds = lst[(end-1) : (end)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x -> x + 1, evens)\n\
    \    odds = map(x -> x + 1, odds)\n    evens = reduce(add, evens)\n    odds =\
    \ reduce(add, odds)\n    return evens + odds\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the even numbers in a given list", "    evens = lst[findall(x->x%2==0,\
    \ lst)]\n    evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst, return the sum of the factorial of each number\
    \ in the list. Factorial of a number is the number of times that we can divide\
    \ it by itself without remainder.", "    even = lst[1 : (end-1)]\n    odd = lst[2\
    \ : end]\n    even = sum(even)\n    odd = sum(odd)\n    return even + odd\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function called multiply that multiplies all elements in a list by\
    \ 2.", "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n\
    \    return even\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the sum of the squares of the elements in the vector.",
  "    evens = lst[1 : (end-1)]\n    odds = lst[2 : end]\n    evens = filter(x ->\
    \ x % 2 == 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of a list of numbers.", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of a list of integers lst. For example,\
    \ prod([4, 2, 6, 7]) == 24", "    evens = lst[findall(x -> mod(x,2) == 0, lst)]\n\
    \    return sum(evens)\nend\n</cell>\n<code language=julia-1.4>\n@assert add([1])\
    \ == 1 \n@assert add([1,2]) == 3\n@assert add([1,2,3]) == 6\n@assert add([1,2,3,4])\
    \ == 10\n@assert add([1,2,3,4,5]) == 15\n@assert add([1,2,3,4,5,6]) == 21\n@assert\
    \ add([1,2,3,4,5,6,7]) == 28\n@assert add([1,2,3,4,5,6,7,8]) == 36\n@assert add([1,2,3,4,5,6,7,8,9])\
    \ == 45\n@assert add([1,2,3,4,5,6,7,8,9,10]) == 54\n@assert add([1,2,3,4,5,6,7,8,9,10,11])\
    \ == 63\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12]) == 72\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13])\
    \ == 81\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == 90\n@assert add([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\
    \ == 100\n</cell>\n<text>\nExercise 2\nWrite a function called sumsq that takes\
    \ in a list of integers and returns the sum of the squares of the numbers in the\
    \ list.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x\
    \ -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n    evens = sum(evens)\n \
    \   return evens\nend\n</cell>\n<code language=julia-1.5>\n@time add([4, 2, 6,\
    \ 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers lst. add\
    \ the odd elements that are at even indices..", "    even = lst[findall(x -> x\
    \ % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    sum(even)\
    \ + sum(odd)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the even numbers in a list.", "    even = lst[1 : (end-1)]\n    odd\
    \ = lst[2:end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sub that subtracts the even elements that are at odd indices\
    \ from the given list. For example, given lst = [4, 2, 6, 7], the function should\
    \ return [3, 3, 2, 1].", "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n\
    \    return sum(even) + sum(odd)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers lst and returns the sum of the even elements that\
    \ are at odd indices.", "    even = lst[1 : (end-1)]\n    odd = lst[(end-1) :\
    \ end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.0>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the even elements that are at odd\
    \ indices.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = sum(evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    @time add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the number of elements that are not equal to zero.", " \
    \   evens = lst[1 : (end-1)]\n    odds = lst[(end-1):end]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices from the even elements that\
    \ are at even indices.", "    even = lst[1 :end] \n    odd = lst[2 :end] \n  \
    \  return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even numbers in a given list.", "    even\
    \ = lst[1 : (end-1)]\n    odd = lst[(end-2):end]\n    return sum(even) + sum(odd)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert add([4, 2, 6, 7]) == 5\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in the\
    \ list lst that are divisible by 3.", "    even = lst[1::2]\n    odd = lst[1::2]\n\
    \    even.+ odd.+\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) ==\
    \ 1 # Passed\n@assert add([2, 3]) == 5 # Passed\n@assert add([4, 5, 6]) == 10\
    \ # Passed\n@assert add([7, 8, 9]) == 13 # Passed\n@assert add([10, 11, 12]) ==\
    \ 17 # Passed\n@assert add([13, 14, 15]) == 21 # Passed\n@assert add([16, 17,\
    \ 18]) == 24 # Passed\n@assert add([19, 20, 21]) == 29 # Passed\n@assert add([22,\
    \ 23, 24]) == 34 # Passed\n@assert add([25, 26, 27]) == 39 # Passed\n@assert add([28,\
    \ 29, 30]) == 43 # Passed\n@assert add([31, 32, 33]) == 48 # Passed\n@assert add([34,\
    \ 35, 36]) == 51 # Passed\n@assert add([37, 38, 39]) == 55 # Passed\n@assert add([40,\
    \ 41, 42]) == 60 # Passed\n@assert add([43, 44, 45]) == 65 # Passed\n@assert add([46,\
    \ 47, 48]) == 70 # Passed\n@assert add([49, 50, 51]) == 75 # Passed\n@assert add([52,\
    \ 53, 54]) == 80 # Passed\n@assert add([55, 56, 57]) == 85 # Passed\n@assert add([58,\
    \ 59, 60]) == 90 # Passed\n@assert add([61, 62, 63]) == 95 # Passed\n@assert add([64,\
    \ 65, 66]) == 100 # Passed\n@assert add([67, 68, 69]) == 105 # Passed\n@assert\
    \ add([70, 71, 72]) == 110 # Passed\n@assert add([73, 74, 75]) == 115 # Passed\n\
    @assert add([76, 77, 78]) == 120 # Passed\n@assert add([79, 80, 81]) == 125 #\
    \ Passed\n@assert add([82, 83, 84]) == 130 # Passed\n@assert add([85, 86, 87])\
    \ == 135 # Passed\n@assert add([88, 89, 90]) == 140 # Passed\n@assert add([91,\
    \ 92, 93]) == 145 # Passed\n@assert add([94, 95, ", "    even = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2 != 0, lst)]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given list.", "    even =\
    \ lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return even\n\
    end\n</cell>\n<code language=julia-1.0>\n@time add([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the even numbers in a given\
    \ list.", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1) : (end)]\n   \
    \ evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n\
    \    evens = map(x -> x + 1, evens)\n    odds = map(x -> x + 1, odds)\n    return\
    \ sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2,\
    \ 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that subtracts\
    \ the even elements that are at odd indices from the even elements that are at\
    \ even indices.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens =\
    \ filter(x -> x != 0, evens)\n    evens = map(x -> x + 1, evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even numbers in a given\
    \ list.", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n\
    \    evens = sum(evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a non-empty list of integers\
    \ lst. add the odd elements that are at even indices..", "    even = lst[1::2]\n\
    \    odd = lst[1::2]\n    even = sum(even)\n    odd = sum(odd)\n    return even\
    \ + odd\nend\n</cell>\n<code language=julia-1.5>\n@assert add([1]) == 1;\n@assert\
    \ add([4, 2, 6, 7]) == 2;\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given list.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    return sum(evens)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \"add() should return 1 given\
    \ an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ a list of length 3\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2\
    \ given a list of length 4\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return\
    \ 2 given a list of length 5\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should\
    \ return 2 given a list of length 6\"\n@assert add([4, 2, 6, 7]) == 2 \"add()\
    \ should return 2 given a list of length 7\"\n@assert add([4, 2, 6, 7]) == 2 \"\
    add() should return 2 given a list of length 8\"\n@assert add([4, 2, 6, 7]) ==\
    \ 2 \"add() should return 2 given a list of length 9\"\n@assert add([4, 2, 6,\
    \ 7]) == 2 \"add() should return 2 given a list of length 10\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 11\"\n@assert\
    \ add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length 12\"\n\
    @assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of length\
    \ 13\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a list of\
    \ length 14\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given a\
    \ list of length 15\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2\
    \ given a list of length 16\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return\
    \ 2 given a list of length 17\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should\
    \ return 2 given a list of length 18\"\n@assert add([4, 2, 6, 7]) == 2 \"add()\
    \ should return 2 given a list of length 19\"\n@assert add([4, 2, 6, 7]) == 2\
    \ \"add() should return 2 given a list of length 20\"\n@assert add([4, 2, 6, 7])\
    \ == 2 \"add() should return 2 given a list of length 21\"\n@assert add([4, 2,\
    \ 6, 7]) == 2 \"add() should return 2 given a list of length 22\"\n@assert add([4,\
    \ 2, 6, 7]) == 2 \"add() should return 2 given a list of length 23\"\n@assert\
    \ add([4, ", "    even = lst[1::2]\n    odd = lst[2::2]\n    return sum(even)\
    \ + sum(odd)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    evens = sum(evens)\n   \
    \ return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in the given list. For example, sum([4, 9, 16]) should return 50.",
  "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n    return even\n\
    end", "    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    evens = map(x -> x % 2 == 0, evens)\n\
    \    evens = map(x -> x + 1, evens)\n    return sum(evens)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nGiven a\
    \ non-empty list of integers lst. add the odd elements that are at even indices..",
  "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd)\n    return\
    \ even\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the numbers in the list lst that have even indices.", "    even = lst[findall(lst\
    \ .% 2 == 0)]\n    odd = lst[findall(lst .% 2 != 0)]\n    even.+ odd.\nend\n</cell>\n\
    <code language=julia-1.3>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given list.", "   \
    \ even = lst[1 : (end-1)]\n    odd = lst[(end-1) : (end)]\n    return sum(even)\
    \ + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the even elements\
    \ in a given list. \nWrite a function that returns the sum of the odd elements\
    \ in a given list. \nWrite a function that returns the product of the even elements\
    \ in a given list. \nWrite a function that returns the product of the odd elements\
    \ in a given list. \nWrite a function that returns the maximum of a given list.\
    \ \nWrite a function that returns the minimum of a given list. \nWrite a function\
    \ that returns the product of the squares of the even elements in a given list.\
    \ \nWrite a function that returns the product of the squares of the odd elements\
    \ in a given list. \nWrite a function that returns the sum of the squares of the\
    \ even elements in a given list. \nWrite a function that returns the sum of the\
    \ squares of the odd elements in a given list. \nWrite a function that returns\
    \ the product of the squares of the even elements in a given list. \nWrite a function\
    \ that returns the product of the squares of the odd elements in a given list.\
    \ \nWrite a function that returns the sum of the cubes of the even elements in\
    \ a given list. \nWrite a function that returns the sum of the cubes of the odd\
    \ elements in a given list. \nWrite a function that returns the product of the\
    \ cubes of the even elements in a given list. \nWrite a function that returns\
    \ the product of the cubes of the odd elements in a given list. \nWrite a function\
    \ that returns the sum of the reciprocals of the even elements in a given list.\
    \ \nWrite a function that returns the sum of the reciprocals of the odd elements\
    \ in a given list. \nWrite a function that returns the product of the reciprocals\
    \ of the even elements in a given list. \nWrite a function that returns the product\
    \ of the reciprocals of the odd elements in a given list. \nWrite a function that\
    \ returns the sum of the reciprocals of the squares of the even elements in a\
    \ given list. \nWrite a function that returns the sum of the reciprocals of the\
    \ squares of the odd elements in a given list. \nWrite a function that returns\
    \ the product of the reciprocals of the squares of the even elements in a given\
    \ list. \nWrite a function that returns the product of the reciprocals of the\
    \ squares of the odd elements in a given list. \nWrite a function that returns\
    \ the sum of the reciprocals of the cubes of the even elements in a given list.\
    \ \nWrite a function that returns the sum of the reciprocals of the cubes of the\
    \ odd elements in a given list. \nWrite a function that returns the product of\
    \ the reciprocals of the cubes of the even elements in a given list. \nWrite a\
    \ function that returns the product of the reciprocals of the cubes of the odd\
    \ elements in a given list. \nWrite a function that returns the sum of the reciprocals\
    \ of the square", "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    return\
    \ sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite a function called add_all\
    \ that takes in a list of integers and returns the sum of all elements.", "  \
    \  evens = lst[1 : (end-1)]\n    odds = lst[2 : end]\n    evens = filter(x ->\
    \ x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    evens = map(x\
    \ -> x + 2, evens)\n    odds = map(x -> x + 1, odds)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the squares of the even numbers in a given list.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   evens = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function called sub that\
    \ subtracts the even elements that are at odd indices.", "    even = lst[1 :end]\n\
    \    odd = lst[2 :end]\n    even = even.+odd\n    return even\nend\n</cell>\n\
    <code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the even numbers in a given list.", "   \
    \ even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x -> x % 2\
    \ != 0, lst)]\n    even = even[findall(x -> x % 2 == 0, even)]\n    odd = odd[findall(x\
    \ -> x % 2 != 0, odd)]\n    even = sum(even)\n    odd = sum(odd)\n    return even\
    \ + odd\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector v of length n and returns\
    \ a vector where each element is the sum of the elements at the corresponding\
    \ indices in v.", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd = lst[findall(x\
    \ -> x % 2 != 0, lst)]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even numbers in a given list of integers.\
    \ \nWrite a function that returns the sum of the odd numbers in a given list of\
    \ integers. \nWrite a function that returns the product of the even numbers in\
    \ a given list of integers. \nWrite a function that returns the product of the\
    \ odd numbers in a given list of integers. \nWrite a function that returns the\
    \ maximum of a given list of integers. \nWrite a function that returns the minimum\
    \ of a given list of integers. \nWrite a function that returns the product of\
    \ the even numbers in a given list of integers where the even numbers are greater\
    \ than the odd numbers. \nWrite a function that returns the product of the odd\
    \ numbers in a given list of integers where the odd numbers are greater than the\
    \ even numbers. \nWrite a function that returns the product of the even numbers\
    \ in a given list of integers where the even numbers are less than the odd numbers.\
    \ \nWrite a function that returns the product of the odd numbers in a given list\
    \ of integers where the odd numbers are less than the even numbers. \nWrite a\
    \ function that returns the product of the even numbers in a given list of integers\
    \ where the even numbers are equal to the odd numbers. \nWrite a function that\
    \ returns the product of the odd numbers in a given list of integers where the\
    \ odd numbers are equal to the even numbers. \nWrite a function that returns the\
    \ product of the even numbers in a given list of integers where the even numbers\
    \ are less than the odd numbers. \nWrite a function that returns the product of\
    \ the odd numbers in a given list of integers where the odd numbers are less than\
    \ the even numbers. \nWrite a function that returns the product of the even numbers\
    \ in a given list of integers where the even numbers are greater than the odd\
    \ numbers. \nWrite a function that returns the product of the odd numbers in a\
    \ given list of integers where the odd numbers are greater than the even numbers.\
    \ \nWrite a function that returns the product of the even numbers in a given list\
    \ of integers where the even numbers are equal to the odd numbers. \nWrite a function\
    \ that returns the product of the odd numbers in a given list of integers where\
    \ the odd numbers are equal to the even numbers. \nWrite a function that returns\
    \ the product of the even numbers in a given list of integers where the even numbers\
    \ are less than the odd numbers. \nWrite a function that returns the product of\
    \ the odd numbers in a given list of integers where the odd numbers are less than\
    \ the even numbers. \nWrite a function that returns the product of the even numbers\
    \ in a given list of integers where the even numbers are greater than the odd\
    \ numbers. \nWrite a function that returns the product of the odd numbers in a\
    \ given list of integers where the odd numbers are greater than the even ", " \
    \   evens = lst[findall(x->x%2==0, lst)]\n    evens = evens[2:end]\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the even numbers\
    \ in a list. For example, sum([4, 2, 6, 7]) == 6.", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    even.+ odd.\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sum that takes in a list of numbers and returns the sum of\
    \ those numbers. If the list is empty return 0.", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[(end-2):end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite a function that takes a vector and\
    \ returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector. \nWrite ", "    even = lst[1::2]\n    odd\
    \ = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2,\
    \ 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4,\
    \ 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int",
  "    evens = lst[1 : (end-1)]\n    evens = filter(x -> x % 2 == 0, evens)\n    return\
    \ sum(evens)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of all the numbers\
    \ in a vector. \nFor example, prod([1, 2, 3]) should return 6. \nWrite a function\
    \ that returns the sum of the numbers in a vector. \nFor example, sum([1, 2, 3])\
    \ should return 6. \nWrite a function that returns the maximum of a vector. \n\
    For example, max([1, 2, 3]) should return 3. \nWrite a function that returns the\
    \ minimum of a vector. \nFor example, min([1, 2, 3]) should return 1. \nWrite\
    \ a function that returns the product of all the numbers in a vector. \nFor example,\
    \ prod([1, 2, 3]) should return 6. \nWrite a function that returns the sum of\
    \ the numbers in a vector. \nFor example, sum([1, 2, 3]) should return 6. \nWrite\
    \ a function that returns the maximum of a vector. \nFor example, max([1, 2, 3])\
    \ should return 3. \nWrite a function that returns the minimum of a vector. \n\
    For example, min([1, 2, 3]) should return 1. ", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[2:end]\n    even = even + odd\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the odd numbers in a given list.\
    \ \nWrite a function that returns the product of the even numbers in a given list.\
    \ \nWrite a function that returns the product of the odd numbers in a given list. ",
  "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ integers and returns the sum of the even elements that are at odd indices.",
  "    evens = lst[1 : (end-1)]\n    odds = lst[2 : end]\n    evens = filter(x ->\
    \ x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1, odds)\n    return sum(evens)\
    \ + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the sum of\
    \ the squares of the elements of the vector.", "    even = lst[1::2]\n    odd\
    \ = lst[1::2]\n    even.+=(odd.+=0)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add(Vector{Int64}([4, 2, 6, 7])) == 4\n@assert add(Vector{Int64}([4, 2,\
    \ 6, 7])) == 4\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the elements of a vector. For example, sum([1, 2, 3]) should return 6.\
    \ Make sure you use sum, not sum!.", "    even = lst[1 :end] \n    odd = lst[2\
    \ :end] \n    even.+ odd.+ sum(even.-odd)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of numbers and returns the sum of the squares\
    \ of the even numbers.", "    evens = lst[1 : (end-1)]\n    odds = lst[2:end]\n\
    \    evens = filter(x -> x % 2 == 0, evens)\n    odds = filter(x -> x % 2 == 1,\
    \ odds)\n    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the even numbers in a given list.", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.0>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even numbers in a given list.\
    \ For example, sum([4, 2, 6, 7]) == 6.", "    even = lst[1 : (end-1)]\n    odd\
    \ = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1\
    \ \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert\
    \ add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1]) == 1 \n@assert add([1])\
    \ == 1 ", "    evens = lst[findall(x->mod(x,2)==1,lst)]\n    evens = evens[findall(x\
    \ -> x % 2 == 0, evens)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n\
    \    evens = evens[2:end]\n    evens = sum(evens)\n    return evens\nend\n</cell>\n\
    <code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called sum2 that takes in a list of integers and returns the sum\
    \ of the even numbers in the list.", "    even = lst[1 :end] \n    odd = lst[2\
    \ :end] \n    even.+ odd.+ \nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ add(Vector{Int64}([4, 2, 6, 7])) == 6\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function called sum that sums all the elements in a given vector. For example,\
    \ sum([1, 2, 3, 4]) should return 10. Make sure your function works with both\
    \ scalars and vectors.", "    evens = lst[1 :end] \n    odds = lst[2 :end] \n\
    \    evens = filter(x -> x % 2 == 0, evens) \n    odds = filter(x -> x % 2 ==\
    \ 1, odds) \n    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the even elements and the sum of the\
    \ odd elements.", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.-even)\n\
    \    return even\nend", "    even = lst[1 :end]\n    odd = lst[2 :end]\n    even.+=(odd.*2)\n\
    \    return even\nend", "    evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens\
    \ = evens[2:end]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \n@assert add([4, 2, 6, 7]) == 2 \n@assert add([4, 2, 6,\
    \ 7, 8]) == 5 \n@assert add([4, 2, 6, 7, 8, 9]) == 10 \n@assert add([4, 2, 6,\
    \ 7, 8, 10, 11]) == 17 \n</cell>\n<text>\nExercise 3\nWrite a function called\
    \ sumsq that takes a list of numbers and returns the sum of the squares of the\
    \ numbers. For example, sumsq([4, 2, 6, 7]) == 52.", "    evens = lst[findall(x\
    \ -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n \
    \   return sum(evens)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements.", "    evens\
    \ = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[2:end]\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time add([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns the sum of the squares\
    \ of the even elements of the vector.", "    evens = lst[findall(x -> x % 2 ==\
    \ 0, lst)]\n    evens = evens[findall(x -> x % 2 != 0, evens)]\n    evens = evens[2:end]\n\
    \    evens = sum(evens)\n    return evens\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector and returns the sum of the even elements. \nWrite a function that takes\
    \ a vector and returns the sum of the odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a function that takes a vector and\
    \ returns the sum of the even and odd elements. \nWrite a function that takes\
    \ a vector and returns the sum of the even and odd elements. \nWrite a function\
    \ that takes a vector and returns the sum of the even and odd elements. \nWrite\
    \ a function that takes a vector and returns the sum of the even and odd elements.\
    \ \nWrite a function that takes a vector and returns the sum of the even and odd\
    \ elements. \nWrite a function that takes a vector and returns the sum of the\
    \ even and odd elements. \nWrite a function that takes a vector and returns the\
    \ sum of the even and odd elements. \nWrite a ", "    even = lst[1 : (end-1)]\n\
    \    odd = lst[2 : end]\n    return sum(even) + sum(odd)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the even numbers\
    \ in a given list.", "    even = lst[findall(x -> x % 2 == 0, lst)]\n    odd =\
    \ lst[findall(x -> x % 2 != 0, lst)]\n    return sum(even) + sum(odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert add([1]) == 1 \"add() should return 1 given\
    \ an empty list\"\n@assert add([4, 2, 6, 7]) == 2 \"add() should return 2 given\
    \ a list of length 3\"\n@assert add([4, 2, 6, 7]) == 4 \"add() should return 4\
    \ given a list of length 4\"\n@assert add([4, 2, 6, 7]) == 6 \"add() should return\
    \ 6 given a list of length 5\"\n@assert add([4, 2, 6, 7]) == 8 \"add() should\
    \ return 8 given a list of length 6\"\n@assert add([4, 2, 6, 7]) == 10 \"add()\
    \ should return 10 given a list of length 7\"\n@assert add([4, 2, 6, 7]) == 12\
    \ \"add() should return 12 given a list of length 8\"\n@assert add([4, 2, 6, 7])\
    \ == 14 \"add() should return 14 given a list of length 9\"\n@assert add([4, 2,\
    \ 6, 7]) == 16 \"add() should return 16 given a list of length 10\"\n@assert add([4,\
    \ 2, 6, 7]) == 18 \"add() should return 18 given a list of length 11\"\n@assert\
    \ add([4, 2, 6, 7]) == 20 \"add() should return 20 given a list of length 12\"\
    \n@assert add([4, 2, 6, 7]) == 22 \"add() should return 22 given a list of length\
    \ 13\"\n@assert add([4, 2, 6, 7]) == 24 \"add() should return 24 given a list\
    \ of length 14\"\n@assert add([4, 2, 6, 7]) == 26 \"add() should return 26 given\
    \ a list of length 15\"\n@assert add([4, 2, 6, 7]) == 28 \"add() should return\
    \ 28 given a list of length 16\"\n@assert add([4, 2, 6, 7]) == 30 \"add() should\
    \ return 30 given a list of length 17\"\n@assert add([4, 2, 6, 7]) == 32 \"add()\
    \ should return 32 given a list of length 18\"\n@assert add([4, 2, 6, 7]) == 34\
    \ \"add() should return 34 given a list of length 19\"\n@assert add([4, 2, 6,\
    \ 7]) == 36 \"add() should return 36 given a list of length 20\"\n@assert add([4,\
    \ 2, 6, 7]) == 38 \"add() should return 38 given a list of length 21\"\n@assert\
    \ add([4, 2, 6, 7]) == 40 \"add() should return 40 given a list of length 22\"\
    \n@assert add([4, 2, ", "    evens = lst[findall(x->x%2==0, lst)]\n    evens =\
    \ evens[2:end]\n    evens = evens[findall(x -> x != 0, evens)]\n    evens = sum(evens)\n\
    \    return evens\nend\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum of the even\
    \ numbers in a given list. \nWrite a function that returns the sum", "    evens\
    \ = lst[1 : (end-1)]\n    odds = lst[2:end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    return sum(evens) +\
    \ sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n@assert add([4, 2, 6, 7])\
    \ == 6\n</cell>\n<text>\nExercise 3\nWrite a function called sub that subtracts\
    \ the even elements that are at odd indices.", "    even = lst[1 :end]\n    odd\
    \ = lst[2 :end]\n    even.+=(odd.*2)\n    return even\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([4, 2, 6, 7]) == 5\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ called multiply that multiplies all elements of a list by 2.", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[(end-1) : (end)]\n    even.+=(odd.+0)\n    return\
    \ even\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns a new vector with all the even elements of the original vector removed.",
  "    even = lst[1 : (end-1)]\n    odd = lst[2:end]\n    even.+=(odd.*2)\n    return\
    \ even\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the even elements of a list of integers lst. \nWrite a function that returns\
    \ the sum of the odd elements of a list of integers lst. \nWrite a function that\
    \ returns the product of the even elements of a list of integers lst. \nWrite\
    \ a function that returns the product of the odd elements of a list of integers\
    \ lst. \nWrite a function that returns the maximum of a list of integers lst.\
    \ \nWrite a function that returns the minimum of a list of integers lst. \nWrite\
    \ a function that returns the product of the even elements of a list of integers\
    \ lst. \nWrite a function that returns the product of the odd elements of a list\
    \ of integers lst. \nWrite a function that returns the sum of the even elements\
    \ of a list of integers lst. \nWrite a function that returns the sum of the odd\
    \ elements of a list of integers lst. \nWrite a function that returns the product\
    \ of the even elements of a list of integers lst. \nWrite a function that returns\
    \ the product of the odd elements of a list of integers lst. \nWrite a function\
    \ that returns the maximum of a list of integers lst. \nWrite a function that\
    \ returns the minimum of a list of integers lst. \nWrite a function that returns\
    \ the product of the even elements of a list of integers lst. \nWrite a function\
    \ that returns the product of the odd elements of a list of integers lst. \nWrite\
    \ a function that returns the sum of the even elements of a list of integers lst.\
    \ \nWrite a function that returns the sum of the odd elements of a list of integers\
    \ lst. \nWrite a function that returns the product of the even elements of a list\
    \ of integers lst. \nWrite a function that returns the product of the odd elements\
    \ of a list of integers lst. ", "    even = lst[1 : (end-1)]\n    odd = lst[2\
    \ : end]\n    even = sum(even)\n    odd = sum(odd)\n    return even + odd\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the even numbers in a given list.\
    \ \nWrite a function that returns the sum of the odd numbers in a given list.",
  "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even = sum(even)\n   \
    \ odd = sum(odd)\n    return even + odd\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the even numbers in a given list.", "   \
    \ evens = lst[findall(x -> x % 2 == 0, lst)]\n    evens = evens[findall(x -> x\
    \ % 2 != 0, evens)]\n    return sum(evens)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add([1]) == 1 \"add([1,2,3])\"\n@assert add([1,2,3]) == 6 \"add([1,2,3])\"\
    \n@assert add([1,2,3,4,5,6,7,8,9,10]) == 15 \"add([1,2,3,4,5,6,7,8,9,10])\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function called subtract that takes in a\
    \ list of integers and returns the sum of the even elements that are at odd indices.",
  "    even = lst[1::2]\n    odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the even numbers in a list.", "    even = lst[1 :end]\n    odd = lst[2 :end]\n\
    \    even.+ odd.+\nend\n</cell>\n<code language=julia-1.0>\n@assert add([1]) ==\
    \ 1 \n@assert add([2, 3]) == 5 \n@assert add([4, 5, 6]) == 10 \n@assert add([7,\
    \ 8, 9]) == 14 \n@assert add([10, 11, 12, 13]) == 21 \n@assert add([14, 15, 16,\
    \ 17, 18, 19]) == 28 \n@assert add([20, 21, 22, 23, 24, 25, 26]) == 36 \n@assert\
    \ add([27, 28, 29, 30, 31, 32, 33, 34, 35]) == 45 \n@assert add([36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46]) == 54 \n@assert add([47, 48, 49, 50, 51, 52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,\
    \ 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,\
    \ 92, 93, 94, 95, 96, 97, 98, 99]) == 108 \n@assert add([100, 101, 102, 103, 104,\
    \ 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,\
    \ 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136,\
    \ 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,\
    \ 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168,\
    \ 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\
    \ 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199])\
    \ == 201 \n@assert add([200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,\
    \ 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,\
    \ 227, 228, 229, 230, 231, 2", "    evens = lst[1 : (end-1)]\n    evens = filter(x\
    \ -> x % 2 == 0, evens)\n    evens = map(x -> x + 1, evens)\n    evens = map(x\
    \ -> x + 1, evens)\n    evens = map(x -> x + 1, evens)\n    return sum(evens)\n\
    end\n</cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even numbers in a given\
    \ list. \nGiven a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..", "    evens = lst[1 : (end-1)]\n    odds = lst[(end-1):end]\n\
    \    return sum(evens) + sum(odds)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the product of all the numbers in a given list.", "    even = lst[1::2]\n  \
    \  odd = lst[1::2]\n    return sum(even) + sum(odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    add([4, 2, 6, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the product of all the numbers in a given list.", "    even = lst[1::2]\n  \
    \  odd = lst[1::2]\n    even.+=(odd.-even)\n    return even\nend\n</cell>\n<code\
    \ language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the sum of the even numbers in a given list.", "    evens\
    \ = lst[1 : (end-1)]\n    odds = lst[2 : end]\n    evens = filter(x -> x % 2 ==\
    \ 0, evens)\n    odds = filter(x -> x % 2 != 0, odds)\n    evens = map(x -> x\
    \ + 1, evens)\n    odds = map(x -> x + 1, odds)\n    evens = reduce(add, evens)\n\
    \    odds = reduce(add, odds)\n    return evens + odds\nend", "    even = lst[1\
    \ : (end-1)]\n    odd = lst[2 : end]\n    even.+=(odd.*2)\n    return even\nend\n\
    </cell>\n<code language=julia-1.5>\nadd([4, 2, 6, 7])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the sum of the elements\
    \ in the vector.", "    even = lst[1 : (end-1)]\n    odd = lst[2 : end]\n    even\
    \ = sum(even)\n    odd = sum(odd)\n    return even + odd\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the even numbers in a given\
    \ list.", "    even = lst[1::2]\n    odd = lst[1::2]\n    even.+=(odd.+=0)\n \
    \   return even\nend\n</cell>\n<code language=julia-1.5>\n@assert add([4, 2, 6,\
    \ 7]) == 5\n</cell>\n<text>\nExercise 3\nWrite a function called sub that takes\
    \ two vectors and subtracts the even elements that are at odd indices."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
