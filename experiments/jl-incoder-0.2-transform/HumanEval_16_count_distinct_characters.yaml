name: HumanEval_16_count_distinct_characters
language: jl
prompt: "\"\"\" Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n \
  \   3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
  \ count_distinct_characters(string::String)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
  @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
  abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
  Jerry jERRY JeRRRY\") == 5)\nend\n"
completions: ["    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters\
    \ = \n        foldl(\n            +,\n            map(\n                count_distinct_character,\n\
    \                filter(\n                    is_character(string),\n        \
    \            string\n                )\n            )\n        )\nend", "    \n\
    \    count = 0\n    for c in string:\n        if c.isUpper():\n            count\
    \ += 1\n        elif c.isLower():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n        elif c.isSpace():\n            count += 1\n \
    \   return count\n</code>\n<|/ a tags=haskell,string,functional-programming |>\n\
    <| c |>\n`if c.isUpper()` can be replaced with `if c.isUppercase()`\n<|/ c |>\n\
    <| c |>\n`if c.isUpper()` can be replaced with `if c.isUppercase()`\n<|/ c |>\n\
    <| a tags=haskell,string,functional-programming |>\n<code>\nimport Data.Char",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of times each character\
    \ appears in the string. For example, count_characters(\"abracadabra\") should\
    \ return {\"a\" => 2, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"r\" => 1, \"A\" =>\
    \ 1, \"B\" => 1, \"C\" => 1, \"D\" => 1, \"R\" => 1}.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string. For example, if the\
    \ input string is \"Jerry\" the function should return {\"J\" = 1, \"y\" = 1,\
    \ \"r\" = 1, \"e\" = 2}.", "    count_distinct_characters = string.len()\n   \
    \ for character in string.chars()\n        count_distinct_characters = count_distinct_characters\
    \ - 1\n    return count_distinct_characters\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=string,haskell |>\n<code>\nimport Data.List", "    \n    count_distinct_characters\
    \ = \n        string.\n        map(\n            x -> \n                if\n \
    \                   x != \"\" \n                    then\n                   \
    \     if\n                            x != \" \" \n                          \
    \  then\n                                if\n                                \
    \    x != \".\" \n                                    then\n                 \
    \                       if\n                                            x != \"\
    !\" \n                                            then\n                     \
    \                           if\n                                             \
    \       x != \"?\" \n                                                    then\n\
    \                                                        if\n                \
    \                                            x != \"-\" \n                   \
    \                                         then\n                             \
    \                                   if\n                                     \
    \                               x != \"_\" \n                                \
    \                                    then\n                                  \
    \                                      if\n                                  \
    \                                          x != \"&\" \n                     \
    \                                                       then\n               \
    \                                                                 if\n       \
    \                                                                            \
    \ x != \"|\" \n                                                              \
    \                      then\n                                                \
    \                                        if\n                                \
    \                                                            x != \"(\" \n   \
    \                                                                            \
    \             then\n                                                         \
    \                                       if\n                                 \
    \                                                                   x != \")\"\
    \ \n                                                                         \
    \                           then\n                                           \
    \                                                             if\n           \
    \                                                                            \
    \                     x != \"[\" \n                                          \
    \                                                                  then\n    \
    \                                                                            \
    \                                if\n                                        \
    \                                                                            x\
    \ != \"]\" \n                                                                \
    \                                                    then\n                  \
    \                                                                            \
    \                          if\n                                              \
    \                                                                            \
    \  x != \"{\" \n                                                             \
    \                                                               then\n       \
    \                                                                            \
    \                                             if\n                           \
    \                                                                            \
    \                             x != \"}\" \n                                  \
    \                                                                            \
    \                      then\n                                                \
    \                                                                            \
    \            if\n                                                            \
    \                                                                            \
    \    x != \"|\" \n                                                           \
    \                                                                            \
    \     then\n                                                                 \
    \                                                                            \
    \   if\n                                                                     \
    \                                                                            \
    \   x != \"&\" \n                                                            \
    \                                                                            \
    \            then\n                                                          \
    \                                                                            \
    \                  if\n                                                      \
    \                                                                            \
    \                          x != \"!\" \n                                     \
    \                                                                            \
    \                                           then\n                           \
    \                                                                            \
    \                                                         if\n               \
    \                                                                            \
    \                                                                         x !=\
    \ \"?\" \n                                                                   \
    \                                                                            \
    \                     then\n                                                 \
    \                                                                            \
    \                                           if\n                             \
    \                                                                            \
    \                                                                   x != \"-\"\
    \ \n                                                                         \
    \                                                                            \
    \                       then\n                                               \
    \                                                                            \
    \                                                     if\n                   \
    \                                                                            \
    \                                                                            \
    \         x != \"_\" \n                                                      \
    \                                                                            \
    \                                                  then\n                    \
    \                                                                            \
    \                                                                            \
    \            if\n                                                            \
    \                                                                            \
    \                                                    x != \"(\" \n           \
    \                                                                            \
    \                                                                            \
    \                         then\n                                             \
    \                                                                            \
    \                                                                       if\n \
    \                                                                            \
    \                                                                            \
    \                                           x != \")\" \n                    \
    \                                                                            \
    \                                                                            \
    \                        then\n                                              \
    \                                                                            \
    \                                                                            \
    \  if\n                                                                      \
    \                                                                            \
    \                                                          x != \"[\" \n     \
    \                                                                            \
    \                                                                            \
    \                                               then\n                       \
    \                                                                            \
    \                                                                            \
    \                                 if\n                                       \
    \                                                                            \
    \                                                                            \
    \                     x != \"]\" \n                                          \
    \                                                                            \
    \                                                                            \
    \                  then\n                                                    \
    \                                                                            \
    \                                                                            \
    \            if\n                                                            \
    \                                                                            \
    \                                                                            \
    \        x != \"{\" \n                                                       \
    \                                                                            \
    \                                                                            \
    \             then\n                                                         \
    \                                                                            \
    \                                                                            \
    \               if\n                                                         \
    \                                                                            \
    \                                                                            \
    \                   x != \"}\" \n                                            \
    \                                                                            \
    \                                                                            \
    \                                then\n                                      \
    \                                                                            \
    \                                                                            \
    \                                          if\n                              \
    \                                                                            \
    \                                                                            \
    \                                                      x != \"|\" \n         \
    \                                                                            \
    \                                                                            \
    \                                                                           then\n\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \            if\n                                                            \
    \                                                                            \
    \                                                                            \
    \                                x != \"&\" \n                               \
    \                                                                            \
    \                                                                            \
    \                                                             then\n         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \           if\n                                                             \
    \                                                                            \
    \                                                                            \
    \                                       x != \"!\" \n                        \
    \                                        ", "    if string == \"\"\n        0\n\
    \    else\n        count_distinct_characters(string[1:end-1]) + count_distinct_characters(string[end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nWrite a function that takes a string and returns the number of\
    \ distinct characters in that string in alphabetical order.", "    \n    count\
    \ = 0\n    for c in string:\n        if c.isUpper():\n            count += 1\n\
    \        elif c.isLower():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n        elif c.isSpace():\n            count += 1\n \
    \   return count\n</code>\n<|/ a tags=string,haskell,count |>\n<| c |>\n`countDistinctChars\
    \ = foldl (\\acc c -> if c.isUpper() then acc + 1 else acc) 0` - this can be written\
    \ more concisely as `countDistinctChars = foldl (\\acc c -> if c.isUpper then\
    \ acc + 1 else acc) 0`.\n<|/ c |>\n<| c |>\n`foldl` is also known as `foldl'`\n\
    <|/ c |>\n<| c |>\n`foldl` is also known as `foldl'`\n<|/ c |>\n<| a dscore=4\
    \ |>\nA simple solution:\n<code>\ncountDistinctChars :: String -> Int\ncountDistinctChars\
    \ s = length $ filter (\\c -> isUpper c) s\n</code>\n<|/ a tags=string,haskell,count\
    \ |>\n<| c |>\n`filter (\\c -> isUpper c) s` is equivalent to `filter (isUpper)\
    \ s`.\n<|/ c |>\n<| c |>\n`filter (isUpper) s` is equivalent to `filter (\\c ->\
    \ isUpper c) s`.\n<|/ c |>\n<| c |>\n`filter (isUpper) s` is equivalent to `filter\
    \ (\\c -> isUpper c) s`.\n<|/ c |>\n<| a tags=string,haskell,count |>\n<code>\n\
    countDistinctChars :: String -> Int\ncountDistinctChars s = length $ filter (\\\
    c -> isUpper c) s\n</code>\n<|/ a dscore=4 |>\n<| a tags=string,haskell,count\
    \ |>\n<code>\ncountDistinctChars :: String -> Int\ncountDistinctChars s = length\
    \ $ filter (\\c -> isUpper c) s\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n\
    <code>\ncountDistinctChars :: String -> Int\ncountDistinctChars s = length $ filter\
    \ (\\c -> isUpper c) s\n</code>\n<|/ a tags=string,haskell,count |>\n<| a d",
  "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = String.length(string)\n   \
    \ \n    for char in string\n        count_distinct_characters = count_distinct_characters\
    \ - String.length(String.lower(char))\n        count_distinct_characters = count_distinct_characters\
    \ - String.length(String.upper(char))\n    end\n    \n    return count_distinct_characters\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nWrite a function that takes a string and returns the number of\
    \ times each character appears in the string. For example, the string \"Jerry\"\
    \ would return {\"J\" = 1, \"e\" = 1, \"r\" = 1, \"y\" = 1}", "    count_distinct_characters\
    \ = \"\"\n    for character in string:\n        if character in count_distinct_characters:\n\
    \            count_distinct_characters = count_distinct_characters + character\n\
    \        else\n            count_distinct_characters = count_distinct_characters\
    \ + 1\n    return count_distinct_characters\n</code>\n<|/ a tags=string,haskell,count,character\
    \ |>\n<| a tags=string,haskell,count,character |>\n<code>\nimport Data.List\n\
    import Data.Char", "    \n    count_distinct_characters = \"\"\n    \n    for\
    \ i in string:\n        if count_distinct_characters == \"\":\n            count_distinct_characters\
    \ = i\n        else:\n            if count_distinct_characters != i:\n       \
    \         count_distinct_characters = count_distinct_characters + 1\n        \
    \    \n    return count_distinct_characters\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| a dscore=0 |>\n<code>\nimport Data.List", "    \n    count = 0\n    for\
    \ c in string:\n        if c.isUpper():\n            count += 1\n        elif\
    \ c.isLower():\n            count += 1\n        elif c.isDigit():\n          \
    \  count += 1\n        elif c.isSpace():\n            count += 1\n    return count\n\
    </cell>\n<cell>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<cell>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns the number of distinct characters in that string. For example, count_distinct_characters(\"\
    xyzXYZ\") should return 3.", "    \n    count = 0\n    for c in string:\n    \
    \    if c.isUpper():\n            count += 1\n        elif c.isLower():\n    \
    \        count += 1\n        else:\n            count += 1\n    return count\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, count_chars(\"abbccc\"\
    ) should return Dict(\"a\"=>2, \"b\"=>2, \"c\"=>3).", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = string.len()\n    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    count_distinct_characters = \"\"\n    \n    for character in string:\n\
    \        if character not in count_distinct_characters:\n            count_distinct_characters\
    \ = count_distinct_characters + character\n    return count_distinct_characters.length\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,haskell,count |>\n<code>\nimport\
    \ Data.List", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       elif c.isDigit():\n            count += 1\n    return count\n</cell>\n\
    <cell>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<cell>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as\
    \ input and returns the number of times the string \"Jerry\" occurs in the string.\
    \ \n    >>> count_Jerry_in_string(\"Jerry\")\n    1\n    >>> count_Jerry_in_string(\"\
    JerryJerry\")\n    2\n    >>> count_Jerry_in_string(\"JerryJerryJerry\")\n   \
    \ 3\n    >>> count_Jerry_in_string(\"JerryJerryJerryJerry\")\n    4\n    \"\"\"",
  "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>",
  "    if string == \"\" then return 0\n    else if string.length == 0 then return\
    \ 0\n    else if string.length == 1 then return 1\n    else if string.length ==\
    \ 2 then return 2\n    else if string.length == 3 then return 3\n    else if string.length\
    \ == 4 then return 4\n    else if string.length == 5 then return 5\n    else if\
    \ string.length == 6 then return 6\n    else if string.length == 7 then return\
    \ 7\n    else if string.length == 8 then return 8\n    else if string.length ==\
    \ 9 then return 9\n    else if string.length == 10 then return 10\n    else if\
    \ string.length == 11 then return 11\n    else if string.length == 12 then return\
    \ 12\n    else if string.length == 13 then return 13\n    else if string.length\
    \ == 14 then return 14\n    else if string.length == 15 then return 15\n    else\
    \ if string.length == 16 then return 16\n    else if string.length == 17 then\
    \ return 17\n    else if string.length == 18 then return 18\n    else if string.length\
    \ == 19 then return 19\n    else if string.length == 20 then return 20\n    else\
    \ if string.length == 21 then return 21\n    else if string.length == 22 then\
    \ return 22\n    else if string.length == 23 then return 23\n    else if string.length\
    \ == 24 then return 24\n    else if string.length == 25 then return 25\n    else\
    \ if string.length == 26 then return 26\n    else if string.length == 27 then\
    \ return 27\n    else if string.length == 28 then return 28\n    else if string.length\
    \ == 29 then return 29\n    else if string.length == 30 then return 30\n    else\
    \ if string.length == 31 then return 31\n    else if string.length == 32 then\
    \ return 32\n    else if string.length == 33 then return 33\n    else if string.length\
    \ == 34 then return 34\n    else if string.length == 35 then return 35\n    else\
    \ if string.length == 36 or string.length == 37 then return 36\n    else if string.length\
    \ == 38 then return 38\n    else if string.length == 39 then return 39\n    else\
    \ if string.length == 40 then return 40\n    else if string.length == 41 then\
    \ return 41\n    else if string.length == 42 then return 42\n    else if string.length\
    \ == 43 then return 43\n    else if string.length == 44 then return 44\n    else\
    \ if string.length == 45 then return 45\n    else if string.length == 46 then\
    \ return 46\n", "    count_distinct_characters = HashSet{Char}(string.chars)\n\
    \    return count_distinct_characters.length\nend\n</cell>\n<code language=julia-1.3>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the number of distinct characters in that string in alphabetical order.",
  "    count_distinct_characters(string, 0)\nend", "    \n    count = 0\n    for c\
    \ in string:\n        if c.isUpper():\n            count += 1\n        elif c.isLower():\n\
    \            count += 1\n        elif c.isDigit():\n            count += 1\n \
    \       elif c.isSpace():\n            count += 1\n    return count\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not alphanumeric (i.e. letters, numbers,\
    \ and spaces).", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       else:\n            count += 1\n    return count\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it on \"Jerry\".\n<|/ c |>\n<| c |>\nI see\
    \ what you mean. Thanks for pointing that out. I've updated my answer to account\
    \ for that case.\n<|/ c |>\n<| a |>\n<code>\ndef count_distinct_characters(string::String)::Int64\
    \ \n    \n    count = 0\n    for c in string:\n        if c.isUpper():\n     \
    \       count += 1\n        elif c.isLower():\n            count += 1\n      \
    \  else:\n            count += 1\n    return count\n</code>\n<|/ a tags=haskell\
    \ dscore=0 |>\n<| c |>\nThis doesn't work. Try it on \"Jerry\".\n<|/ c |>\n<|\
    \ a tags=haskell |>\n<code>\nimport Data.List\nimport Data.Maybe", "    \n   \
    \ count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise: Write a function that counts the number of\
    \ distinct characters in a string ignoring case.", "    count_distinct_characters\
    \ = foldl(count_distinct_characters_helper, 0::Int64)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    \n    count\
    \ = 0\n    for character in string\n        if character in string.lowercase\n\
    \            count += 1\n        else if character in string.uppercase\n     \
    \       count += 1\n        else if character in string.digits\n            count\
    \ += 1\n        else if character in string.punctuation\n            count +=\
    \ 1\n        else if character in string.whitespace\n            count += 1\n\
    \        else if character in string.symbol\n            count += 1\n        else\
    \ if character in string.ascii\n            count += 1\n        else if character\
    \ in string.unicode\n            count += 1\n        else if character in string.printable\n\
    \            count += 1\n        else if character in string.whitespace\n    \
    \        count += 1\n        else if character in string.symbol\n            count\
    \ += 1\n        else if character in string.ascii\n            count += 1\n  \
    \      else if character in string.unicode\n            count += 1\n        else\
    \ if character in string.printable\n            count += 1\n        else if character\
    \ in string.whitespace\n            count += 1\n        else if character in string.symbol\n\
    \            count += 1\n        else if character in string.ascii\n         \
    \   count += 1\n        else if character in string.unicode\n            count\
    \ += 1\n        else if character in string.printable\n            count += 1\n\
    \        else if character in string.whitespace\n            count += 1\n    \
    \    else if character in string.symbol\n            count += 1\n        else\
    \ if character in string.ascii\n            count += 1\n        else if character\
    \ in string.unicode\n            count += 1\n        else if character in string.printable\n\
    \            count += 1\n        else if character in string.whitespace\n    \
    \        count += 1\n        else if character in string.symbol\n            count\
    \ += 1\n        else if character in string.ascii\n            count += 1\n  \
    \      else if character in string.unicode\n            count += 1\n        else\
    \ if character in string.printable\n            count += 1\n        else if character\
    \ in string.whitespace\n            count += 1\n        else if character in string.symbol\n\
    \            count += 1\n        else if character in string.ascii\n         \
    \   count += 1\n        else if character in string.unicode\n            count\
    \ += 1\n        else if character in string.printable\n            count += 1\n\
    \        else if character in string.whitespace\n            count += 1\n    \
    \    else if character in string.symbol\n            count += 1\n        else\
    \ if character in string.ascii\n            count += 1\n        else if character\
    \ in string.unicode\n            count += 1\n        else if character in string.printable\n\
    \            count += 1\n        else if character in string.whitespace\n    \
    \        count += 1\n        else if character in string.symbol\n            count\
    \ += 1\n        else if character in string.ascii\n            count += 1\n  \
    \      else if character in string.unicode\n            count += 1\n        else\
    \ if character in string.printable\n            count += 1\n        else if character\
    \ in string.whitespace\n            count += 1\n        else if character in string.symbol\n\
    \            count += 1\n        else if character in string.ascii\n         \
    \   count += 1\n        else if character in string.unicode\n            count\
    \ += 1\n        else if character in string.printable\n            count += 1\n\
    \        else if ", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = \"\"\n    for character in string\n        count_distinct_characters = count_distinct_characters\
    \ + character\n    end\n    return count_distinct_characters.length()\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not in the alphabet (case insensitive). For example,\
    \ if the input string is \"Jerry\", the function should return 3.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>", "    if string == \"\"\n     \
    \   0\n    else\n        count_distinct_characters(string[1:end-1]) + count_distinct_characters(string[end])\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of distinct characters in that string. For example, count_distinct_characters(\"\
    xyzXYZ\") should return 3.", "    count_distinct_characters(string, 0)\nend",
  "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n          \
    \  count += 1\n        elif c.isLower():\n            count += 1\n        else:\n\
    \            count += 1\n    return count\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef count_distinct_characters(string::String)::Int64\n    \n   \
    \ count = 0\n    for c in string:\n        if c.isUpper():\n            count\
    \ += 1\n        elif c.isLower():\n            count += 1\n        else:\n   \
    \         count += 1\n    return count\n</code>\n<|/ a tags=julia,string |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=julia,string |>\n<code>", "    \n    count = 0\n\
    \    for c in string:\n        if c not in string.lower():\n            count\
    \ += 1\n    return count\n</cell>\n<cell>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<cell>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of times each\
    \ character appears in the string.", "    \n    count_distinct_characters = string.len()\n\
    \    \n    for char in string:\n        if string.contains(char):\n          \
    \  count_distinct_characters = count_distinct_characters - 1\n    \n    return\
    \ count_distinct_characters\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    def count_distinct_characters(string::String)::Int64 \n    \n    count_distinct_characters\
    \ = string.len()\n    \n    for char in string:\n        if string.contains(char):\n\
    \            count_distinct_characters = count_distinct_characters - 1\n    \n\
    \    return count_distinct_characters\n</code>\n<|/ a tags=haskell |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value. This answer was flagged as low-quality because of its length\
    \ and content. Consider adding some more explanation.\n<|/ c |>\n<| a tags=haskell\
    \ |>\n<code>\nimport Data.List\nimport Data.Char", "    \n    count = 0\n    for\
    \ character in string:\n        if character in string.lowercase():\n        \
    \    count += 1\n        elif character in string.uppercase():\n            count\
    \ += 1\n        elif character in string.digits():\n            count += 1\n \
    \   return count\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\"\
    )\n</cell>\n<text>\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not in the alphabet (regardless of case).",
  "    \n    count_distinct_characters = \"\"\n    for character in string:\n    \
    \    if character in count_distinct_characters:\n            count_distinct_characters\
    \ = count_distinct_characters + character\n        else:\n            count_distinct_characters\
    \ = count_distinct_characters + 1\n    return count_distinct_characters\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,haskell,count,character |>\n<code>\nimport\
    \ Data.List", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of distinct characters in a given string. For example, count_distinct_characters(\"\
    xyzXYZ\") should return 3.", "    count_distinct_characters(string, 0)\nend",
  "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string that are not in the alphabet (case insensitive). For example, if the\
    \ string was \"Jerry\", the function should return 3.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@code_native count_distinct_characters(\"\
    xyzXYZ\")\n</cell>\n<code language=julia-1.5>\n@code_native count_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of distinct characters in a given string. \nFor example, given \"xyzXYZ\", it\
    \ should return 3.", "    count_distinct_characters(string, 0)\nend", "    \n\
    \    count_distinct_characters = \"\"\n    for character in string:\n        if\
    \ character in count_distinct_characters:\n            count_distinct_characters\
    \ = count_distinct_characters + character\n        else:\n            count_distinct_characters\
    \ = count_distinct_characters + 1\n    return count_distinct_characters\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `count_distinct_characters(\"Jerry\"\
    )` returns `4`, not `3`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed\
    \ the code accordingly.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef count_distinct_characters(string::String)::Int64\
    \ \n    \n    count_distinct_characters = \"\"\n    for character in string:\n\
    \        if character in count_distinct_characters:\n            count_distinct_characters\
    \ = count_distinct_characters + character\n        else:\n            count_distinct_characters\
    \ = count_distinct_characters + 1\n    return count_distinct_characters\n</code>\n\
    <|/ a tags=haskell,functional-programming |>\n<| c |>\nPlease don't post only\
    \ code as an answer, but also provide an explanation what your code does and how\
    \ it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| c |>\nWhile this code may provide a solution to the question, it's\
    \ better to add context as to why/how it works. This can help future users learn\
    \ and eventually apply that knowledge to their own code. You are also likely to\
    \ have positive feedback/upvotes from users, when the code is explained.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\nimport Data.List", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of distinct characters in a string ignoring case.", " \
    \   count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters_helper(string,0,0)\nend", "    \n \
    \   count_distinct_characters = HashSet{Char}(string.chars)\n    \n    return\
    \ count_distinct_characters.length\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of distinct characters in that string that appear in alphabetical\
    \ order. For example, if the input string is \"Jerry\" then your function should\
    \ return 3.", "    \n    count_distinct_characters = \"\"\n    \n    for character\
    \ in string:\n        if character in count_distinct_characters:\n           \
    \ count_distinct_characters = count_distinct_characters + character\n        else:\n\
    \            count_distinct_characters = count_distinct_characters + 1\n    \n\
    \    return count_distinct_characters\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,haskell,functional-programming\
    \ |>\n<code>\nimport Data.List", "    \n    count_distinct_characters = \"\"\n\
    \    for character in string\n        count_distinct_characters = count_distinct_characters\
    \ + character\n    end\n    return count_distinct_characters\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<code language=julia-1.5>", " \
    \   count_distinct_characters(string, 0)\nend", "    \n    count = 0\n    for\
    \ c in string:\n        if c.isUpper():\n            count += 1\n        elif\
    \ c.isLower():\n            count += 1\n        elif c.isUpper():\n          \
    \  count += 1\n        elif c.isLower():\n            count += 1\n        else:\n\
    \            count += 1\n    return count\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.List", "    \n    count = 0\n    for c in string:\n\
    \        if c.isUpper():\n            count += 1\n        elif c.isLower():\n\
    \            count += 1\n        elif c.isDigit():\n            count += 1\n \
    \       elif c.isSpace():\n            count += 1\n    return count\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nI like the idea of using isUpper/isLower but this\
    \ doesn't work if you have a string like \"aBcDeFgH\"\n<|/ c |>\n<| c |>\nYes,\
    \ I agree with you. My solution was just to show how it can be done with if/else\
    \ statements. I didn't want to write all the possible combinations.\n<|/ c |>\n\
    <| a tags=string,haskell |>\nHere's a solution that doesn't use any if/else statements:\n\
    <code>\nimport Data.List", "    count_distinct_characters = foldl(count_distinct_characters_helper,\
    \ Int64(0), string)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string. For example, if the\
    \ string was \"Jerry\" the output would be a dictionary that looks like this:\
    \ {\"J\":1, \"y\":2, \"r\":1}", "    count_distinct_characters(string, 0)\nend",
  "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of distinct characters in a string that occur more than once.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that counts the number of distinct\
    \ characters in a string that start with a given letter.", "    count_distinct_characters\
    \ = foldl(count_distinct_characters_helper, 0::Int64, string)\nend", "    \n \
    \   count_distinct_characters = string.len()\n    \n    for char in string:\n\
    \        if string.contains(char):\n            count_distinct_characters = count_distinct_characters\
    \ - 1\n    \n    return count_distinct_characters\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"abBcCdD\"\n<|/ c\
    \ |>\n<| c |>\nI believe that would return 4 instead of 3.\n<|/ c |>\n<| c |>\n\
    Yes, I believe that would return 4 instead of 3.\n<|/ c |>\n<| c |>\nI believe\
    \ that would return 4 instead of 3.\n<|/ c |>\n<| c |>\nI believe that would return\
    \ 4 instead of 3.\n<|/ c |>\n<| a tags=string,haskell |>\n<code>\nimport Data.List",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = \"\"\n    for character in\
    \ string:\n        if character not in count_distinct_characters:\n          \
    \  count_distinct_characters = count_distinct_characters + character\n    return\
    \ count_distinct_characters.length\n</code>\n<|/ a tags=string,haskell,count,unique\
    \ |>\n<| c |>\nThe `count` function can be written more concisely as `length .\
    \ filter (/=) . toLower`. But I guess it's more readable to use your solution.\n\
    <|/ c |>\n<| c |>\nI agree, `count` can be written more concisely, but I think\
    \ `length` makes it more clear what it does.\n<|/ c |>\n<| a dscore=1 |>\nThe\
    \ solution using Data.Map:\n<code>\nimport qualified Data.Map as M", "    \n \
    \   count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code\
    \ language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.4>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that counts the number of distinct characters in a given string. Your function\
    \ should take a string as input and output a number.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of distinct\
    \ characters in a string that appear in another string. For example, count_distinct_characters(\"\
    xyzXYZ\", \"Jerry\") should return 3.", "    count_distinct_characters = foldl(count_distinct_characters_helper,\
    \ 0::Int64, string)\nend", "    \n    count = 0\n    for c in string:\n      \
    \  if c.isUpper():\n            count += 1\n        elif c.isLower():\n      \
    \      count += 1\n        elif c.isDigit():\n            count += 1\n       \
    \ elif c.isSpace():\n            count += 1\n    return count\n</code>\n<|/ a\
    \ |>\n<| a dscore=0 |>\n<code>\ndef count_distinct_characters(string::String)::Int64\
    \ \n    \n    count = 0\n    for c in string:\n        if c.isUpper():\n     \
    \       count += 1\n        elif c.isLower():\n            count += 1\n      \
    \  elif c.isDigit():\n            count += 1\n        elif c.isSpace():\n    \
    \        count += 1\n    return count\n</code>\n<|/ a tags=haskell,string |>\n\
    <| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27825812)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer. He asked how to count distinct\
    \ characters in a string. He provided a solution. He did not ask for clarification.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27825812)\n<|/ c |>\n<| c |>\nThis does\
    \ provide an answer. He asked how to count distinct characters in a string. He\
    \ provided a solution. He did not ask for clarification.\n<|/ c |>\n<| a tags=haskell,string\
    \ |>\n<code>\nimport Data.Char", "    count_distinct_characters(string, 0)\nend\n\
    </cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n\
    <code language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of distinct\
    \ characters in that string.", "    count_distinct_characters(string, 0)\nend\n\
    </cell>\n<code language=julia-1.0>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n\
    <code language=julia-1.0>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of distinct characters in\
    \ a string that appear in the given range (inclusive). For example, if the given\
    \ range is 0 to 10, then \"abcde\" has 5 distinct characters, because \"a\", \"\
    b\", \"c\", \"d\", \"e\" all appear in the given range. Write a function that\
    \ returns the number of distinct characters in a string that appear in the given\
    \ range (inclusive).", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    \n    count_distinct_characters\
    \ = String.length(string)\n    \n    for char in string\n        count_distinct_characters\
    \ = count_distinct_characters - String.length(String.lower(char))\n        count_distinct_characters\
    \ = count_distinct_characters - String.length(String.upper(char))\n    \n    return\
    \ count_distinct_characters\n</code>\n<|/ a tags=string,haskell |>\n<| a |>\n\
    <code>\nimport Data.List", "    \n    count_distinct_characters(string, 0)\nend",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that counts the number of distinct characters in\
    \ a string ignoring case.", "    count_distinct_characters = String.length(string)\n\
    \    for character in string\n        count_distinct_characters = count_distinct_characters\
    \ - String.length(String.lower(character))\n        count_distinct_characters\
    \ = count_distinct_characters - String.length(String.upper(character))\n    end\n\
    \    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of times the string \"Jerry\" occurs in the string. \n  \
    \  >>> count_Jerry_in_string(\"Jerry\")\n    1\n    >>> count_Jerry_in_string(\"\
    JerryJerry\")\n    2\n    >>> count_Jerry_in_string(\"JerryJerryJerry\")\n   \
    \ 3\n    >>> count_Jerry_in_string(\"JerryJerryJerryJerry\")\n    4\n    \"\"\"",
  "    count_distinct_characters(string, 0)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that counts the number of distinct characters in a string ignoring\
    \ case.", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.1>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.1>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise: Write a function that counts the number of\
    \ distinct characters in a string ignoring case.", "    \n    count_distinct_characters\
    \ = \"\"\n    for character in string:\n        if character in count_distinct_characters:\n\
    \            count_distinct_characters = count_distinct_characters + character\n\
    \        else\n            count_distinct_characters = count_distinct_characters\
    \ + 1\n    return count_distinct_characters\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| c |>\nThis doesn't work. `count_distinct_characters(\"xyzXYZ\")` returns\
    \ `3`, not `4`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out\n\
    <|/ c |>\n<| a tags=string,haskell |>\nThe simplest solution is to use Data.List.groupBy,\
    \ which groups adjacent elements of the list into a list of lists. Then you can\
    \ just count the length of the list of lists.\n<code>\nimport Data.List (groupBy)",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters(string, 0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that counts the number of unique characters in a string. For example, given\
    \ \"xyzXYZ\", it should return 3.", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    count_distinct_characters = foldl(count_distinct_characters_helper,\
    \ Int64(0), string)\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nI like\
    \ this solution, however it would be nice to have some explanation on how it works.\
    \ I understand that `foldl` applies a function to each element of a collection\
    \ and then returns the accumulated result, but I do not understand how `count_distinct_characters_helper`\
    \ works.\n<|/ c |>\n<| c |>\nI added some explanation to the answer\n<|/ c |>\n\
    <| a tags=julia,string |>\n<code>", "    if string == \"\"\n        0\n    else\n\
    \        count_distinct_characters(string[1:end-1]) + count_distinct_characters(string[end])\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not in the alphabet (case insensitive).\
    \ For example, if the input string is \"Jerry\", the function should return 3.",
  "    count_distinct_characters = foldl(count_distinct_characters_helper, Int64(0),\
    \ string)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of distinct characters in that string.",
  "    count_distinct_characters(string, 0)\nend", "    \n    count = 0\n    \n  \
    \  for c in string:\n        if c.isUpper():\n            count += 1\n       \
    \ elif c.isLower():\n            count += 1\n        elif c.isAlpha():\n     \
    \       count += 1\n        elif c.isDigit():\n            count += 1\n      \
    \  elif c.isSpace():\n            count += 1\n        else:\n            count\
    \ += 1\n            \n    return count\n</cell>\n<cell>\ncount_distinct_characters(\"\
    xyzXYZ\")\n</cell>\n<cell>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that takes a string and returns the number of uppercase\
    \ characters, lowercase characters, digits, and spaces.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of distinct characters in that string.", "    \n    count_distinct_characters\
    \ = \"\"\n    for i in string:\n        if count_distinct_characters == \"\":\n\
    \            count_distinct_characters = i\n        else:\n            if count_distinct_characters\
    \ != i:\n                count_distinct_characters = count_distinct_characters\
    \ + 1\n    return count_distinct_characters\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=string,haskell,count,unique |>\n<code>\nimport Data.List", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    if string ==\
    \ \"\" then return 0\n    \n    chars = string.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()\n    \n    chars = chars.to_lowercase()\n    \n    chars\
    \ = chars.to_lowercase()", "    count_distinct_characters(string, 0)\nend", " \
    \   count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number\
    \ of distinct characters in a string that start with a given letter.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number\
    \ of distinct characters in a string that start with a given letter.", "    count_distinct_characters\
    \ = count(string.chars())\n    return count_distinct_characters\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times the string \"Jerry\" appears in the string.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    \n    count_distinct_characters\
    \ = \"\"\n    for character in string:\n        if character in count_distinct_characters:\n\
    \            count_distinct_characters = count_distinct_characters + character\n\
    \        else:\n            count_distinct_characters = count_distinct_characters\
    \ + 1\n    return count_distinct_characters\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ dscore=0 |>\n<code>\ndef count_distinct_characters(string::String)::Int64\n\
    \    count_distinct_characters = \"\"\n    for character in string:\n        if\
    \ character in count_distinct_characters:\n            count_distinct_characters\
    \ = count_distinct_characters + character\n        else:\n            count_distinct_characters\
    \ = count_distinct_characters + 1\n    return count_distinct_characters\n</code>\n\
    <|/ a tags=string,haskell |>\n<| c |>\nPlease don't post only code as an answer,\
    \ but also provide an explanation what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a |>\n\
    <code>\nimport Data.List", "    count_distinct_characters(string, 0)\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that counts the number of times a character appears\
    \ in a string. For example, count_characters(\"abcabc\") should return 3.", " \
    \   count_distinct_characters_helper(string,0,0)\nend", "    \n    count_distinct_characters\
    \ = String.length(string)\n    \n    return count_distinct_characters\nend count_distinct_characters\n\
    </cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n\
    <code language=julia-1.3>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Write a function that takes a string and returns the number of times each character\
    \ appears in the string. Case is ignored.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>", "    count_distinct_characters(string,\
    \ 0)\nend", "    if string == \"\" then return 0\n    else if string.length ==\
    \ 0 then return 1\n    else if string.length == 1 then return string[0]\n    else\
    \ if string.length == 2 then return string[0]\n    else if string.length == 3\
    \ then return string[0]\n    else if string.length == 4 then return string[0]\n\
    \    else if string.length == 5 then return string[0]\n    else if string.length\
    \ == 6 then return string[0]\n    else if string.length == 7 then return string[0]\n\
    \    else if string.length == 8 then return string[0]\n    else if string.length\
    \ == 9 then return string[0]\n    else if string.length == 10 then return string[0]\n\
    \    else if string.length == 11 then return string[0]\n    else if string.length\
    \ == 12 then return string[0]\n    else if string.length == 13 then return string[0]\n\
    \    else if string.length == 14 then return string[0]\n    else if string.length\
    \ == 15 then return string[0]\n    else if string.length == 16 then return string[0]\n\
    \    else if string.length == 17 then return string[0]\n    else if string.length\
    \ == 18 then return string[0]\n    else if string.length == 19 then return string[0]\n\
    \    else if string.length == 20 then return string[0]\n    else if string.length\
    \ == 21 then return string[0]\n    else if string.length == 22 then return string[0]\n\
    \    else if string.length == 23 then return string[0]\n    else if string.length\
    \ == 24 then return string[0]\n    else if string.length == 25 then return string[0]\n\
    \    else if string.length == 26 then return string[0]\n    else if string.length\
    \ == 27 then return string[0]\n    else if string.length == 28 then return string[0]\n\
    \    else if string.length == 29 then return string[0]\n    else if string.length\
    \ == 30 then return string[0]\n    else if string.length == 31 then return string[0]\n\
    \    else if string.length == 32 then return string[0]\n    else if string.length\
    \ == 33 then return string[0]\n    else if string.length == 34 then return string[0]\n\
    \    else if string.length == 35 or string.length == 36 or string.length == 37\
    \ or string.length == 38 or string.length == 39 or string.length == 40 or string.length\
    \ == 41 or string.length == 42 or string.length == 43  then return string[0]\n\
    \    else if string.length == 44 or string.length == 45 or string.length == 46\
    \ or string.length == 47 or string.length == 48 or string.length == 49 or string.length\
    \ == 50 or string.length == 51 or string.length == 52 or ", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    count_distinct_characters = \"\"\n    for character in string\n        count_distinct_characters\
    \ = count_distinct_characters + character\n    end\n    return count_distinct_characters\n\
    end\n</cell>\n<code language=julia-1.1>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.1>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string that appear in alphabetical order. For\
    \ example, if the input string is \"abcde\", the output should be 5.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    count_distinct_characters\
    \ = Set.new()\n    for character in string:\n        count_distinct_characters.add(character)\n\
    \    return count_distinct_characters.length\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of distinct characters in that string in alphabetical order.",
  "    \n    count_distinct_characters = \"\"\n    \n    for char in string:\n   \
    \     if count_distinct_characters == \"\":\n            count_distinct_characters\
    \ = char\n        else:\n            if char != count_distinct_characters:\n \
    \               count_distinct_characters = \"\"\n                break\n    \n\
    \    return count_distinct_characters\n</code>\n<|/ a tags=string,haskell,count\
    \ |>\n<| a dscore=0 |>\n<code>\nimport Data.List", "    if string == \"\" then\
    \ return 0 \n    else if string.length == 0 then return 1 \n    else if string.length\
    \ == 1 then return string.toCharArray()[0].toInt64() \n    else \n        count_distinct_characters(string.substring(1))\
    \ + string.toCharArray()[0].toInt64() \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of distinct characters\
    \ in it", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of distinct characters in a string that start with a given character. For example,\
    \ if the input string is \"Jerry\" and the input character is \"y\", the output\
    \ should be 2.", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that counts the number of unique characters in a given string.", "    \n   \
    \ count = 0\n    for c in string:\n        if c.isUpper():\n            count\
    \ += 1\n        elif c.isLower():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n        elif c.isSpace():\n            count += 1\n \
    \       else:\n            count += 1\n    return count\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not digits. \nFor example,\
    \ count_distinct_characters(\"Jerry\") should return 4.", "    \n    count_distinct_characters\
    \ = Set.new()\n    for character in string\n        count_distinct_characters.add(character)\n\
    \    \n    return count_distinct_characters.length\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nI believe this should be the accepted answer. `count_distinct_characters`\
    \ should be the right way to go. `count` should be avoided since it counts non-unique\
    \ characters as well, whereas `count_distinct_characters` only counts unique characters.\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\njulia> count(\"abcde\")\n5\n</code>\n<|/ a\
    \ tags=julia,string |>\n<| a tags=julia,string |>\n<code>\njulia> count(\"abcde\"\
    )\n5\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\n<code>\njulia> count(\"abcde\"\
    )\n5\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=3 |>\n<code>\njulia> count(\"\
    abcde\")\n5\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n\
    <code>\njulia> count(\"abcde\")\n5\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,string\
    \ |>\n<code>\njulia> count(\"abcde\")\n5\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,string\
    \ |>\n<code>\njulia> count(\"abcde\")\n5\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\n<code>\njulia> count(\"abcde\")\n5\n</code>\n<|/ a tags=julia,string |>\n\
    <| a dscore=3 |>\n<code>\njulia> count(\"abcde\")\n5\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>\njulia> count(\"abcde\")\n5\n</code>\n\
    <|/ a dscore=3 |>\n<| a tags=julia,string |>\n<code>\njulia> count(\"abcde\")\n\
    5\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,string |>\n<code>\njulia> count(\"\
    abcde\")\n5\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,string |>\n<code>\njulia>\
    \ count(\"abcde\")\n", "    count_distinct_characters = \n        count_distinct_characters_helper(string)\n\
    \    return count_distinct_characters\n</code>\n<|/ a tags=string,haskell,count,algorithm\
    \ |>\n<| c |>\nThe `foldl` solution is very elegant, but it's also very inefficient.\
    \ `foldl` is O(n), where n is the length of the string. `foldl1` is O(1), but\
    \ requires O(n) space to store the accumulator.\n<|/ c |>\n<| c |>\nI agree, `foldl1`\
    \ would be the better solution. `foldl` is also very elegant, but it's also very\
    \ inefficient. `foldl` is O(n), where n is the length of the string. `foldl1`\
    \ is O(1), but requires O(n) space to store the accumulator.\n<|/ c |>\n<| c |>\n\
    I agree that `foldl1` is better, but `foldl` is also very elegant, and it's also\
    \ very inefficient. `foldl` is O(n), where n is the length of the string. `foldl1`\
    \ is O(1), but requires O(n) space to store the accumulator.\n<|/ c |>\n<| c |>\n\
    I agree that `foldl1` is better, but `foldl` is also very elegant, and it's also\
    \ very inefficient. `foldl` is O(n), where n is the length of the string. `foldl1`\
    \ is O(1), but requires O(n) space to store the accumulator.\n<|/ c |>\n<| c |>\n\
    I agree that `foldl1` is better, but `foldl` is also very elegant, and it's also\
    \ very inefficient. `foldl` is O(n), where n is the length of the string. `foldl1`\
    \ is O(1), but requires O(n) space to store the accumulator.\n<|/ c |>\n<| a |>\n\
    Here's a solution using foldl:\n<code>\nimport Data.List", "    \n    count_distinct_characters(\"\
    \", string)\n    \nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of distinct characters in that string in alphabetical order.", " \
    \   count_distinct_characters_helper(string,0,0)\nend", "    if string == \"\"\
    \ then return 0 \n    else if string.length == 0 then return 1 \n    else if string.length\
    \ == 1 then return string.toChar().toLower().length \n    else return count_distinct_characters(string.substring(1))\
    \ + count_distinct_characters(string.substring(0,string.length-1))\nend\n</cell>\n\
    <code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Write a function that takes a string and returns the number of distinct characters\
    \ in that string in alphabetical order.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that counts the number of characters\
    \ in a string that occur more than once.", "    \n    count_distinct_characters\
    \ = \n        string.map(\n            x -> \n                if\n           \
    \         x == x.toLower()\n                    || x == x.toUpper()\n        \
    \        then\n                    1\n                else\n                 \
    \   0\n        ).reduce(\n            (x, y) -> \n                x + y\n    \
    \    )\n    \n    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns the number of distinct characters in that string. \nWrite a function\
    \ that takes a string and returns the number of distinct characters in that string\
    \ in lower case. \nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string in upper case. \nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ in lower and upper case. \nWrite a function that takes a string and returns\
    \ the number of distinct characters in that string in lower and upper case (including\
    \ spaces). ", "    count_distinct_characters(string, 0)\nend", "    \n    count_distinct_characters(\"\
    \", string)\n    \nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\"\
    )\n</cell>\n<text>\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.", "    count_distinct_characters\
    \ = \"\"\n    for c in string:\n        if count_distinct_characters[c] == \"\"\
    :\n            count_distinct_characters[c] = 1\n        else:\n            count_distinct_characters[c]\
    \ += 1\n    return count_distinct_characters[string]\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nI wrote a recursive function for this problem:\n<code>",
  "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of characters in that string that are not in the alphabet\
    \ (case-insensitive).", "    \n    count_distinct_characters = string.count\n\
    \    \n    return count_distinct_characters\nend count_distinct_characters\n</cell>\n\
    <code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code\
    \ language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. For example, given \"xyzXYZ\", the function\
    \ should return {\"x\":2, \"y\":1, \"z\":2}.", "    \n    count_distinct_characters(\"\
    \", string)\n    ", "    \n    count_distinct_characters = HashSet()\n    \n \
    \   for character in string:\n        if character in count_distinct_characters:\n\
    \            count_distinct_characters.remove(character)\n        else:\n    \
    \        count_distinct_characters.add(character)\n            \n    return count_distinct_characters.length\n\
    </code>\n<|/ a tags=string,haskell,count |>\n<| a |>\nI like to use Data.Map for\
    \ this:\n<code>\nimport qualified Data.Map as M\nimport Data.List (foldl')", " \
    \   count_distinct_characters = \"\"\n    for character in string:\n        if\
    \ character in count_distinct_characters:\n            count_distinct_characters\
    \ = count_distinct_characters + character\n        else\n            count_distinct_characters\
    \ = count_distinct_characters + 1\n    return count_distinct_characters\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\ndef count_distinct_characters(string::String)::Int64\
    \ \n    count_distinct_characters = \"\"\n    for character in string:\n     \
    \   if character in count_distinct_characters:\n            count_distinct_characters\
    \ = count_distinct_characters + character\n        else\n            count_distinct_characters\
    \ = count_distinct_characters + 1\n    return count_distinct_characters\n</code>\n\
    <|/ a tags=haskell dscore=0 |>\n<| c |>\nPlease add some explanation to your answer.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nimport Data.List", "    if string == \"\"\n\
    \        0\n    else\n        count_distinct_characters(string[1:end-1]) + count_distinct_characters(string[end])\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that takes a string and returns\
    \ the number of times each character appears in the string. For example, if the\
    \ input string is \"abbccc\", then the output should be {a=1, b=2, c=1}", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters_helper(string,0,0)\nend", "    count_distinct_characters\
    \ = \"\"\n    for i in string:\n        if count_distinct_characters[i] != \"\"\
    :\n            count_distinct_characters += i\n        else count_distinct_characters\
    \ += i.lower()\n    return count_distinct_characters.length()\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, given the string \"Jerry\"\
    , your function should return {\"J\":1, \"e\":1, \"r\":2, \"y\":1}.\nHint: You\
    \ can use the function count_distinct_characters to help you with this.", "  \
    \  count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = foldl(count_distinct_characters_helper, 0::Int64, string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string that are not in the alphabet\
    \ (including uppercase and lowercase). For example, the string \"Jerry\" has 4\
    \ characters that are not in the alphabet, namely \"J\", \"e\", \"y\", and \"\
    r\".", "    count_distinct_characters = string.len()\nend\n</cell>\n<code language=julia-1.5>",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = \n        string.\n       \
    \ chars().\n        distinct().\n        fold(0, +) \nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of distinct characters in the string in alphabetical order\
    \ (ignoring case).", "    count_distinct_characters_helper(string, 0)\nend", " \
    \   count_distinct_characters(\"\", string)\nend", "    count_distinct_characters\
    \ = foldl(count_distinct_characters_helper, 0::Int64, string.chars)\nend", " \
    \   count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nWrite a function that returns the number of distinct\
    \ characters in a string that appear in the given string in alphabetical order.",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = string.len()\n    for c in string.chars()\n        count_distinct_characters\
    \ = count_distinct_characters - 1\n    end\n    return count_distinct_characters\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ number of distinct characters in that string.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    \n    count_distinct_characters = HashSet()\n    \n    for character\
    \ in string:\n        if character in count_distinct_characters:\n           \
    \ count_distinct_characters.remove(character)\n        else:\n            count_distinct_characters.add(character)\n\
    \            \n    return count_distinct_characters.length\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\n<code>\ndef count_distinct_characters(string::String)::Int64\n\
    \    \n    count_distinct_characters = HashSet()\n    \n    for character in string:\n\
    \        if character in count_distinct_characters:\n            count_distinct_characters.remove(character)\n\
    \        else:\n            count_distinct_characters.add(character)\n       \
    \     \n    return count_distinct_characters.length\n</code>\n<|/ a tags=haskell,string\
    \ dscore=1 |>\n<| a tags=haskell,string |>\n<code>\nimport Data.List", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = \n        count_distinct_characters(string.chars)\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that counts the number of times\
    \ a character appears in a string. For example, count_characters(\"abcabc\") should\
    \ return 3.", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns the number of distinct characters\
    \ (regardless of case) does it consist of. For example, given \"xyzXYZ\", it should\
    \ return 3.", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.4>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not in the alphabet\
    \ (case insensitive).", "    count_distinct_characters = count(string.chars())\n\
    \    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the number of distinct characters in that string.", "    count_distinct_characters\
    \ = string.len()\n    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.3>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of characters that are repeated more than once.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    count_distinct_characters(\"\
    \", string)\nend", "    \n    count_distinct_characters = String.length(string)\n\
    \    \n    for i in 0..count_distinct_characters - 1\n        \n        if String.substring(string,\
    \ i, i+1) = String.substring(string, i+1, i+2)\n            count_distinct_characters\
    \ = count_distinct_characters - 1\n        end\n    end\n    \n    return count_distinct_characters\n\
    end", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns the number of distinct characters (regardless of case) in the string.\
    \ For example, given \"xyzXYZ\", it should return 3.", "    \n    count = 0\n\
    \    for c in string:\n        if c.isUpper():\n            count += 1\n     \
    \   elif c.isLower():\n            count += 1\n        elif c.isDigit():\n   \
    \         count += 1\n        elif c.isSpace():\n            count += 1\n    return\
    \ count\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times the string \"ab\" appears in the string. \n>>> count_ab(\"\
    abcabcbb\")\n2\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"\
    aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab(\"aBcDe\")\n1\n>>> count_ab",
  "    if string == \"\" then return 0\n    else if string[0] == string[1] then return\
    \ 1\n    else if string[0] == string[2] then return 2\n    else if string[0] ==\
    \ string[3] then return 3\n    else if string[0] == string[4] then return 4\n\
    \    else if string[0] == string[5] then return 5\n    else if string[0] == string[6]\
    \ then return 6\n    else if string[0] == string[7] then return 7\n    else if\
    \ string[0] == string[8] then return 8\n    else if string[0] == string[9] then\
    \ return 9\n    else if string[0] == string[10] then return 10\n    else if string[0]\
    \ == string[11] then return 11\n    else if string[0] == string[12] then return\
    \ 12\n    else if string[0] == string[13] then return 13\n    else if string[0]\
    \ == string[14] then return 14\n    else if string[0] == string[15] then return\
    \ 15\n    else if string[0] == string[16] then return 16\n    else if string[0]\
    \ == string[17] then return 17\n    else if string[0] == string[18] then return\
    \ 18\n    else if string[0] == string[19] then return 19\n    else if string[0]\
    \ == string[20] then return 20\n    else if string[0] == string[21] then return\
    \ 21\n    else if string[0] == string[22] then return 22\n    else if string[0]\
    \ == string[23] then return 23\n    else if string[0] == string[24] then return\
    \ 24\n    else if string[0] == string[25] then return 25\n    else if string[0]\
    \ == string[26] then return 26\n    else if string[0] == string[27] then return\
    \ 27\n    else if string[0] == string[28] then return 28\n    else if string[0]\
    \ == string[29] then return 29\n    else if string[0] == string[30] then return\
    \ 30\n    else if string[0] == string[31] then return 31\n    else if string[0]\
    \ == string[32] then return 32\n    else if string[0] == string[33] then return\
    \ 33\n    else if string[0] == string[34] then return 34\n    else if string[0]\
    \ == string[35] then return 35\n    else if string[0] == string[36] then return\
    \ 36\n    else if string[0] == string[37] then return 37\n    else if string[0]\
    \ == string[38] then return 38\n    else if string[0] == string[39] then return\
    \ 39\n    else if string[0] == string[40] then return 40\n", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    count_distinct_characters = \n        foldl(\n            fun(acc,\
    \ x) -> acc + (if x == \"\" then 0 else 1) end,\n            0,\n            string.chars\n\
    \        )\nend", "    \n    count_distinct_characters = \"\"\n    for i in string:\n\
    \        if count_distinct_characters == \"\":\n            count_distinct_characters\
    \ = i\n        else:\n            if count_distinct_characters != i:\n       \
    \         count_distinct_characters = count_distinct_characters + 1\n    return\
    \ count_distinct_characters\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ seem to work. `count_distinct_characters(\"Jerry\")` returns `4` instead of\
    \ `3`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer\
    \ to fix the problem.\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndef count_distinct_characters(string::String)::Int64\n\
    \    \n    count_distinct_characters = \"\"\n    for i in string:\n        if\
    \ count_distinct_characters == \"\":\n            count_distinct_characters =\
    \ i\n        else:\n            if count_distinct_characters != i:\n         \
    \       count_distinct_characters = count_distinct_characters + 1\n    return\
    \ count_distinct_characters\n</code>\n<|/ a tags=string,haskell |>\n<| a dscore=1\
    \ |>\n<code>\nimport Data.List"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
