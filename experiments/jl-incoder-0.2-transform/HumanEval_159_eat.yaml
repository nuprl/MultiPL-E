name: HumanEval_159_eat
language: jl
prompt: "\"\"\"\n    You're a hungry rabbit, and you already have eaten a certain\
  \ number of carrots,\n    but now you need to eat more carrots to complete the day's\
  \ meals.\n    you should return an array of [ total number of eaten carrots after\
  \ your meals,\n                                    the number of carrots left after\
  \ your meals ]\n    if there are not enough remaining carrots, you will eat all\
  \ remaining carrots, but will still be hungry.\n    \n    Example:\n    >>> eat(5,\
  \ 6, 10)\n    [11, 4]\n    >>> eat(4, 8, 9)\n    [12, 1]\n    >>> eat(1, 10, 10)\n\
  \    [11, 0]\n    >>> eat(2, 11, 5)\n    [7, 0]\n    \n    Variables:\n    @number\
  \ : integer\n        the number of carrots that you have eaten.\n    @need : integer\n\
  \        the number of carrots that you need to eat.\n    @remaining : integer\n\
  \        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n\
  \    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\
  \n    Have fun :)\n    \"\"\"\nfunction eat(number::Int64, need::Int64, remaining::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = eat;\n\t@test(candidate(5, 6,\
  \ 10) == [11, 4])\n\t@test(candidate(4, 8, 9) == [12, 1])\n\t@test(candidate(1,\
  \ 10, 10) == [11, 0])\n\t@test(candidate(2, 11, 5) == [7, 0])\n\t@test(candidate(4,\
  \ 5, 7) == [9, 2])\n\t@test(candidate(4, 5, 1) == [5, 0])\nend\n"
completions: ["    if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining\
    \ < 0 || remaining > 1000\n        error(\"Invalid input\")\n    end\n    \n \
    \   carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n\
    \    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n \
    \   carrots_left[2] = need\n    \n    carrots_left_left = zeros(Int64, 2)\n  \
    \  carrots_left_left[1] = remaining\n    carrots_left_left[2] = remaining\n  \
    \  \n    carrots_left_right = zeros(Int64, 2)\n    carrots_left_right[1] = remaining\n\
    \    carrots_left_right[2] = remaining\n    \n    carrots_right_left = zeros(Int64,\
    \ 2)\n    carrots_right_left[1] = remaining\n    carrots_right_left[2] = remaining\n\
    \    \n    carrots_right_right = zeros(Int64, 2)\n    carrots_right_right[1] =\
    \ remaining\n    carrots_right_right[2] = remaining\n    \n    carrots_left_left_left\
    \ = zeros(Int64, 2)\n    carrots_left_left_left[1] = remaining\n    carrots_left_left_left[2]\
    \ = remaining\n    \n    carrots_left_left_right = zeros(Int64, 2)\n    carrots_left_left_right[1]\
    \ = remaining\n    carrots_left_left_right[2] = remaining\n    \n    carrots_left_right_left\
    \ = zeros(Int64, 2)\n    carrots_left_right_left[1] = remaining\n    carrots_left_right_left[2]\
    \ = remaining\n    \n    carrots_left_right_right = zeros(Int64, 2)\n    carrots_left_right_right[1]\
    \ = remaining\n    carrots_left_right_right[2] = remaining\n    \n    carrots_right_left_left\
    \ = zeros(Int64, 2)\n    carrots_right_left_left[1] = remaining\n    carrots_right_left_left[2]\
    \ = remaining\n    \n    carrots_right_left_right = zeros(Int64, 2)\n    carrots_right_left_right[1]\
    \ = remaining\n    carrots_right_left_right[2] = remaining\n    \n    carrots_right_right_left\
    \ = zeros(Int64, 2)\n    carrots_right_right_left[1] = remaining\n    carrots_right_right_left[2]\
    \ = remaining\n    \n    carrots_right_right_right = zeros(Int64, 2)\n    carrots_right_right_right[1]\
    \ = remaining\n    carrots_right_right_right[2] = remaining\n    \n    carrots_left_left_left_left\
    \ = zeros(Int64, 2)\n    carrots_left_left_left_left[1] = remaining\n    carrots_left_left_left_",
  "    if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000\n        error(\"Invalid input\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n  \
    \  meals = zeros(Int64, 2)\n    meals[1] = remaining\n    meals[2] = 0\n    \n\
    \    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2]\
    \ = 0\n    \n    carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1] = 0\n \
    \   carrots_eaten[2] = 0\n    \n    meals_left = zeros(Int64, 2)\n    meals_left[1]\
    \ = 0\n    meals_left[2] = 0\n    \n    carrots_left_after_meals = zeros(Int64,\
    \ 2)\n    carrots_left_after_meals[1] = 0\n    carrots_left_after_meals[2] = 0\n\
    \    \n    carrots_eaten_after_meals = zeros(Int64, 2)\n    carrots_eaten_after_meals[1]\
    \ = 0\n    carrots_eaten_after_meals[2] = 0\n    \n    while carrots_left[1] >\
    \ 0 || carrots_eaten[1] > 0 || meals_left[1] > 0 || carrots_left_after_meals[1]\
    \ > 0 || carrots_eaten_after_meals[1] > 0\n        if carrots_left[1] > 0\n  \
    \          carrots_left[1] -= 1\n            carrots_left_after_meals[1] += 1\n\
    \        end\n        if carrots_eaten[1] > 0\n            carrots_eaten[1] -=\
    \ 1\n            carrots_eaten_after_meals[1] += 1\n        end\n        if meals_left[1]\
    \ > 0\n            meals_left[1] -= 1\n            meals_left_after_meals[1] +=\
    \ 1\n        end\n        if carrots_left_after_meals[1] > 0\n            carrots_left_after_meals[1]\
    \ -= 1\n        end\n        if carrots_eaten_after_meals[1] > 0\n           \
    \ carrots_eaten_after_meals[1] -= 1\n        end\n    end\n    \n    return carrots_eaten_after_meals,\
    \ carrots_left_after_meals\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6,\
    \ 10)\n</cell>\n<code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(1, 10, 10)\n", "    if number <= 0 || need <= 0 || remaining <= 0\n      \
    \  error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n  \
    \  carrots[1] = number\n    carrots[2] = need\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = remaining\n    meals[2] = 0\n    \n    meals_left = zeros(Int64,\
    \ 2)\n    meals_left[1] = remaining\n    meals_left[2] = 0\n    \n    meals_total\
    \ = zeros(Int64, 2)\n    meals_total[1] = number\n    meals_total[2] = 0\n   \
    \ \n    meals_left_total = zeros(Int64, 2)\n    meals_left_total[1] = number\n\
    \    meals_left_total[2] = 0\n    \n    meals_total_left = zeros(Int64, 2)\n \
    \   meals_total_left[1] = number\n    meals_total_left[2] = 0\n    \n    meals_total_left_total\
    \ = zeros(Int64, 2)\n    meals_total_left_total[1] = number\n    meals_total_left_total[2]\
    \ = 0\n    \n    meals_total_left_total_left = zeros(Int64, 2)\n    meals_total_left_total_left[1]\
    \ = number\n    meals_total_left_total_left[2] = 0\n    \n    meals_total_left_total_left_left\
    \ = zeros(Int64, 2)\n    meals_total_left_total_left_left[1] = number\n    meals_total_left_total_left_left[2]\
    \ = 0\n    \n    meals_total_left_total_left_left_left = zeros(Int64, 2)\n   \
    \ meals_total_left_total_left_left_left[1] = number\n    meals_total_left_total_left_left_left[2]\
    \ = 0\n    \n    meals_total_left_total_left_left_left_left = zeros(Int64, 2)\n\
    \    meals_total_left_total_left_left_left_left[1] = number\n    meals_total_left_total_left_left_left_left[2]\
    \ = 0\n    \n    meals_total_left_total_left_left_left_left_left = zeros(Int64,\
    \ 2)\n    meals_total_left_total_left_left_left_left_left[1] = number\n    meals_total_left_total_left_left_left_left_left[2]\
    \ = 0\n    \n    meals_total_left_total_left_left_left_left_left_left = zeros(Int64,\
    \ 2)\n    meals_total_left_total_left_left_left_left_left_left[1] = number\n \
    \   meals_total_left_total_left_left_left_left_left_left[2] = 0\n    \n    meals_total_left_total_left_left_left_left_left_left_left\
    \ = zeros(Int64, 2)\n    meal", "    if number <= 0 || need <= 0 || remaining\
    \ <= 0\n        error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = remaining\n    meals[2] = 0\n    \n    carrots_left = zeros(Int64,\
    \ 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = 0\n    \n    while\
    \ meals[1] > 0\n        carrots_left[1] -= 1\n        meals[1] -= 1\n        carrots[1]\
    \ -= 1\n        \n        if carrots_left[1] < 0\n            carrots_left[2]\
    \ += 1\n            carrots_left[1] = 0\n        end\n        \n        if carrots[1]\
    \ < 0\n            carrots[2] += 1\n            carrots[1] = 0\n        end\n\
    \    end\n    \n    return carrots\nend\n</cell>\n<code language=julia-1.0>",
  "    if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000\n        error(\"Invalid input\")\n    end\n    if number\
    \ == 0\n        return Vector{Int64}([need, remaining])\n    end\n    if remaining\
    \ == 0\n        return Vector{Int64}([need, 0])\n    end\n    \n    carrots =\
    \ Vector{Int64}([number])\n    \n    while carrots[1] > 0\n        carrots[1]\
    \ -= 1\n        remaining -= 1\n    end\n    \n    carrots = Vector{Int64}([need,\
    \ remaining])\n    \n    while carrots[1] > 0\n        carrots[1] -= 1\n     \
    \   remaining -= 1\n    end\n    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 0 || need < 0 || remaining < 0\n        error(\"invalid input\"\
    )\n    end\n    if number == 0\n        return [need, remaining]\n    end\n  \
    \  if remaining < need\n        return [number, 0]\n    end\n    \n    carrots_left\
    \ = number - need\n    carrots_eaten = need - remaining\n    \n    return [carrots_eaten,\
    \ carrots_left]\nend\n</cell>\n<code language=julia-1.5>", "    if number < 0\
    \ || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining >\
    \ 1000 \n        error(\"invalid input\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n    carrots_left =\
    \ zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = need\n\
    \    \n    carrots_left = carrots_left - carrots\n    \n    return carrots_left\n\
    end\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=", "    if number\
    \ <= 0 || need <= 0 || remaining <= 0\n        error(\"Invalid input\")\n    end\n\
    \    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = need\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n\
    \    carrots_left[2] = need\n    \n    carrots_left[1] = remaining - number\n\
    \    \n    return carrots\nend\n</cell>\n<code language=julia-1.0>", "    if number\
    \ < 0 || need < 0 || remaining < 0\n        error(\"Invalid input\")\n    end\n\
    \    if number == 0 && need == 0 && remaining == 0\n        Vector{Int64}()\n\
    \    else\n        Vector{Int64}([number, need, remaining])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number == 0\n        return Vector{Int64}()\n\
    \    \n    if number > remaining\n        return Vector{Int64}()\n    \n    if\
    \ need == 0\n        return Vector{Int64}([number, remaining])\n    \n    if number\
    \ > need\n        return Vector{Int64}()\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000 \n        error(\"invalid input\") \n    else \n       \
    \ Vector{Int64}([number, need, remaining]) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code\
    \ language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2,\
    \ 11, 5)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number\
    \ of minutes you need to wait until you can eat 100 carrots.", "    \n    if number\
    \ > 1000 || need > 1000 || remaining > 1000\n        return Vector{Int64}()\n\
    \    end\n    \n    carrots = Vector{Int64}()\n    \n    if number == 0\n    \
    \    carrots = Vector{Int64}([need])\n        return carrots\n    end\n    \n\
    \    if remaining == 0\n        carrots = Vector{Int64}([number])\n        return\
    \ carrots\n    end\n    \n    carrots = Vector{Int64}([number])\n    \n    while\
    \ carrots[1] < need\n        carrots[1] += 1\n    end\n    \n    while carrots[1]\
    \ > 0\n        carrots[1] -= 1\n    end\n    \n    return carrots\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if number < 0 || need < 0 || remaining < 0\n        error(\"invalid\
    \ input\")\n    end\n    if number == 0\n        return [need, remaining]\n  \
    \  end\n    if remaining == 0\n        return [number, 0]\n    end\n    \n   \
    \ carrots = number\n    need = need - carrots\n    remaining = remaining - carrots\n\
    \    \n    if need == 0\n        return [carrots, 0]\n    end\n    \n    carrots\
    \ = carrots + eat(number, need, remaining)[1]\n    \n    return [carrots, need]\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    # Your code here\n\
    \    \n    return Vector{Int64}([number, remaining])\nend\n</cell>\n<code language=julia-1.5>\n\
    # Run this cell to test your code\neat(5, 6, 10)\n</cell>\n<text>\nProblem 3\n\
    Write a function called hungry_rabbit that takes in two integers representing\
    \ a number of carrots left and number of carrots eaten so far, and returns true\
    \ if the number of carrots left is greater than the number of carrots eaten so\
    \ far.", "    if number < 0 || need < 0 || remaining < 0\n        error(\"Invalid\
    \ input\")\n    end\n    if number == 0 && need == 0 && remaining == 0\n     \
    \   Vector{Int64}()\n    else\n        Vector{Int64}([number, need, remaining])\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\neat(5, 6, 10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of carrots left after a meal\
    \ is completed.\nThe function should take two arguments: the number of carrots\
    \ you have eaten so far,\nand the number of carrots left after your meals.\nThe\
    \ function should return an array of two integers, the first integer is the number\
    \ of\ncarrots left after your meals, the second integer is the number you have\
    \ eaten so far.\nThe function should return an empty array if there are no carrots\
    \ left.\nThe function should raise an error if there are not enough carrots left.\n\
    The function should raise an error if there are not enough carrots left.\nThe\
    \ function should raise an error if there are not enough carrots left.\nThe function\
    \ should raise an error if there are not enough carrots left.\nThe function should\
    \ raise an error if there are not enough carrots left.\nThe function should raise\
    \ an error if there are not enough carrots left.\nThe function should raise an\
    \ error if there are not enough carrots left.\nThe function should raise an error\
    \ if there are not enough carrots left.\nThe function should raise an error if\
    \ there are not enough carrots left.\nThe function should raise an error if there\
    \ are not enough carrots left.\nThe function should raise an error if there are\
    \ not enough carrots left.\nThe function should raise an error if there are not\
    \ enough carrots left.\nThe function should raise an error if there are not enough\
    \ carrots left.\nThe function should raise an error if there are not enough carrots\
    \ left.\nThe function should raise an error if there are not enough carrots left.\n\
    The function should raise an error if there are not enough carrots left.\nThe\
    \ function should raise an error if there are not enough carrots left.\nThe function\
    \ should raise an error if there are not enough carrots left.\nThe function should\
    \ raise an error if there are not enough carrots left.\nThe function should raise\
    \ an error if there are not enough carrots left.\nThe function should raise an\
    \ error if there are not enough carrots left.\nThe function should raise an error\
    \ if there are not enough carrots left.\nThe function should raise an error if\
    \ there are not enough carrots left.\nThe function should raise an error if there\
    \ are not enough carrots left.\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if number < 0 || number > 1000 \n        error(\"number must\
    \ be between 0 and 1000\")\n    end\n    if need < 0 || need > 1000 \n       \
    \ error(\"need must be between 0 and 1000\")\n    end\n    if remaining < 0 ||\
    \ remaining > 1000 \n        error(\"remaining must be between 0 and 1000\")\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if number > remaining \n  \
    \      number = remaining\n    end\n    if number == 0 \n        return Vector{Int64}([need,\
    \ remaining])\n    end\n    if number > need \n        number = need\n    end\n\
    \    \n    \n    \n    return Vector{Int64}([number, remaining - number])\nend\n\
    </cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ called hungry that takes two integers representing a number of carrots left\
    \ and an integer.\nYou should return true if there are enough carrots left in\
    \ the meal to complete the meal, and false otherwise.\nIf there are not enough\
    \ carrots left, you should return false and print a message saying \"Not enough\
    \ carrots left\".\nIf there are not enough carrots left, you should return false\
    \ and print a message saying \"Not enough carrots left\".\nIf there are not enough\
    \ carrots left, you should return false and print a message saying \"Not enough\
    \ carrots left\".", "    if number == 0\n        Vector{Int64}([need, remaining])\n\
    \    else\n        Vector{Int64}([need, remaining])\n    end\nend\n</cell>\n<code\
    \ language=julia-0.6>\n\"\"\"\n    You have a certain number of carrots, and you\
    \ know that there are only two kinds of carrots:\n    \n    One type of carrots\
    \ is called a soda, and it costs 1 carrot.\n    The other type of carrots is called\
    \ a honey, and it costs 2 carrots.\n    \n    You want to eat as many carrots\
    \ as possible, while still having at least 1 honey.\n    \n    You should return\
    \ an array of [ total number of eaten carrots after your meals,\n            \
    \                        the number of carrots left after your meals ]\n    if\
    \ there are not enough remaining carrots, you will eat all remaining carrots,\
    \ but will still be hungry.\n    \n    Example:\n    >>> eat(5, 6, 10)\n    [11,\
    \ 4]\n    >>> eat(4, 8, 9)\n    [12, 1]\n    >>> eat(1, 10, 10)\n    [11, 0]\n\
    \    >>> eat(2, 11, 5)\n    [7, 0]\n    \n    Variables:\n    @number : integer\n\
    \        the number of carrots that you have eaten.\n    @need : integer\n   \
    \     the number of carrots that you need to eat.\n    @remaining : integer\n\
    \        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n\
    \    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if number == 0\n        Vector{Int64}([need,\
    \ remaining])\n    elseif remaining < 0\n        Vector{Int64}([need, 0])\n  \
    \  elseif remaining == 0\n        Vector{Int64}([number, 0])\n    else\n     \
    \   Vector{Int64}([number, remaining])\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function called eat_all that takes in an array of integers and returns\
    \ the number of carrots you would need to eat to complete the day's meals.", " \
    \   if number <= 0 || need <= 0 || remaining <= 0\n        error(\"Invalid input\"\
    )\n    end\n    \n    if number == 0\n        return [need, remaining]\n    end\n\
    \    \n    if remaining < need\n        error(\"Not enough carrots to eat\")\n\
    \    end\n    \n    if number > remaining\n        error(\"Not enough carrots\
    \ to eat\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    if number == 0\n        return [need, remaining]\n  \
    \  \n    if remaining < 0\n        return [number, 0]\n    \n    if remaining\
    \ == 0\n        return [number, 0]\n    \n    if number < need\n        return\
    \ [number, 0]\n    \n    if number > need\n        return [number, 0]\n    \n\
    \    carrots = number\n    \n    if remaining > carrots\n        carrots = remaining\n\
    \    \n    return [number, carrots-need]\nend\n</cell>\n<code language=julia-1.1>\n\
    eat(5, 6, 10)\n</cell>\n<code language=julia-1.1>\neat(4, 8, 9)\n</cell>\n<code\
    \ language=julia-1.1>\neat(1, 10, 10)\n</cell>\n<code language=julia-1.1>\neat(2,\
    \ 11, 5)\n</cell>\n<code language=julia-1.1>\neat(10, 11, 5)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 11, 0)\n</cell>\n<code language=julia-1.1>\neat(10, 11, -1)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 11, -2)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 11, -3)\n</cell>\n<code language=julia-1.1>\neat(10, 11, -4)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 11, -5)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 11, -6)\n</cell>\n<code language=julia-1.1>\neat(10, 11, -7)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 11, -8)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 11, -9)\n</cell>\n<code language=julia-1.1>\neat(10, 11, -10)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 11, -11)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 11, -12)\n</cell>\n<code language=julia-1.1>\neat(10, 11, -13)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 11, -14)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 11, -15)\n</cell>\n<code language=julia-1.1>\neat(10, 11, -16)\n</cell>\n\
    <code language=julia-1.1>\neat(10, 11, -17)\n</cell>\n<code language=julia-1.1>\n\
    eat(10, 11, -18)\n</cell>\n<code language=julia-1.1>\neat(10, 11, -19)\n</cell>\n\
    <code language=", "    if number < 0 || number > 1000 || need < 0 || need > 1000\
    \ || remaining < 0 || remaining > 1000 \n        error(\"Invalid input\") \n \
    \   else \n        Vector{Int64}([number, need, remaining]) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 0 || need < 0 || remaining < 0\n\
    \        error(\"Invalid input\")\n    end\n    \n    if number == 0\n       \
    \ return [need, remaining]\n    end\n    \n    if remaining < need\n        error(\"\
    Not enough carrots to eat\")\n    end\n    \n    carrots = zeros(Int64, 2)\n \
    \   carrots[1] = number\n    carrots[2] = remaining\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = need\n    meals[2] = 0\n    \n    carrots_left = zeros(Int64,\
    \ 2)\n    carrots_left[1] = 0\n    carrots_left[2] = 0\n    \n    carrots_eaten\
    \ = zeros(Int64, 2)\n    carrots_eaten[1] = 0\n    carrots_eaten[2] = 0\n    \n\
    \    meals_left = zeros(Int64, 2)\n    meals_left[1] = 0\n    meals_left[2] =\
    \ 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = 0\n    carrots_left[2]\
    \ = 0\n    \n    carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1] = 0\n \
    \   carrots_eaten[2] = 0\n    \n    meals_left = zeros(Int64, 2)\n    meals_left[1]\
    \ = 0\n    meals_left[2] = 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1]\
    \ = 0\n    carrots_left[2] = 0\n    \n    carrots_eaten = zeros(Int64, 2)\n  \
    \  carrots_eaten[1] = 0\n    carrots_eaten[2] = 0\n    \n    meals_left = zeros(Int64,\
    \ 2)\n    meals_left[1] = 0\n    meals_left[2] = 0\n    \n    carrots_left = zeros(Int64,\
    \ 2)\n    carrots_left[1] = 0\n    carrots_left[2] = 0\n    \n    carrots_eaten\
    \ = zeros(Int64, 2)\n    carrots_eaten[1] = 0\n    carrots_eaten[2] = 0\n    \n\
    \    meals_left = zeros(Int64, 2)\n    meals_left[1] = 0\n    meals_left[2] =\
    \ 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = 0\n    carrots_left[2]\
    \ = 0\n    \n    carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1] = 0\n \
    \   carrots_eat", "    if number < 0 || number > 1000 || need < 0 || need > 1000\
    \ || remaining < 0 || remaining > 1000 \n        error(\"Invalid input\")\n  \
    \  else\n        Vector{Int64}([number, need, remaining])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 0 || number > 1000 || need < 0 ||\
    \ need > 1000 || remaining < 0 || remaining > 1000\n        return error(\"invalid\
    \ input\")\n    end\n    if remaining == 0\n        return [number, 0]\n    end\n\
    \    \n    carrots = number\n    carrots_left = remaining\n    \n    while carrots_left\
    \ > 0\n        carrots_left -= 1\n        carrots += need\n    end\n    \n   \
    \ return [carrots, carrots_left]\nend\n</cell>\n<code language=julia-1.5>\neat(5,\
    \ 6, 10)\n</cell>\n<text>\nProblem 3\nWrite a function called hungry that takes\
    \ two integers n and k as arguments and returns true if the number is hungry or\
    \ false if it is not.\nThe function should return false if either of the arguments\
    \ are negative.\nThe function should return false if either of the arguments are\
    \ equal to 0.\nThe function should return false if either of the arguments are\
    \ greater than 1000.\nThe function should return false if either of the arguments\
    \ are less than 0.", "    if number <= 0 || need <= 0 || remaining <= 0 \n   \
    \     error(\"invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n\
    \    carrots[1] = number\n    carrots[2] = remaining\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = need\n    meals[2] = 0\n    \n    carrots_left = zeros(Int64,\
    \ 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = 0\n    \n    carrots_left_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = 0\n    \n    carrots_left_after_meals_after_meals = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals[1]\
    \ = remaining\n    carrots_left_after_meals_after_meals[2] = 0\n    \n    carrots_left_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals[1] =\
    \ remaining\n    carrots_left_after_meals_after_meals_after_meals[2] = 0\n   \
    \ \n    carrots_left_after_meals_after_meals_after_meals_after_meals = zeros(Int64,\
    \ 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals[1] = remaining\n\
    \    carrots_left_after_meals_after_meals_after_meals_after_meals[2] = 0\n   \
    \ \n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals[1]\
    \ = remaining\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals[2]\
    \ = 0\n    \n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_meals[1]\
    \ = remaining\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_me",
  "    if number == 0 \n        Vector{Int64}([need, remaining])\n    else\n     \
    \   Vector{Int64}([need, remaining])\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    eat(5, 6, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number\
    \ of days in a month.", "    if number <= 0 || need <= 0 || remaining <= 0\n \
    \       error(\"invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n\
    \    carrots[1] = number\n    carrots[2] = need\n    \n    carrots_left = zeros(Int64,\
    \ 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = remaining\n    \n\
    \    carrots_left = carrots_left[1]\n    \n    carrots_left\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function called hungry that takes an integer as an argument\
    \ and returns true if the number is hungry, false otherwise.", "    if number\
    \ < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if number < 0 || number > 1000 || need < 0 || need\
    \ > 1000 || remaining < 0 || remaining > 1000 \n        error(\"Invalid input\"\
    )\n    else \n        Vector{Int64}([number, need, remaining])\n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "    if number <= 0 || need <= 0 || remaining\
    \ <= 0\n        return Vector{Int64}()\n    end\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    ", "    if number < 0 || number > 1000\
    \ || need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n        error(\"\
    Invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1]\
    \ = number\n    carrots[2] = need\n    \n    meals = zeros(Int64, 2)\n    meals[1]\
    \ = remaining\n    meals[2] = 0\n    \n    carrots_left = zeros(Int64, 2)\n  \
    \  carrots_left[1] = remaining\n    carrots_left[2] = 0\n    \n    carrots_left_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals[1] = 0\n    carrots_left_after_meals[2]\
    \ = 0\n    \n    carrots_left_after_meals_after_meals = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals[1]\
    \ = 0\n    carrots_left_after_meals_after_meals[2] = 0\n    \n    carrots_left_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals[1] =\
    \ 0\n    carrots_left_after_meals_after_meals_after_meals[2] = 0\n    \n    carrots_left_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals[1]\
    \ = 0\n    carrots_left_after_meals_after_meals_after_meals_after_meals[2] = 0\n\
    \    \n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals[1]\
    \ = 0\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals[2]\
    \ = 0\n    \n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_meals[1]\
    \ = 0\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_",
  "    if number == 0\n        Vector{Int64}([need, remaining])\n    else\n      \
    \  Vector{Int64}([need, number])\n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    eat(5, 6, 10)\n</cell>\n<code language=julia-0.6>\neat(4, 8, 9)\n</cell>\n<code\
    \ language=julia-0.6>\neat(1, 10, 10)\n</cell>\n<code language=julia-0.6>\neat(2,\
    \ 11, 5)\n</cell>\n<text>\nExercise 3\nWrite a function called hungry_rabbit that\
    \ takes in three integers representing a person's age, their weight and their\
    \ hungriness.\nThe function should return an array of two integers representing\
    \ the person's hungriness and hungry rabbit's hungriness.\nThe hungry rabbit has\
    \ a hungry rabbit and a hungry rabbit.\nThe hungry rabbit has a hungry rabbit\
    \ and a hungry rabbit.\nThe hungry rabbit has a hungry rabbit and a hungry rabbit.\n\
    The hungry rabbit has a hungry rabbit and a hungry rabbit.\nThe hungry rabbit\
    \ has a hungry rabbit and a hungry rabbit.\nThe hungry rabbit has a hungry rabbit\
    \ and a hungry rabbit.\nThe hungry rabbit has a hungry rabbit and a hungry rabbit.\n\
    The hungry rabbit has a hungry rabbit and a hungry rabbit.\nThe hungry rabbit\
    \ has a hungry rabbit and a hungry rabbit.\nThe hungry rabbit has a hungry rabbit\
    \ and a hungry rabbit.\nThe hungry rabbit has a hungry rabbit and a hungry rabbit.\n\
    The hungry rabbit has a hungry rabbit and a hungry rabbit.\nThe hungry rabbit\
    \ has a hungry rabbit and a hungry rabbit.\nThe hun", "    if number < 0 || number\
    \ > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n   \
    \     return error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n    carrots_left =\
    \ zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = need\n\
    \    \n    carrots_left = carrots_left - carrots + carrots_left\n    \n    return\
    \ carrots_left\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if number <= 0 || need <= 0 || remaining\
    \ <= 0\n        return Vector{Int64}()\n    end\n    \n    carrots = Vector{Int64}()\n\
    \    carrots = Vector{Int64}([number])\n    \n    while carrots[1] <= 0\n    \
    \    carrots = carrots[2:end]\n    end\n    \n    while carrots[1] > 0\n     \
    \   carrots = carrots[2:end]\n    end\n    \n    carrots = carrots[2:end]\n  \
    \  \n    while carrots[1] > 0\n        carrots = carrots[2:end]\n    end\n   \
    \ \n    carrots = carrots[2:end]\n    \n    while carrots[1] > 0\n        carrots\
    \ = carrots[2:end]\n    end\n    \n    carrots = carrots[2:end]\n    \n    while\
    \ carrots[1] > 0\n        carrots = carrots[2:end]\n    end\n    \n    carrots\
    \ = carrots[2:end]\n    \n    while carrots[1] > 0\n        carrots = carrots[2:end]\n\
    \    end\n    \n    carrots = carrots[2:end]\n    \n    while carrots[1] > 0\n\
    \        carrots = carrots[2:end]\n    end\n    \n    carrots = carrots[2:end]\n\
    \    \n    while carrots[1] > 0\n        carrots = carrots[2:end]\n    end\n \
    \   \n    carrots = carrots[2:end]\n    \n    while carrots[1] > 0\n        carrots\
    \ = carrots[2:end]\n    end\n    \n    carrots = carrots[2:end]\n    \n    while\
    \ carrots[1] > 0\n        carrots = carrots[2:end]\n    end\n    \n    carrots\
    \ = carrots[2:end]\n    \n    while carrots[1] > 0\n        carrots = carrots[2:end]\n\
    \    end\n    \n    carrots = carrots[2:end]\n    \n    while carrots[1] > 0\n\
    \        carrots = carrots[2:end]\n    end\n    \n    carrots = carrots[2:end]\n\
    \    \n    while carrots[1] > 0\n        carrots = carrots[2:end]\n    end\n \
    \   \n    carrots = carrots[2:end]\n    \n    while carrots[1] > 0\n        carrots\
    \ = carrots[2:end]\n    end\n    \n    carrots = carrots[2:end]\n    \n    while\
    \ carrots[1] > 0\n        carrots = carrot", "    if number > remaining \n   \
    \     number = remaining\n    end\n    if number == 0 \n        return Vector{Int64}([need,\
    \ remaining])\n    end\n    if number < need \n        return Vector{Int64}([number,\
    \ 0])\n    end\n    \n    \n    return Vector{Int64}([number, need])\nend\n</cell>\n\
    <code language=julia-0.6>\neat(5, 6, 10)\n</cell>\n<text>\nProblem 3\nWrite a\
    \ function called hungry that takes two integers n and k, and returns true if\
    \ and only if you can hungry n carrots, without eating more than k carrots.",
  "    if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000\n        return error(\"invalid input\")\n    end\n    \n\
    \    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    ", "    if number > 1000 || need > 1000 ||\
    \ remaining > 1000\n        error(\"The constraints are violated\")\n    end\n\
    \    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = need\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = car", "    if number\
    \ <= 0 || need <= 0 || remaining <= 0\n        error(\"Invalid input\")\n    end\n\
    \    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = need\n    \n    meals = zeros(Int64, 2)\n    meals[1] = remaining\n    meals[2]\
    \ = 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n\
    \    carrots_left[2] = 0\n    \n    while carrots_left[1] > 0\n        carrots_left[1]\
    \ -= 1\n        carrots_left[2] += 1\n    end\n    \n    while carrots[1] > 0\n\
    \        carrots[1] -= 1\n        carrots[2] += 1\n    end\n    \n    return carrots\n\
    end\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the number of ways to arrange n items in k\
    \ containers.", "    if number > 0 && need > 0 && remaining > 0 && number <= need\
    \ && number <= remaining\n        carrots = number\n        carrots_left = remaining\n\
    \        meals = 0\n        meals_left = 0\n        while carrots > 0\n      \
    \      carrots_left -= 1\n            meals += 1\n            carrots -= 1\n \
    \       end\n        meals_left = carrots - meals\n        meals_left = meals_left\
    \ == 0 ? 0 : meals_left\n        meals_left = meals_left == 1 ? 1 : meals_left\n\
    \        meals_left = meals_left == 2 ? 2 : meals_left\n        meals_left = meals_left\
    \ == 3 ? 3 : meals_left\n        meals_left = meals_left == 4 ? 4 : meals_left\n\
    \        meals_left = meals_left == 5 ? 5 : meals_left\n        meals_left = meals_left\
    \ == 6 ? 6 : meals_left\n        meals_left = meals_left == 7 ? 7 : meals_left\n\
    \        meals_left = meals_left == 8 ? 8 : meals_left\n        meals_left = meals_left\
    \ == 9 ? 9 : meals_left\n        meals_left = meals_left == 10 ? 10 : meals_left\n\
    \        meals_left = meals_left == 11 ? 11 : meals_left\n        meals_left =\
    \ meals_left == 12 ? 12 : meals_left\n        meals_left = meals_left == 13 ?\
    \ 13 : meals_left\n        meals_left = meals_left == 14 ? 14 : meals_left\n \
    \       meals_left = meals_left == 15 ? 15 : meals_left\n        meals_left =\
    \ meals_left == 16 ? 16 : meals_left\n        meals_left = meals_left == 17 ?\
    \ 17 : meals_left\n        meals_left = meals_left == 18 ? 18 : meals_left\n \
    \       meals_left = meals_left == 19 ? 19 : meals_left\n        meals_left =\
    \ meals_left == 20 ? 20 : meals_left\n        meals_left = meals_left == 21 ?\
    \ 21 : meals_left\n        meals_left = meals_left == 22 ? 22 : meals_left\n \
    \       ", "    if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining\
    \ < 0 || remaining > 1000\n        error(\"invalid input\")\n    end\n    \n \
    \   carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n\
    \    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n \
    \   carrots_left[2] = need\n    \n    carrots_left = carrots_left - carrots +\
    \ number\n    \n    return carrots_left\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    meals(carrots::Vector{Int64}, meals::Vector{Int64}, days::Int64)",
  "    if number < 0 || need < 0 || remaining < 0\n        error(\"invalid input\"\
    )\n    end\n    if number == 0 && need == 0 && remaining == 0\n        return\
    \ Vector{Int64}()\n    end\n    if number == 0 && need == 0 && remaining > 0\n\
    \        return Vector{Int64}(remaining, 0)\n    end\n    if number == 0 && need\
    \ > 0 && remaining == 0\n        return Vector{Int64}(0, need)\n    end\n    if\
    \ number == 0 && need > 0 && remaining > 0\n        return Vector{Int64}(0, need)\n\
    \    end\n    if number > 0 && need == 0 && remaining == 0\n        return Vector{Int64}(number,\
    \ 0)\n    end\n    if number > 0 && need == 0 && remaining > 0\n        return\
    \ Vector{Int64}(number, 0)\n    end\n    if number > 0 && need > 0 && remaining\
    \ == 0\n        return Vector{Int64}(number, need)\n    end\n    if number > 0\
    \ && need > 0 && remaining > 0\n        return Vector{Int64}(number, need)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    meals(number::Int64,\
    \ need::Int64, remaining::Int64)::Vector{Int64}\n    \n    You have a certain\
    \ number of carrots, and you need to eat some carrots to complete the day's meals.\n\
    \    \n    Example:\n    >>> meals(5, 6, 10)\n    [11, 4]\n    >>> meals(4, 8,\
    \ 9)\n    [12, 1]\n    >>> meals(1, 10, 10)\n    [11, 0]\n    >>> meals(2, 11,\
    \ 5)\n    [7, 0]\n    \n    Variables:\n    @number : integer\n        the number\
    \ of carrots that you have eaten.\n    @need : integer\n        the number of\
    \ carrots that you need to eat.\n    @remaining : integer\n        the number\
    \ of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number\
    \ <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000", "    if number\
    \ == 0\n        Vector{Int64}([need, remaining])\n    else\n        Vector{Int64}([need,\
    \ remaining])\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of carrots\
    \ left after a meal is complete.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000\n        return error(\"invalid input\")\n    end\n    \n\
    \    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n\
    \    \n    meals = zeros(Int64, 2)\n    meals[1] = remaining\n    meals[2] = 0\n\
    \    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n \
    \   carrots_left[2] = 0\n    \n    while meals[1] > 0\n        carrots_left[1]\
    \ -= meals[1]\n        meals[1] -= 1\n        carrots[1] += meals[1]\n       \
    \ meals[2] += 1\n    end\n    \n    return carrots_left\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 6, 10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of carrots left after a meal is complete.\nThe function should take three\
    \ arguments:\na meal number, the number of carrots left, and the number of carrots\
    \ eaten.\nThe function should return an array of two integers, the first one being\
    \ the number of carrots left, and the second one being the number of carrots eaten.\n\
    The function should return an error if the meal number is not in the range 0 to\
    \ 99 or the number of carrots eaten is less than 0 or greater than 1000.", " \
    \   if number < 0 || number > 1000 \n        error(\"number should be between\
    \ 0 and 1000\")\n    else if need < 0 || need > 1000 \n        error(\"need should\
    \ be between 0 and 1000\")\n    else if remaining < 0 || remaining > 1000 \n \
    \       error(\"remaining should be between 0 and 1000\")\n    else \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        ", "    if number <\
    \ 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n    carrots_left =\
    \ zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = need\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrots_left[1:2]\n    \n    carrots_left = carrots_left[1:2]\n\
    \    \n    carrots_left = carrot", "    if number < 0 || need < 0 || remaining\
    \ < 0\n        error(\"Invalid input\")\n    end\n    if number == 0 && need ==\
    \ 0 && remaining == 0\n        return Vector{Int64}()\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n  \
    \  carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    ",
  "    if number == 0\n        Vector{Int64}()\n    elseif remaining < 0\n       \
    \ Vector{Int64}()\n    elseif remaining == 0\n        Vector{Int64}([need])\n\
    \    elseif need == 0\n        Vector{Int64}([number, remaining])\n    else\n\
    \        Vector{Int64}([number, remaining])\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    findMeals(meals::Vector{Int64}, carrots::Vector{Int64}, remaining::Int64)::Vector{Int64}\n\
    \    \n    You have a certain number of carrots, and a certain number of meals.\n\
    \    You need to find how many carrots you will need to eat to complete the meals.\n\
    \    \n    Example:\n    >>> findMeals([1, 2, 3], [4, 2, 3], 2)\n    [3, 1]\n\
    \    >>> findMeals([1, 2, 3], [4, 2, 3], 1)\n    [3, 0]\n    >>> findMeals([1,\
    \ 2, 3], [4, 2, 3], 0)\n    []\n    \n    Variables:\n    @meals : Vector{Int64}\n\
    \        the meals you have eaten\n    @carrots : Vector{Int64}\n        the carrots\
    \ you have in stock\n    @remaining : integer\n        the number of remaining\
    \ carrots in stock\n    \n    Constrain:\n    * 0 <= meals <= 1000\n    * 0 <=\
    \ carrots <= 1000\n    * 0 <= remaining <= 1000", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if number > 0 && need > 0 && remaining\
    \ > 0 && number <= need && number <= remaining\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n", "    if number\
    \ == 0\n        return [need, remaining]\n    else\n        carrots = number -\
    \ need\n        if remaining >= carrots \n            return [carrots, remaining]\n\
    \        else\n            return [carrots, remaining]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<text>\nProblem 3\nWrite a\
    \ function that returns the number of prime numbers less than a given number.\
    \ \nThe function should take in a single integer and return the number of prime\
    \ numbers less than that integer.", "    if number < 0 || need < 0 || remaining\
    \ < 0\n        error(\"invalid input\")\n    end\n    if number == 0\n       \
    \ return [need, remaining]\n    end\n    if remaining == 0\n        return [number,\
    \ 0]\n    end\n    \n    carrots = number\n    need = need - carrots\n    remaining\
    \ = remaining - carrots\n    \n    if need == 0\n        return [carrots, 0]\n\
    \    end\n    \n    carrots = carrots + eat(number, need, remaining)[1]\n    return\
    \ [carrots, eat(number, need, remaining)[1]]\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code\
    \ language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2,\
    \ 11, 5)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 0)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 1)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 2)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 3)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 4)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 5)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 6)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 7)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 8)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 9)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 10)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 11)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 12)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 13)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 14)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 15)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 16)\n</cell>\n\
    <code language=julia-1.5>\neat(10, 10, 17)\n</cell>\n<code language=julia-1.5>\n\
    eat(10, 10, 18)\n</cell>\n<code language=julia-1.5>\neat(", "    if number <=\
    \ 0 || need <= 0 || remaining <= 0 \n        error(\"invalid input\")\n    else\
    \ \n        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n       \
    \ meals = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n\
    \        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals\
    \ = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n\
    \        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals\
    \ = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n\
    \        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals\
    \ = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n\
    \        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals\
    \ = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n\
    \        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals\
    \ = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n\
    \        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals\
    \ = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n\
    \        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals\
    \ = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n\
    \        meals = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals\
    \ = Vector{Int64}()\n        meals = Vector{Int64}()\n        meals = Vector{Int64",
  "    if number <= 0 || need <= 0 || remaining <= 0\n        error(\"invalid input\"\
    )\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n   \
    \ carrots[2] = need\n    \n    meals = zeros(Int64, 2)\n    meals[1] = remaining\n\
    \    meals[2] = 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1]\
    \ = remaining\n    carrots_left[2] = 0\n    \n    carrots_eaten = zeros(Int64,\
    \ 2)\n    carrots_eaten[1] = 0\n    carrots_eaten[2] = 0\n    \n    while carrots_left[1]\
    \ > 0\n        carrots_left[1] = carrots_left[1] - 1\n        carrots_eaten[1]\
    \ = carrots_eaten[1] + 1\n    end\n    \n    while carrots_eaten[1] > 0\n    \
    \    carrots_eaten[1] = carrots_eaten[1] - 1\n        carrots_left[1] = carrots_left[1]\
    \ + 1\n    end\n    \n    carrots_eaten[2] = carrots_eaten[2] - carrots[1]\n \
    \   carrots_left[2] = carrots_left[2] - carrots[2]\n    \n    return carrots_eaten\n\
    end\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes in an array of integers and returns the number of unique elements\
    \ in the array.", "    if number <= 0 || need <= 0 || remaining <= 0\n       \
    \ error(\"invalid input\")\n    end\n    \n    if remaining == 0\n        return\
    \ Vector{Int64}(number, 0)\n    end\n    \n    carrots = number\n    \n    while\
    \ carrots > 0\n        if carrots >= need\n            carrots -= need\n     \
    \   else\n            carrots -= remaining\n        end\n    end\n    \n    return\
    \ Vector{Int64}(number, carrots)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if number > 0 &&\
    \ number <= 1000 && need > 0 && need <= 1000 && remaining > 0 && remaining <=\
    \ 1000\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n", "    if number <= 0 || need <= 0 || remaining <= 0\n        error(\"invalid\
    \ input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n\
    \    carrots[2] = remaining\n    \n    carrots[2] = carrots[2] - (carrots[1] -\
    \ need)\n    \n    if carrots[2] <= 0\n        carrots[1] = carrots[1] - carrots[2]\n\
    \        carrots[2] = 0\n    end\n    \n    return carrots\nend\n</cell>\n<code\
    \ language=julia-1.0>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.0>\neat(4,\
    \ 8, 9)\n</cell>\n<code language=julia-1.0>\neat(1, 10, 10)\n</cell>\n<code language=julia-1.0>\n\
    eat(2, 11, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of minutes that a person has spent in a given number of hours.\nThe function\
    \ should take two parameters: the number of hours the person has spent and the\
    \ number of minutes the person has spent in the given number of hours.\nThe function\
    \ should return the number of minutes the person has spent in the given number\
    \ of hours.", "    if number > 1000 \n        error(\"number should be less than\
    \ 1000\")\n    else if need > 1000 \n        error(\"need should be less than\
    \ 1000\")\n    else if remaining > 1000 \n        error(\"remaining should be\
    \ less than 1000\")\n    else \n        Vector{Int64}([number, need, remaining])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1,\
    \ 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates the number of carrots left after\
    \ your meals.\nThe function should take two arguments:\n@meals : an array of integers\n\
    @remaining : an array of integers\nThe function should return an array of integers\
    \ \nThe first element of the returned array should be the number of carrots left\
    \ after your meals.\nThe second element of the returned array should be the number\
    \ of carrots left after your meals.\nThe function should return an error if there\
    \ are not enough carrots to complete the meals.\nThe function should return an\
    \ error if there are not enough carrots to complete the meals.\nThe function should\
    \ return an error if there are not enough carrots to complete the meals.\nThe\
    \ function should return an error if there are not enough carrots to complete\
    \ the meals.\nThe function should return an error if there are not enough carrots\
    \ to complete the meals.\nThe function should return an error if there are not\
    \ enough carrots to complete the meals.\nThe function should return an error if\
    \ there are not enough carrots to complete the meals.\nThe function should return\
    \ an error if there are not enough carrots to complete the meals.\nThe function\
    \ should return an error if there are not enough carrots to complete the meals.\n\
    The function should return an error if there are not enough carrots to complete\
    \ the meals.\nThe function should return an error if there are not enough carrots\
    \ to complete the meals.\nThe function should return an error if there are not\
    \ enough carrots to complete the meals.\nThe function should return an error if\
    \ there are not enough carrots to complete the meals.\nThe function should return\
    \ an error if there are not enough carrots to complete the meals.\nThe function\
    \ should return an error if there are not enough carrots to complete the meals.\n\
    The function should return an error if there are not enough carrots to complete\
    \ the meals.\nThe function should return an error if ", "    if number < 0 ||\
    \ number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n\
    \        error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n\
    \    carrots[1] = number\n    carrots[2] = need\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = remaining\n    meals[2] = 0\n    \n    carrots_left = zeros(Int64,\
    \ 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = 0\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = carrots_left\n    \n    carrots_left\
    \ = carrots_left\n    \n    carrots_left = ", "    if number < 0 || number > 1000\
    \ \n        error(\"number must be between 0 and 1000\")\n    else if need < 0\
    \ || need > 1000 \n        error(\"need must be between 0 and 1000\")\n    else\
    \ if remaining < 0 || remaining > 1000 \n        error(\"remaining must be between\
    \ 0 and 1000\")\n    else if number == 0 && need == 0 && remaining == 0 \n   \
    \     return Vector{Int64}()\n    else if number == 0 && need == 0 && remaining\
    \ > 0 \n        return Vector{Int64}(remaining)\n    else if number == 0 && need\
    \ > 0 && remaining == 0 \n        return Vector{Int64}(need)\n    else if number\
    \ == 0 && need > 0 && remaining > 0 \n        return Vector{Int64}(number, need)\n\
    \    else if number > 0 && need == 0 && remaining == 0 \n        return Vector{Int64}(number,\
    \ need)\n    else if number > 0 && need == 0 && remaining > 0 \n        return\
    \ Vector{Int64}(number, need, remaining)\n    else if number > 0 && need > 0 &&\
    \ remaining == 0 \n        return Vector{Int64}(number, need)\n    else if number\
    \ > 0 && need > 0 && remaining > 0 \n        return Vector{Int64}(number, need,\
    \ remaining)\n    else \n        error(\"number must be greater than 0\")\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    meals(number::Int64,\
    \ need::Int64, remaining::Int64)::Vector{Int64}\n    \n    You have a certain\
    \ number of carrots, and you now need to eat some number of carrots to complete\
    \ the day's meals.\n    \n    Example:\n    >>> meals(5, 6, 10)\n    [11, 4]\n\
    \    >>> meals(4, 8, 9)\n    [12, 1]\n    >>> meals(1, 10, 10)\n    [11, 0]\n\
    \    >>> meals(2, 11, 5)\n    [7, 0]\n    \n    Variables:\n    @number : integer\n\
    \        the number of carrots that you have eaten.\n    @need : integer\n   \
    \     the number of carrots that you need to eat.\n    @remaining : integer\n\
    \        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n\
    \    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000",
  "    \n    if number < 0 || need < 0 || remaining < 0\n        error(\"invalid input\"\
    )\n    end\n    \n    if number == 0 && need == 0 && remaining == 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    if number == 0 && need == 0 && remaining\
    \ > 0\n        return Vector{Int64}(remaining, 0)\n    end\n    \n    if number\
    \ == 0 && need > 0 && remaining == 0\n        return Vector{Int64}(0, need)\n\
    \    end\n    \n    if number > 0 && need == 0 && remaining == 0\n        return\
    \ Vector{Int64}(number, 0)\n    end\n    \n    if number > 0 && need == 0 && remaining\
    \ > 0\n        return Vector{Int64}(number, need)\n    end\n    \n    if number\
    \ > 0 && need > 0 && remaining == 0\n        return Vector{Int64}(number, need)\n\
    \    end\n    \n    if number > 0 && need > 0 && remaining > 0\n        return\
    \ Vector{Int64}(number, need)\n    end\n    \n    return Vector{Int64}()\nend\n\
    </cell>\n<code language=julia-1.5>", "    if number < 0 || number > 1000 \n  \
    \      error(\"number must be between 0 and 1000\")\n    end\n    if need < 0\
    \ || need > 1000 \n        error(\"need must be between 0 and 1000\")\n    end\n\
    \    if remaining < 0 || remaining > 1000 \n        error(\"remaining must be\
    \ between 0 and 1000\")\n    end\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ number < 0 || number > 1000 \n        error(\"number must be between 0 and 1000\"\
    )\n    end\n    if need < 0 || need > 1000 \n        error(\"need must be between\
    \ 0 and 1000\")\n    end\n    if remaining < 0 || remaining > 1000 \n        error(\"\
    remaining must be between 0 and 1000\")\n    end\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if number > 1000 || need > 1000 || remaining\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = remaining\n    meals[2] = 0\n    \n    carrots_left = zeros(Int64,\
    \ 2)\n    carrots_left[1] = 0\n    carrots_left[2] = 0\n    \n    while meals[1]\
    \ > 0\n        carrots_left[1] += meals[1]\n        meals[1] -= carrots[1]\n \
    \       carrots[1] -= meals[2]\n        meals[2] -= carrots[2]\n    end\n    \n\
    \    return carrots_left\nend\n</cell>\n<code language=julia-1.4>\neat(5, 6, 10)\n\
    </cell>\n<code language=julia-1.4>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.4>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.4>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that will return the number of carrots left after\
    \ a meal. \nThe function should take two parameters: the number of carrots you\
    \ have eaten so far, and the number \nof carrots left after your meals.\nThe function\
    \ should return an array of two integers, the first integer being the number of\
    \ carrots left after \nyour meals, and the second integer being the number of\
    \ carrots left after your meals.\nThe function should return an array of two integers,\
    \ the first integer being the number of carrots left after \nyour meals, and the\
    \ second integer being the number of carrots left after your meals.\nThe function\
    \ should return an array of two integers, the first integer being the number of\
    \ carrots left after \nyour meals, and the second integer being the number of\
    \ carrots left after your meals.\nThe function should return an array of two integers,\
    \ the first integer being the number of carrots left after \nyour meals, and the\
    \ second integer being the number of carrots left after your meals.\nThe function\
    \ should return an array of two integers, the first integer being the number of\
    \ carrots left after \nyour meals, and the second integer being the number of\
    \ carrots left after your meals.\nThe function should return an array of two integers,\
    \ the first integer being the number of carrots left after \nyour meals, and the\
    \ second integer being the number of carrots left after your meals.\nThe function ",
  "    if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000\n        error(\"invalid input\")\n    end\n    \n    if\
    \ number == 0\n        return [need, remaining]\n    end\n    \n    if remaining\
    \ == 0\n        return [number, 0]\n    end\n    \n    if number > remaining\n\
    \        number = remaining\n    end\n    \n    carrots = number\n    \n    if\
    \ number > need\n        carrots = number-need\n    end\n    \n    return [carrots,\
    \ remaining]\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n\
    <code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the number of minutes that a person has\
    \ been hungry.\nThe function should take in two parameters: the number of minutes\
    \ that a person has been hungry and the number of minutes that a person has been\
    \ hungry after they have eaten a certain number of carrots.\nThe function should\
    \ return an array of two integers [number of minutes that a person has been hungry,\
    \ number of minutes that a person has been hungry after they have eaten a certain\
    \ number of carrots]\nThe function should return an error if either of the parameters\
    \ is less than 0 or greater than 1000.", "    if number == 0\n        return Vector{Int64}()\n\
    \    if need == 0\n        return Vector{Int64}([number, remaining])\n    \n \
    \   carrots = Vector{Int64}()\n    carrots = carrots + number\n    carrots = carrots\
    \ - need\n    carrots = carrots + remaining\n    \n    return carrots\nend\n</cell>\n\
    <code language=julia-0.6>\neat(5, 6, 10)\n</cell>\n<code language=julia-0.6>\n\
    eat(4, 8, 9)\n</cell>\n<code language=julia-0.6>\neat(1, 10, 10)\n</cell>\n<code\
    \ language=julia-0.6>\neat(2, 11, 5)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ called hungry_rabbits(n) that takes in an integer n and returns the number of\
    \ hungry rabbits that you can eat in n days.", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if number > 0 && number <= 1000 && need > 0 &&\
    \ need <= 1000 && remaining > 0 && remaining <= 1000\n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n", "    if number < 0 || number\
    \ > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n   \
    \     error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n\
    \    carrots[1] = number\n    carrots[2] = remaining\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = need\n    meals[2] = remaining\n    \n    carrots_left =\
    \ zeros(Int64, 2)\n    carrots_left[1] = number\n    carrots_left[2] = remaining\n\
    \    \n    while carrots_left[1] > 0 && carrots_left[2] > 0\n        carrots_left[1]\
    \ -= 1\n        carrots_left[2] -= 1\n        \n        if carrots_left[1] < 0\n\
    \            carrots[1] += carrots_left[2]\n            carrots[2] = 0\n     \
    \   end\n        \n        if carrots_left[2] < 0\n            carrots[2] += carrots_left[1]\n\
    \            carrots[1] = 0\n        end\n    end\n    \n    return carrots\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if number > 0 && need > 0 && remaining > 0 \n     \
    \   carrots = zeros(Int64, 2)\n        carrots[1] = number\n        carrots[2]\
    \ = need\n        \n        carrots = carrots[carrots[1]:carrots[2]]\n       \
    \ \n        carrots = carrots[carrots[1]:carrots[2]]\n        \n        carrots\
    \ = carrots[carrots[1]:carrots[2]]\n        \n        carrots = carrots[carrots[1]:carrots[2]]\n\
    \        \n        carrots = carrots[carrots[1]:carrots[2]]\n        \n      \
    \  carrots = carrots[carrots[1]:carrots[2]]\n        \n        carrots = carrots[carrots[1]:carrots[2]]\n\
    \        \n        carrots = carrots[carrots[1]:carrots[2]]\n        \n      \
    \  carrots = carrots[carrots[1]:carrots[2]]\n        \n        carrots = carrots[carrots[1]:carrots[2]]\n\
    \        \n        carrots = carrots[carrots[1]:carrots[2]]\n        \n      \
    \  carrots = carrots[carrots[1]:carrots[2]]\n        \n        carrots = carrots[carrots[1]:carrots[2]]\n\
    \        \n        carrots = carrots[carrots[1]:carrots[2]]\n        \n      \
    \  carrots = carrots[carrots[1]:carrots[2]]\n        \n        carrots = carrots[carrots[1]:carrots[2]]\n\
    \        \n        carrots = carrots[carrots[1]:carrots[2]]\n        \n      \
    \  carrots = carrots[carrots[1]:carrots[2]]\n        \n        carrots = carrots[carrots[1]:carrots[2]]\n\
    \        \n        carrots = carrots[carrots[1]:carrots[2]]\n        \n      \
    \  carrots = carrots[carrots[1]:carrots[2]]\n        \n        carrots = carrots[carrots[1]:carrots[2]]\n\
    \        \n        carrots = carrots[carrots[1]:carrots[2]]\n        \n      \
    \  carrots = carrots[carrots[1]:carrots[2]]\n        \n        carrots = carrots[carrots[1]:carrots[2]]\n\
    \        \n        carrots = carrots[carrots[1]:carrots[2]]\n        \n      \
    \  carrots = carrots[car", "    if number == 0\n        Vector{Int64}([need, remaining])\n\
    \    else\n        Vector{Int64}([need, remaining])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if number == 0\n        Vector{Int64}([need, remaining])\n\
    \    else\n        Vector{Int64}([number, need])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    if number == 0\n        Vector{Int64}()\n    elseif\
    \ number > remaining\n        Vector{Int64}(remaining, 0)\n    elseif number <\
    \ need\n        Vector{Int64}(0, need-number)\n    else\n        Vector{Int64}(0,\
    \ need-number) + eat(number-1, need, remaining-number)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\neat(5, 6, 10)\n</cell>\n<text>\nProblem 3\nWrite a\
    \ function that returns the number of ways to arrange N integers in an M x N grid.\n\
    The function should return an array of integers, where each element is the number\
    \ of ways to arrange the integers in an M x N grid.\nThe function should return\
    \ an empty array if N or M is less than or equal to 0.", "    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if number == 0\n        Vector{Int64}()\n\
    \    elseif number > remaining\n        Vector{Int64}(remaining, 0)\n    elseif\
    \ need == 0\n        Vector{Int64}(remaining, 0)\n    else\n        Vector{Int64}(remaining,\
    \ 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of days in a month.",
  "    if number < 0 || number > 1000 \n        error(\"number must be between 0 and\
    \ 1000\")\n    else if need < 0 || need > 1000 \n        error(\"need must be\
    \ between 0 and 1000\")\n    else if remaining < 0 || remaining > 1000 \n    \
    \    error(\"remaining must be between 0 and 1000\")\n    else \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        ", "    if number <= 0 ||\
    \ need <= 0 || remaining <= 0\n        error(\"invalid input\")\n    end\n   \
    \ \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n\
    \    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n \
    \   carrots_left[2] = need\n    \n    carrots_left[1] = remaining - number\n \
    \   \n    return carrots\nend\n</cell>\n<code language=julia-1.3>", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if number > 1000 or need\
    \ > 1000 or remaining > 1000\n        return Vector{Int64}()\n    end\n    \n\
    \    carrots = number\n    carrots_left = need\n    \n    while carrots > 0\n\
    \        carrots_left -= 1\n        carrots -= 1\n    end\n    \n    carrots =\
    \ remaining\n    carrots_left = need\n    \n    while carrots > 0\n        carrots_left\
    \ -= 1\n        carrots -= 1\n    end\n    \n    return Vector{Int64}(carrots_left,\
    \ carrots)\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n\
    <code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of carrots left after a meal\
    \ is completed.", "    if number == 0\n        Vector{Int64}()\n    elseif number\
    \ < 0\n        error(\"number must be positive\")\n    elseif need < 0\n     \
    \   error(\"need must be positive\")\n    elseif remaining < 0\n        error(\"\
    remaining must be positive\")\n    elseif number > remaining\n        error(\"\
    number must be less than remaining\")\n    elseif need > remaining\n        error(\"\
    need must be less than remaining\")\n    elseif number == remaining\n        Vector{Int64}([number,\
    \ 0])\n    else\n        Vector{Int64}([number, need-number])\n    end\nend\n\
    </cell>\n<code language=julia-0.6>\n\"\"\"\n    findMeals(meals::Vector{Int64},\
    \ carrots::Int64)::Vector{Int64}\n    \n    You have a certain number of carrots,\
    \ and you need to eat some number of carrots to complete a meal.\n    You will\
    \ eat as many carrots as you can to complete the meal.\n    \n    Example:\n \
    \   >>> findMeals([10, 5, 2], 4)\n    [10, 5, 2]\n    >>> findMeals([10, 5, 2],\
    \ 3)\n    [10, 5, 2]\n    >>> findMeals([10, 5, 2], 0)\n    []\n    >>> findMeals([10,\
    \ 5, 2], 5)\n    []\n    \n    Variables:\n    @meals : Vector{Int64}\n      \
    \  the meals that you have\n    @carrots : Int64\n        the number of carrots\
    \ that you need to eat\n    \n    Constrain:\n    * 0 <= meals <= 1000\n    *\
    \ 0 <= carrots <= 1000\n    \n    Have fun :)\n    \"\"\"", "    if number < 0\
    \ || need < 0 || remaining < 0\n        error(\"invalid input\")\n    end\n  \
    \  \n    if number == 0 && remaining == 0\n        return Vector{Int64}()\n  \
    \  end\n    \n    if number == 0 && remaining > 0\n        return Vector{Int64}([need,\
    \ remaining])\n    end\n    \n    if number > 0 && remaining == 0\n        return\
    \ Vector{Int64}([number, 0])\n    end\n    \n    if number > 0 && remaining >\
    \ 0\n        return Vector{Int64}([number, remaining])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if number < 0 || need < 0 || remaining < 0\n        error(\"invalid\
    \ input\")\n    end\n    \n    if number == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    if remaining == 0\n        return Vector{Int64}([need, 0])\n\
    \    end\n    \n    if number > remaining\n        return Vector{Int64}([need,\
    \ 0])\n    end\n    \n    if need == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    \n    if number == remaining\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    \n    if number == need\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    \n    return Vector{Int64}([number, need])\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number > 1000 || need > 1000 || remaining\
    \ > 1000\n        error(\"invalid input\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = remaining\n    \n    carrots =\
    \ carrots[2:end]\n    \n    if carrots[1] > 0\n        carrots[1] -= need\n  \
    \  end\n    \n    if carrots[1] == 0\n        carrots[1] = carrots[2]\n    end\n\
    \    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6,\
    \ 10)\n</cell>\n<code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Problem 3\nWrite a function called eat_all that takes in an array of integers\
    \ and returns the number of carrots eaten and the number of carrots left.", " \
    \   if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000\n        error(\"Invalid input\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n  \
    \  meals = zeros(Int64, 2)\n    meals[1] = remaining\n    meals[2] = 0\n    \n\
    \    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2]\
    \ = 0\n    \n    while carrots_left[1] > 0\n        carrots_left[1] -= 1\n   \
    \     carrots_left[2] += 1\n        \n        if carrots_left[2] >= meals[1]\n\
    \            meals[1] -= carrots_left[2]\n            meals[2] += 1\n        \
    \    carrots_left[2] = 0\n        end\n    end\n    \n    return carrots\nend\n\
    </cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the number of positive integers\
    \ less than or equal to that vector.", "    if number == 0\n        Vector{Int64}([need,\
    \ remaining])\n    else\n        Vector{Int64}([need, remaining])\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test your code\neat(5, 6, 10)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that finds the minimum number of carrots you\
    \ should eat to make a pizza with toppings.", "    if number == 0 \n        Vector{Int64}([need,\
    \ remaining])\n    elseif number == need \n        Vector{Int64}([number, remaining])\n\
    \    elseif remaining == 0 \n        Vector{Int64}([number, 0])\n    elseif remaining\
    \ == need \n        Vector{Int64}([number, 0])\n    elseif remaining > need \n\
    \        Vector{Int64}([number, remaining])\n    elseif remaining < need \n  \
    \      Vector{Int64}([need, remaining])\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 0 || need < 0 || remaining < 0\n        error(\"Invalid input\"\
    )\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}()\n\
    \    end\n    if number == 0 && remaining > 0\n        return Vector{Int64}([need,\
    \ remaining])\n    end\n    if remaining == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    if number > remaining\n        return Vector{Int64}([number,\
    \ remaining])\n    end\n    return Vector{Int64}([number, remaining - number])\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    if number == 0\n        \n\
    \        return Vector{Int64}([need, remaining])\n    \n    elseif number > remaining\n\
    \        \n        return Vector{Int64}([need, remaining])\n    \n    elseif number\
    \ < need\n        \n        return Vector{Int64}([number, 0])\n    \n    else\n\
    \        \n        return Vector{Int64}([number, need])\n    \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<code language=julia-1.5>\neat(5,\
    \ 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<code\
    \ language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4,\
    \ 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(2, 11, 5)\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1,\
    \ 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code\
    \ language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2,\
    \ 11, 5)\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<code language=julia-1.5>\neat(5,\
    \ 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(1, 10, 10)\n</cell>\n<code language=", "    \n    \n    if number == 0\n \
    \       return Vector{Int64}()\n    end\n    \n    if remaining == 0\n       \
    \ return Vector{Int64}([number, 0])\n    end\n    \n    if number > remaining\n\
    \        return Vector{Int64}([number, 0])\n    end\n    \n    if need == 0\n\
    \        return Vector{Int64}([number, 0])\n    end\n    \n    if number > need\n\
    \        return Vector{Int64}([number, 0])\n    end\n    \n    if number == need\n\
    \        return Vector{Int64}([number, 0])\n    end\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if number < 0 || number > 1000 || need < 0 || need\
    \ > 1000 || remaining < 0 || remaining > 1000\n        error(\"Invalid input\"\
    )\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n   \
    \ carrots[2] = need\n    \n    meals = zeros(Int64, 2)\n    meals[1] = remaining\n\
    \    meals[2] = 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1]\
    \ = remaining\n    carrots_left[2] = 0\n    \n    meals_left = zeros(Int64, 2)\n\
    \    meals_left[1] = 0\n    meals_left[2] = 0\n    \n    while meals[1] > 0\n\
    \        carrots_left[1] -= 1\n        meals_left[1] -= 1\n        \n        if\
    \ carrots_left[1] < 0\n            carrots_left[1] = 0\n            carrots[1]\
    \ += 1\n        end\n        \n        if meals_left[1] < 0\n            meals_left[1]\
    \ = 0\n            meals[1] += 1\n        end\n    end\n    \n    carrots_left[2]\
    \ += carrots[1]\n    meals_left[2] += meals[1]\n    \n    return carrots_left,\
    \ meals_left\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n\
    <code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 11)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 12)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 13)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 14)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 15)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 16)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 17)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 18)\n</cell>\n<code\
    \ language=julia-1.5>\neat(10, 10, 19)\n</cell>\n<code language=julia-1.5>\neat(10,\
    \ 10, 20)\n</cell>\n<code language=julia-1.5>\neat(10, 10, 21)\n</cell", "   \
    \ if number > 0 && need > 0 && remaining > 0 && number <= need && number <= remaining\n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n", "    if number < 0 || number > 1000 \n        error(\"number\
    \ must be between 0 and 1000\")\n    else if need < 0 || need > 1000 \n      \
    \  error(\"need must be between 0 and 1000\")\n    else if remaining < 0 || remaining\
    \ > 1000 \n        error(\"remaining must be between 0 and 1000\")\n    else \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        ", "    if\
    \ number == 0\n        return [need, remaining]\n    \n    carrots = number\n\
    \    \n    if remaining < need\n        carrots = remaining\n        remaining\
    \ = 0\n    end\n    \n    meals = eat(number - need, need, remaining)\n    \n\
    \    meals[1] += carrots\n    \n    return meals\nend\n</cell>\n<code language=julia-1.5>",
  "    if number == 0\n        return [need, remaining]\n    if remaining == 0\n \
    \       return [number, 0]\n    if number > remaining\n        return [number,\
    \ 0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if number > 0 && number\
    \ <= 1000 && need > 0 && need <= 1000 && remaining > 0 && remaining <= 1000\n\
    \        answer = []\n        carrots = number\n        carrots_left = remaining\n\
    \        while carrots > 0\n            if carrots_left > 0\n                carrots_left\
    \ -= 1\n                push!(answer, carrots)\n            else\n           \
    \     carrots_left = remaining\n                push!(answer, carrots)\n     \
    \       end\n            carrots -= 1\n        end\n        return answer\n  \
    \  else\n        throw(ArgumentError(\"invalid input\"))\n    end\nend\n</cell>\n\
    <code language=julia-1.4>", "    if number < 0 || number > 1000 || need < 0 ||\
    \ need > 1000 || remaining < 0 || remaining > 1000 \n        error(\"Invalid input\"\
    )\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n   \
    \ carrots[2] = remaining\n    \n    meals = zeros(Int64, 2)\n    meals[1] = need\n\
    \    meals[2] = 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1]\
    \ = remaining\n    carrots_left[2] = 0\n    \n    carrots_eaten = zeros(Int64,\
    \ 2)\n    carrots_eaten[1] = number\n    carrots_eaten[2] = 0\n    \n    carrots_left_eaten\
    \ = zeros(Int64, 2)\n    carrots_left_eaten[1] = remaining\n    carrots_left_eaten[2]\
    \ = 0\n    \n    meals_eaten = zeros(Int64, 2)\n    meals_eaten[1] = need\n  \
    \  meals_eaten[2] = 0\n    \n    meals_left_eaten = zeros(Int64, 2)\n    meals_left_eaten[1]\
    \ = remaining\n    meals_left_eaten[2] = 0\n    \n    meals_left_eaten = zeros(Int64,\
    \ 2)\n    meals_left_eaten[1] = remaining\n    meals_left_eaten[2] = 0\n    \n\
    \    meals_left_eaten = zeros(Int64, 2)\n    meals_left_eaten[1] = remaining\n\
    \    meals_left_eaten[2] = 0\n    \n    meals_left_eaten = zeros(Int64, 2)\n \
    \   meals_left_eaten[1] = remaining\n    meals_left_eaten[2] = 0\n    \n    meals_left_eaten\
    \ = zeros(Int64, 2)\n    meals_left_eaten[1] = remaining\n    meals_left_eaten[2]\
    \ = 0\n    \n    meals_left_eaten = zeros(Int64, 2)\n    meals_left_eaten[1] =\
    \ remaining\n    meals_left_eaten[2] = 0\n    \n    meals_left_eaten = zeros(Int64,\
    \ 2)\n    meals_left_eaten[1] = remaining\n    meals_left_eaten[2] = 0\n    \n\
    \    meals_left_eaten = zeros(Int64, 2)\n    meals_left_eaten[1] = remaining\n\
    \    meals_left_eaten[2] = 0\n    \n    meals_left_eaten = zeros(Int64, 2)\n \
    \   meals_left_eaten[1] = remaining\n", "    if number == 0\n        Vector{Int64}([need,\
    \ remaining])\n    else\n        Vector{Int64}([need, remaining])\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\neat(5, 6, 10)\n</cell>\n<text>\nProblem 3\n\
    Write a function called eat_meals that takes in an array of meals as an argument,\
    \ and returns the number of carrots left after eating all the meals.", "    if\
    \ number < 0 || number > 1000 \n        error(\"number should be between 0 and\
    \ 1000\")\n    end\n    if need < 0 || need > 1000 \n        error(\"need should\
    \ be between 0 and 1000\")\n    end\n    if remaining < 0 || remaining > 1000\
    \ \n        error(\"remaining should be between 0 and 1000\")\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if number < 0 || number > 1000\
    \ || need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n        error(\"\
    Invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1]\
    \ = number\n    carrots[2] = need\n    \n    carrots_left = zeros(Int64, 2)\n\
    \    carrots_left[1] = remaining\n    carrots_left[2] = need\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n    \n    carrots_left = carrots_left[1]\n    \n    carrots_left\
    \ = carrots_left[1]\n", "    if number < 0 || number > 1000 || need < 0 || need\
    \ > 1000 || remaining < 0 || remaining > 1000 \n        error(\"Invalid input\"\
    ) \n    else \n        Vector{Int64}([number, need, remaining]) \n    end\nend\n\
    </cell>\n<code language=julia-1.4>", "    if number < 0 || need < 0 || remaining\
    \ < 0\n        error(\"Invalid input\")\n    end\n    \n    if number == 0 &&\
    \ need == 0 && remaining == 0\n        return Vector{Int64}()\n    end\n    \n\
    \    carrots = Vector{Int64}()\n    \n    if number == 0\n        carrots = [need]\n\
    \    elseif need == 0\n        carrots = [remaining]\n    else\n        carrots\
    \ = [need, remaining]\n    end\n    \n    return carrots\nend\n</cell>\n<code\
    \ language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4,\
    \ 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(2, 11, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of ways to choose k items from n items. \nThe function should return\
    \ an array of integers where the ith element is the number of ways to choose i\
    \ items from n items.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if number == 0\n        Vector{Int64}([need, remaining])\n    elseif number\
    \ > remaining\n        Vector{Int64}([need, remaining])\n    elseif number ==\
    \ remaining\n        Vector{Int64}([need, 0])\n    else\n        Vector{Int64}([need,\
    \ number])\n    end\nend\n</cell>\n<code language=julia-0.5>\neat(5, 6, 10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of minutes\
    \ you need to wait before you can eat all the carrots you have eaten.", "    if\
    \ number == 0\n        return [need, remaining]\n    \n    carrots = number -\
    \ need\n    \n    if remaining < carrots \n        carrots = remaining\n    end\n\
    \    \n    return [carrots, carrots - remaining]\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 6, 10)\n</cell>\n<text>\nExercise 2\nWrite a function called eat_all that\
    \ takes in an array of integers and returns the number of carrots eaten and the\
    \ number of carrots left.", "    if number <= 0 || need <= 0 || remaining <= 0\n\
    \        error(\"Invalid input\")\n    end\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    \n    if number > 0 &&\
    \ need > 0 && remaining > 0 \n        \n        carrots = number\n        carrots_left\
    \ = remaining\n        \n        meals_left = 0\n        \n        while carrots\
    \ > 0 && meals_left > 0 \n            \n            if carrots >= need \n    \
    \            carrots -= need\n                meals_left -= 1\n              \
    \  \n            else \n                carrots -= carrots_left\n            \
    \    carrots_left = 0\n            \n        end\n        \n        if carrots\
    \ > 0 \n            carrots_left = carrots - 1\n        end\n        \n      \
    \  meals_left = meals_left + carrots_left\n        \n        return [meals_left,\
    \ carrots_left]\n    else \n        return [0, 0]\n    end\nend\n</cell>\n<code\
    \ language=julia-0.6>\neat(5, 6, 10)\n</cell>\n<code language=julia-0.6>\neat(4,\
    \ 8, 9)\n</cell>\n<code language=julia-0.6>\neat(1, 10, 10)\n</cell>\n<code language=julia-0.6>\n\
    eat(2, 11, 5)\n</cell>\n<text>\nProblem 3\nWrite a function that takes an array\
    \ of integers and returns the number of positive integers in the array.", "  \
    \  if number > 1000 \n        error(\"number must be less than 1000\")\n    else\
    \ if need > 1000 \n        error(\"need must be less than 1000\")\n    else if\
    \ remaining > 1000 \n        error(\"remaining must be less than 1000\")\n   \
    \ else \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n", "    if number < 0 || need < 0 || remaining\
    \ < 0\n        error(\"Invalid input\")\n    end\n    if number == 0 && remaining\
    \ == 0\n        return [number, need]\n    end\n    if number == 0 && remaining\
    \ > 0\n        return [number, remaining]\n    end\n    if need == 0\n       \
    \ return [number, 0]\n    end\n    if remaining == 0\n        return [number,\
    \ 0]\n    end\n    if number > remaining\n        return [number, remaining]\n\
    \    end\n    if number == remaining\n        return [number, 0]\n    end\n  \
    \  if number == 0\n        return [number, 0]\n    end\n    if need == 0\n   \
    \     return [number, 0]\n    end\n    if remaining == 0\n        return [number,\
    \ 0]\n    end\n    if number > remaining\n        return [number, remaining]\n\
    \    end\n    if number == remaining\n        return [number, 0]\n    end\n  \
    \  if number == 0\n        return [number, 0]\n    end\n    if need > remaining\n\
    \        return [number, remaining]\n    end\n    if number == remaining\n   \
    \     return [number, 0]\n    end\n    if number == 0\n        return [number,\
    \ 0]\n    end\n    if need == 0\n        return [number, 0]\n    end\n    if remaining\
    \ == 0\n        return [number, 0]\n    end\n    if number > remaining\n     \
    \   return [number, remaining]\n    end\n    if number == remaining\n        return\
    \ [number, 0]\n    end\n    if number == 0\n        return [number, 0]\n    end\n\
    \    if need > remaining\n        return [number, remaining]\n    end\n    if\
    \ number == remaining\n        return [number, 0]\n    end\n    if number == 0\n\
    \        return [number, 0]\n    end\n    if need == 0\n        return [number,\
    \ 0]\n    end\n    if remaining == 0\n        return [number, 0]\n    end\n  \
    \  if number > remaining\n        return [number, remaining]\n    end\n    if\
    \ number == remaining\n        return [number, 0]\n    end\n    if number == 0\n\
    \        return [number, 0]\n    end\n    if need > remaining\n        return\
    \ [number, remaining]\n    end\n    if number == remaining\n        return [number,\
    \ 0]\n    end\n    if number == 0\n        return [number, 0]\n    end\n    if\
    \ need == 0\n        return [number, 0]\n    end\n    if remaining == 0\n    \
    \    return [number, 0]\n    end\n    if number > remaining\n        return [number,\
    \ remaining]\n    end\n    if number == remaining\n        return [number, 0]\n\
    \    end\n    if number == 0\n        return [number, 0]\n    end\n    if need\
    \ > remaining\n        return [number, remaining]\n    end\n    if number == remaining\n\
    \        return [number, 0]\n    end\n    if number == 0\n        return [number,\
    \ 0]\n    end\n    if need == 0\n        return [number, 0]\n    end\n    if remaining\
    \ == 0\n        return [number, 0]\n    end\n    if number > remaining\n     \
    \   return [number, remaining]\n    end\n    if number == remaining\n        return\
    \ [number, 0]\n    end\n    if number == ", "    if number <= 0 || need <= 0 ||\
    \ remaining <= 0\n        error(\"Invalid input\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n  \
    \  carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if number < 0 || number > 1000 ||\
    \ need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n        error(\"\
    Invalid input\")\n    end\n    \n    if remaining == 0\n        return Vector{Int64}([number,\
    \ need])\n    end\n    \n    carrots = Vector{Int64}([number, need])\n    \n \
    \   while carrots[1] > 0\n        carrots[1] -= 1\n        \n        if carrots[1]\
    \ == 0 && carrots[1] > 0\n            carrots[1] = need\n        end\n       \
    \ \n        if carrots[1] > 0\n            carrots[1] -= number\n        end\n\
    \    end\n    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>",
  "    if number > 1000 \n        error(\"number should be between 0 and 1000\")\n\
    \    end\n    if need > 1000 \n        error(\"need should be between 0 and 1000\"\
    )\n    end\n    if remaining > 1000 \n        error(\"remaining should be between\
    \ 0 and 1000\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if number == 0\n        Vector{Int64}([need,\
    \ remaining])\n    else\n        Vector{Int64}([need, number])\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\neat(5, 6, 10)\n</cell>\n<text>\nProblem 3\n\
    Write a function that will calculate the total cost of a meal based on its ingredients.\n\
    The cost of a meal is $10 for any one meal you eat.\nThe cost of a meal is $15\
    \ for any two meals you eat.\nThe cost of a meal is $20 for any three meals you\
    \ eat.\nThe cost of a meal is $25 for any four meals you eat.\nThe cost of a meal\
    \ is $30 for any five meals you eat.\nThe cost of a meal is $35 for any six meals\
    \ you eat.\nThe cost of a meal is $40 for a meal you eat.\nThe cost of a meal\
    \ is $45 for any seven meals you eat.\nThe cost of a meal is $50 for any eight\
    \ meals you eat.\nThe cost of a meal is $55 for any nine meals you eat.\nThe cost\
    \ of a meal is $60 for a meal you eat.\nThe cost of a meal is $65 for any ten\
    \ meals you eat.\nThe cost of a meal is $70 for a meal you eat.\nThe cost of a\
    \ meal is $75 for any eleven meals you eat.\nThe cost of a meal is $80 for a meal\
    \ you eat.\nThe cost of a meal is $85 for any twelve meals you eat.\nThe cost\
    \ of a meal is $90 for a meal you eat.\nThe cost of a meal is $95 for any thirteen\
    \ meals you eat.\nThe cost of a meal is $100 for a meal you eat.\nThe cost of\
    \ a meal is $100 for a meal you eat.\nThe cost of a meal is $100 for a meal you\
    \ eat.\nThe cost of a meal is $100 for a meal you eat.\nThe cost of a meal is\
    \ $100 for a meal you eat.\nThe cost of a meal is $100 for a meal you eat.\nThe\
    \ cost of a meal is $100 for a meal you eat.\nThe cost of a meal is $100 for a\
    \ meal you eat.\nThe cost of a meal is ", "    if number > 1000 || need > 1000\
    \ || remaining > 1000 \n        error(\"Invalid input\") \n    else \n       \
    \ \n        carrots = zeros(Int64, 2)\n        carrots[1] = number\n        carrots[2]\
    \ = need\n        \n        carrots_left = zeros(Int64, 2)\n        carrots_left[1]\
    \ = remaining\n        carrots_left[2] = need\n        \n        carrots_left\
    \ = carrots_left[1]\n        \n        carrots_left = carrots_left[2]\n      \
    \  \n        carrots_left = carrots_left\n        \n        carrots_left = carrots_left\n\
    \        \n        carrots_left = carrots_left\n        \n        carrots_left\
    \ = carrots_left\n        \n        carrots_left = carrots_left\n        \n  \
    \      carrots_left = carrots_left\n        \n        carrots_left = carrots_left\n\
    \        \n        carrots_left = carrots_left\n        \n        carrots_left\
    \ = carrots_left\n        \n        carrots_left = carrots_left\n        \n  \
    \      carrots_left = carrots_left\n        \n        carrots_left = carrots_left\n\
    \        \n        carrots_left = carrots_left\n        \n        carrots_left\
    \ = carrots_left\n        \n        carrots_left = carrots_left\n        \n  \
    \      carrots_left = carrots_left\n        \n        carrots_left = carrots_left\n\
    \        \n        carrots_left = carrots_left\n        \n        carrots_left\
    \ = carrots_left\n        \n        carrots_left = carrots_left\n        \n  \
    \      carrots_left = carrots_left\n        \n        carrots_left = carrots_left\n\
    \        \n        carrots_left = carrots_left\n        \n        carrots_left\
    \ = carrots_left\n        \n        carrots_left = carrots_left\n        \n  \
    \      carrots_left = carrots_left\n        \n        carrots_left = carrots_left\n\
    \        \n        carrots_left = carrots_left\n        \n        carrots_left\
    \ = carrots_left\n        \n        carrots_left = carrots_left\n        \n  \
    \      carrots_left = carrots_left\n        \n        carrots_left = carrots_left\n\
    \        \n        carrots_left = carrots_left\n        \n        carrots_left\
    \ = carrots_left\n        \n        ", "    if number == 0\n        Vector{Int64}()\n\
    \    elseif remaining < need\n        Vector{Int64}(remaining, 0)\n    elseif\
    \ remaining == need\n        Vector{Int64}(number, 0)\n    else\n        Vector{Int64}(number,\
    \ need-number)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ > 1000 || need > 1000 || remaining > 1000\n        error(\"Invalid input\")\n\
    \    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = need\n    \n    meals = zeros(Int64, 2)\n    meals[1] = remaining\n    meals[2]\
    \ = 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n\
    \    carrots_left[2] = 0\n    \n    carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1]\
    \ = 0\n    carrots_eaten[2] = 0\n    \n    while carrots_left[1] > 0 || carrots_eaten[1]\
    \ > 0\n        if carrots_left[1] > 0\n            carrots_left[1] -= 1\n    \
    \        carrots_eaten[1] += carrots[1]\n            carrots[1] = 0\n        end\n\
    \        if carrots_eaten[1] > 0\n            carrots_eaten[1] -= 1\n        \
    \    carrots[1] += carrots_eaten[1]\n            carrots_eaten[2] += carrots[2]\n\
    \            carrots[2] = 0\n        end\n    end\n    \n    return carrots_eaten\n\
    end\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the number of ways to arrange n people into k groups of m people\
    \ such that each group has exactly one person from each group. \nThe function\
    \ should take in two parameters: n and k. \nThe function should return an array\
    \ of integers containing the number of ways to arrange n people into k groups\
    \ of m people such that each group has exactly one person from each group.", " \
    \   if number == 0\n        return [need, remaining]\n    else\n        carrots\
    \ = number % need\n        number = number - carrots\n        need = need - carrots\n\
    \        remaining = remaining + carrots\n        return [need, remaining]\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<text>\n\
    Problem 3\nWrite a function called hungry that takes in an array of integers and\
    \ returns an array of booleans indicating whether each integer is hungry or not.",
  "    if number > 0 && need > 0 && remaining > 0 \n        answer = []\n        \n\
    \        if number > need \n            answer = [number, 0]\n        elseif number\
    \ == need \n            answer = [number, 0]\n        elseif number < need \n\
    \            answer = [number, remaining]\n        end\n        \n        return\
    \ answer\n    else\n        error(\"Not enough carrots to eat\")\n    end\nend\n\
    </cell>\n<code language=julia-1.1>\neat(5, 6, 10)\n</cell>\n<text>\nProblem 7\n\
    Write a function that returns the number of times a given word appears in a given\
    \ string.", "    if number < 0 || number > 1000 || need < 0 || need > 1000 ||\
    \ remaining < 0 || remaining > 1000\n        error(\"Invalid input\")\n    end\n\
    \    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = need\n    \n    meals = zeros(Int64, 2)\n    meals[1] = remaining\n    meals[2]\
    \ = 0\n    \n    meals_left = zeros(Int64, 2)\n    meals_left[1] = remaining\n\
    \    meals_left[2] = 0\n    \n    while meals[1] > 0 || meals_left[1] > 0\n  \
    \      if meals[1] > 0\n            meals[1] -= 1\n            meals[2] -= 1\n\
    \            carrots[1] += 1\n        end\n        if meals_left[1] > 0\n    \
    \        meals_left[1] -= 1\n            meals_left[2] += 1\n            carrots[1]\
    \ += 1\n        end\n    end\n    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 0 || number > 1000 \n        error(\"number must be between 0 and\
    \ 1000\")\n    end\n    if need < 0 || need > 1000 \n        error(\"need must\
    \ be between 0 and 1000\")\n    end\n    if remaining < 0 || remaining > 1000\
    \ \n        error(\"remaining must be between 0 and 1000\")\n    end\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if number > 1000 \n       \
    \ error(\"number must be <= 1000\")\n    else if need > 1000 \n        error(\"\
    need must be <= 1000\")\n    else if remaining > 1000 \n        error(\"remaining\
    \ must be <= 1000\")\n    else\n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        ", " \
    \   if number < 0 || number > 1000 \n        error(\"The number must be between\
    \ 0 and 1000\")\n    else if need < 0 || need > 1000 \n        error(\"The need\
    \ must be between 0 and 1000\")\n    else if remaining < 0 || remaining > 1000\
    \ \n        error(\"The remaining must be between 0 and 1000\")\n    else \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n", "    \n    \n    if remaining\
    \ < 0\n        error(\"remaining must be positive\")\n    end\n    if number <\
    \ 0\n        error(\"number must be positive\")\n    end\n    if need < 0\n  \
    \      error(\"need must be positive\")\n    end\n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if number < 0 || need < 0 || remaining\
    \ < 0\n        error(\"Invalid input\")\n    end\n    if remaining == 0\n    \
    \    return [number, 0]\n    end\n    if number == 0\n        return [need, 0]\n\
    \    end\n    if need == 0\n        return [number, remaining]\n    end\n    \n\
    \    carrots = number\n    carrots_left = remaining\n    \n    while carrots_left\
    \ > 0\n        carrots_left -= 1\n        carrots -= 1\n    end\n    \n    return\
    \ [carrots, carrots_left]\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ <= 0 || need <= 0 || remaining <= 0 \n        error(\"Invalid input\")\n   \
    \ end\n    \n    carrots = Vector{Int64}(number)\n    \n    carrots[1] = need\n\
    \    \n    carrots[2] = remaining\n    \n    carrots[3] = number\n    \n    carrots[4]\
    \ = need\n    \n    carrots[5] = remaining\n    \n    carrots[6] = number\n  \
    \  \n    carrots[7] = need\n    \n    carrots[8] = remaining\n    \n    carrots[9]\
    \ = number\n    \n    carrots[10] = need\n    \n    carrots[11] = remaining\n\
    \    \n    carrots[12] = number\n    \n    carrots[13] = need\n    \n    carrots[14]\
    \ = remaining\n    \n    carrots[15] = number\n    \n    carrots[16] = need\n\
    \    \n    carrots[17] = remaining\n    \n    carrots[18] = number\n    \n   \
    \ carrots[19] = need\n    \n    carrots[20] = remaining\n    \n    carrots[21]\
    \ = number\n    \n    carrots[22] = need\n    \n    carrots[23] = remaining\n\
    \    \n    carrots[24] = number\n    \n    carrots[25] = need\n    \n    carrots[26]\
    \ = remaining\n    \n    carrots[27] = number\n    \n    carrots[28] = need\n\
    \    \n    carrots[29] = remaining\n    \n    carrots[30] = number\n    \n   \
    \ carrots[31] = need\n    \n    carrots[32] = remaining\n    \n    carrots[33]\
    \ = number\n    \n    carrots[34] = need\n    \n    carrots[35] = remaining\n\
    \    \n    carrots[36] = number\n    \n    carrots[37] = need\n    \n    carrots[38]\
    \ = remaining\n    \n    carrots[39] = number\n    \n    carrots[40] = need\n\
    \    \n    carrots[41] = remaining\n    \n    carrots[42] = number\n    \n   \
    \ carrots[43] = need\n    \n    carrots[44] = remaining\n    \n    carrots[45]\
    \ = number\n    \n    carrots[46] = need\n    \n    carrots[47] = remaining\n\
    \    \n    carrots[48] = number\n    \n    carrot", "    if number <= 0 || need\
    \ <= 0 || remaining <= 0 \n        error(\"invalid input\")\n    else if number\
    \ > remaining \n        error(\"not enough carrots to eat\")\n    else if number\
    \ == 0 \n        Vector{Int64}([need, remaining])\n    else \n        Vector{Int64}([number,\
    \ need, remaining])\nend\n</cell>\n<code language=julia-1.0>\neat(5, 6, 10)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of seconds\
    \ between two dates in Julia.\nThe function should take two strings as inputs:",
  "    \n    \n    # Your code here\n    \nend\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns an array of integers representing the number of days\
    \ in each month of the year between a given start and end date.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if number <= 0 || need <= 0 || remaining <= 0\n        return Vector{Int64}()\n\
    \    end\n    \n    carrots = Vector{Int64}()\n    \n    for i = 1:number\n  \
    \      push!(carrots, 1)\n    end\n    \n    for i = 1:need\n        push!(carrots,\
    \ 0)\n    end\n    \n    for i = 1:remaining\n        push!(carrots, 0)\n    end\n\
    \    \n    return carrots\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6,\
    \ 10)\n</cell>\n<code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function called eat_all that takes in an array of integers\
    \ and returns an array of integers containing the number of carrots eaten for\
    \ each meal. \nThe function should return an empty array if there are no carrots\
    \ to eat. \nThe function should return an array with one element if the array\
    \ is empty.\nThe function should return an array with two elements if there is\
    \ only one carrot left.\nThe function should return an array with three elements\
    \ if there are two carrots left.\nThe function should return an array with four\
    \ elements if there are three carrots left.\nThe function should return an array\
    \ with five elements if there are four carrots left.\nThe function should return\
    \ an array with six elements if there are five carrots left.\nThe function should\
    \ return an array with seven elements if there are six carrots left.\nThe function\
    \ should return an array with eight elements if there are seven carrots left.\n\
    The function should return an array with nine elements if there are eight carrots\
    \ left.\nThe function should return an array with ten elements if there are nine\
    \ carrots left.\nThe function should return an array with eleven elements if there\
    \ are ten carrots left.\nThe function should return an array with twelve elements\
    \ if there are eleven carrots left.\nThe function should return an array with\
    \ thirteen elements if there are twelve carrots left.\nThe function should return\
    \ an array with fourteen elements if there are thirteen carrots left.\nThe function\
    \ should return an array with fifteen elements if there are fourteen carrots left.\n\
    The function should return an array with sixteen elements if there are fifteen\
    \ carrots left.\nThe function should return an array with seventeen elements if\
    \ there are sixteen ", "    if number < 0 || number > 1000 || need < 0 || need\
    \ > 1000 || remaining < 0 || remaining > 1000\n        error(\"Invalid input\"\
    )\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n   \
    \ carrots[2] = need\n    \n    meals = zeros(Int64, 2)\n    meals[1] = remaining\n\
    \    meals[2] = 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1]\
    \ = remaining\n    carrots_left[2] = 0\n    \n    carrots_left_after_meals = zeros(Int64,\
    \ 2)\n    carrots_left_after_meals[1] = remaining\n    carrots_left_after_meals[2]\
    \ = 0\n    \n    carrots_left_after_meals_after_meals = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals[1]\
    \ = remaining\n    carrots_left_after_meals_after_meals[2] = 0\n    \n    carrots_left_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals[1] =\
    \ remaining\n    carrots_left_after_meals_after_meals_after_meals[2] = 0\n   \
    \ \n    carrots_left_after_meals_after_meals_after_meals_after_meals = zeros(Int64,\
    \ 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals[1] = remaining\n\
    \    carrots_left_after_meals_after_meals_after_meals_after_meals[2] = 0\n   \
    \ \n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals[1]\
    \ = remaining\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals[2]\
    \ = 0\n    \n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_meals[1]\
    \ = remaining\n    carrots_left_after_meals_after_meals_after_meal", "    if number\
    \ < 0 || number > 1000 \n        error(\"number should be between 0 and 1000\"\
    )\n    end\n    if need < 0 || need > 1000 \n        error(\"need should be between\
    \ 0 and 1000\")\n    end\n    if remaining < 0 || remaining > 1000 \n        error(\"\
    remaining should be between 0 and 1000\")\n    end\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if number == 0\n        Vector{Int64}()\n   \
    \ elseif number > remaining\n        Vector{Int64}(remaining, 0)\n    elseif need\
    \ == 0\n        Vector{Int64}(remaining, 0)\n    else\n        Vector{Int64}(remaining,\
    \ need)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    You have\
    \ a list of numbers, and you need to find the sum of all the numbers in the list.\n\
    \    \n    Example:\n    >>> sum([1, 2, 3])\n    6\n    >>> sum([1, 2, 3, 5])\n\
    \    15\n    \n    Variables:\n    @numbers : array of integers\n        the list\
    \ of numbers that you need to sum.\n    \n    Constrain:\n    * 0 <= numbers[i]\
    \ <= 1000\n    \n    Have fun :)\n    \"\"\"", "    if number == 0\n        return\
    \ Vector{Int64}()\n    \n    if remaining < need\n        return Vector{Int64}()\n\
    \    \n    if number > remaining\n        number = remaining\n    end\n    \n\
    \    \n    return Vector{Int64}([number, need-number])\nend\n</cell>\n<code language=julia-1.5>\n\
    eat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code\
    \ language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2,\
    \ 11, 5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of days in a month.", "    if number > 1000 || need > 1000 || remaining > 1000\n\
    \        error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n\
    \    carrots[1] = number\n    carrots[2] = remaining\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = need\n    meals[2] = remaining\n    \n    carrots_left =\
    \ zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = remaining\n\
    \    \n    carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1] = number\n  \
    \  carrots_eaten[2] = remaining\n    \n    carrots_left = zeros(Int64, 2)\n  \
    \  carrots_left[1] = remaining\n    carrots_left[2] = remaining\n    \n    carrots_eaten\
    \ = zeros(Int64, 2)\n    carrots_eaten[1] = number\n    carrots_eaten[2] = remaining\n\
    \    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n \
    \   carrots_left[2] = remaining\n    \n    carrots_eaten = zeros(Int64, 2)\n \
    \   carrots_eaten[1] = number\n    carrots_eaten[2] = remaining\n    \n    carrots_left\
    \ = zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = remaining\n\
    \    \n    carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1] = number\n  \
    \  carrots_eaten[2] = remaining\n    \n    carrots_left = zeros(Int64, 2)\n  \
    \  carrots_left[1] = remaining\n    carrots_left[2] = remaining\n    \n    carrots_eaten\
    \ = zeros(Int64, 2)\n    carrots_eaten[1] = number\n    carrots_eaten[2] = remaining\n\
    \    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n \
    \   carrots_left[2] = remaining\n    \n    carrots_eaten = zeros(Int64, 2)\n \
    \   carrots_eaten[1] = number\n    carrots_eaten[2] = remaining\n    \n    carrots_left\
    \ = zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = remaining\n\
    \    \n    carrots_eaten = zeros(Int64, 2)\n    carrots_eaten[1] = number\n  \
    \  carrots_eaten[2] = remaining\n    \n    carrots_left = zeros(Int64, 2)\n  \
    \  carrots_left[1] = remaining\n    ", "    if number <= 0 || need <= 0 || remaining\
    \ <= 0\n        error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = remaining\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = need\n    meals[2] = remaining\n    \n    meals_left = zeros(Int64,\
    \ 2)\n    meals_left[1] = number\n    meals_left[2] = remaining\n    \n    meals_left_left\
    \ = zeros(Int64, 2)\n    meals_left_left[1] = number\n    meals_left_left[2] =\
    \ remaining\n    \n    meals_left_right = zeros(Int64, 2)\n    meals_left_right[1]\
    \ = number\n    meals_left_right[2] = remaining\n    \n    meals_right_left =\
    \ zeros(Int64, 2)\n    meals_right_left[1] = number\n    meals_right_left[2] =\
    \ remaining\n    \n    meals_right_right = zeros(Int64, 2)\n    meals_right_right[1]\
    \ = number\n    meals_right_right[2] = remaining\n    \n    meals_left_left_left\
    \ = zeros(Int64, 2)\n    meals_left_left_left[1] = number\n    meals_left_left_left[2]\
    \ = remaining\n    \n    meals_left_left_right = zeros(Int64, 2)\n    meals_left_left_right[1]\
    \ = number\n    meals_left_left_right[2] = remaining\n    \n    meals_left_right_left\
    \ = zeros(Int64, 2)\n    meals_left_right_left[1] = number\n    meals_left_right_left[2]\
    \ = remaining\n    \n    meals_left_right_right = zeros(Int64, 2)\n    meals_left_right_right[1]\
    \ = number\n    meals_left_right_right[2] = remaining\n    \n    meals_right_left_left\
    \ = zeros(Int64, 2)\n    meals_right_left_left[1] = number\n    meals_right_left_left[2]\
    \ = remaining\n    \n    meals_right_left_right = zeros(Int64, 2)\n    meals_right_left_right[1]\
    \ = number\n    meals_right_left_right[2] = remaining\n    \n    meals_right_right_left\
    \ = zeros(Int64, 2)\n    meals_right_right_left[1] = number\n    meals_right_right_left[2]\
    \ = remaining\n    \n    meals_right_right_right = zeros(Int64, 2)\n    meals_right_right_right[1]\
    \ = number\n    meals_right_right_right[2] = remaining\n    \n    meals_left_left_left_left\
    \ = zeros(Int64, 2)\n    meals_", "    if number < 0 || need < 0 || remaining\
    \ < 0\n        error(\"Invalid input\")\n    end\n    if number == 0 && remaining\
    \ == 0\n        return Vector{Int64}()\n    end\n    if number == 0 && remaining\
    \ > 0\n        return Vector{Int64}([need, remaining])\n    end\n    if need ==\
    \ 0 && remaining > 0\n        return Vector{Int64}([number, remaining])\n    end\n\
    \    if number == 0 && remaining == 0\n        return Vector{Int64}([need])\n\
    \    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([number])\n\
    \    end\n    if number == 0 && remaining > 0\n        return Vector{Int64}([number,\
    \ remaining])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([need,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([need,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([need,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([need,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([need,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([need,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([need,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([need,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([need,\
    \ 0])\n    end\n    if number == 0 && remaining == 0\n        return Vector{Int64}([number,\
    \ 0])\n    end\n    if number == 0 && ", "    if number < 0 || number > 1000 ||\
    \ need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n        error(\"\
    invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1]\
    \ = number\n    carrots[2] = need\n    \n    carrots[2] = carrots[2] - (carrots[1]\
    \ - carrots[2])\n    \n    if carrots[2] < 0\n        carrots[2] = 0\n    end\n\
    \    \n    if carrots[1] < 0\n        carrots[1] = 0\n    end\n    \n    if carrots[1]\
    \ > carrots[2]\n        carrots[1] = carrots[2]\n    end\n    \n    return carrots\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number <= 0\n        error(\"\
    number must be positive\")\n    end\n    if need <= 0\n        error(\"need must\
    \ be positive\")\n    end\n    if remaining <= 0\n        error(\"remaining must\
    \ be positive\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if number > 1000 \n        error(\"\
    number should be less than 1000\")\n    if need > 1000 \n        error(\"need\
    \ should be less than 1000\")\n    if remaining > 1000 \n        error(\"remaining\
    \ should be less than 1000\")\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    ", "    if number < 0 || number\
    \ > 1000 \n        error(\"number must be between 0 and 1000\")\n    else if need\
    \ < 0 || need > 1000 \n        error(\"need must be between 0 and 1000\")\n  \
    \  else if remaining < 0 || remaining > 1000 \n        error(\"remaining must\
    \ be between 0 and 1000\")\n    else if number == 0\n        Vector{Int64}([need,\
    \ remaining])\n    else\n        Vector{Int64}([number, need, remaining])\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>", "    \n    if remaining == 0\n\
    \        return Vector{Int64}([number, need])\n    else\n        return Vector{Int64}([number,\
    \ need]) + eat(remaining - 1, need - number, remaining - 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\neat(5, 6, 10)\n</cell>\n<text>\nProblem 9\nWrite a\
    \ function named hungry that takes three integers as arguments and returns true\
    \ if the rabbit you are hungry is hungry, false otherwise.", "    \n    \n   \
    \ if remaining < 0\n        error(\"Not enough carrots to eat\")\n    end\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if number > remaining \n        number = remaining\n    end\n    if need >\
    \ remaining \n        need = remaining\n    end\n    if number == 0 \n       \
    \ return [number, 0]\n    end\n    if need == 0 \n        return [number, 0]\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    if number < 0 || number > 1000 \n        error(\"number must\
    \ be between 0 and 1000\")\n    else if need < 0 || need > 1000 \n        error(\"\
    need must be between 0 and 1000\")\n    else if remaining < 0 || remaining > 1000\
    \ \n        error(\"remaining must be between 0 and 1000\")\n    else \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        ", "    if number\
    \ <= 0 || need <= 0 || remaining <= 0\n        error(\"Invalid input\")\n    end\n\
    \    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = remaining\n    \n    meals = zeros(Int64, 2)\n    meals[1] = need\n    meals[2]\
    \ = 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n\
    \    carrots_left[2] = 0\n    \n    carrots_left = carrots_left[1]\n    \n   \
    \ carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n \
    \   carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n    \n\
    \    carrots_left = carrots_left\n    \n    carrots_", "    if number > 0 && need\
    \ > 0 && remaining > 0 \n        answer = []\n        carrots = number\n     \
    \   carrots_left = remaining\n        while carrots > 0\n            carrots_left\
    \ -= 1\n            carrots -= 1\n            push!(answer, carrots)\n       \
    \ end\n        push!(answer, carrots_left)\n        return answer\n    end\n \
    \   return []\nend\n</cell>\n<code language=julia-1.0>\neat(5, 6, 10)\n</cell>\n\
    <code language=julia-1.0>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.0>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.0>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector. \nThe function should only take one argument.\
    \ \nThe function should return nothing if the vector is empty.\nThe function should\
    \ return nothing if the vector is of length 1.\nThe function should return nothing\
    \ if the vector is of length 0.\nThe function should return nothing if the vector\
    \ contains non-integer values.\nThe function should return nothing if the vector\
    \ contains negative values.\nThe function should return nothing if the vector\
    \ contains NaN.\nThe function should return nothing if the vector contains Inf.\n\
    The function should return nothing if the vector contains any element that is\
    \ greater than Int.max.\nThe function should return nothing if the vector contains\
    \ any element that is less than Int.min.\nThe function should return nothing if\
    \ the vector contains any element that is NaN.\nThe function should return nothing\
    \ if the vector contains any element that is Inf.\nThe function should return\
    \ nothing if the vector contains any element that is less than 0.\nThe function\
    \ should return nothing if the vector contains any element that is greater than\
    \ 100.\nThe function should return nothing if the vector contains any element\
    \ that is less than 0.\nThe function should return nothing if the vector contains\
    \ any element that is greater than Int.max.\nThe function should return nothing\
    \ if the vector contains any element that is less than Int.min.\nThe function\
    \ should return nothing if the vector contains any element that is NaN.\nThe function\
    \ should return nothing if the vector contains any element that is Inf.\nThe function\
    \ should return nothing if the vector contains any element that is less than 0.\n\
    The function should return nothing if the vector contains any element that is\
    \ greater than 100.\nThe function should return nothing if the vector contains\
    \ any element that is less than 0.\nThe function should return nothing if the\
    \ vector contains any element that is greater than Int.max.\nThe function should\
    \ return nothing if the vector contains any element that is less than Int.min.\n\
    The function should return nothing if the vector contains any element that is\
    \ NaN.\nThe function should return nothing if the ", "    if number == 0\n   \
    \     return [need, remaining]\n    else\n        carrots = number - need\n  \
    \      carrots_left = remaining - carrots\n        if carrots_left == 0\n    \
    \        return [carrots, 0]\n        else\n            return [carrots, carrots_left]\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if number < 0 || number\
    \ > 1000 \n        error(\"number must be between 0 and 1000\")\n    end\n   \
    \ if need < 0 || need > 1000 \n        error(\"need must be between 0 and 1000\"\
    )\n    end\n    if remaining < 0 || remaining > 1000 \n        error(\"remaining\
    \ must be between 0 and 1000\")\n    end\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if number < 0 || number > 1000 || need < 0 || need > 1000\
    \ || remaining < 0 || remaining > 1000\n        error(\"Invalid input\")\n   \
    \ end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2]\
    \ = need\n    \n    meals = zeros(Int64, 2)\n    meals[1] = remaining\n    meals[2]\
    \ = 0\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n\
    \    carrots_left[2] = 0\n    \n    while meals[1] > 0\n        carrots_left[1]\
    \ -= meals[1]\n        meals[1] -= carrots[1]\n        carrots[1] += need\n  \
    \      \n        if carrots_left[1] < 0\n            carrots_left[2] += carrots[1]\n\
    \            carrots[1] = 0\n        end\n    end\n    \n    return carrots\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number == 0\n        Vector{Int64}([need,\
    \ remaining])\n    else\n        Vector{Int64}([need, remaining])\n    end\nend\n\
    </cell>\n<code language=julia-0.6>\neat(5, 6, 10)\n</cell>\n<code language=julia-0.6>\n\
    eat(4, 8, 9)\n</cell>\n<code language=julia-0.6>\neat(1, 10, 10)\n</cell>\n<code\
    \ language=julia-0.6>\neat(2, 11, 5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of minutes that you spend in the garden.", "    if number\
    \ < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64,\
    \ 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = remaining\n    meals[2] = 0\n    \n    carrots_left = zeros(Int64,\
    \ 2)\n    carrots_left[1] = 0\n    carrots_left[2] = 0\n    \n    carrots_eaten\
    \ = zeros(Int64, 2)\n    carrots_eaten[1] = 0\n    carrots_eaten[2] = 0\n    \n\
    \    while meals[1] > 0\n        carrots_left[1] -= meals[1]\n        meals[1]\
    \ -= carrots[1]\n        carrots[1] -= carrots_eaten[1]\n        carrots_eaten[1]\
    \ += carrots[1]\n        \n        carrots_left[2] += meals[2]\n        meals[2]\
    \ -= carrots[2]\n        carrots[2] -= carrots_eaten[2]\n        carrots_eaten[2]\
    \ += carrots[2]\n    end\n    \n    return carrots_eaten\nend\n</cell>\n<code\
    \ language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4,\
    \ 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(2, 11, 5)\n</cell>\n<code language=julia-1.5>\neat(100, 100, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(100, 100, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 100, 100)\n</cell>\n<code language=julia-1.5>\neat(100, 100, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(100, 100, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 100, 100)\n</cell>\n<code language=julia-1.5>\neat(100, 100, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(100, 100, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 100, 100)\n</cell>\n<code language=julia-1.5>\neat(100, 100, 100)\n</cell>\n\
    <code language=julia-1.5>\neat(100, 100, 100)\n</cell>\n<code language=julia-1.5>\n\
    eat(100, 100, 100)\n</cell>\n", "    if number < 0 || number > 1000 || need <\
    \ 0 || need > 1000 || remaining < 0 || remaining > 1000\n        error(\"invalid\
    \ input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n\
    \    carrots[2] = need\n    \n    while carrots[1] > 0\n        carrots[1] = carrots[1]\
    \ - 1\n        carrots[2] = carrots[2] - 1\n    end\n    \n    if carrots[1] ==\
    \ 0\n        carrots[1] = remaining\n    end\n    \n    return carrots\nend\n\
    </cell>\n<code language=julia-1.5>", "    if number > 1000 || need > 1000 || remaining\
    \ > 1000\n        error(\"The input must be within [0,1000]\")\n    end\n    \n\
    \    carrots = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrot", "    if number == 0\n      \
    \  Vector{Int64}([need, remaining])\n    else\n        Vector{Int64}([need, number])\n\
    \    end\nend\n</cell>\n<code language=julia-0.5>\neat(5, 6, 10)\n</cell>\n<text>\n\
    Problem 3\nWrite a function called eat_all that takes in an array of integers\
    \ and returns the number of carrots eaten and the number of carrots left.\nThe\
    \ function should return an array of two integers, the first being the number\
    \ of carrots eaten, and the second being the number of carrots left.\nThe function\
    \ should return an empty array if there are no carrots to eat, or if there are\
    \ not enough carrots to eat.\nThe function should return an array with two empty\
    \ arrays if there are no carrots to eat, or if there are not enough carrots to\
    \ eat.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining\
    \ > 1000 \n        error(\"Invalid input\") \n    else \n        Vector{Int64}([number,\
    \ need, remaining]) \n    end\nend\n</cell>\n<code language=julia-1.0>", "   \
    \ if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0 ||\
    \ remaining > 1000 \n        error(\"Invalid input\") \n    else \n        Vector{Int64}([number,\
    \ need, remaining]) \n    end\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if number > 0 && need > 0 && remaining > 0 \n        carrots = number\n    \
    \    carrots_left = remaining\n        carrots_eaten = 0\n        \n        while\
    \ carrots_left > 0 && carrots_eaten < need \n            carrots_eaten += 1 \n\
    \            carrots_left -= 1 \n            \n        end\n        \n       \
    \ if carrots_eaten < need \n            carrots_eaten = need\n        end\n  \
    \      \n        return Vector{Int64}(carrots_eaten, carrots)\n    end\n    return\
    \ Vector{Int64}(0, 0)\nend\n</cell>\n<code language=julia-1.3>\neat(5, 6, 10)\n\
    </cell>\n<code language=julia-1.3>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.3>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.3>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function called eat_all that takes in an array of integers\
    \ and returns the number of carrots eaten and the number of carrots left.", " \
    \   if number == 0\n        return [need, remaining]\n    \n    if remaining ==\
    \ 0\n        return [number, 0]\n    \n    if number > remaining\n        return\
    \ [number, remaining]\n    \n    carrots = number\n    carrots_left = remaining\n\
    \    \n    while carrots_left > 0\n        carrots_left -= 1\n        carrots\
    \ += 1\n    end\n    \n    return [carrots, carrots_left]\nend\n</cell>\n<code\
    \ language=julia-0.6>\neat(5, 6, 10)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ called hungry that takes three integers as arguments and returns true if the\
    \ first integer is greater than the second integer and the second integer is greater\
    \ than the third integer.", "    if number == 0\n        Vector{Int64}()\n   \
    \ elseif remaining < need\n        Vector{Int64}(remaining, 0)\n    elseif remaining\
    \ == need\n        Vector{Int64}(0, number)\n    else\n        Vector{Int64}(0,\
    \ remaining+need)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ number == 0\n        return [need, remaining]\n    \n    if remaining < 0\n\
    \        return [number, 0]\n    \n    if number < need\n        return [number,\
    \ remaining]\n    \n    carrots = number\n    \n    if remaining > need\n    \
    \    carrots = remaining\n    \n    if carrots > 0\n        return [carrots, 0]\n\
    \    \n    return [number, 0]\nend\n</cell>\n<code language=julia-1.5>\neat(5,\
    \ 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of carrots left after a meal\
    \ is completed.\nThe function should take in two arguments:\na meal count and\
    \ a number of carrots left.\nThe function should return an array of two integers,\
    \ the first integer being the number of carrots left, and the second integer being\
    \ the number of carrots left after a meal is completed.\nThe function should return\
    \ an empty array if there are no carrots left.\nThe function should return an\
    \ array with two empty arrays if there are no carrots left.\nThe function should\
    \ return an array with two empty arrays if there are no carrots left.\nThe function\
    \ should return an empty array if there are no carrots left.\nThe function should\
    \ return an empty array if there are no carrots left.\nThe function should return\
    \ an empty array if there are no carrots left.\nThe function should return an\
    \ empty array if there are no carrots left.\nThe function should return an empty\
    \ array if there are no carrots left.\nThe function should return an empty array\
    \ if there are no carrots left.\nThe function should return an empty array if\
    \ there are no carrots left.\nThe function should return an empty array if there\
    \ are no carrots left.\nThe function should return an empty array if there are\
    \ no carrots left.\nThe function should return an empty array if there are no\
    \ carrots left.\nThe function should return an empty array if there are no carrots\
    \ left.\nThe function should return an empty array if there are no carrots left.\n\
    The function should return an empty array if there are no carrots left.\nThe function\
    \ should return an empty array if there are no carrots left.\nThe function should\
    \ return an empty array if there are no carrots left.\nThe function should return\
    \ an empty array if there are no carrots left.\nThe function should return an\
    \ empty array if there are no carrots left.\nThe function should return an empty\
    \ array if there are no carrots left.\nThe function should return an empty array\
    \ if there are no carrots left.", "    if number == 0\n        return Vector{Int64}()\n\
    \    elseif number > remaining\n        return Vector{Int64}(remaining, 0)\n \
    \   elseif need == 0\n        return Vector{Int64}(number, 0)\n    else\n    \
    \    carrots = number\n        carrots_left = remaining\n        meals = Vector{Int64}()\n\
    \        while carrots_left > 0\n            carrots_left -= 1\n            meals\
    \ = meals.+(carrots)\n        end\n        return meals\n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if number < 0 || number > 1000 || need < 0 ||\
    \ need > 1000 || remaining < 0 || remaining > 1000\n        error(\"Invalid input\"\
    )\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1] = number\n   \
    \ carrots[2] = need\n    \n    carrots_left = zeros(Int64, 2)\n    carrots_left[1]\
    \ = remaining\n    carrots_left[2] = need\n    \n    carrots_left = carrots_left[1]\n\
    \    \n    carrots_left = carrots_left[2]\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = carrots_left\n    \n    carrots_left = carrots_left\n\
    \    \n    carrots_left = ", "    if number == 0 \n        Vector{Int64}([need,\
    \ remaining])\n    else\n        Vector{Int64}([need, number])\n    end\nend\n\
    </cell>\n<code language=julia-1.0>", "    if number == 0\n        Vector{Int64}()\n\
    \    else\n        Vector{Int64}([need, remaining])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\neat(4,\
    \ 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(2, 11, 5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of carrots left after a meal is completed.\nThe function should take\
    \ three arguments:\na meal number, the number of carrots left after that meal,\
    \ and the number of carrots eaten so far.\nThe function should return an array\
    \ of two elements:\nthe left number of carrots after that meal, and the left number\
    \ of carrots eaten so far.\nThe function should return an empty array if there\
    \ are no carrots left.", "    if number < 0 || number > 1000 \n        error(\"\
    number should be between 0 and 1000\")\n    end\n    if need < 0 || need > 1000\
    \ \n        error(\"need should be between 0 and 1000\")\n    end\n    if remaining\
    \ < 0 || remaining > 1000 \n        error(\"remaining should be between 0 and\
    \ 1000\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if number < 0 ||\
    \ number > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n\
    \        error(\"invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n\
    \    carrots[1] = number\n    carrots[2] = need\n    \n    meals = zeros(Int64,\
    \ 2)\n    meals[1] = remaining\n    meals[2] = 0\n    \n    carrots_left = zeros(Int64,\
    \ 2)\n    carrots_left[1] = remaining\n    carrots_left[2] = 0\n    \n    while\
    \ meals[1] > 0\n        carrots_left[1] -= 1\n        meals[1] -= 1\n        carrots[1]\
    \ += 1\n    end\n    \n    while carrots_left[1] > 0\n        meals[2] -= 1\n\
    \        carrots_left[1] -= 1\n        carrots[1] += 1\n    end\n    \n    return\
    \ carrots\nend\n</cell>\n<code language=julia-1.5>", "    if number > 0 && need\
    \ > 0 && remaining > 0\n        carrots = number\n        carrots_left = remaining\n\
    \        carrots_left_after_meals = carrots - need\n        carrots_after_meals\
    \ = carrots_left - carrots_left_after_meals\n        carrots_left_after_meals_array\
    \ = Array{Int64}(undef, carrots_after_meals)\n        carrots_left_after_meals_array[1]\
    \ = carrots_left\n        carrots_left_after_meals_array[2] = carrots_left_after_meals\n\
    \        carrots_left_after_meals_array[3] = carrots_left_after_meals + 1\n  \
    \      carrots_left_after_meals_array[4] = carrots_left_after_meals + 2\n    \
    \    carrots_left_after_meals_array[5] = carrots_left_after_meals + 3\n      \
    \  carrots_left_after_meals_array[6] = carrots_left_after_meals + 4\n        carrots_left_after_meals_array[7]\
    \ = carrots_left_after_meals + 5\n        carrots_left_after_meals_array[8] =\
    \ carrots_left_after_meals + 6\n        carrots_left_after_meals_array[9] = carrots_left_after_meals\
    \ + 7\n        carrots_left_after_meals_array[10] = carrots_left_after_meals +\
    \ 8\n        carrots_left_after_meals_array[11] = carrots_left_after_meals + 9\n\
    \        carrots_left_after_meals_array[12] = carrots_left_after_meals + 10\n\
    \        carrots_left_after_meals_array[13] = carrots_left_after_meals + 11\n\
    \        carrots_left_after_meals_array[14] = carrots_left_after_meals + 12\n\
    \        carrots_left_after_meals_array[15] = carrots_left_after_meals + 13\n\
    \        carrots_left_after_meals_array[16] = carrots_left_after_meals + 14\n\
    \        carrots_left_after_meals_array[17] = carrots_left_after_meals + 15\n\
    \        carrots_left_after_meals_array[18] = carrots_left_after_meals + 16\n\
    \        carrots_left_after_meals_array[19] = carrots_left_after_meals + 17\n\
    \        carrots_left_after_meals_array[20] = carrots_left_after_meals + ", " \
    \   if number < 0 || number > 1000 || need < 0 || need > 1000 || remaining < 0\
    \ || remaining > 1000\n        error(\"Invalid input\")\n    end\n    \n    carrots\
    \ = zeros(Int64, 2)\n    carrots[1] = number\n    carrots[2] = need\n    \n  \
    \  carrots_left = zeros(Int64, 2)\n    carrots_left[1] = remaining\n    carrots_left[2]\
    \ = need\n    \n    carrots_left_after_meals = zeros(Int64, 2)\n    carrots_left_after_meals[1]\
    \ = carrots_left[1]\n    carrots_left_after_meals[2] = carrots_left[2]\n    \n\
    \    carrots_left_after_meals_after_meals = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals[1]\
    \ = carrots_left[1]\n    carrots_left_after_meals_after_meals[2] = carrots_left[2]\n\
    \    \n    carrots_left_after_meals_after_meals_after_meals = zeros(Int64, 2)\n\
    \    carrots_left_after_meals_after_meals_after_meals[1] = carrots_left[1]\n \
    \   carrots_left_after_meals_after_meals_after_meals[2] = carrots_left[2]\n  \
    \  \n    carrots_left_after_meals_after_meals_after_meals_after_meals = zeros(Int64,\
    \ 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals[1] = carrots_left[1]\n\
    \    carrots_left_after_meals_after_meals_after_meals_after_meals[2] = carrots_left[2]\n\
    \    \n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals[1]\
    \ = carrots_left[1]\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals[2]\
    \ = carrots_left[2]\n    \n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_meals\
    \ = zeros(Int64, 2)\n    carrots_left_after_meals_after_meals_after_meals_after_meals_after_meals_after_meals[1]\
    \ = carrots_", "    if number <= 0 || need <= 0 || remaining <= 0\n        error(\"\
    Invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n    carrots[1]\
    \ = number\n    carrots[2] = remaining\n    \n    carrots = carrots[2:end]\n \
    \   \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots\
    \ = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n\
    \    \n    carrots = carrots[2:end]\n    \n    carrots = carrots[2:end]\n    \n\
    \    carrots = carrots[2:end]\n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if number > 0 && need > 0 && remaining > 0 \n        answer\
    \ = []\n        carrots = number\n        carrots_left = remaining\n        while\
    \ carrots > 0 && carrots_left > 0 \n            carrots_left -= 1\n          \
    \  carrots -= 1\n            push!(answer, carrots)\n        end\n        \n \
    \       push!(answer, carrots)\n        \n        return answer\n    end\n   \
    \ return []\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n\
    <code language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\n\
    eat(1, 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a given value appears\
    \ in a given array.", "    if number == 0\n        Vector{Int64}()\n    elseif\
    \ remaining < need\n        Vector{Int64}()\n    elseif remaining == need\n  \
    \      Vector{Int64}([number])\n    else\n        Vector{Int64}([number, need])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1,\
    \ 10, 10)\n</cell>\n<code language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of times a given string appears\
    \ in a given string.", "    if number < 0 || number > 1000 \n        error(\"\
    number must be between 0 and 1000\")\n    else if need < 0 || need > 1000 \n \
    \       error(\"need must be between 0 and 1000\")\n    else if remaining < 0\
    \ || remaining > 1000 \n        error(\"remaining must be between 0 and 1000\"\
    )\n    else\n        Vector{Int64}([number, need, remaining])\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\neat(5, 6, 10)\n</cell>\n<code language=julia-1.5>\n\
    eat(4, 8, 9)\n</cell>\n<code language=julia-1.5>\neat(1, 10, 10)\n</cell>\n<code\
    \ language=julia-1.5>\neat(2, 11, 5)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of carrots left after a meal is complete.\nThe function\
    \ should take in two parameters: the number of carrots you have eaten so far,\
    \ and the total number of carrots left.\nThe function should return an array of\
    \ two integers, the first integer is the total number of carrots left after your\
    \ meal, and the second integer is the number of carrots left after your meal.\n\
    The function should return an empty array if there are no carrots left.\nThe function\
    \ should return an error if there are not enough carrots to complete the meal.\n\
    The function should return an error if there are not enough carrots to complete\
    \ the meal.\nThe function should return an error if there are not enough carrots\
    \ to complete the meal.\nThe function should return an error if there are not\
    \ enough carrots to complete the meal.\nThe function should return an error if\
    \ there are not enough carrots to complete the meal.\nThe function should return\
    \ an error if there are not enough carrots to complete the meal.\nThe function\
    \ should return an error if there are not enough carrots to complete the meal.\n\
    The function should return an error if there are not enough carrots to complete\
    \ the meal.\nThe function should return an error if there are not enough carrots\
    \ to complete the meal.\nThe function should return an error if there are not\
    \ enough carrots to complete the meal.\nThe function should return an error if\
    \ there are not enough carrots to complete the meal.\nThe function should return\
    \ an error if there are not enough carrots to complete the meal.\nThe function\
    \ should return an error if there are not enough carrots to complete the meal.\n\
    The function should return an error if there are not enough carrots to complete\
    \ the meal.\nThe function should return an error if there are not enough carrots\
    \ to complete the meal.\nThe function should return an error if there are not\
    \ enough carrots to complete the meal.\nThe function should return an error if\
    \ there are not enough car", "    if number > 1000 || need > 1000 || remaining\
    \ > 1000\n        return Vector{Int64}()\n    end\n    \n    carrots = number\n\
    \    carrots_left = need\n    \n    while carrots_left > 0 && carrots > 0\n  \
    \      carrots_left -= 1\n        carrots -= 1\n    end\n    \n    if carrots_left\
    \ == 0\n        return Vector{Int64}(carrots, 0)\n    else\n        return Vector{Int64}(carrots,\
    \ carrots_left)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if number < 0 || number\
    \ > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000\n   \
    \     error(\"Invalid input\")\n    end\n    \n    carrots = zeros(Int64, 2)\n\
    \    carrots[1] = number\n    carrots[2] = remaining\n    \n    while carrots[2]\
    \ > 0 && carrots[1] > 0\n        carrots[1] -= 1\n        carrots[2] -= 1\n  \
    \  end\n    \n    if carrots[1] > 0\n        carrots[1] += 1\n    end\n    \n\
    \    return carrots\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ < 0 || number > 1000 \n        error(\"The number must be between 0 and 1000\"\
    )\n    else if need < 0 || need > 1000 \n        error(\"The need must be between\
    \ 0 and 1000\")\n    else if remaining < 0 || remaining > 1000 \n        error(\"\
    The remaining must be between 0 and 1000\")\n    else \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n", "    if number == 0\n        return [need, remaining]\n\
    \    if remaining < 0\n        return [number, 0]\n    if number < need\n    \
    \    return [number, 0]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    if number > remaining \n        number = remaining\n    end\n    \n    if\
    \ need > remaining \n        need = remaining\n    end\n    \n    if number ==\
    \ 0 \n        return [number, 0]\n    end\n    \n    if need == 0 \n        return\
    \ [number, 0]\n    end\n    \n    carrots = number\n    \n    if number > need\
    \ \n        carrots = number\n    else\n        carrots = need\n    end\n    \n\
    \    if carrots == 0 \n        return [number, 0]\n    end\n    \n    carrots\
    \ = carrots - 1\n    \n    if carrots == 0 \n        return [number, 0]\n    end\n\
    \    \n    return [number, carrots]\nend\n</cell>\n<code language=julia-1.5>",
  "    if number == 0\n        Vector{Int64}()\n    elseif number > remaining\n  \
    \      Vector{Int64}(remaining, 0)\n    elseif need == 0\n        Vector{Int64}(remaining,\
    \ 0)\n    elseif need > remaining\n        Vector{Int64}(remaining, 0)\n    else\n\
    \        Vector{Int64}(remaining, 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    meals(number::Int64, need::Int64, remaining::Int64)"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
