name: HumanEval_55_fib
language: jl
prompt: "\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n\
  \    1\n    >>> fib(8)\n    21\n    \"\"\"\nfunction fib(n::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = fib;\n\t@test(candidate(10) ==\
  \ 55)\n\t@test(candidate(1) == 1)\n\t@test(candidate(8) == 21)\n\t@test(candidate(11)\
  \ == 89)\n\t@test(candidate(12) == 144)\nend\n"
completions: ["    if n == 0 \n        0\n    else if n == 1 \n        1\n    else\
    \ \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| c |>\nThis is not the correct solution. `fib(n)` should return `fib(n-1)+fib(n-2)`\
    \ and not `fib(n)+fib(n-1)`.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ `fib(n)` should return `fib(n-1)+fib(n-2)` and not `fib(n)+fib(n-1)`.\n<|/ c\
    \ |>\n<| c |>\nThe correct solution is `fib(n)=fib(n-1)+fib(n-2)`\n<|/ c |>\n\
    <| c |>\nThis is not the correct solution. `fib(n)` should return `fib(n-1)+fib(n-2)`\
    \ and not `fib(n)+fib(n-1)`.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ `fib(n)` should return `fib(n-1)+fib(n-2)` and not `fib(n)+fib(n-1)`.\n<|/ c\
    \ |>\n<| a dscore=5 |>\nThe accepted answer does not return the correct result\
    \ for n==0.\n<code>\njulia> fib(0)\n0\n</code>\nThe correct solution is fib(n)=fib(n-1)+fib(n-2).\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the correct solution. `fib(n)`\
    \ should return `fib(n-1)+fib(n-2)` and not `fib(n)+fib(n-1)`.\n<|/ c |>\n<| c\
    \ |>\nThis is not the correct solution. `fib(n)` should return `fib(n-1)+fib(n-2)`\
    \ and not `fib(n)+fib(n-1)`.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ `fib(n)` should return `fib(n-1)+fib(n-2)` and not `fib(n)+fib(n-1)`.\n<|/ c\
    \ |>\n<| c |>\nThis is not the correct solution. `fib(n)` should return `fib(n-1)+fib(n-2)`\
    \ and not `fib(n)+fib(n-1)`.\n<|/ c |>\n<| c |>\nThis is not the correct solution.\
    \ `fib(n)` should return `fib(n-1)+fib(n-2)` and not `fib(n)+fib(n-1)`.\n<|/ c ",
  "    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <text>\nThe Fibonacci numbers are defined by the recurrence relation:", "    if\
    \ n == 0 \n        0\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `fib` function\
    \ can be written more concisely as `fib(n) = n < 2 ? n : fib(n-1) + fib(n-2)`.\n\
    <|/ c |>\n<| c |>\nI agree, thank you. I just wanted to show the recursive approach\
    \ for beginners.\n<|/ c |>\n<| c |>\nI agree with you. I just wanted to show a\
    \ recursive approach for beginners.\n<|/ c |>\n<| a |>\n<code>", "    if n < 2\
    \ \n        then return n\n        else return fib(n-1) + fib(n-2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using memoization.", "    if n <= 1 \n        then return\
    \ n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using memoization.", "    if n == 0 || n == 1 \n     \
    \   then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function named fib_r(n::Int64) that returns the nth Fibonacci number.", "  \
    \  if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<text>\nFibonacci numbers are a recursive data structure.\
    \ Recursive functions can call themselves to solve problems such as finding fibonacci\
    \ numbers. A recursive function calls itself until it reaches a base case (a case\
    \ where a recursive function does not call itself). A base case is a case where\
    \ a recursive function does not call itself. A base case is typically a case where\
    \ a recursive function does not need to call itself to solve a problem.", "  \
    \  if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<text>\nExercise 10\nWrite a function that returns\
    \ the n-th Fibonacci number using recursion.", "    if n <= 1 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that returns the n-th\
    \ Fibonacci number using recursion.", "    if n < 2\n    then return 1\n    else\
    \ return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThanks\
    \ for your answer. I'm new to Julia and I didn't know that Julia has this kind\
    \ of functions. I thought that Julia has only functions with return types. I thought\
    \ that Julia has only functions with return types. I thought that Julia has only\
    \ functions with return types. I thought that Julia has only functions with return\
    \ types. I thought that Julia has only functions with return types. I thought\
    \ that Julia has only functions with return types. I thought that Julia has only\
    \ functions with return types. I thought that Julia has only functions with return\
    \ types. I thought that Julia has only functions with return types. I thought\
    \ that Julia has only functions with return types. I thought that Julia has only\
    \ functions with return types. I thought that Julia has only functions with return\
    \ types. I thought that Julia has only functions with return types. I thought\
    \ that Julia has only functions with return types. I thought that Julia has only\
    \ functions with return types. I thought that Julia has only functions with return\
    \ types. I thought that Julia has only functions with return types. I thought\
    \ that Julia has only functions with return types. I thought that Julia has only\
    \ functions with return types. I thought that Julia has only functions with return\
    \ types. I thought that Julia has only functions with return types. I thought\
    \ that Julia has only functions with return types. I thought that Julia has only\
    \ functions with return types. I thought that Julia has only functions with return\
    \ types. I thought that Julia has only functions with return types. I thought\
    \ that Julia has only functions with return types. I thought that Julia has only\
    \ functions with return types. I thought that Julia has only functions with return\
    \ types. I thought that Julia has only functions with return types. I thought\
    \ that Julia has only functions with return types. I thought that Julia has only\
    \ functions with return types. I thought that Julia has only functions with return\
    \ types. I thought that Julia has only functions with return types. I thought\
    \ that Julia has only functions with return types. I thought that Julia has only\
    \ functions with return types. I thought that Julia has only functions with return\
    \ types. I thought that Julia has only functions with return types. I thought\
    \ that Julia has only functions with return ", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return n-th Fibonacci\
    \ number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n  \
    \  21\n    \"\"\"", "    if n == 0 \n        then return 0\n    else if n == 1\
    \ \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function named fibonacci that returns the nth Fibonacci number.\
    \ Test it by timing it.", "    if n < 2\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,fibonacci |>\n\
    <code>", "    if n == 0 \n        0\n    else if n == 1 \n        1\n    else\
    \ \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This does not answer the question. `fib` does not return a Fibonacci number. `fib`\
    \ returns a Fibonacci number that is the sum of the two previous numbers. `fib`\
    \ does not return the nth Fibonacci number.\n<|/ c |>\n<| c |>\nThis is not an\
    \ answer, but a comment. `fib` does not return a Fibonacci number. `fib` returns\
    \ a Fibonacci number that is the sum of the two previous numbers. `fib` does not\
    \ return the nth Fibonacci number.\n<|/ c |>\n<| c |>\nThis does not answer the\
    \ question. `fib` does not return a Fibonacci number. `fib` returns a Fibonacci\
    \ number that is the sum of the two previous numbers. `fib` does not return the\
    \ nth Fibonacci number.\n<|/ c |>\n<| c |>\nThis does not answer the question.\
    \ `fib` does not return a Fibonacci number. `fib` returns a Fibonacci number that\
    \ is the sum of the two previous numbers. `fib` does not return the nth Fibonacci\
    \ number.\n<|/ c |>\n<| c |>\nThis does not answer the question. `fib` does not\
    \ return a Fibonacci number. `fib` returns a Fibonacci number that is the sum\
    \ of the two previous numbers. `fib` does not return the nth Fibonacci number.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>", "    if n < 0 \n        error(\"Fibonacci\
    \ number must be positive\")\n    else if n == 0 \n        1\n    else if n ==\
    \ 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/\
    \ a tags=julia,fibonacci,function |>\n<| a tags=julia,fibonacci,function |>\n\
    <code>", "    if n <= 1 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nI believe this should\
    \ be `fib(n-1) + fib(n-2)`\n<|/ c |>\n<| c |>\nThanks for your comment. I've fixed\
    \ it.\n<|/ c |>\n<| a tags=fibonacci,julia,recursion |>\n<code>", "    if n ==\
    \ 0\n        0\n    elseif n == 1\n        1\n    else\n        fib(n - 1) + fib(n\
    \ - 2)\n    end\nend\n</cell>\n<text>\nThe Fibonacci sequence is defined by the\
    \ recurrence relation:", "    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number recursively.", "    if n == 0 || n == 1 \n\
    \        then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the n-th Fibonacci number using memoization.",
  "    if n < 2 \n        then return n\n    else \n        return fib(n-2) + fib(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_r(n::Int64) that returns the nth Fibonacci number.",
  "    if n == 0\n        0\n    elseif n == 1\n        1\n    else\n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "    if\
    \ n == 0 \n        then return 0\n    else if n == 1 \n        then return 1\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 0 \n        error(\"Fibonacci number must be positive\")\n    else if\
    \ n == 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n < 2 \n        then return n\n        else\
    \ return fib(n-2) + fib(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a function that calculates the\
    \ n-th Fibonacci number using memoization.", "    if n<=1 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n < 2 \n        then return\
    \ n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64\
    \ that returns the n-th Fibonacci number.", "    if n <= 1 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ that returns the n-th Fibonacci number.", "    if n < 2 \n        then return\
    \ n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.",
  "    if n == 0\n        0\n    else if n == 1\n        1\n    else\n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2\
    \ |>\nI wanted to add this as a comment to Szabolcs's answer, but I don't have\
    \ enough reputation to do so. \nThe code in the accepted answer does not work\
    \ for me. \nThe code below does. \n<code>", "    if n < 2\n        1\n    else\n\
    \        fib(n-2) + fib(n-1)\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n\
    <code>", "    if n == 0 \n        then return 0\n    else if n == 1 \n       \
    \ then return 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| a dscore=2 |>\n<code>", "    if n < 0 \n   \
    \     error(\"Fibonacci number must be positive\")\n    else if n == 0 \n    \
    \    1\n    else if n == 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<text>\nExercise\nWrite a function that returns the n-th Fibonacci\
    \ number using recursion.", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a recursive function named fib_r(n::Int64) that returns the nth Fibonacci\
    \ number.", "    if n < 2 \n        then return n\n    else \n        return fib(n-2)\
    \ + fib(n-1)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,fibonacci |>\n\
    <code>", "    if n == 0 \n        then return 0\n    else if n == 1 \n       \
    \ then return 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the first n Fibonacci numbers. \nHint: Use a recursive\
    \ function.", "    if n < 2\n    then return n\n    else return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a recursive function fib_rec(n::Int64)::Int64 that returns the n-th\
    \ Fibonacci number.", "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the n-th Fibonacci number using recursion.",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nThe @time macro will time the execution of the function and report the\
    \ elapsed time. In the above example the elapsed time is about 0.04 seconds. Note\
    \ that Julia is smart enough to optimize the function and run it only once.",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a recursive function which computes the n-th Fibonacci\
    \ number.", "    if n <= 1 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2\
    \ |>\n<code>", "    if n == 0 || n == 1 \n        return n\n    else \n      \
    \  return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Fibonacci numbers\nWrite a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n == 0\n        0\n    else\n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a function that calculates $n!$, where $n$ is\
    \ a positive integer.", "    if n == 0 || n == 1 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a recursive function fib_r(n::Int64) that returns the\
    \ nth Fibonacci number.", "    if n == 0 || n == 1 \n        then return n\n \
    \   else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number.", "    if n == 0\n        0\n    elseif\
    \ n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the n-th Fibonacci number using recursion.", " \
    \   if n <= 1 \n        then 1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n\
    </code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2 |>\n<code>", "    if n <\
    \ 2\n    then return n\n    else return fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that computes the n-th Fibonacci number using recursion.", "    if n < 0 \n\
    \        error(\"Fibonacci number must be positive\")\n    else if n == 0 \n \
    \       1\n    else if n == 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your solution, but I wonder why\
    \ you use an `if` statement to return `1` if `n` is `0`.\n<|/ c |>\n<| c |>\n\
    I used `if` statement to return `1` if `n` is `0` because `fib(0)` returns `1`\
    \ but `fib(1)` returns `1` as well. `fib(1)` returns `1` because `fib(0)` returns\
    \ `1` as well. `fib(2)` returns `2` because `fib(1)` returns `1` as well. `fib(3)`\
    \ returns `3` because `fib(2)` returns `2` as well. `fib(4)` returns `5` because\
    \ `fib(3)` returns `3` as well. `fib(5)` returns `8` because `fib(4)` returns\
    \ `5` as well. `fib(6)` returns `13` because `fib(5)` returns `8` as well. `fib(7)`\
    \ returns `21` because `fib(6)` returns `13` as well. `fib(8)` returns `34` because\
    \ `fib(7)` returns `21` as well. `fib(9)` returns `55` because `fib(8)` returns\
    \ `34` as well.\n<|/ c |>\n<| c |>\nI see. But why not just `return 1` instead\
    \ of `if n == 0 return 1`?\n<|/ c |>\n<| c |>\nI used `if` statement because I\
    \ wanted to return `1` if `n` is `0` because `fib(0)` returns `1` but `fib(1)`\
    \ returns `1` as well. `fib(1)` returns `1` because `fib(0)` returns `1` as well.\
    \ `fib(2)` returns `2` because `fib(1)` returns `1` as well. `fib(3)` returns\
    \ `3` because `fib(2)` returns `2` as well. `fib(4)` returns `5` because `fib(3)`\
    \ returns `3` as well. `fib(5)` returns `8` because `fib(4)` returns `5` as well.\
    \ `fib(6)` returns `13` because `", "    if n == 0\n        0\n    elseif n ==\
    \ 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a\
    \ tags=julia,fibonacci |>\n<| a dscore=2 |>\nThe accepted answer by is great,\
    \ but I wanted to add that you can also use the built-in function fib(n) which\
    \ returns the nth Fibonacci number. \n<code>\njulia> fib(10)\n55\n</code>\n<|/\
    \ a tags=julia,fibonacci |>\n<| a dscore=2 |>\nThe accepted answer by is great,\
    \ but I wanted to add that you can also use the built-in function fib(n) which\
    \ returns the nth Fibonacci number. \n<code>\njulia> fib(10)\n55\n</code>\n<|/\
    \ a tags=julia,fibonacci |>\n<| a dscore=2 |>\n<code>", "    if n == 0 \n    \
    \    then return 1\n    else if n == 1 \n        then return 1\n    else \n  \
    \      return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<text>\nThe @time macro will tell you how long it took to\
    \ run a piece of code. In the above case, it took about 4 seconds to run fib(10).\
    \ Let's see how long it took to run fib(100).", "    if n == 0 \n        0\n \
    \   else if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n\
    </code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\nI wrote\
    \ a Julia package for calculating Fibonacci numbers. It is available on GitHub\
    \ here: https://github.com/russross/Fibonacci.jl\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\n<code>", "    if n < 2 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a recursive function fib_r(n::Int64) that returns\
    \ the nth Fibonacci number.", "    if n < 2\n    then return 1\n    else return\
    \ fib(n-2) + fib(n-1)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n < 2 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n\
    </cell>\n<text>\nThe @time macro tells Julia to run the function and time how\
    \ long it takes to run. Here we see that fib(10) takes about 0.2 seconds to run.\
    \ Let's try it again with @time fib(10) and @time fib(100).", "    if n < 2 \n\
    \        then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function named fib_r(n::Int64) that returns the nth Fibonacci\
    \ number.", "    if n <= 1\n        1\n    else\n        fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the n-th Fibonacci number using recursion.",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe Fibonacci sequence is defined by the recurrence\
    \ relation:", "    if n == 0 || n == 1 \n        then return n\n    else \n  \
    \      return fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the nth Fibonacci number using recursion.", "    if n == 0 \n \
    \       then return 1\n    else if n == 1 \n        then return 1\n    else \n\
    \        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n == 0 \n        0\n    else\
    \ if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 1\nWrite a function that computes the\
    \ n-th Fibonacci number using recursion.", "    if n == 0 || n == 1 \n       \
    \ return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.", "    if n == 0\
    \ \n        then return 1\n    else if n == 1 \n        then return 1\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ n-th Fibonacci number using recursion.", "    if n <= 1\n        1\n    else\n\
    \        fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_native fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the n-th Fibonacci number modulo 1000000007 (the remainder after dividing by\
    \ 1000000007).", "    if n < 2 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    <code>", "    if n < 2 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2 |>\n\
    <code>", "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec(n::Int64) that returns the nth Fibonacci\
    \ number.", "    if n == 0 || n == 1 \n        then return n\n    else \n    \
    \    return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a recursive function named fib_r(n::Int64) which returns the\
    \ nth Fibonacci number.", "    if n == 0 \n        then return 0\n    else if\
    \ n == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:", "    if n < 2 \n        then return n\n   \
    \ else \n        return fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n == 0 || n == 1 \n        then return n\n    else \n \
    \       return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This is not the most efficient solution. Recursion is expensive.\n<|/ c |>\n<|\
    \ c |>\nI agree with you, but I wanted to show a recursive solution. Anyway, I\
    \ edited my answer to show a more efficient solution.\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\nI wrote a recursive function which returns Fibonacci numbers in Julia. \n\
    <code>", "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\n   \
    \ end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe `fib` function can be written\
    \ more efficiently by using a `while` loop: `function fib(n::Int64)::Int64\n \
    \   fib = 1\n    while n < 2\n        fib = fib + fib\n        n -= 1\n    end\n\
    \    return fib\nend`\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    if n == 0 \n\
    \        then return 0\n    else if n == 1 \n        then return 1\n    else \n\
    \        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will give you the time it took\
    \ to run the code. Let's see how long it took to run fib for 10 million numbers:",
  "    if n <= 1 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 10\nWrite a function that calculates\
    \ the factorial of a number.", "    if n < 2\n        1\n    else\n        fib(n-2)\
    \ + fib(n-1)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n <= 1\n        1\n    else\n        fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec(n::Int64) that returns the nth Fibonacci\
    \ number.", "    if n < 2 \n        then return n\n    else \n        return fib(n-2)\
    \ + fib(n-1)\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a Julia function named fib2 that computes the n-th Fibonacci\
    \ number.", "    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>", "    if n < 0 \n        error(\"\
    Fibonacci number must be positive\")\n    else if n == 0 \n        0\n    else\
    \ if n == 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThis code does not work. `fib` returns\
    \ `Int64` but `fib(n-1)` returns `Int`.\n<|/ c |>\n<| c |>\nI fixed the code.\
    \ Thanks for pointing it out\n<|/ c |>\n<| a tags=julia,fibonacci |>\n<code>",
  "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if n == 0 \n     \
    \   then return 0\n    else if n == 1 \n        then return 1\n    else \n   \
    \     return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise\nWrite a function that computes the n-th\
    \ Fibonacci number using recursion.", "    if n == 0 || n == 1 \n        return\
    \ n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n < 2\n        1\n    else\n\
    \        fib(n-2) + fib(n-1)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<|\
    \ c |>\nThis is not the fastest solution. Julia is optimized for recursive functions.\
    \ In your solution, you are calling `fib` twice for each iteration. `fib` should\
    \ be called only once and `fib` should return an array. `fib` should also return\
    \ an array. `fib` should also return an array. `fib` should also return an array.\
    \ `fib` should also return an array. `fib` should also return an array. `fib`\
    \ should also return an array. `fib` should also return an array. `fib` should\
    \ also return an array. `fib` should also return an array. `fib` should also return\
    \ an array. `fib` should also return an array. `fib` should also return an array.\
    \ `fib` should also return an array. `fib` should also return an array. `fib`\
    \ should also return an array. `fib` should also return an array. `fib` should\
    \ also return an array. `fib` should also return an array. `fib` should also return\
    \ an array. `fib` should also return an array. `fib` should also return an array.\
    \ `fib` should also return an array. `fib` should also return an array. `fib`\
    \ should also return an array. `fib` should also return an array. `fib` should\
    \ also return an array. `fib` should also return an array. `fib` should also return\
    \ an array. `fib` should also return an array. `fib` should also return an array.\
    \ `fib` should also return an array. `fib` should also return an array. `fib`\
    \ should also return an array. `fib` should also return an array. `fib` should\
    \ also return an array. `fib` should also return an array. `fib` should also return\
    \ an array. `fib` should also return an array. `fib` should also return an array.\
    \ `fib` should also return an array. `fib` should also return an array. `fib`\
    \ should also return an array. `fib` should also return an array. `fib` should\
    \ also return an array. `fib` should also return an array. `fib` should also return\
    \ an array. `fib` should also return an array. `fib` ", "    if n < 2 \n     \
    \   then return 1\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nThe @time macro tells\
    \ Julia to compile the function and to run it a number of times to see how long\
    \ it takes. In this case we see that it takes about 3 seconds to run fib(10).",
  "    if n < 0 \n        error(\"fib: n must be non-negative\")\n    else if n ==\
    \ 0 \n        1\n    else if n == 1 \n        1\n    else \n        fib(n-1) +\
    \ fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a function that computes the n-th Fibonacci number using\
    \ recursion.", "    if n == 0 || n == 1 \n        then return n\n    else \n \
    \       return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n\
    <| c |>\nThis is not the most efficient solution. Using a recursive function will\
    \ result in an exponential time complexity. Using memoization will result in an\
    \ exponential space complexity.\n<|/ c |>\n<| c |>\nI agree with you, however\
    \ I believe that this is an answer to the question asked. As I understand it,\
    \ Fibonacci numbers are the most common recursion problem in programming. And\
    \ I believe that this is the most efficient solution. Of course, there are other\
    \ ways to solve this problem (for example, using dynamic programming), but this\
    \ solution is very simple and straightforward.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, however I believe that this is an answer to the question asked. As I understand\
    \ it, Fibonacci numbers are the most common recursion problem in programming.\
    \ And I believe that this is the most efficient solution. Of course, there are\
    \ other ways to solve this problem (for example, using dynamic programming), but\
    \ this solution is very simple and straightforward.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, however I believe that this is an answer to the question asked. As\
    \ I understand it, Fibonacci numbers are the most common recursion problem in\
    \ programming. And I believe that this is the most efficient solution. Of course,\
    \ there are other ways to solve this problem (for example, using dynamic programming),\
    \ but this solution is very simple and straightforward.\n<|/ c |>\n<| c |>\nI\
    \ agree with you, however I believe that this is an answer to the question asked.\
    \ As I understand it, Fibonacci numbers are the most common recursion problem\
    \ in programming. And I believe that this is the most efficient solution. Of course,\
    \ there are other ways to solve this problem (for example, using dynamic programming),\
    \ but this solution is very simple and straightforward.\n<|/ c |>\n<| a dscore=5\
    \ |>\n<code>", "    if n <= 1 \n        then 1\n    else fib(n-1) + fib(n-2)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    if n == 0 \n\
    \        then return 1\n    else if n == 1 \n        then return 1\n    else \n\
    \        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using a recursive function.", "    if n == 0 \n      \
    \  0\n    else if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n -\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>", "    if n<2 return n\n    else\
    \ return fib(n-1)+fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a function that computes the n-th Fibonacci number\
    \ using memoization.", "    if n<2 then return 1\n    else return fib(n-1)+fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"Return n-th Fibonacci number.\n\
    \    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\
    \"\"", "    if n == 0 then return 1\n    if n == 1 then return 1\n    return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n Fibonacci numbers.\
    \ \nThe Fibonacci numbers are defined by the recurrence relation:\n$$Fn = F{n-1}\
    \ + F_{n-2}$$\nwhere $F_0 = 0$ and $F_1 = 1$. \nWrite a Julia function that returns\
    \ the first n Fibonacci numbers. \nThe Fibonacci numbers are defined by the recurrence\
    \ relation:\n$$Fn = F{n-1} + F_{n-2}$$\nwhere $F_0 = 0$ and $F_1 = 1$. \nThe function\
    \ should take an argument n and return the nth Fibonacci number.", "    if n ==\
    \ 0\n        0\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis is not the best solution. Recursion is expensive. Using a\
    \ while loop would be much better.\n<|/ c |>\n<| c |>\nI agree, while loop is\
    \ better, but I wanted to show how to implement recursion.\n<|/ c |>\n<| c |>\n\
    I agree with you. Recursion is expensive, but this solution is very simple and\
    \ easy to understand.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    if n < 2 \n \
    \       then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as", "    if n == 0 || n == 1 \n        then return\
    \ n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec(n::Int64)::Int64\
    \ that returns the n-th Fibonacci number.", "    if n <= 1 \n        then 1\n\
    \    else fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n\
    <| a dscore=2 |>\n<code>", "    if n < 2 \n        then return n\n    else \n\
    \        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        0\n    else if n == 1 \n        1\n    else \n        fib(n\
    \ - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThe\
    \ `fib` function can be written more concisely as `fib(n) = n < 2 ? n : fib(n-1)\
    \ + fib(n-2)`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've updated my\
    \ answer.\n<|/ c |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n < 2 \n \
    \       then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the n-th Fibonacci number using memoization.",
  "    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n    end\nend\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not an efficient solution. `fib(n)`\
    \ will call itself twice for every `n` greater than 1. A better solution would\
    \ be to memoize `fib(n)` using a `Dict` of previously computed values.\n<|/ c\
    \ |>\n<| c |>\nI agree, but I wanted to keep it simple and easy to understand.\
    \ Also, memoization is more efficient than recursion.\n<|/ c |>\n<| c |>\nI agree\
    \ with you that memoization is more efficient, but I wanted to keep it simple\
    \ and easy to understand. Also, memoization is more efficient than recursion.\n\
    <|/ c |>\n<| c |>\nI agree with you that memoization is more efficient, but I\
    \ wanted to keep it simple and easy to understand. Also, memoization is more efficient\
    \ than recursion.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    if n == 0\n     \
    \   0\n    elseif n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\n\
    end\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis doesn't work for me.\
    \ `fib` returns `Int64` but `fib(10)` returns `Int64` too. `fib(10)` returns `55`\
    \ but `fib(10)` returns `55` too.\n<|/ c |>\n<| c |>\nI edited the answer to include\
    \ a version that works with Julia 1.5.1\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ for me. `fib` returns `Int64` but `fib(10)` returns `Int64` too. `fib(10)` returns\
    \ `55` but `fib(10)` returns `55` too.\n<|/ c |>\n<| c |>\nI edited the answer\
    \ to include a version that works with Julia 1.5.1\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me. `fib` returns `Int64` but `fib(10)` returns `Int64` too. `fib(10)`\
    \ returns `55` but `fib(10)` returns `55` too.\n<|/ c |>\n<| a dscore=4 |>\nThe\
    \ accepted answer doesn't work for me in Julia 1.5.1. Here's a version that does:\n\
    <code>", "    if n == 0 \n        0\n    else if n == 1 \n        1\n    else\
    \ \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n<2 return n\n    else return\
    \ fib(n-1)+fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Return n-th\
    \ Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n\
    \    21\n    \"\"\"", "    if n < 0 \n        error(\"Fibonacci number must be\
    \ positive\")\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n\
    \    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n < 2\n        1\n    else\n\
    \        fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64) that\
    \ returns the n-th Fibonacci number.", "    if n < 2\n        1\n    else\n  \
    \      fib(n-2) + fib(n-1)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c\
    \ |>\nThis is not the most efficient solution. `fib(n)` will call `fib(n-1)` twice\
    \ and `fib(n-2)` three times. A better solution would be to memoize `fib(n)`.\n\
    <|/ c |>\n<| c |>\nI agree with you, memoization is definitely the way to go.\
    \ I've added a memoized version to the answer.\n<|/ c |>\n<| c |>\nI agree with\
    \ you that memoization is the way to go. I've added a memoized version to the\
    \ answer.\n<|/ c |>\n<| c |>\nI agree with you that memoization is the way to\
    \ go. I've added a memoized version to the answer.\n<|/ c |>\n<| c |>\nI agree\
    \ with you that memoization is the way to go. I've added a memoized version to\
    \ the answer.\n<|/ c |>\n<| a tags=julia,fibonacci |>\nThe most efficient way\
    \ is to use memoization:\n<code>", "    if n == 0 \n        then return 0\n  \
    \  else if n == 1 \n        then return 1\n    else \n        return fib(n - 1)\
    \ + fib(n - 2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as", "    if n < 2 \n        then\
    \ return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a function\
    \ that computes the n-th Fibonacci number using recursion.", "    if n == 0 ||\
    \ n == 1 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_r(n::Int64)::Int64 that returns the nth Fibonacci\
    \ number.", "    if n == 0 || n == 1 \n        then return n\n    else \n    \
    \    return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th\
    \ Fibonacci number using recursion.", "    if n == 0 \n        then return 0\n\
    \    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a recursive function fib_rec that computes the nth Fibonacci\
    \ number recursively.", "    if n < 2 \n        then return n\n        else return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th\
    \ Fibonacci number using recursion.", "    if n <= 1 \n        then return n\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a recursive function fib_rec that\
    \ computes the n-th Fibonacci number.", "    if n < 0 \n        error(\"Fibonacci\
    \ number must be positive\")\n    else if n == 0 \n        1\n    else if n ==\
    \ 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n\
    \    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"", "    if n<2\
    \ then return n\n    else return fib(n-1)+fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n\
    \    1\n    >>> fib(8)\n    21\n    \"\"\"", "    if n == 0 || n == 1 \n     \
    \   then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a function that returns the n-th\
    \ Fibonacci number using recursion.", "    if n == 0 \n        then return 1\n\
    \    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2 |>\n\
    <code>", "    if n == 0 || n == 1 \n        return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nThe Fibonacci sequence is defined by the recurrence relation:",
  "    if n < 2 \n        then return n\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5", "    if n < 2\n        1\n\
    \    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @", "    if n == 0 \n        then return 1\n    else if n == 1 \n        then\
    \ return 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a recursive function named fib_iter that returns the nth Fibonacci\
    \ number using an iterator. Hint: use the fib function defined above.", "    if\
    \ n == 0 || n == 1 \n        return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that computes the n-th Fibonacci number using memoization.",
  "    if n < 2 \n        then return 1\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec that computes the nth Fibonacci number.\
    \ Test it on small numbers and on large numbers.", "    if n == 0 || n == 1 \n\
    \        then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function named fib_r(n::Int64) that returns the nth Fibonacci number.", "  \
    \  if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function fib_rec(n::Int64)::Int64 that returns the nth Fibonacci\
    \ number.", "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    if n < 0 \n \
    \       error(\"Fibonacci number must be positive\")\n    else if n == 0 \n  \
    \      1\n    else if n == 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\n\
    end\n</code>\n<|/ a tags=julia,fibonacci |>\n<| a dscore=2 |>\nI wrote a Julia\
    \ package for Fibonacci numbers, called fibonacci.jl. It has two functions: fibonacci(n)\
    \ and fibonacci(n, memoize=true).\nThe first function returns the nth Fibonacci\
    \ number. The second function returns a memoized version of fibonacci(n), which\
    \ saves computations by storing the results in a dictionary memo[fibonacci(n)].\
    \ \nThe package is available on GitHub: https://github.com/jamie-johnson/fibonacci.jl\n\
    <|/ a tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\nI wrote a package\
    \ for Fibonacci numbers, called fibonacci.jl. It has two functions: fibonacci(n)\
    \ and fibonacci(n, memoize=true).\nThe first function returns the nth Fibonacci\
    \ number. The second function returns a memoized version of fibonacci(n), which\
    \ saves computations by storing the results in a dictionary memo[fibonacci(n)].\
    \ \nThe package is available on GitHub: https://github.com/jamie-johnson/fibonacci.jl\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a package for Fibonacci numbers,\
    \ called fibonacci.jl. It has two functions: fibonacci(n) and fibonacci(n, memoize=true).\n\
    The first function returns the nth Fibonacci number. The second function returns\
    \ a memoized version of fibonacci(n), which saves computations by storing the\
    \ results in a dictionary memo[fibonacci(n)]. \nThe package is available on GitHub:\
    \ https://github.com/jamie-johnson/fibonacci.jl\n<|/ a tags=julia,fibonacci |>\n\
    <| a dscore=2 |>\nI wrote a package for Fibonacci numbers, called fibonacci.jl.\
    \ It has two functions: fibonacci(n) and fibonacci(n, memoize=true).\nThe first\
    \ function returns the nth Fi", "    if n < 2 \n        then return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise\nWrite a recursive function named fib_r(n::Int64)\
    \ that returns the n-th Fibonacci number.", "    if n == 0 || n == 1 \n      \
    \  then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a recursive function fib_rec(n::Int64)::Int64\
    \ that returns the n-th Fibonacci number.", "    if n < 2\n        1\n    else\n\
    \        fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time ",
  "    if n < 2 \n        then return n\n    else \n        return fib(n-2) + fib(n-1)\n\
    end\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis is not the fastest\
    \ solution. Using `fib(n)` instead of `fib(n-1)` will make it faster. Also, `fib(n)`\
    \ will return a `Int64` instead of an `Int` so you should use `return fib(n::Int64)`\
    \ instead of `return fib(n-1)`.\n<|/ c |>\n<| c |>\nI agree. I've edited the answer\
    \ to reflect your comments.\n<|/ c |>\n<| a tags=julia,fibonacci |>\n<code>",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n\
    <text>\nExercise: Write a recursive function named fib_r(n::Int64) that returns\
    \ the n-th Fibonacci number.", "    if n < 2\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis does\
    \ not answer the question. How does this answer the question?\n<|/ c |>\n<| c\
    \ |>\nThe question was how to implement the Fibonacci function in Julia. The answer\
    \ shows how to do that. He asked how to implement the Fibonacci function in Julia.\
    \ He did not ask how to implement the Fibonacci function in Python. He asked how\
    \ to implement the Fibonacci function in Julia.\n<|/ c |>\n<| c |>\nThe question\
    \ was how to implement the Fibonacci function in Julia. The answer shows how to\
    \ do that. He asked how to implement the Fibonacci function in Julia. He did not\
    \ ask how to implement the Fibonacci function in Python. He asked how to implement\
    \ the Fibonacci function in Julia.\n<|/ c |>\n<| c |>\nThe question was how to\
    \ implement the Fibonacci function in Julia. The answer shows how to do that.\
    \ He asked how to implement the Fibonacci function in Julia. He did not ask how\
    \ to implement the Fibonacci function in Python. He asked how to implement the\
    \ Fibonacci function in Julia.\n<|/ c |>\n<| c |>\nThe question was how to implement\
    \ the Fibonacci function in Julia. The answer shows how to do that. He asked how\
    \ to implement the Fibonacci function in Julia. He did not ask how to implement\
    \ the Fibonacci function in Python. He asked how to implement the Fibonacci function\
    \ in Julia.\n<|/ c |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n<2 then\
    \ return n\n    else return fib(n-1)+fib(n-2)\nend\n</cell>\n<text>\nFibonacci\
    \ numbers are often used in mathematics and computer science. For example, consider\
    \ the following problem: You are given $N$ integers $a_1, a_2, \\ldots, a_N$ and\
    \ you need to find the sum of all numbers in the Fibonacci sequence whose values\
    \ do not exceed $10^9$. How would you solve this problem?", "    if n <= 1 \n\
    \        then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n == 0 || n == 1 \n        then return n\n\
    \    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_r(n::Int64)\
    \ that returns the nth Fibonacci number using recursion.", "    if n <= 1\n  \
    \      1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a tags=julia,fibonacci\
    \ |>\n<| a dscore=1 |>\n<code>", "    if n < 2\n        1\n    else\n        fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n < 2 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<text>\nExercise: Write a recursive function fib_rec that computes the\
    \ n-th Fibonacci number.", "    if n < 2 \n        then return n\n        else\
    \ return fib(n-2) + fib(n-1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the factorial of a number. \nThe factorial of a number\
    \ $n$ is defined as:", "    if n == 0 || n == 1 \n        then return n\n    else\
    \ \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise\nWrite a function that computes the n-th Fibonacci number using recursion.",
  "    if n < 2 \n        then return 1\n        else return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis doesn't seem\
    \ to work. `fib(1)` returns `1`, but `fib(10)` returns `55`.\n<|/ c |>\n<| c |>\n\
    It works fine for me. `julia> fib(10)\n55`\n<|/ c |>\n<| c |>\nOh, I see what\
    \ you mean. `fib(1)` returns `1`, but `fib(10)` returns `55`. Sorry, I didn't\
    \ see that in your original answer.\n<|/ c |>\n<| c |>\nI see what you mean. `fib(1)`\
    \ returns `1`, but `fib(10)` returns `55`. Sorry, I didn't see that in your original\
    \ answer.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `fib(1)` returns `1`,\
    \ but `fib(10)` returns `55`.\n<|/ c |>\n<| a tags=julia,fibonacci |>\n<code>",
  "    if n < 2 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the n-th Fibonacci number using a recursive\
    \ function.", "    if n == 0 || n == 1 \n        then return n\n    else \n  \
    \      return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_r(n::Int64)::Int64\
    \ that returns the n-th Fibonacci number.", "    if n < 2 \n        then return\
    \ n\n    else \n        return fib(n-2) + fib(n-1)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,fibonacci |>\nThe code below is based on this answer by\
    \ Aaron Hall\n<code>", "    if n == 0 \n        then return 0\n    else if n ==\
    \ 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n\
    </cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the Fibonacci number for given number $n$ and $n+1$.\
    \ \nThe function should return $n$ if $n$ is $0$ or $n+1$ if $n$ is $1$. \nThe\
    \ function should return $n$ if $n$ is $0$ or $n+1$ if $n$ is $2$. \nThe function\
    \ should return $n$ if $n$ is $0$ or $n+1$ if $n$ is $3$. \nThe function should\
    \ return $n$ if $n$ is $0$ or $n+1$ if $n$ is $4$. \nThe function should return\
    \ $n$ if $n$ is $0$ or $n+1$ if $n$ is $5$. \nThe function should return $n$ if\
    \ $n$ is $0$ or $n+1$ if $n$ is $6$. \nThe function should return $n$ if $n$ is\
    \ $0$ or $n+1$ if $n$ is $7$. \nThe function should return $n$ if $n$ is $0$ or\
    \ $n+1$ if $n$ is $8$. \nThe function should return $n$ if $n$ is $0$ or $n+1$\
    \ if $n$ is $9$. \nThe function should return $n$ if $n$ is $0$ or $n+1$ if $n$\
    \ is $10$. \nThe function should return $n$ if $n$ is $0$ or $n+1$ if $n$ is $11$.\
    \ \nThe function should return $n$ if $n$ is $0$ or $n+1$ if $n$ is $12$. \nThe\
    \ function should return $n$ if $n$ is $0$ or $n+1$ if $n$ is $13$. \nThe function\
    \ should return $n$ if $n$ is $0$ or $n+1$ if $n$ is $14$. \nThe function should\
    \ return $n$ if ", "    if n <= 1 \n        then 1\n        else fib(n-1) + fib(n-2)\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe `fib` function can be\
    \ written more concisely as `fib(n) = n <= 1 ? 1 : fib(n-1) + fib(n-2)`.\n<|/\
    \ c |>\n<| c |>\nYes, but this way is more readable. Also it can be easily parallelized.\n\
    <|/ c |>\n<| c |>\nI agree that it's more readable, but I disagree that it's more\
    \ easily parallelized. The `fib` function can be easily parallelized because it's\
    \ written in pure Julia. `fib` can be easily parallelized because it's written\
    \ in pure Julia. `fib` can be easily parallelized because it's written in pure\
    \ Julia. `fib` can be easily parallelized because it's written in pure Julia.\
    \ `fib` can be easily parallelized because it's written in pure Julia. `fib` can\
    \ be easily parallelized because it's written in pure Julia. `fib` can be easily\
    \ parallelized because it's written in pure Julia. `fib` can be easily parallelized\
    \ because it's written in pure Julia. `fib` can be easily parallelized because\
    \ it's written in pure Julia. `fib` can be easily parallelized because it's written\
    \ in pure Julia. `fib` can be easily parallelized because it's written in pure\
    \ Julia. `fib` can be easily parallelized because it's written in pure Julia.\
    \ `fib` can be easily parallelized because it's written in pure Julia. `fib` can\
    \ be easily parallelized because it's written in pure Julia. `fib` can be easily\
    \ parallelized because it's written in pure Julia. `fib` can be easily parallelized\
    \ because it's written in pure Julia. `fib` can be easily parallelized because\
    \ it's written in pure Julia. `fib` can be easily parallelized because it's written\
    \ in pure Julia. `fib` can be easily parallelized because it's written in pure\
    \ Julia. `fib` can be easily parallelized because it's written in pure Julia.\
    \ `fib` can be easily parallelized because it's written in pure Julia. `fib` can\
    \ be easily parallelized because it's written in pure Julia. `fib` can be easily\
    \ parallelized because it's written", "    if n < 2\n        1\n    else\n   \
    \     fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n == 0 \n        then return 1\n    else if\
    \ n == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the n-th Fibonacci\
    \ number using recursion.", "    if n <= 1 \n        then return n\n    else \n\
    \        return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nThe @time macro will give you the time it took\
    \ to run your code. Remember that Julia is compiled, so it will only run your\
    \ function once.", "    if n < 2 \n        then return n\n    else \n        return\
    \ fib(n-1) + fib(n-2)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ is not the most efficient solution. Recursion is expensive. Using a while loop\
    \ would be more efficient.\n<|/ c |>\n<| c |>\nI agree with you. But the question\
    \ was about recursion and I wanted to show how to implement it using recursion.\n\
    <|/ c |>\n<| c |>\nI agree, but I thought it would be helpful to show how to implement\
    \ it using recursion.\n<|/ c |>\n<| c |>\nI agree with you. But the question was\
    \ about recursion and I wanted to show how to implement it using recursion.\n\
    <|/ c |>\n<| c |>\nI agree with you. But the question was about recursion and\
    \ I wanted to show how to implement it using recursion.\n<|/ c |>\n<| a dscore=2\
    \ |>\n<code>", "    if n < 2 \n        then return n\n        else return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise 1\nWrite a recursive function fib_r(n::Int64)::Int64\
    \ that returns the nth Fibonacci number.", "    if n < 0 \n        error(\"Fibonacci\
    \ number must be non-negative\")\n    else if n == 0 \n        1\n    else \n\
    \        fib(n - 1) + fib(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n@time\
    \ fib(10)\n</cell>\n<text>\nExercise: Write a function that computes the n-th\
    \ Fibonacci number recursively", "    if n < 0 \n        error(\"n must be positive\"\
    )\n    else if n == 0 \n        1\n    else if n == 1 \n        1\n    else \n\
    \        fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ fib(0) == 1\n@assert fib(1) == 1\n@assert fib(2) == 2\n@assert fib(7) == 13\n\
    @assert fib(8) == 21\n@assert fib(10) == 55\n@assert fib(11) == 89\n</cell>\n\
    <text>\nExercise: Write a recursive function fib_r(n::Int64) that returns the\
    \ nth Fibonacci number.", "    if n < 2 \n        then return n\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using memoization.", "    if n == 0 || n == 1 \n     \
    \   then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ recursive function named fib_r(n::Int64) which returns the nth Fibonacci number.",
  "    if n == 0 || n == 1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n\
    </cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.3>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n", "    if n < 0 \n        error(\"\
    Fibonacci number must be positive\")\n    else if n == 0 \n        1\n    else\
    \ if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| a |>\n<code>", "    if n < 2\n    then return\
    \ n\n    else return fib(n-2) + fib(n-1)\nend\n</cell>\n<code language=julia-1.3>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function named fib_r(n::Int64)\
    \ that returns the nth Fibonacci number in reverse order. Test it on small numbers.\
    \ How much time does it take to compute fib_r(10)?", "    if n == 0 then return\
    \ 1\n    if n == 1 then return 1\n    else return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.", "    if n == 0\
    \ \n        0\n    else if n == 1 \n        1\n    else \n        fib(n - 1) +\
    \ fib(n - 2)\nend\n</cell>\n<code language=julia-1.3>", "    if n <= 1 \n    \
    \    then 1 \n        else fib(n-1) + fib(n-2) \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the n-th Fibonacci number using recursion.",
  "    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "    if n == 0 \n        0\n    else if n ==\
    \ 1 \n        1\n    else \n        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't answer the question. OP asked for a recursive solution,\
    \ not a looping one.\n<|/ c |>\n<| c |>\nThe question is about recursion. Recursion\
    \ is just an abstraction of looping or iteration, which means it can be done in\
    \ any programming language. Recursion is just a way to solve a problem by calling\
    \ the same function again and again until a condition is met.\n<|/ c |>\n<| c\
    \ |>\nThe question is about recursion. Recursion is just an abstraction of looping\
    \ or iteration, which means it can be done in any programming language. Recursion\
    \ is just a way to solve a problem by calling the same function again and again\
    \ until a condition is met.\n<|/ c |>\n<| c |>\nThe question is about recursion.\
    \ Recursion is just an abstraction of looping or iteration, which means it can\
    \ be done in any programming language. Recursion is just a way to solve a problem\
    \ by calling the same function again and again until a condition is met.\n<|/\
    \ c |>\n<| c |>\nThe question is about recursion. Recursion is just an abstraction\
    \ of looping or iteration, which means it can be done in any programming language.\
    \ Recursion is just a way to solve a problem by calling the same function again\
    \ and again until a condition is met.\n<|/ c |>\n<| a dscore=2 |>\n<code>", " \
    \   if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't answer the question. OP wants to know why `fib`\
    \ takes so long to run, not how to implement a Fibonacci sequence.\n<|/ c |>\n\
    <| c |>\nThe question was \"why fib is so slow\", not \"how to implement a Fibonacci\
    \ sequence\".\n<|/ c |>\n<| c |>\nThe question was \"why fib is so slow\", not\
    \ \"how to implement a Fibonacci sequence\".\n<|/ c |>\n<| c |>\nThe question\
    \ was \"why fib is so slow\", not \"how to implement a Fibonacci sequence\".\n\
    <|/ c |>\n<| c |>\nThe question was \"why fib is so slow\", not \"how to implement\
    \ a Fibonacci sequence\".\n<|/ c |>\n<| a tags=julia,fibonacci,performance |>\n\
    The reason is that the function fib is recursive. Julia is able to optimize it\
    \ by memoizing the results. You can see this by using the following code:\n<code>",
  "    if n == 0 || n == 1 \n        return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n@time fib(10)\n</cell>\n\
    <text>\nThe Fibonacci sequence is defined by the recurrence relation:", "    if\
    \ n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the n-th Fibonacci number using recursion.", "    if n < 2 \n\
    \        then return n\n        else return fib(n-2) + fib(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time fib(10)\n</cell>\n<code language=julia-1.4>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.4>", "    if n==0 || n==1 \n      \
    \  then return n\n    else \n        return fib(n-1)+fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise: Write a recursive\
    \ function fib_rec(n::Int64) that returns the nth Fibonacci number.", "    if\
    \ n < 2 \n        then return n\n    else \n        return fib(n-2) + fib(n-1)\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n<code>", "    if n < 0 \n\
    \        error(\"Fibonacci number does not exist\")\n    else if n == 0 \n   \
    \     1\n    else if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n\
    \ - 2)\nend\n</code>\n<|/ a tags=julia,fibonacci |>\n<| c |>\nThis does not answer\
    \ the question. OP asked for a Julia solution, not a Python one.\n<|/ c |>\n<|\
    \ c |>\nI added a Julia solution\n<|/ c |>\n<| c |>\nThe Julia solution is wrong.\
    \ `fib(1)` returns `1` instead of `1`.\n<|/ c |>\n<| c |>\nI fixed the Julia solution\n\
    <|/ c |>\n<| c |>\nThe Julia solution is still wrong. `fib(1)` returns `1` instead\
    \ of `1`.\n<|/ c |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n < 0 \n \
    \       error(\"Fibonacci number does not exist\")\n    else if n == 0 \n    \
    \    1\n    else if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n\
    \ - 2)\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 || n == 1 \n\
    \        then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<code\
    \ language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n@time\
    \ fib(10)\n</cell>\n<code language=juli", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a function that computes the n-th\
    \ Fibonacci number using memoization.", "    if n < 2 \n        then return n\n\
    \        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ n-th Fibonacci number using memoization.", "    if n == 0 \n        0\n    else\
    \ if n == 1 \n        1\n    else \n        fib(n - 1) + fib(n - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time fib(10)\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Fibonacci numbers\nWrite a function\
    \ that returns the nth Fibonacci number.", "    if n <= 1 \n        then 1\n \
    \   else fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n <= 1 \n        then return n\n        else\
    \ return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ n-th Fibonacci number using recursion.", "    if n == 0 \n        then return\
    \ 0\n    else if n == 1 \n        then return 1\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</cell>\n<code language=julia-1.3>", "    if n < 2 \n     \
    \   then return n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n\
    <code language=julia-1.1>\n@time fib(10)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that calculates the n-th Fibonacci number using recursion.", "    if\
    \ n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n<|/ a\
    \ tags=julia,fibonacci |>\n<| a tags=julia,fibonacci |>\n<code>", "    if n <\
    \ 2 \n        then return n\n    else \n        return fib(n-2) + fib(n-1)\n \
    \   end\nend\n</cell>\n<code language=julia-1.4>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a Julia function called fib_iter that computes the nth Fibonacci\
    \ number iteratively.", "    if n == 0 \n        then return 0\n    else if n\
    \ == 1 \n        then return 1\n    else \n        return fib(n-1) + fib(n-2)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a recursive function which computes the n-th Fibonacci number using\
    \ memoization.", "    if n < 2\n        1\n    else\n        fib(n-2) + fib(n-1)\n\
    end\n</code>\n<|/ a tags=julia,fibonacci,recursion |>\n<| c |>\nThis is not the\
    \ fastest solution, since it calls fib twice per iteration. Also the code is not\
    \ very readable.\n<|/ c |>\n<| c |>\nI agree, this is definitely not fast and\
    \ readable. However I wanted to give a quick solution that is easy to understand\
    \ and to implement. Also I wanted to point out that this is an example of a recursive\
    \ solution and not a tail recursive solution. Tail recursive solutions are usually\
    \ faster than iterative solutions.\n<|/ c |>\n<| a dscore=3 |>\n<code>", "   \
    \ if n <= 1 \n        then return n\n    else \n        return fib(n-1) + fib(n-2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\n\
    Exercise: Write a recursive function fib_rec that computes the nth Fibonacci number.",
  "    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a |>\n<| a dscore=1 |>\n<code>", "    if n<2 \n        then return n\n   \
    \ else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 1\nWrite a function that computes the\
    \ n-th Fibonacci number using recursion.", "    if n == 0\n        0\n    else\
    \ if n == 1\n        1\n    else\n        fib(n - 1) + fib(n - 2)\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis is not the Fibonacci sequence. Fibonacci sequence starts\
    \ with 0 and 1. So the Fibonacci sequence is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, ...\n<|/ c |>\n<| c |>\nThe Fibonacci sequence starts with 0 and\
    \ 1. So the Fibonacci sequence is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ ...\n<|/ c |>\n<| c |>\nThe Fibonacci sequence starts with 0 and 1. So the Fibonacci\
    \ sequence is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n<|/ c |>\n<|\
    \ c |>\nThe Fibonacci sequence starts with 0 and 1. So the Fibonacci sequence\
    \ is 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n<|/ c |>\n<| c |>\nThe\
    \ Fibonacci sequence starts with 0 and 1. So the Fibonacci sequence is 0, 1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\n<code>", "    if n == 0 || n == 1 \n        then return n\n    else \n \
    \       return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise 1\nWrite a recursive function named fib_r(n::Int64)\
    \ which returns the nth Fibonacci number.", "    if n == 0 || n == 1 \n      \
    \  then return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if n < 2 \n        then return\
    \ n\n        else return fib(n-1) + fib(n-2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n < 2\n        1\n    else\n        fib(n-1) + fib(n-2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@time fib(10)\n</cell>\n<text>\nExercise:\
    \ Write a recursive function named fibonacci that returns the nth Fibonacci number.",
  "    if n==0 || n==1 \n        then return n\n    else \n        return fib(n-1)\
    \ + fib(n-2)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the most efficient\
    \ solution, since it uses recursion.\n<|/ c |>\n<| c |>\nYes, I agree with you,\
    \ but I wanted to show a way to solve the problem without recursion.\n<|/ c |>\n\
    <| a tags=julia,fibonacci |>\n<code>", "    if n < 2 \n        then return n\n\
    \    else \n        return fib(n-2) + fib(n-1)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the first n Fibonacci numbers.\nThe Fibonacci\
    \ numbers are defined by the recurrence relation:\n$$Fn = F{n-1} + F_{n-2},$$\n\
    where $F_0 = 0$ and $F_1 = 1$.\nWrite a Julia function that returns the first\
    \ n Fibonacci numbers.", "    if n == 0 || n == 1 \n        then return n\n  \
    \  else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time fib(10)\n</cell>\n<text>\nExercise: Write a recursive function fib_rec that\
    \ computes the nth Fibonacci number.", "    if n == 0 || n == 1 \n        then\
    \ return n\n    else \n        return fib(n-1) + fib(n-2)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time fib(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that computes the n-th Fibonacci number recursively", "    if n < 2 \n     \
    \   then return n\n    else \n        return fib(n-2) + fib(n-1)\nend\n</code>\n\
    <|/ a tags=julia,fibonacci |>\n<| c |>\nThe `fib` function can be written more\
    \ efficiently as `fib(n) = n < 2 ? n : fib(n-2) + fib(n-1)`\n<|/ c |>\n<| c |>\n\
    Thanks, I didn't know that. I'll edit my answer accordingly.\n<|/ c |>\n<| a tags=julia,fibonacci\
    \ |>\nThe Julia language is designed to make code easy to read and write.\nThe\
    \ code you wrote is very inefficient and will take forever to run.  \nThe code\
    \ below is much more efficient:\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
