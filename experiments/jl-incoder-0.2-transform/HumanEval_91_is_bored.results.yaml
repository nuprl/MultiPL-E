language: jl
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1\n    else \n        return is_bored(S,1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nThe function should ignore\
    \ all punctuation marks and only count the words. \nThe function should ignore\
    \ all capitalization and only count the words.\nThe function should ignore all\
    \ numbers and only count the words.\nThe function should ignore all special characters\
    \ and only count the words.\nThe function should ignore all words that are longer\
    \ than 3 characters.\nThe function should ignore all words that are shorter than\
    \ 3 characters.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 3 characters.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 3 characters and that contain digits.\
    \ \nThe function should ignore all words that are longer than 3 characters and\
    \ shorter than 3 characters and that contain digits and that contain special characters.\
    \ \nThe function should ignore all words that are longer than 3 characters and\
    \ shorter than 3 characters and that contain digits and that contain special characters\
    \ and that contain capital letters. \nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 3 characters and that contain\
    \ digits and that contain special characters and that contain capital letters\
    \ and that contain lower case letters. \nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 3 characters and that contain\
    \ digits and that contain special characters and that contain capital letters\
    \ and that contain lower case letters and that contain upper case letters. \n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 3 characters and that contain digits and that contain special characters\
    \ and that contain capital letters and that contain lower case letters and that\
    \ contain upper case letters and that contain digits. \nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 3 characters and\
    \ that contain digits and that contain special characters and that contain capital\
    \ letters and that contain lower case letters and that contain upper case letters\
    \ and that contain digits and that contain special characters. \nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 3\
    \ characters and that contain digits and that contain special characters and that\
    \ contain capital letters and that contain lower case letters and that contain\
    \ upper case letters and that contain digits and that contain special characters\
    \ and that contain \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa22812np.jl:18\nin expression starting at\
    \ /tmp/tmpa22812np.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in S.split(\" \") do \n      \
    \  if word[0] == \"I\" then \n            boredoms += 1 \n        end \n    end\
    \ \n    \n    return boredoms \nend \n</cell>\n<code language=julia-1.3>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that start with the letter 'a'.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaqospn2q.jl:24\nin expression starting at\
    \ /tmp/tmpaqospn2q.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms = count_boredoms(S)\n \
    \       boredoms = boredoms - 1\n        return boredoms\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that counts the number of boredoms in a given\
    \ string.\nThe function should take one argument, the string to be counted.\n\
    The function should return the number of boredoms in the string.\nThe function\
    \ should ignore punctuation and capitalization.\nThe function should ignore the\
    \ case of the initial letter.\nThe function should ignore the case of the final\
    \ letter.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case\
    \ of the initial and final letters.\nThe function should ignore the case of the\
    \ initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case of the initial and final\
    \ letters.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case\
    \ of the initial and final letters.\nThe function should ignore the case of the\
    \ initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case of the initial and final\
    \ letters.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case\
    \ of the initial and final letters.\nThe function should ignore the case of the\
    \ initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplz6zrqvz.jl:20\nin expression starting at\
    \ /tmp/tmplz6zrqvz.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-0.6>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-0.6>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr7as7n6i.jl:13\nin expression starting at /tmp/tmpr7as7n6i.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.lower()\n    boredoms = findall(S, \"^I\")\n    return length(boredoms)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpm3j6lybn.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpm3j6lybn.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  type String has no field lower\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpm3j6lybn.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm3j6lybn.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm3j6lybn.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpm3j6lybn.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  type String has no field lower\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpm3j6lybn.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm3j6lybn.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm3j6lybn.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpm3j6lybn.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  type String has no field lower\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpm3j6lybn.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm3j6lybn.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm3j6lybn.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpm3j6lybn.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  type String has no field lower\n  Stacktrace:\n \
    \  [1] getpropert"
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if word\
    \ == \"I\" then \n            boredoms += 1 \n        end\n    end\n    \n   \
    \ return boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoan6zc2c.jl:24\nin expression starting at\
    \ /tmp/tmpoan6zc2c.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = sum(map(is_bored, split(S, \".\")))\n    boredoms +=\
    \ sum(map(is_bored, split(S, \"?\")))\n    boredoms += sum(map(is_bored, split(S,\
    \ \"!\")))\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of words in the string.\
    \ \n    \n    For example:\n    >>> count_words(\"Hello world\")\n    2\n    >>>\
    \ count_words(\"The sky is blue. The sun is shining. I love this weather\")\n\
    \    7\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlem8yco.jl:19\nin expression starting at\
    \ /tmp/tmpnlem8yco.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        \n    end=length(S)\n    boredoms=0\n\
    \    \n    for i=1:end\n        if S[i]==\"I\"\n            boredoms+=1\n    \
    \    end\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in it.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jp6bcg0.jl:19\nin expression\
    \ starting at /tmp/tmp9jp6bcg0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = findall(S, \"^I.*\")\n    \n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string \nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9id8kvid.jl:18\nin expression starting at\
    \ /tmp/tmp9id8kvid.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp790n34jp.jl:13\nin expression starting at /tmp/tmp790n34jp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n\"\"\"\n    You'll be given a list of strings, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello world\", \"The sky is blue. The sun is shining. I love\
    \ this weather\"])\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa61h17dt.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa61h17dt.jl:1\n\
    in expression starting at /tmp/tmpa61h17dt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==0 \n        error(\"is_bored failed\") \n    end\n\
    end\n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp8eqs_uuz.jl:17\nin expression starting at /tmp/tmp8eqs_uuz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        \n    end=length(S)\n    \n  \
    \  boredoms=0\n    \n    for i=1:end\n        if S[i]==\"I\"\n            boredoms+=1\n\
    \        end\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1s2b5m4t.jl:20\nin expression\
    \ starting at /tmp/tmp1s2b5m4t.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n    end\nend\n\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpc2w01ew8.jl:18\nin expression starting at /tmp/tmpc2w01ew8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0) != 0\n    else \n        error(\"is_bored failed\")\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp4et7bm8v.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp4et7bm8v.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmp4et7bm8v.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmp4et7bm8v.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4et7bm8v.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4et7bm8v.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4et7bm8v.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmp4et7bm8v.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp4et7bm8v.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4et7bm8v.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4et7bm8v.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4et7bm8v.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmp4et7bm8v.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp4et7bm8v.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4et7bm8v.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4et7bm8v.jl:22\ntest set:\
    \ Er"
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".,?!\")\n            if word==\"I\"\n                boredoms+=1\n\
    \        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that splits a string into a list of words. A word is defined as a\
    \ sequence of letters a-z or A-Z or digits. Spaces are ignored.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprutt33tx.jl:22\nin expression starting at\
    \ /tmp/tmprutt33tx.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a string.\n    \n   \
    \ Your function should take a string as input, and return a number.\n    \n  \
    \  For example, \n    >>> count_borems(\"Hello world\")\n    0\n    >>> count_borems(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgnhq1j7f.jl:13\nin expression starting at /tmp/tmpgnhq1j7f.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.split(\" \")\n    boredoms = 0\n    for word in S\n        if word[0]\
    \ == \"I\"\n            boredoms += 1\n    return boredoms\nend\n</cell>\n<code\
    \ language=julia-1.1>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.1>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'e'.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxy9xxo6.jl:20\nin expression starting at\
    \ /tmp/tmpwxy9xxo6.jl:20\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1\n    else \n        0\n    end\nend\n\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpln7hx1lg.jl:18\nin expression starting at /tmp/tmpln7hx1lg.jl:18\n"
  stdout: ''
  timestamp: 1659822516
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredom(S,0)\n    end\nend\n</cell>\n\
    <code language=julia-0.4>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-0.4>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of boredoms in a string.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpstf2ygoo.jl:18\nin expression starting at\
    \ /tmp/tmpstf2ygoo.jl:18\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms(S, 0)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxd5l6mjk.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxd5l6mjk.jl:1\n\
    in expression starting at /tmp/tmpxd5l6mjk.jl:1\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \"\"\"\n    Your code here!\n    \"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuy1whgwl.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuy1whgwl.jl:1\n\
    in expression starting at /tmp/tmpuy1whgwl.jl:1\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms = is_bored(S, 1)\n    \
    \    boredoms += is_bored(S, 2)\n        boredoms += is_bored(S, 3)\n        boredoms\
    \ += is_bored(S, 4)\n        boredoms += is_bored(S, 5)\n        boredoms += is_bored(S,\
    \ 6)\n        boredoms += is_bored(S, 7)\n        boredoms += is_bored(S, 8)\n\
    \        boredoms += is_bored(S, 9)\n        boredoms += is_bored(S, 10)\n   \
    \     boredoms += is_bored(S, 11)\n        boredoms += is_bored(S, 12)\n     \
    \   boredoms += is_bored(S, 13)\n        boredoms += is_bored(S, 14)\n       \
    \ boredoms += is_bored(S, 15)\n        boredoms += is_bored(S, 16)\n        boredoms\
    \ += is_bored(S, 17)\n        boredoms += is_bored(S, 18)\n        boredoms +=\
    \ is_bored(S, 19)\n        boredoms += is_bored(S, 20)\n        boredoms += is_bored(S,\
    \ 21)\n        boredoms += is_bored(S, 22)\n        boredoms += is_bored(S, 23)\n\
    \        boredoms += is_bored(S, 24)\n        boredoms += is_bored(S, 25)\n  \
    \      boredoms += is_bored(S, 26)\n        boredoms += is_bored(S, 27)\n    \
    \    boredoms += is_bored(S, 28)\n        boredoms += is_bored(S, 29)\n      \
    \  boredoms += is_bored(S, 30)\n        boredoms += is_bored(S, 31)\n        boredoms\
    \ += is_bored(S, 32)\n        boredoms += is_bored(S, 33)\n        boredoms +=\
    \ is_bored(S, 34)\n        boredoms += is_bored(S, 35)\n        boredoms += is_bored(S,\
    \ 36)\n        boredoms += is_bored(S, 37)\n        boredoms += is_bored(S, 38)\n\
    \        boredoms += is_bored(S, 39)\n        boredoms += is_bored(S, 40)\n  \
    \      boredoms += is_bore\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp2iuaye2h.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2iuaye2h.jl:1\n\
    in expression starting at /tmp/tmp2iuaye2h.jl:1\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n        error(\"The string does not start with the\
    \ word 'I'\")\n    end\n    \n    boredoms = findall!(\"I\", S)\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'A'.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzkmx4cc3.jl:20\nin expression starting at\
    \ /tmp/tmpzkmx4cc3.jl:20\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    else \n        boredoms=0\n        for word\
    \ in split(S,\".,?!\") \n            if word==\"I\" \n                boredoms+=1\
    \ \n        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a string.\n    \n   \
    \ Your function should take a string as input and return a number.\n    \n   \
    \ For example:\n    >>> count_borems(\"Hello world\")\n    0\n    >>> count_borems(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx44cdwqa.jl:22\nin expression starting at\
    \ /tmp/tmpx44cdwqa.jl:22\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms(S, 0)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of boredoms in the string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf74fbouu.jl:18\nin expression starting at\
    \ /tmp/tmpf74fbouu.jl:18\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1\n        \n    else \n        \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0sxm6qo3.jl:19\nin expression starting at\
    \ /tmp/tmp0sxm6qo3.jl:19\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    S = S.lower()\n    \n    boredoms = findall(S, boredoms)\n    \n\
    \    return length(boredoms)\nend\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a string.\nThe function\
    \ should take a string as input and return a number.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbihaffp.jl:20\nin expression starting at\
    \ /tmp/tmpqbihaffp.jl:20\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    else \n        return is_bored(S,1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcv6famxk.jl:18\nin expression starting at\
    \ /tmp/tmpcv6famxk.jl:18\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    else \n        boredom(S,0)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpb55_ziq0.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpb55_ziq0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmpb55_ziq0.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmpb55_ziq0.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb55_ziq0.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb55_ziq0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpb55_ziq0.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpb55_ziq0.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpb55_ziq0.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb55_ziq0.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb55_ziq0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpb55_ziq0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpb55_ziq0.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpb55_ziq0.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpb55_ziq0.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpb55_ziq0.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpb55"
  timestamp: 1659822518
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n        error(\"The string is not bored\")\n   \
    \ end\n    boredom = findall(S, startswith(\"I\"))\n    return length(boredom)\n\
    end\n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ the number of words in the string that start with the letter 'A'.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2gnah54.jl:19\nin expression starting at\
    \ /tmp/tmpp2gnah54.jl:19\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = sum(map(is_bored, S.split(\".\")))\n    \n    return\
    \ boredoms == 0\nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a list of all the words in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzs5phn0.jl:18\nin expression starting at\
    \ /tmp/tmpnzs5phn0.jl:18\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n        error(\"The sentence does not start with\
    \ the word 'I'.\")\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that counts the number of boredoms in a given string.\nThe function\
    \ should return 0 if the string does not contain any boredoms.\nThe function should\
    \ return 1 if the string contains exactly one boredom.\nThe function should return\
    \ 2 if the string contains two boredoms.\nThe function should return 3 if the\
    \ string contains three boredoms.\nThe function should return 4 if the string\
    \ contains four boredoms.\nThe function should return 5 if the string contains\
    \ five boredoms.\nThe function should return 6 if the string contains six boredoms.\n\
    The function should return 7 if the string contains seven boredoms.\nThe function\
    \ should return 8 if the string contains eight boredoms.\nThe function should\
    \ return 9 if the string contains nine boredoms.\nThe function should return 10\
    \ if the string contains ten boredoms.\nThe function should return 11 if the string\
    \ contains eleven boredoms.\nThe function should return 12 if the string contains\
    \ twelve boredoms.\nThe function should return 13 if the string contains thirteen\
    \ boredoms.\nThe function should return 14 if the string contains fourteen boredoms.\n\
    The function should return 15 if the string contains fifteen boredoms.\nThe function\
    \ should return 16 if the string contains sixteen boredoms.\nThe function should\
    \ return 17 if the string contains seventeen boredoms.\nThe function should return\
    \ 18 if the string contains eighteen boredoms.\nThe function should return 19\
    \ if the string contains nineteen boredoms.\nThe function should return 20 if\
    \ the string contains twenty boredoms.\nThe function should return 21 if the string\
    \ contains twenty-one boredoms.\nThe function should return 22 if the string contains\
    \ twenty-two boredoms.\nThe function should return 23 if the string contains twenty-three\
    \ boredoms.\nThe function should return 24 if the string contains twenty-four\
    \ boredoms.\nThe function should return 25 if the string contains twenty-five\
    \ boredoms.\nThe function should return 26 if the \nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptayph14d.jl:17\nin expression starting at\
    \ /tmp/tmptayph14d.jl:17\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    count = 0\n    for word in S.split(\" \")\n        if word[0] ==\
    \ \"I\"\n            count += 1\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function is_bored_2(S::String)::Int64 which returns 1 if the string\
    \ S starts with \"I\", and 0 otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptw533kfp.jl:20\nin expression starting at\
    \ /tmp/tmptw533kfp.jl:20\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    then return 0 \n    else return 1 \n    end\n\
    end\n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjfn22956.jl:14\nin expression starting at /tmp/tmpjfn22956.jl:14\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmprhsbs4vt.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmprhsbs4vt.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmprhsbs4vt.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmprhsbs4vt.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprhsbs4vt.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhsbs4vt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmprhsbs4vt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmprhsbs4vt.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmprhsbs4vt.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprhsbs4vt.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhsbs4vt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmprhsbs4vt.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmprhsbs4vt.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmprhsbs4vt.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprhsbs4vt.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhsbs4vt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmprhs"
  timestamp: 1659822518
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmprhsbs4vt.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmprhsbs4vt.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmprhsbs4vt.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmprhsbs4vt.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprhsbs4vt.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhsbs4vt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmprhsbs4vt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmprhsbs4vt.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmprhsbs4vt.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprhsbs4vt.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhsbs4vt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmprhsbs4vt.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmprhsbs4vt.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmprhsbs4vt.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprhsbs4vt.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprhsbs4vt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmprhs"
  timestamp: 1659822518
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0,0) == 0 \n    else \n        return 1 \n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of boredoms in a given string.\nThe function should return a number between\
    \ 0 and 100.\nThe function should ignore capitalization and punctuation.\nThe\
    \ function should ignore the '?' character.\nThe function should ignore the '!'\
    \ character.\nThe function should ignore the '.' character.\nThe function should\
    \ ignore the '\\n' character.\nThe function should ignore the '\\r' character.\n\
    The function should ignore the '\\t' character.\nThe function should ignore the\
    \ '\\v' character.\nThe function should ignore the '\\f' character.\nThe function\
    \ should ignore the '\\a' character.\nThe function should ignore the '\\e' character.\n\
    The function should ignore the '\\o' character.\nThe function should ignore the\
    \ '\\M' character.\nThe function should ignore the '\\p' character.\nThe function\
    \ should ignore the '\\P' character.\nThe function should ignore the '\\c' character.\n\
    The function should ignore the '\\C' character.\nThe function should ignore the\
    \ '\\v' character.\nThe function should ignore the '\\o' character.\nThe function\
    \ should ignore the '\\M' character.\nThe function should ignore the '\\p' character.\n\
    The function should ignore the '\\P' character.\nThe function should ignore the\
    \ '\\c' character.\nThe function should ignore the '\\C' character.\nThe function\
    \ should ignore the '\\v' character.\nThe function should ignore the '\\o' character.\n\
    The function should ignore the '\\M' character.\nThe function should ignore the\
    \ '\\p' character.\nThe function should ignore the '\\P' character.\nThe function\
    \ should ignore the '\\c' character.\nThe function should ignore the '\\C' character.\n\
    The function should ignore the '\\v' character.\nThe function should ignore the\
    \ '\\o' character.\nThe function should ignore the '\\M' character.\nThe function\
    \ should ignore the '\\p' character.\nThe function should ignore the '\\P' character.\n\
    The function should ignore the '\\c' character.\nThe function should ignore the\
    \ '\\C' character.\nThe function should ignore \nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuyo7lssw.jl:18\nin expression starting at\
    \ /tmp/tmpuyo7lssw.jl:18\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".?\")\n            if word==\"I\"\n                boredoms+=1\n \
    \       return boredoms\n    end\nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that start with capital letters. Words are defined as any sequence of letters\
    \ separated by spaces or punctuation.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpode14n94.jl:22\nin expression starting at\
    \ /tmp/tmpode14n94.jl:22\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n\"\"\"\n    You'll be given a list of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"\
    sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \".\",\n\
    \    ...            \"I\", \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpauzp5pbr.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpauzp5pbr.jl:1\n\
    in expression starting at /tmp/tmpauzp5pbr.jl:1\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nPart 2: String Manipulation\nString manipulation\
    \ is the process of transforming one string into another. \n    For example, one\
    \ might want to remove punctuation from a string. \n    We can do this by splitting\
    \ the string into an array of words, and \n    then removing punctuation from\
    \ each word. \n    We can then rejoin the array into a string.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjedpbi1_.jl:18\nin expression starting at\
    \ /tmp/tmpjedpbi1_.jl:18\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if starts_with(word,\
    \ \"I\") then \n            boredoms += 1 \n        end\n    end\n    \n    return\
    \ boredoms\nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with the letter 'e'.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwce29r_9.jl:24\nin expression starting at\
    \ /tmp/tmpwce29r_9.jl:24\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0,0)==0\n    else \n        return is_bored(S,0,0)\n   \
    \ end\nend\n\"\"\"\n    You'll be given a string of words, and your task is to\
    \ count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpke7ig6cq.jl:18\nin expression starting at /tmp/tmpke7ig6cq.jl:18\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n    end\nend\n\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpc2w01ew8.jl:18\nin expression starting at /tmp/tmpc2w01ew8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n        return 0 \n    else \n        return 1 \n\
    \    end \nend \n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that counts the number of boredoms in a string.\nThe function should take a\
    \ string as input and return a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpymtwztzp.jl:19\nin expression starting at\
    \ /tmp/tmpymtwztzp.jl:19\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if word\
    \ == \"I\" then \n            boredoms += 1 \n        end \n    end \n    return\
    \ boredoms \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61e5dt6x.jl:23\nin expression starting at\
    \ /tmp/tmp61e5dt6x.jl:23\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".?!\") \n            if word==\"I\"\n            boredoms+=1\n   \
    \     return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in that string\n\
    that start with the letter 'a'.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkvq2ef6g.jl:22\nin expression starting at\
    \ /tmp/tmpkvq2ef6g.jl:22\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms(S, 0)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmproi3wjt3.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmproi3wjt3.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmproi3wjt3.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmproi3wjt3.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi3wjt3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmproi3wjt3.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmproi3wjt3.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi3wjt3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmproi3wjt3.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmproi3wjt3.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi"
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if startswith(word,\
    \ \"I\") do \n            boredoms += 1 \n        end \n    end \n    \n    return\
    \ boredoms \nend \n</cell>\n<code language=julia-0.6>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-0.6>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with the letter 'a'.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxcmqw261.jl:24\nin expression starting at\
    \ /tmp/tmpxcmqw261.jl:24\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = findall(S, startswith(\"I\"))\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert is_bored(\"Hello world\") ==\
    \ 0\n@assert is_bored(\"The sky is blue. The sun is shining. I love this weather.\"\
    ) == 1\n</cell>\n<text>\nPart 2: Practice with Strings\nNow that you've seen some\
    \ examples of string manipulation, we will go over some more advanced string manipulation.\
    \ We'll learn about regular expressions, string splitting, string indexing, and\
    \ string lengths.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xyeaai8.jl:17\nin expression starting at\
    \ /tmp/tmp1xyeaai8.jl:17\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpqvgz2pyq.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpqvgz2pyq.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmpqvgz2pyq.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmpqvgz2pyq.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvgz2pyq.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqvgz2pyq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqvgz2pyq.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpqvgz2pyq.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpqvgz2pyq.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvgz2pyq.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqvgz2pyq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqvgz2pyq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpqvgz2pyq.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpqvgz2pyq.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvgz2pyq.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqvgz2pyq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqvg"
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n        return 0 \n    else \n        return 1 \n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts\
    \ the number of times a substring appears in a string.\nFor example, if the substring\
    \ appears twice in the string \"The sky is blue. The sun is shining. I love this\
    \ weather\", your function should return 2.\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrfm6tdd.jl:19\nin expression starting at\
    \ /tmp/tmpdrfm6tdd.jl:19\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0) == 0 \n        return 0 \n    else \n        return\
    \ 1 \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphwirxw68.jl:18\nin expression starting at\
    \ /tmp/tmphwirxw68.jl:18\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    else \n        return is_bored(S,1)\n    end\n\
    end\n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp4j07yni6.jl:18\nin expression starting at /tmp/tmp4j07yni6.jl:18\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if word\
    \ == \"I\" then \n            boredoms += 1 \n        end \n    end \n    \n \
    \   return boredoms \nend \n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function is_bored_2(S::String)::Bool that returns true if the string S contains\
    \ at least one boredom, and false otherwise. \nWrite a test that uses your function\
    \ to determine if your function works.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3rr35hgl.jl:24\nin expression starting at\
    \ /tmp/tmp3rr35hgl.jl:24\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nPart 2: Write a function that counts the number\
    \ of boredoms in a string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzacc5pd.jl:18\nin expression starting at\
    \ /tmp/tmpqzacc5pd.jl:18\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredom(S,0)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function is_bored(S::String) which returns 1 if the\
    \ string S starts with \"I\", and 0 otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6wp1rq4.jl:18\nin expression starting at\
    \ /tmp/tmpp6wp1rq4.jl:18\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \"\"\"\n    Your task is to implement the function is_bored(S::String)::Int64\n\
    \    that takes as input a string of words and returns the number of boredoms.\n\
    \    \n    Boredoms are sentences that start with the word \"I\".\n    Sentences\
    \ are delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"\
    Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n    1\n    \"\"\"\n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp17syusjw.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp17syusjw.jl:1\n\
    in expression starting at /tmp/tmp17syusjw.jl:1\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0) == true\n        return true\n    else\n        return\
    \ false\n    end\nend\n\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpyrtlekj5.jl:19\nin expression starting at /tmp/tmpyrtlekj5.jl:19\n"
  stdout: ''
  timestamp: 1659822518
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".\")\n            if word==\"I\"\n                boredoms+=1\n  \
    \      return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function is_bored(S::String) which returns 1 if the string S starts with \"\
    I\", and 0 otherwise.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6mxkalu6.jl:22\nin expression starting at\
    \ /tmp/tmp6mxkalu6.jl:22\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = findall(S, startswith(\"I\"))\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words that start with the letter 'e'.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvim_xi6m.jl:17\nin expression starting at\
    \ /tmp/tmpvim_xi6m.jl:17\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms = count_boredoms(S)\n \
    \       boredoms = boredoms - 1\n        return boredoms\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbn8i0ono.jl:20\nin expression starting at\
    \ /tmp/tmpbn8i0ono.jl:20\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n        error(\"The string does not start with the\
    \ word 'I'.\")\n    else \n        return 1 \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4da8khjh.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4da8khjh.jl:1\n\
    in expression starting at /tmp/tmp4da8khjh.jl:1\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = Dict()\n    \n    for word in split(S) do \n        if\
    \ is_bored(word) == 1 then \n            boredoms[word] = boredoms[word] + 1 \n\
    \        end\n    end\n    \n    return length(boredoms)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nPart 2\nNow that you've seen how to count boredoms, let's see how we can\
    \ use it to answer some questions.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngo3uj16.jl:24\nin expression starting at\
    \ /tmp/tmpngo3uj16.jl:24\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.split(\" \")\n    boredoms = 0\n    for word in S\n        if word[0]\
    \ == \"I\"\n            boredoms += 1\n    return boredoms\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp02da6ld9.jl:20\nin expression starting at\
    \ /tmp/tmp02da6ld9.jl:20\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if word\
    \ == \"I\" then \n            boredoms += 1 \n        end \n    end \n    \n \
    \   return boredoms \nend \n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with the letter 'a'.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbv35nzq8.jl:24\nin expression starting at\
    \ /tmp/tmpbv35nzq8.jl:24\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n        return 0 \n    else \n        return 1 \n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7yhx2ah2.jl:19\nin expression starting at\
    \ /tmp/tmp7yhx2ah2.jl:19\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==0\n        error(\"is_bored failed\")\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxfwd5b5t.jl:17\nin expression starting at\
    \ /tmp/tmpxfwd5b5t.jl:17\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1\n    else \n        if is_bored(S,1)==1\n        else\
    \ \n            if is_bored(S,2)==1\n            else \n                if is_bored(S,3)==1\n\
    \                else \n                    if is_bored(S,4)==1\n            \
    \        else \n                        if is_bored(S,5)==1\n                \
    \        else \n                            if is_bored(S,6)==1\n            \
    \                else \n                                if is_bored(S,7)==1\n\
    \                                else \n                                    if\
    \ is_bored(S,8)==1\n                                    else \n              \
    \                          if is_bored(S,9)==1\n                             \
    \           else \n                                            if is_bored(S,10)==1\n\
    \                                            else \n                         \
    \                       if is_bored(S,11)==1\n                               \
    \                 else \n                                                    if\
    \ is_bored(S,12)==1\n                                                    else\
    \ \n                                                        if is_bored(S,13)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,14)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,15)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,16)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,17)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,18)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,19)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,20)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,21)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,22)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,23)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,24)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,25)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,26)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,27)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,28)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,29)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,30)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,31)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,32)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,33)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,34)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,35)==1\n      \
    \                                                          else \n           \
    \                                                         if \nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpq84az5xo.jl:85\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpq84az5xo.jl:86\nin expression\
    \ starting at /tmp/tmpq84az5xo.jl:86\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredom(S, 0)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of boredoms in a string.\n\
    \    \n    Your function should take a string as an argument, and return a number.\n\
    \    \n    Your function should only count boredoms, not non-boredoms.\n    \n\
    \    For example:\n    >>> count_borems(\"Hello world\")\n    0\n    >>> count_borems(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    2\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jfg9jqz.jl:17\nin expression starting at\
    \ /tmp/tmp3jfg9jqz.jl:17\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a given string.\nThe function\
    \ should take a string as its only argument.\nThe function should return an Int64.\n\
    The function should count the number of boredoms in the string S by counting \n\
    the number of times \"I\" appears in S.\nThe function should ignore punctuation\
    \ and capitalization.\nThe function should ignore the case of the letters \"I\"\
    \ and \"i\".\nThe function should ignore the case of the letters \"I\" and \"\
    i\".\nThe function should ignore the case of the letters \"I\" and \"i\".\nThe\
    \ function should ignore the case of the letters \"I\" and \"i\".\nThe function\
    \ should ignore the case of the letters \"I\" and \"i\".\nThe function should\
    \ ignore the case of the letters \"I\" and \"i\".\nThe function should ignore\
    \ the case of the letters \"I\" and \"i\".\nThe function should ignore the case\
    \ of the letters \"I\" and \"i\".\nThe function should ignore the case of the\
    \ letters \"I\" and \"i\".\nThe function should ignore the case of the letters\
    \ \"I\" and \"i\".\nThe function should ignore the case of the letters \"I\" and\
    \ \"i\".\nThe function should ignore the case of the letters \"I\" and \"i\".\n\
    The function should ignore the case of the letters \"I\" and \"i\".\nThe function\
    \ should ignore the case of the letters \"I\" and \"i\".\nThe function should\
    \ ignore the case of the letters \"I\" and \"i\".\nThe function should ignore\
    \ the case of the letters \"I\" and \"i\".\nThe function should ignore the case\
    \ of the letters \"I\" and \"i\".\nThe function should ignore the case of the\
    \ letters \"I\" and \"i\".\nThe function should ignore the case of the letters\
    \ \"I\" and \"i\".\nThe function should ignore the case of the letters \"I\" and\
    \ \"i\".\nThe function should ignore the case of the letters \"I\" and \"i\".\n\
    The function should ignore the case of the letters \"I\" and \"i\".\nThe function\
    \ should ignore the case of the letters \"I\" and \"i\".\nThe function should\
    \ ignore the case of the letters \"I\" and \"i\".\nThe function should ignore\
    \ the case of the letters \"I\" and \"i\".\nThe function should ignore the case\
    \ of the letters \"I\" and \"i\".\nThe function should ignore the case of the\
    \ letters \"I\" and \"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuzvthovw.jl:13\nin expression starting at /tmp/tmpuzvthovw.jl:13\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpifwnrsju.jl:13\nin expression starting at /tmp/tmpifwnrsju.jl:13\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    else \n        boredoms=0\n        for word\
    \ in split(S,\".?!\") \n            if word==\"I\" \n            boredoms+=1 \n\
    \        return boredoms\n    end\nend\n</cell>\n<code language=julia-0.6>\n\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnf3yqmri.jl:22\nin expression starting at\
    \ /tmp/tmpnf3yqmri.jl:22\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n    then \n        boredoms = 0\n        for w in\
    \ S \n        do \n            if w == \"I\" \n            then \n           \
    \     boredoms += 1\n        end \n    else \n        boredoms = 1\n    end \n\
    \    return boredoms\nend \n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with the letter 'A'.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdq857rh4.jl:17\nin expression starting at /tmp/tmpdq857rh4.jl:17\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredom(S, 0)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of boredoms \nin the string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgnrtad1.jl:17\nin expression starting at\
    \ /tmp/tmpwgnrtad1.jl:17\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    count = 0\n    for word in S.split(\" \")\n        if word == \"\
    I\"\n            count += 1\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1ktwxs8.jl:20\nin expression starting at\
    \ /tmp/tmpf1ktwxs8.jl:20\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    S = S.lower()\n    \n    boredoms = 0\n    \n    for word in S.split(\"\
    \ \")\n        if word[0] == \"i\"\n            boredoms += 1\n    \n    return\
    \ boredoms\nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07x5n66n.jl:24\nin expression starting at\
    \ /tmp/tmp07x5n66n.jl:24\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0,0)==0\n    else \n        if is_bored(S,0,1)==1\n    \
    \    else \n            if is_bored(S,1,1)==1\n            else \n           \
    \     is_bored(S,1,0)==1\n            end\n        end\n    end\nend\n\"\"\"\n\
    \    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp_nl4syxo.jl:24\nin expression starting at /tmp/tmp_nl4syxo.jl:24\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = findall(S, \"^I.*\")\n    \n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.4>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7vfryj3.jl:18\nin expression starting at\
    \ /tmp/tmpk7vfryj3.jl:18\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = sum(map(is_bored_word,S.split(\".\")))\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpznwrlcjc.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpznwrlcjc.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  type String has no field split\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpznwrlcjc.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpznwrlcjc.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpznwrlcjc.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpznwrlcjc.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpznwrlcjc.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpznwrlcjc.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpznwrlcjc.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpznwrlcjc.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpznwrlcjc.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpznwrlcjc.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpznwrlcjc.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpznwrlcjc.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  type String has no field split\n  Stacktrace:\n \
    \  [1] getproperty\n     @ ./Base.jl:42 [inlined"
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms = count_boredoms(S)\n \
    \       boredoms = boredoms - 1\n        return boredoms\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of boredoms in a string.\n\
    Hint: Use count_boredoms.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmaz5n8o5.jl:20\nin expression starting at\
    \ /tmp/tmpmaz5n8o5.jl:20\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \"\"\"\n    Your task is to implement the function is_bored(S::String)::Int64\n\
    \    which takes in a string S and returns the number of boredoms in S.\n    \n\
    \    Boredoms are sentences that start with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgshfubol.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgshfubol.jl:1\n\
    in expression starting at /tmp/tmpgshfubol.jl:1\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n    then \n        error(\"The string does not start\
    \ with the word 'I'.\")\n    else \n        return 1\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.trim()\n    S = S.lower()\n    S = S.strip(\".\")\n    S = S.strip(\"\
    ?\")\n    S = S.strip(\"!\")\n    S = S.strip(\",\")\n    S = S.strip(\";\")\n\
    \    S = S.strip(\":\")\n    S = S.strip(\"!\")\n    S = S.strip(\".\")\n    S\
    \ = S.strip(\"?\")\n    S = S.strip(\"!\")\n    S = S.strip(\",\")\n    S = S.strip(\"\
    ;\")\n    S = S.strip(\":\")\n    S = S.strip(\"!\")\n    S = S.strip(\".\")\n\
    \    S = S.strip(\"?\")\n    S = S.strip(\"!\")\n    S = S.strip(\",\")\n    S\
    \ = S.strip(\";\")\n    S = S.strip(\":\")\n    S = S.strip(\"!\")\n    S = S.strip(\"\
    .\")\n    S = S.strip(\"?\")\n    S = S.strip(\"!\")\n    S = S.strip(\",\")\n\
    \    S = S.strip(\";\")\n    S = S.strip(\":\")\n    S = S.strip(\"!\")\n    S\
    \ = S.strip(\".\")\n    S = S.strip(\"?\")\n    S = S.strip(\"!\")\n    S = S.strip(\"\
    ,\")\n    S = S.strip(\";\")\n    S = S.strip(\":\")\n    S = S.strip(\"!\")\n\
    \    S = S.strip(\".\")\n    S = S.strip(\"?\")\n    S = S.strip(\"!\")\n    S\
    \ = S.strip(\",\")\n    S = S.strip(\";\")\n    S = S.strip(\":\")\n    S = S.strip(\"\
    !\")\n    S = S.strip(\".\")\n    S = S.strip(\"?\")\n    S = S.strip(\"!\")\n\
    \    S = S.strip(\",\")\n    S = S.strip(\";\")\n    S = S.strip(\":\")\n    S\
    \ = S.strip(\"!\")\n    S = S.strip(\".\")\n    S = S.strip(\"?\")\n    S = S.strip(\"\
    !\")\n    S = S.strip(\",\")\n    S = S.strip(\";\")\n    S = S.strip(\":\")\n\
    \    S = S.strip(\"!\")\n    S = S.strip(\".\")\n    S = S.strip(\"?\")\n    S\
    \ = S.strip(\"!\")\n    S = S.strip(\",\")\n    S = S.strip(\";\")\n    S = S.strip(\"\
    :\")\n    S = S.strip(\"!\")\n    S = S.strip(\".\")\n    S = S.strip(\"?\")\n\
    \    S = S.strip(\"!\")\n    S = S.strip(\",\")\n    S = S.strip(\";\")\n    S\
    \ = S.strip(\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3f8tvcb.jl:89\nin expression starting at\
    \ /tmp/tmpk3f8tvcb.jl:89\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    else \n        error(\"is_bored function expects\
    \ a string as input\")\n    end\nend\n\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n\
    \    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpi10bta1p.jl:18\nin expression starting at /tmp/tmpi10bta1p.jl:18\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n        error(\"is_bored failed: empty string\"\
    )\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpuofn4gf4.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpuofn4gf4.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmpuofn4gf4.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmpuofn4gf4.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuofn4gf4.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuofn4gf4.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuofn4gf4.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpuofn4gf4.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpuofn4gf4.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuofn4gf4.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuofn4gf4.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuofn4gf4.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpuofn4gf4.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpuofn4gf4.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpuofn4gf4.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpuofn4gf4.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpuof"
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0,0)==0\n    else \n        return is_bored(S,0,0)\n   \
    \ end\nend\n\"\"\"\n    You'll be given a string of words, and your task is to\
    \ count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpke7ig6cq.jl:18\nin expression starting at /tmp/tmpke7ig6cq.jl:18\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms(S, 0)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxd5l6mjk.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxd5l6mjk.jl:1\n\
    in expression starting at /tmp/tmpxd5l6mjk.jl:1\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    # Your code here\n    \n    return 0\nend\n</cell>\n<code\
    \ language=julia-1.4>\n# Test your code\n@test is_bored(\"Hello world\") == 0\n\
    @test is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\
    \ == 1\n</cell>\n<text>\nTask 3: Write a function that counts the number of times\
    \ a substring appears in a string.\n    For example, count_substr(\"Hello world\"\
    , \"ll\") should return 2.\n    \n    Your function should only return the number\
    \ of times the substring appears in the string.\n    \n    It is allowed to use\
    \ any built-in Julia functions or any pre-defined functions.\n    \n    You may\
    \ assume that the string contains only lowercase letters.\n    \n    You may assume\
    \ that all letters are in the English alphabet.\n    \n    You may assume that\
    \ all strings are ASCII.\n    \n    You may assume that all strings are at least\
    \ 3 characters long.\n    \n    You may assume that all strings are ASCII.\n \
    \   \n    You may assume that all strings are at least 3 characters long.\n  \
    \  \n    You may assume that all strings are ASCII.\n    \n    You may assume\
    \ that all strings are at least 3 characters long.\n    \n    You may assume that\
    \ all strings are ASCII.\n    \n    You may assume that all strings are at least\
    \ 3 characters long.\n    \n    You may assume that all strings are ASCII.\n \
    \   \n    You may assume that all strings are at least 3 characters long.\n  \
    \  \n    You may assume that all strings are ASCII.\n    \n    You may assume\
    \ that all strings are at least 3 characters long.\n    \n    You may assume that\
    \ all strings are ASCII.\n    \n    You may assume that all strings are at least\
    \ 3 characters long.\n    \n    You may assume that all strings are ASCII.\n \
    \   \n    You may assume that all strings are at least 3 characters long.\n  \
    \  \n    You may assume that all strings are ASCII.\n    \n    You may assume\
    \ that all strings are at least 3 characters long.\n    \n    You may assume that\
    \ all strings are ASCII.\n    \n    You may assume that all strings are at least\
    \ 3 characters long.\n    \n    You may assume that all strings are ASCII.\n \
    \   \n    You may assume that all strings are at least 3 characters long.\n  \
    \  \n    You may assume that all strings are ASCII.\n    \n    You may assume\
    \ that all strings are at least 3 characters long.\n    \n    You may assume that\
    \ all strings are ASCII.\n    \n    You may assume that all strings are at least\
    \ 3 \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcj0cfd67.jl:19\nin expression starting at\
    \ /tmp/tmpcj0cfd67.jl:19\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n\"\"\"\n    You'll be given a list of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"\
    sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \".\",\n\
    \    ...            \"I\", \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpauzp5pbr.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpauzp5pbr.jl:1\n\
    in expression starting at /tmp/tmpauzp5pbr.jl:1\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".\")\n            if word==\"I\"\n                boredoms+=1\n  \
    \      return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function is_bored(S::String, N::Int64) which returns N if S is a boredom sentence,\
    \ else returns 0.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvccesvyj.jl:22\nin expression starting at\
    \ /tmp/tmpvccesvyj.jl:22\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in it.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz2sfhzdp.jl:13\nin expression starting at /tmp/tmpz2sfhzdp.jl:13\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \"\"\"\n    Your task is to implement the function is_bored(S::String)::Int64\n\
    \    which returns 1 if S is a bored sentence and 0 otherwise.\n    \"\"\"\n \
    \   \n    # Your code here\n    \n    return 0\nend\n</cell>\n<code language=julia-1.0>\n\
    # Run this cell to test your code\n@test is_bored(\"Hello world\") \u2248 0\n\
    @test is_bored(\"The sky is blue. The sun is shining. I love this weather\") \u2248\
    \ 1\n</cell>\n<text>\nPart 2: Sentence Boredom\nNow that you've seen how to count\
    \ boredoms, let's write a function that will tell you if a sentence is bored or\
    \ not. Complete the function below.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqklersu.jl:23\nin expression starting at\
    \ /tmp/tmpkqklersu.jl:23\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0,0)==0 then return 0 else return 1\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplpv7r9vo.jl:13\nin expression starting at /tmp/tmplpv7r9vo.jl:13\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        return 1\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in it.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsmimvbcc.jl:18\nin expression starting at\
    \ /tmp/tmpsmimvbcc.jl:18\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpngozvyjg.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpngozvyjg.jl:1\n\
    in expression starting at /tmp/tmpngozvyjg.jl:1\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function is_bored(S::String,\
    \ i::Int64) which returns 1 if S[i] is a boredom and 0 otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1g_xpukr.jl:18\nin expression starting at\
    \ /tmp/tmp1g_xpukr.jl:18\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.lower()\n    boredoms = findall(S, boredom_pattern)\n    return\
    \ length(boredoms)\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of words in the string.\
    \ \nThe function should ignore all punctuation marks and only count the words.\
    \ \nThe function should ignore all capitalization and only count the words.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcplvubyw.jl:17\nin expression starting at\
    \ /tmp/tmpcplvubyw.jl:17\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    else \n        boredoms=0 \n        for word\
    \ in split(S,\".?!\") \n            if word==\"I\" \n                boredoms+=1\
    \ \n        return boredoms \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'a'.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16y4jonk.jl:22\nin expression starting at\
    \ /tmp/tmp16y4jonk.jl:22\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0) < 0\n        error(\"is_bored failed to return a valid\
    \ value\")\n    end\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpdwfa_r0l.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpdwfa_r0l.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmpdwfa_r0l.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmpdwfa_r0l.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdwfa_r0l.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdwfa_r0l.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdwfa_r0l.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpdwfa_r0l.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpdwfa_r0l.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdwfa_r0l.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdwfa_r0l.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdwfa_r0l.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpdwfa_r0l.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpdwfa_r0l.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpdwfa_r0l.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdwfa_r0l.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpdwf"
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    count = 0\n    for word in S.split(\" \")\n        if word[0] ==\
    \ \"I\"\n            count += 1\n    return count\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function is_bored_2(S::String)::Bool that returns true if S is a\
    \ bored sentence, and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4z4ckr87.jl:20\nin expression starting at\
    \ /tmp/tmp4z4ckr87.jl:20\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms(S, 0)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmproi3wjt3.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmproi3wjt3.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmproi3wjt3.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmproi3wjt3.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi3wjt3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmproi3wjt3.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmproi3wjt3.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi3wjt3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmproi3wjt3.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmproi3wjt3.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi"
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredom(S, 0)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of boredoms in a given\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd4wpyhll.jl:17\nin expression starting at\
    \ /tmp/tmpd4wpyhll.jl:17\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0) != 0\n    else \n        error(\"is_bored failed\")\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp4et7bm8v.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp4et7bm8v.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmp4et7bm8v.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmp4et7bm8v.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4et7bm8v.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4et7bm8v.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4et7bm8v.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmp4et7bm8v.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp4et7bm8v.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4et7bm8v.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4et7bm8v.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4et7bm8v.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmp4et7bm8v.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp4et7bm8v.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4et7bm8v.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4et7bm8v.jl:22\ntest set:\
    \ Er"
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0) != 0\n    else \n        error(\"is_bored failed to\
    \ return correct result\")\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpvmws_fdu.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpvmws_fdu.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmpvmws_fdu.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmpvmws_fdu.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvmws_fdu.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvmws_fdu.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvmws_fdu.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpvmws_fdu.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpvmws_fdu.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvmws_fdu.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvmws_fdu.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvmws_fdu.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpvmws_fdu.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpvmws_fdu.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpvmws_fdu.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvmws_fdu.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpvmw"
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for w in split(S,\"\
    .\")\n            if is_bored(w,1)==1\n            else \n                boredoms+=is_bored(w,1)\n\
    \        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in it.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy01chx43.jl:23\nin expression starting at\
    \ /tmp/tmpy01chx43.jl:23\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    else \n        return is_bored(S,1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of times the word \"the\" appears in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjxsop9op.jl:18\nin expression starting at\
    \ /tmp/tmpjxsop9op.jl:18\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n\"\"\"\n    You'll be given a list of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"\
    sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \"I\",\
    \ \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86gwhckf.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86gwhckf.jl:1\n\
    in expression starting at /tmp/tmp86gwhckf.jl:1\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".\")\n            if is_bored(word,boredoms)==1\n            boredoms+=1\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the number of boredoms \n    in the string.\
    \ \n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1fqnlib.jl:22\nin expression starting at\
    \ /tmp/tmpp1fqnlib.jl:22\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==0 then 1 else 0 end\nend\n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp95x0coht.jl:13\nin expression starting at /tmp/tmp95x0coht.jl:13\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".\")\n            if is_bored(word,boredoms)==1\n            boredoms+=1\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a string.\n    \n    Your function should\
    \ take a string as input, and return a number.\n    \n    For example, \n    >>>\
    \ count_borems(\"Hello world\")\n    0\n    >>> count_borems(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp27ui07zv.jl:22\nin expression starting at\
    \ /tmp/tmp27ui07zv.jl:22\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.lower()\n    boredoms = findall(S, boredoms)\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.3>\n@time is_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.3>\n@time is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns the number of words in it.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm2f7j5v4.jl:17\nin expression starting at\
    \ /tmp/tmpm2f7j5v4.jl:17\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==0 \n        error(\"is_bored failed\") \n    end\n\
    \    return 1\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that counts the number of boredoms in a given string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qgrd31r.jl:18\nin expression starting at\
    \ /tmp/tmp8qgrd31r.jl:18\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.strip\n    boredoms = findall(S, \"^I.*\")\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string. \nThe function should\
    \ ignore punctuation, numbers, and other non-word characters.\nThe function should\
    \ ignore leading and trailing whitespace.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmhlc_qte.jl:17\nin expression starting at\
    \ /tmp/tmpmhlc_qte.jl:17\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n        return 0 \n    else \n        return 1 \n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function is_bored(S::String,\
    \ i::Int64) which returns 1 if S[i] is a boredom and 0 otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2a174n6b.jl:19\nin expression starting at\
    \ /tmp/tmp2a174n6b.jl:19\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if startswith(word,\
    \ \"I\") then \n            boredoms += 1 \n        end \n    end \n    \n   \
    \ return boredoms \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in the string that start\
    \ with the letter 'e'.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppugr_24w.jl:24\nin expression starting at\
    \ /tmp/tmppugr_24w.jl:24\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0,0)==0\n    else \n        return is_bored(S,0,0)\n   \
    \ end\nend\n\"\"\"\n    You'll be given a string of words, and your task is to\
    \ count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpke7ig6cq.jl:18\nin expression starting at /tmp/tmpke7ig6cq.jl:18\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".\")\n            if word==\"I\"\n                boredoms+=1\n  \
    \      return boredoms\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpne59vu3m.jl:22\nin expression starting at\
    \ /tmp/tmpne59vu3m.jl:22\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\n\
    end\n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpwqw11l4p.jl:18\nin expression starting at /tmp/tmpwqw11l4p.jl:18\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".?!\") \n            if word==\"I\"\n            boredoms+=1\n   \
    \     return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that counts the number of boredoms in a string.\nThe function should\
    \ take a string as its only argument.\nThe function should return the number of\
    \ boredoms in the string.\nThe function should ignore all punctuation.\nThe function\
    \ should ignore all capitalization.\nThe function should ignore all numbers.\n\
    The function should ignore all words that start with a capital letter.\nThe function\
    \ should ignore all words that start with a number.\nThe function should ignore\
    \ all words that start with a lowercase letter.\nThe function should ignore all\
    \ words that start with a special character.\nThe function should ignore all words\
    \ that start with a space.\nThe function should ignore all words that start with\
    \ a question mark.\nThe function should ignore all words that start with a exclamation\
    \ point.\nThe function should ignore all words that start with a period.\nThe\
    \ function should ignore all words that start with a question mark.\nThe function\
    \ should ignore all words that start with a exclamation point.\nThe function should\
    \ ignore all words that start with a period.\nThe function should ignore all words\
    \ that start with a question mark.\nThe function should ignore all words that\
    \ start with a exclamation point.\nThe function should ignore all words that start\
    \ with a period.\nThe function should ignore all words that start with a question\
    \ mark.\nThe function should ignore all words that start with a exclamation point.\n\
    The function should ignore all words that start with a period.\nThe function should\
    \ ignore all words that start with a question mark.\nThe function should ignore\
    \ all words that start with a exclamation point.\nThe function should ignore all\
    \ words that start with a period.\nThe function should ignore all words that start\
    \ with a question mark.\nThe function should ignore all words that start with\
    \ a exclamation point.\nThe function should ignore all words that start with a\
    \ period.\nThe function should ignore all words that start with a question mark.\n\
    The function should ignore all words that start with a exclamation point.\nThe\
    \ function should ignore all words that start with a period.\nThe function should\
    \ ignore all words that start with a question mark.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpupfcx55d.jl:22\nin expression starting at\
    \ /tmp/tmpupfcx55d.jl:22\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\n    \n    For example:\n\
    \    >>> count_words(\"Hello world\")\n    2\n    >>> count_words(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    6\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_a5auuij.jl:18\nin expression starting at\
    \ /tmp/tmp_a5auuij.jl:18\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    else \n        boredoms(S,0)\n    end\nend\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpnpqhsx21.jl:18\nin expression starting at /tmp/tmpnpqhsx21.jl:18\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    count = 0\n    for word in split(S) do \n        if word[0] == \"\
    I\" then \n            count += 1\n        end\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.4>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'A'.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyj7tug0g.jl:22\nin expression starting at\
    \ /tmp/tmpyj7tug0g.jl:22\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==0 \n    else \n        error(\"is_bored not implemented\"\
    )\n    end\nend\n\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpemf_7deb.jl:18\nin expression starting at /tmp/tmpemf_7deb.jl:18\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms(S, 0)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmproi3wjt3.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmproi3wjt3.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmproi3wjt3.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmproi3wjt3.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi3wjt3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmproi3wjt3.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmproi3wjt3.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi3wjt3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmproi3wjt3.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmproi3wjt3.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi"
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 then 0 else 1\nend\n\"\"\"\n    You'll be given a\
    \ string of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_3_o621u.jl:13\nin expression starting at /tmp/tmp_3_o621u.jl:13\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2pgp0nks.jl:13\nin expression starting at /tmp/tmp2pgp0nks.jl:13\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".?!\") \n            if word==\"I\"\n            boredoms+=1 \n  \
    \      return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string\n\
    that are longer than or equal to 3 characters.\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0d2wu8gh.jl:22\nin expression starting at\
    \ /tmp/tmp0d2wu8gh.jl:22\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms(S, 0)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmproi3wjt3.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmproi3wjt3.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmproi3wjt3.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmproi3wjt3.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi3wjt3.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmproi3wjt3.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmproi3wjt3.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi3wjt3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmproi3wjt3.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmproi3wjt3.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmproi3wjt3.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmproi3wjt3.jl:22\ntest set:\
    \ Error During Test at /tmp/tmproi"
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n        error(\"is_bored called with an empty string\"\
    )\n    end\n    \n    boredom = false\n    \n    for w in split(S) \n        if\
    \ w == \"I\" \n            boredom = true\n            break\n        end\n  \
    \  end\n    \n    return boredom ? 1 : 0\nend\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39zj8_zp.jl:28\nin expression starting at\
    \ /tmp/tmp39zj8_zp.jl:28\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredom(S,0)\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp10j2l6qt.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp10j2l6qt.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmp10j2l6qt.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmp10j2l6qt.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp10j2l6qt.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp10j2l6qt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp10j2l6qt.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmp10j2l6qt.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp10j2l6qt.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp10j2l6qt.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp10j2l6qt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp10j2l6qt.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmp10j2l6qt.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp10j2l6qt.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp10j2l6qt.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp10j2l6qt.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp10j"
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==0\n    else \n        boredoms(S, 0)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpeqil1liv.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpeqil1liv.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmpeqil1liv.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmpeqil1liv.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeqil1liv.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeqil1liv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpeqil1liv.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpeqil1liv.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpeqil1liv.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeqil1liv.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeqil1liv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpeqil1liv.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpeqil1liv.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpeqil1liv.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpeqil1liv.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeqil1liv.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpeqi"
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredom(S, 0)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of boredoms in a string.\n\
    \    \n    For example, \n    >>> count_borems(\"Hello world\")\n    0\n    >>>\
    \ count_borems(\"The sky is blue. The sun is shining. I love this weather\")\n\
    \    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd62jc93g.jl:18\nin expression starting at\
    \ /tmp/tmpd62jc93g.jl:18\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms = count_boredoms(S)\n \
    \       boredoms += is_bored(S, boredoms)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a string.\nWrite a function\
    \ that counts the number of boredoms in a string and also counts the number of\
    \ boredoms in the string after each boredom is counted.\nWrite a function that\
    \ counts the number of boredoms in a string and also counts the number of boredoms\
    \ in the string after each boredom is counted, but only counts boredoms starting\
    \ with \"I\".\nWrite a function that counts the number of boredoms in a string\
    \ and also counts the number of boredoms in the string after each boredom is counted,\
    \ but only counts boredoms starting with \"I\" and ending with \"!\".\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9ozf7c3.jl:19\nin expression starting at\
    \ /tmp/tmpz9ozf7c3.jl:19\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".?!\")\n            if word==\"I\"\n                boredoms+=1\n\
    \        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpelgg3g0t.jl:22\nin expression starting at\
    \ /tmp/tmpelgg3g0t.jl:22\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = sum(map(is_bored_word,S.split(\".\")))\n    return boredoms\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of boredoms within a given string.\nThe function should take a string\
    \ as input and return a number.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ewfeg14.jl:17\nin expression starting at\
    \ /tmp/tmp0ewfeg14.jl:17\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".?!\")\n            if word==\"I\"\n                boredoms+=1\n\
    \        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that counts the number of boredoms in a string.\n    \n    Your function\
    \ should take a string as its only argument. \n    \n    Your function should\
    \ return a number representing the number of boredoms in the string.\n    \n \
    \   Your function should ignore capitalization and punctuation.\n    \n    Your\
    \ function should ignore the case of the initial \"I\" in the string.\n    \n\
    \    Your function should ignore the case of the final \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the initial \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the final \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the initial \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the final \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the initial \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the final \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the initial \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the final \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the initial \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the final \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the initial \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the final \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the initial \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the final \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the initial \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the final \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the initial \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the final \"I\" in the string.\n\
    \    \n    Your function should ignore the case of the \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp91t3rnqd.jl:22\nin expression starting at\
    \ /tmp/tmp91t3rnqd.jl:22\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1\n    else \n        0\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1xf9wff.jl:18\nin expression starting at\
    \ /tmp/tmpk1xf9wff.jl:18\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n\"\"\"\n    You'll be given a list of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"\
    sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \"I\",\
    \ \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp86gwhckf.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp86gwhckf.jl:1\n\
    in expression starting at /tmp/tmp86gwhckf.jl:1\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpngozvyjg.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpngozvyjg.jl:1\n\
    in expression starting at /tmp/tmpngozvyjg.jl:1\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n        boredoms = count_boredoms(S) \n    else\
    \ \n        boredoms = 0 \n    end \n    return boredoms \nend \n</cell>\n<code\
    \ language=julia-1.4>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in it.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmvgwmiw0.jl:20\nin expression starting at\
    \ /tmp/tmpmvgwmiw0.jl:20\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptab8zyam.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptab8zyam.jl:1\n\
    in expression starting at /tmp/tmptab8zyam.jl:1\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==0 \n    else \n        boredom_count::Int64 = 0\n \
    \       for word in split(S) \n            if word==\"I\" \n            then boredom_count::Int64\
    \ = boredom_count+1\n            else \n                boredom_count::Int64 =\
    \ boredom_count\n        end\n        return boredom_count\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string that start with the letter 'a'.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"boredom_count\"\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmp29vlid9a.jl:18\nin expression starting at /tmp/tmp29vlid9a.jl:18\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    count = 0\n    \n    for word in split(S) do \n        if word ==\
    \ \"I\" then \n            count += 1\n        end\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns the number of words in the string that start with the letter\
    \ 'e'. \nHint: Use split() to split the string into words.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq8hu1zqx.jl:24\nin expression starting at\
    \ /tmp/tmpq8hu1zqx.jl:24\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a string.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfhgjygx2.jl:13\nin expression starting at /tmp/tmpfhgjygx2.jl:13\n"
  stdout: ''
  timestamp: 1659822525
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a given string.\nWrite\
    \ a function that counts the number of boredoms in a given string.\nWrite a function\
    \ that counts the number of boredoms in a given string.\nWrite a function that\
    \ counts the number of boredoms in a given string.\nWrite a function that counts\
    \ the number of boredoms in a given string.\nWrite a function that counts the\
    \ number of boredoms in a given string.\nWrite a function that counts the number\
    \ of boredoms in a given string.\nWrite a function that counts the number of boredoms\
    \ in a given string.\nWrite a function that counts the number of boredoms in a\
    \ given string.\nWrite a function that counts the number of boredoms in a given\
    \ string.\nWrite a function that counts the number of boredoms in a given string.\n\
    Write a function that counts the number of boredoms in a given string.\nWrite\
    \ a function that counts the number of boredoms in a given string.\nWrite a function\
    \ that counts the number of boredoms in a given string.\nWrite a function that\
    \ counts the number of boredoms in a given string.\nWrite a function that counts\
    \ the number of boredoms in a given string.\nWrite a function that counts the\
    \ number of boredoms in a given string.\nWrite a function that counts the number\
    \ of boredoms in a given string.\nWrite a function that counts the number of boredoms\
    \ in a given string.\nWrite a function that counts the number of boredoms in a\
    \ given string.\nWrite a function that counts the number of boredoms in a given\
    \ string.\nWrite a function that counts the number of boredoms in a given string.\n\
    Write a function that counts the number of boredoms in a given string.\nWrite\
    \ a function that counts the number of boredoms in a given string.\nWrite a function\
    \ that counts the number of boredoms in a given string.\nWrite a function that\
    \ counts the number of boredoms in a given string.\nWrite a function that counts\
    \ the number of boredoms in a given string.\nWrite a function that counts the\
    \ number of boredoms in a given string.\nWrite a function that counts the number\
    \ of boredoms in a given string.\nWrite a function that counts the number of boredoms\
    \ in a given string.\nWrite a function that counts the number of boredoms in a\
    \ given string.\nWrite a function that counts the number of boredoms in a given\
    \ string.\nWrite a function that counts the number of boredoms in a given string.\n\
    Write a function that counts the number of boredoms in a given \nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1_2tliwa.jl:13\nin expression starting at /tmp/tmp1_2tliwa.jl:13\n"
  stdout: ''
  timestamp: 1659822525
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".?\")\n            if word==\"I\"\n                boredoms+=1\n \
    \       return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore numbers and punctuation marks.\nThe function should\
    \ ignore capitalization.\nThe function should ignore extra spaces.\nThe function\
    \ should ignore sentences starting with a number.\nThe function should ignore\
    \ sentences starting with a capital letter.\nThe function should ignore sentences\
    \ starting with a period.\nThe function should ignore sentences starting with\
    \ a question mark.\nThe function should ignore sentences starting with a exclamation\
    \ mark.\nThe function should ignore sentences starting with a period.\nThe function\
    \ should ignore sentences starting with a question mark.\nThe function should\
    \ ignore sentences starting with a exclamation mark.\nThe function should ignore\
    \ sentences starting with a period.\nThe function should ignore sentences starting\
    \ with a question mark.\nThe function should ignore sentences starting with a\
    \ exclamation mark.\nThe function should ignore sentences starting with a period.\n\
    The function should ignore sentences starting with a question mark.\nThe function\
    \ should ignore sentences starting with a exclamation mark.\nThe function should\
    \ ignore sentences starting with a period.\nThe function should ignore sentences\
    \ starting with a question mark.\nThe function should ignore sentences starting\
    \ with a exclamation mark.\nThe function should ignore sentences starting with\
    \ a period.\nThe function should ignore sentences starting with a question mark.\n\
    The function should ignore sentences starting with a exclamation mark.\nThe function\
    \ should ignore sentences starting with a period.\nThe function should ignore\
    \ sentences starting with a question mark.\nThe function should ignore sentences\
    \ starting with a exclamation mark.\nThe function should ignore sentences starting\
    \ with a period.\nThe function should ignore sentences starting with a question\
    \ mark.\nThe function should ignore sentences starting with a exclamation mark.\n\
    The function should ignore sentences starting with a period.\nThe function should\
    \ ignore sentences starting with a question mark.\nThe function should ignore\
    \ sentences starting with a exclamation mark.\nThe function should ignore sentences\
    \ starting with a period.\nThe function should ignore sentences starting with\
    \ a \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi3um0grm.jl:22\nin expression starting at\
    \ /tmp/tmpi3um0grm.jl:22\n"
  stdout: ''
  timestamp: 1659822525
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 then \n        return 0 \n    else \n        return\
    \ 1 \nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwcc6kxqz.jl:18\nin expression starting at\
    \ /tmp/tmpwcc6kxqz.jl:18\n"
  stdout: ''
  timestamp: 1659822525
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".\")\n            if is_bored(word,boredoms)==1\n            else\
    \ \n                boredoms+=1\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that splits a string into a vector of words. Use a regular\
    \ expression to split on '.', '?' and '!'.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1fak6y0.jl:23\nin expression starting at\
    \ /tmp/tmpi1fak6y0.jl:23\n"
  stdout: ''
  timestamp: 1659822525
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if starts_with(word,\
    \ \"I\") then \n            boredoms += 1 \n        end\n    end\n    \n    return\
    \ boredoms\nend\n</cell>\n<text>\nExercise 3\nWrite a function that splits a string\
    \ into a list of words. Use a regular expression to split on spaces, punctuation,\
    \ and non-alphanumeric characters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzd1ahdko.jl:24\nin expression starting at\
    \ /tmp/tmpzd1ahdko.jl:24\n"
  stdout: ''
  timestamp: 1659822525
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        \n    end=length(S)\n    \n  \
    \  for i=1:end\n        if S[i]==\".\"\n            \n            if S[i+1]==\"\
    .\"\n                if S[i+2]==\".\"\n                    if S[i+3]==\".\"\n\
    \                        if S[i+4]==\".\"\n                            if S[i+5]==\"\
    .\"\n                                if S[i+6]==\".\"\n                      \
    \              if S[i+7]==\".\"\n                                        return\
    \ i+7\n                                end\n                            end\n\
    \                        end\n                    end\n                end\n \
    \           end\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptjsvm126.jl:18\nin expression\
    \ starting at /tmp/tmptjsvm126.jl:18\n"
  stdout: ''
  timestamp: 1659822525
- exit_code: -1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n        error(\"is_bored expects a string that starts\
    \ with 'I'\")\n    end\n    \n    boredoms = findall(S, startswith(\"I\"))\n \
    \   return length(boredoms)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659822529
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nPart 2: String Manipulation\nNow that we have\
    \ some boredom sentences, let's count how many boredoms we have.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfsnpptie.jl:18\nin expression starting at\
    \ /tmp/tmpfsnpptie.jl:18\n"
  stdout: ''
  timestamp: 1659822525
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    count = 0\n    for word in S.split(\" \")\n        if word == \"\
    I\"\n            count += 1\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'a'.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvaoyvx95.jl:20\nin expression starting at\
    \ /tmp/tmpvaoyvx95.jl:20\n"
  stdout: ''
  timestamp: 1659822525
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 \n    then return 0 \n    else return 1 \n    end\
    \ \nend \n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwz6fb187.jl:14\nin expression starting at /tmp/tmpwz6fb187.jl:14\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S) == 0 \n        error(\"The string is not bored\")\n   \
    \ else \n        return 1 \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of words in it.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1384r62z.jl:19\nin expression starting at\
    \ /tmp/tmp1384r62z.jl:19\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpqvgz2pyq.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpqvgz2pyq.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmpqvgz2pyq.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmpqvgz2pyq.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvgz2pyq.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqvgz2pyq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqvgz2pyq.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpqvgz2pyq.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpqvgz2pyq.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvgz2pyq.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqvgz2pyq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqvgz2pyq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmpqvgz2pyq.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmpqvgz2pyq.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqvgz2pyq.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqvgz2pyq.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpqvg"
  timestamp: 1659822520
