language: jl
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1\n    else \n        return is_bored(S,1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nThe function should ignore\
    \ all punctuation marks and only count the words. \nThe function should ignore\
    \ all capitalization and only count the words.\nThe function should ignore all\
    \ numbers and only count the words.\nThe function should ignore all special characters\
    \ and only count the words.\nThe function should ignore all words that are longer\
    \ than 3 characters.\nThe function should ignore all words that are shorter than\
    \ 3 characters.\nThe function should ignore all words that are longer than 3 characters\
    \ and shorter than 3 characters.\nThe function should ignore all words that are\
    \ longer than 3 characters and shorter than 3 characters and that contain digits.\
    \ \nThe function should ignore all words that are longer than 3 characters and\
    \ shorter than 3 characters and that contain digits and that contain special characters.\
    \ \nThe function should ignore all words that are longer than 3 characters and\
    \ shorter than 3 characters and that contain digits and that contain special characters\
    \ and that contain capital letters. \nThe function should ignore all words that\
    \ are longer than 3 characters and shorter than 3 characters and that contain\
    \ digits and that contain special characters and that contain capital letters\
    \ and that contain lower case letters. \nThe function should ignore all words\
    \ that are longer than 3 characters and shorter than 3 characters and that contain\
    \ digits and that contain special characters and that contain capital letters\
    \ and that contain lower case letters and that contain upper case letters. \n\
    The function should ignore all words that are longer than 3 characters and shorter\
    \ than 3 characters and that contain digits and that contain special characters\
    \ and that contain capital letters and that contain lower case letters and that\
    \ contain upper case letters and that contain digits. \nThe function should ignore\
    \ all words that are longer than 3 characters and shorter than 3 characters and\
    \ that contain digits and that contain special characters and that contain capital\
    \ letters and that contain lower case letters and that contain upper case letters\
    \ and that contain digits and that contain special characters. \nThe function\
    \ should ignore all words that are longer than 3 characters and shorter than 3\
    \ characters and that contain digits and that contain special characters and that\
    \ contain capital letters and that contain lower case letters and that contain\
    \ upper case letters and that contain digits and that contain special characters\
    \ and that contain \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa22812np.jl:18\nin expression starting at\
    \ /tmp/tmpa22812np.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in S.split(\" \") do \n      \
    \  if word[0] == \"I\" then \n            boredoms += 1 \n        end \n    end\
    \ \n    \n    return boredoms \nend \n</cell>\n<code language=julia-1.3>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that start with the letter 'a'.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaqospn2q.jl:24\nin expression starting at\
    \ /tmp/tmpaqospn2q.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)\n    else \n        boredoms = count_boredoms(S)\n \
    \       boredoms = boredoms - 1\n        return boredoms\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that counts the number of boredoms in a given\
    \ string.\nThe function should take one argument, the string to be counted.\n\
    The function should return the number of boredoms in the string.\nThe function\
    \ should ignore punctuation and capitalization.\nThe function should ignore the\
    \ case of the initial letter.\nThe function should ignore the case of the final\
    \ letter.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case\
    \ of the initial and final letters.\nThe function should ignore the case of the\
    \ initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case of the initial and final\
    \ letters.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case\
    \ of the initial and final letters.\nThe function should ignore the case of the\
    \ initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case of the initial and final\
    \ letters.\nThe function should ignore the case of the initial and final letters.\n\
    The function should ignore the case of the initial and final letters.\nThe function\
    \ should ignore the case of the initial and final letters.\nThe function should\
    \ ignore the case of the initial and final letters.\nThe function should ignore\
    \ the case of the initial and final letters.\nThe function should ignore the case\
    \ of the initial and final letters.\nThe function should ignore the case of the\
    \ initial and final letters.\nThe function should ignore the case of the initial\
    \ and final letters.\nThe function should ignore the case \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplz6zrqvz.jl:20\nin expression starting at\
    \ /tmp/tmplz6zrqvz.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-0.6>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-0.6>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr7as7n6i.jl:13\nin expression starting at /tmp/tmpr7as7n6i.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = S.lower()\n    boredoms = findall(S, \"^I\")\n    return length(boredoms)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpm3j6lybn.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpm3j6lybn.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  type String has no field lower\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpm3j6lybn.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm3j6lybn.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm3j6lybn.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpm3j6lybn.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  type String has no field lower\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpm3j6lybn.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm3j6lybn.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm3j6lybn.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpm3j6lybn.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  type String has no field lower\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] is_bored(S::String)\n\
    \     @ Main /tmp/tmpm3j6lybn.jl:13\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpm3j6lybn.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpm3j6lybn.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpm3j6lybn.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"bIt\") == 0\n  type String has no field lower\n  Stacktrace:\n \
    \  [1] getpropert"
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if word\
    \ == \"I\" then \n            boredoms += 1 \n        end\n    end\n    \n   \
    \ return boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoan6zc2c.jl:24\nin expression starting at\
    \ /tmp/tmpoan6zc2c.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n\"\"\"\n    You'll be given a string of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgp_374f9.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgp_374f9.jl:1\n\
    in expression starting at /tmp/tmpgp_374f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = sum(map(is_bored, split(S, \".\")))\n    boredoms +=\
    \ sum(map(is_bored, split(S, \"?\")))\n    boredoms += sum(map(is_bored, split(S,\
    \ \"!\")))\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of words in the string.\
    \ \n    \n    For example:\n    >>> count_words(\"Hello world\")\n    2\n    >>>\
    \ count_words(\"The sky is blue. The sun is shining. I love this weather\")\n\
    \    7\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t\
    @test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnlem8yco.jl:19\nin expression starting at\
    \ /tmp/tmpnlem8yco.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        \n    end=length(S)\n    boredoms=0\n\
    \    \n    for i=1:end\n        if S[i]==\"I\"\n            boredoms+=1\n    \
    \    end\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in it.\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9jp6bcg0.jl:19\nin expression\
    \ starting at /tmp/tmp9jp6bcg0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    boredoms = findall(S, \"^I.*\")\n    \n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'e'.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nWrite a function that takes a string\
    \ and returns the number of words in the string \nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9id8kvid.jl:18\nin expression starting at\
    \ /tmp/tmp9id8kvid.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0 then 1 else 0 end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp790n34jp.jl:13\nin expression starting at /tmp/tmp790n34jp.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n\"\"\"\n    You'll be given a list of strings, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello world\", \"The sky is blue. The sun is shining. I love\
    \ this weather\"])\n    1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa61h17dt.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa61h17dt.jl:1\n\
    in expression starting at /tmp/tmpa61h17dt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcnymfki7.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcnymfki7.jl:1\n\
    in expression starting at /tmp/tmpcnymfki7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0)==0 \n        error(\"is_bored failed\") \n    end\n\
    end\n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp8eqs_uuz.jl:17\nin expression starting at /tmp/tmp8eqs_uuz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        \n    end=length(S)\n    \n  \
    \  boredoms=0\n    \n    for i=1:end\n        if S[i]==\"I\"\n            boredoms+=1\n\
    \        end\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1s2b5m4t.jl:20\nin expression\
    \ starting at /tmp/tmp1s2b5m4t.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n    end\nend\n\"\
    \"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpc2w01ew8.jl:18\nin expression starting at /tmp/tmpc2w01ew8.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S, 0) != 0\n    else \n        error(\"is_bored failed\")\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp4et7bm8v.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp4et7bm8v.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ is_bored(::String, ::Int64)\n  Closest candidates are:\n    is_bored(::String)\
    \ at /tmp/tmp4et7bm8v.jl:12\n  Stacktrace:\n   [1] is_bored(S::String)\n     @\
    \ Main /tmp/tmp4et7bm8v.jl:13\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4et7bm8v.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4et7bm8v.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4et7bm8v.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmp4et7bm8v.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp4et7bm8v.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4et7bm8v.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4et7bm8v.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp4et7bm8v.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  MethodError: no method matching is_bored(::String,\
    \ ::Int64)\n  Closest candidates are:\n    is_bored(::String) at /tmp/tmp4et7bm8v.jl:12\n\
    \  Stacktrace:\n   [1] is_bored(S::String)\n     @ Main /tmp/tmp4et7bm8v.jl:13\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4et7bm8v.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4et7bm8v.jl:22\ntest set:\
    \ Er"
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in\
    \ split(S,\".,?!\")\n            if word==\"I\"\n                boredoms+=1\n\
    \        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that splits a string into a list of words. A word is defined as a\
    \ sequence of letters a-z or A-Z or digits. Spaces are ignored.\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprutt33tx.jl:22\nin expression starting at\
    \ /tmp/tmprutt33tx.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a string.\n    \n   \
    \ Your function should take a string as input, and return a number.\n    \n  \
    \  For example, \n    >>> count_borems(\"Hello world\")\n    0\n    >>> count_borems(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"1\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgnhq1j7f.jl:13\nin expression starting at /tmp/tmpgnhq1j7f.jl:13\n"
  stdout: ''
