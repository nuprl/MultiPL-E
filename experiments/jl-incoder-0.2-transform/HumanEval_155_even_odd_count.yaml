name: HumanEval_155_even_odd_count
language: jl
prompt: "\"\"\"Given an integer. return a tuple that has the number of even and odd\
  \ digits respectively.\n\n     Example:\n    >>> even_odd_count(-12)\n    (1, 1)\n\
  \    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\nfunction even_odd_count(num::Int64)::Tuple{Int64,\
  \ Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = even_odd_count;\n\t@test(candidate(7)\
  \ == (0, 1))\n\t@test(candidate(-78) == (1, 1))\n\t@test(candidate(3452) == (2,\
  \ 2))\n\t@test(candidate(346211) == (3, 3))\n\t@test(candidate(-345821) == (3, 3))\n\
  \t@test(candidate(-2) == (1, 0))\n\t@test(candidate(-45347) == (2, 3))\n\t@test(candidate(0)\
  \ == (1, 0))\nend\n"
completions: ["    if num < 0\n        error(\"The argument must be positive\")\n\
    \    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The argument\
    \ must be positive\")\n    end\n    even, odd = 0, 0\n    for i in 1:num\n   \
    \     if i % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that integer.", "    if num < 0 \n        error(\"\
    The input must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n\
    \        odd_count = sum(num % 2 == 0 for num in num::Int64)\n        even_count\
    \ = sum(num % 2 == 1 for num in num::Int64)\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer $n$ and returns the number of digits\
    \ in $n$. \nThe function should raise an error if the input is not an integer.",
  "    if num < 0 \n        error(\"The input must be positive\")\n    else if num\
    \ == 0\n        return (1, 0)\n    else \n        odd_count = 0\n        even_count\
    \ = 0\n        digit = num % 10\n        while digit > 0\n            if digit\
    \ % 2 == 0\n                even_count += 1\n            else\n              \
    \  odd_count += 1\n            digit = num % 10\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    Invalid input\")\n    elseif num == 0\n        return (0, 0)\n    else\n     \
    \   even, odd = 0, 0\n        for n in num\n            if n % 2 == 0\n      \
    \          even += 1\n            else\n                odd += 1\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0\n        error(\"The given number must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0\n        error(\"The input must be positive\")\n    elseif num == 0\n    \
    \    (1, 1)\n    else\n        odd_count = num % 2\n        even_count = num -\
    \ odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an integer and returns the sum of the\
    \ digits of that integer.", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    elseif num == 0\n        return (1, 0)\n    else\n        even,\
    \ odd = 0, 0\n        while num != 0\n            digit = num % 10\n         \
    \   if digit % 2 == 0\n                even += digit\n            else\n     \
    \           odd += digit\n            end\n            num /= 10\n        end\n\
    \        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The given number should be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    for i in 1:num\n        if i\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The given number\
    \ should be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n  \
    \      if num % 2 == 0\n            even += 1\n            num /= 2\n        else\n\
    \            odd += 1\n            num /= 2\n        end\n    end\n    return\
    \ even, odd\nend\n</cell>\n<code language=julia-1.0>", "    if num < 0\n     \
    \   error(\"The input must be positive\")\n    end\n    even = num % 2 == 0\n\
    \    odd = num % 2 != 0\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.4>", "    if num < 0\n        error(\"The given number\
    \ must be positive\")\n    end\n    even = 0\n    odd = 0\n    while num > 0\n\
    \        if num % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ i in reverse(digits(num))\n        if i%2 == 0\n            even += 1\n    \
    \    else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n\
    \        if num % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string.", "    if num <\
    \ 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += digit\n        else\n            odd += digit\n        end\n        num /=\
    \ 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        even = num % 2 == 0\n        odd = num\
    \ % 2 != 0\n        if even\n            even = even + 1\n        else\n     \
    \       odd = odd + 1 \n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the number of digits in $n$. \nThe function should raise an\
    \ error if the input is not an integer.", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n \
    \       odd_count = num % 10\n        even_count = num - odd_count\n        return\
    \ (odd_count, even_count)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes an integer and returns the sum of the digits of that integer.",
  "    if num < 0\n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        (1, 1)\n    else\n        odd_count = sum(num % 2 == 0 for\
    \ num in num::Int64)\n        even_count = sum(num % 2 == 1 for num in num::Int64)\n\
    \        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number must be positive.\")\n    elseif\
    \ num == 0\n        (1, 1)\n    else\n        even, odd = divrem(num, 10)\n  \
    \      (even_odd_count(even), even_odd_count(odd))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer. \nThe function should work for integers greater than\
    \ or equal to 0.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    for i in reverse(digits(num))\n        if\
    \ i%2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.0>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.0>\neven_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:", "    if num <\
    \ 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num /= 10\n \
    \   end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if num < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if i % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\n@time even_odd_count(-12)\n\
    </cell>\n<code language=julia-1.3>\n@time even_odd_count(123)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer and returns the number of digits\
    \ in that integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for x in num\n      \
    \  if x % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"Invalid input\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += digit\n        else\n            odd +=\
    \ digit\n        end\n        num /= 10\n    end\n    return even, odd\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"Invalid\
    \ input\")\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count =\
    \ num % 10\n        even_count = num - odd_count\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0 \n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if num % 2 == 0\n     \
    \       even = even + 1\n        else\n            odd = odd + 1 \n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if num < 0 \n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        (1, 1)\n    else\n        odd_count = sum(num % 2 == 0 for num\
    \ in num::Int64)\n        even_count = sum(num % 2 == 1 for num in num::Int64)\n\
    \        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = count_digits(num)\n\
    \        even_count = odd_count - count_digits(num % 10)\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0 \n        error(\"The given number must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        even, odd = even_odd_count(num / 2)\n \
    \       (even + odd, num % 2)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a number as input and returns the sum of the digits of\
    \ that number. \nFor example if the input is 123, the function should return 1\
    \ + 2 + 3 = 6.", "    if num < 0\n        error(\"The input number should be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in reverse(digits(num))\n\
    \        if i%2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>",
  "    if num < 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n\
    \    while num > 0\n        digit = num % 10\n        if digit % 2 == 0\n    \
    \        even += 1\n        else\n            odd += 1\n        end\n        num\
    \ /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"Invalid input\")\n    else\n        even, odd =\
    \ 0, 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num -= 2\n            else\n                odd += 1\n\
    \                num -= 1\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>", "    if num < 0 \n        error(\"The\
    \ input number must be positive\")\n    else if num == 0\n        (1, 1)\n   \
    \ else if num % 2 == 0\n        (even_odd_count(num / 2), 1)\n    else\n     \
    \   (even_odd_count(num / 2) + 1, 0)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a number as input and returns the number of digits\
    \ in that number.", "    if num < 0\n        error(\"The input number must be\
    \ positive.\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for x in num\n      \
    \  if x % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.4>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.4>", "    if num < 0\n        error(\"The argument\
    \ must be positive\")\n    end\n    even, odd = 0, 0\n    for x in num\n     \
    \   if x % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return (even, odd)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a number as input and returns the number of digits\
    \ in that number.", "    if num < 0 \n        error(\"The given number must be\
    \ positive\")\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count\
    \ = sum(x % 2 == 1 for x in nums)\n        even_count = sum(x % 2 == 0 for x in\
    \ nums)\n        return (even_count, odd_count)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\n@assert even_odd_count(0) == (1, 1)\n@assert even_odd_count(1)\
    \ == (1, 2)\n@assert even_odd_count(2) == (1, 2)\n@assert even_odd_count(3) ==\
    \ (1, 2)\n@assert even_odd_count(4) == (1, 2)\n@assert even_odd_count(5) == (1,\
    \ 2)\n@assert even_odd_count(6) == (1, 2)\n@assert even_odd_count(7) == (1, 2)\n\
    @assert even_odd_count(8) == (1, 2)\n@assert even_odd_count(9) == (1, 2)\n@assert\
    \ even_odd_count(10) == (1, 2)\n@assert even_odd_count(11) == (1, 2)\n@assert\
    \ even_odd_count(12) == (1, 2)\n@assert even_odd_count(13) == (1, 2)\n@assert\
    \ even_odd_count(14) == (1, 2)\n@assert even_odd_count(15) == (1, 2)\n@assert\
    \ even_odd_count(16) == (1, 2)\n@assert even_odd_count(17) == (1, 2)\n@assert\
    \ even_odd_count(18) == (1, 2)\n@assert even_odd_count(19) == (1, 2)\n@assert\
    \ even_odd_count(20) == (1, 2)\n@assert even_odd_count(21) == (1, 2)\n@assert\
    \ even_odd_count(22) == (1, 2)\n@assert even_odd_count(23) == (1, 2)\n@assert\
    \ even_odd_count(24) == (1, 2)\n@assert even_odd_count(25) == (1, 2)\n@assert\
    \ even_odd_count(26) == (1, 2)\n@assert even_odd_count(27) == (1, 2)\n@assert\
    \ even_odd_count(28) == (1, 2)\n@assert even_odd_count(29) == (1, 2)\n@assert\
    \ even_odd_count(30) == (1, 2)\n@assert even_odd_count(31) == (1, 2)\n@assert\
    \ even_odd_count(32) == (1, 2)\n@assert even_odd_count(33) == (1, 2)\n@assert\
    \ even_odd_count(34) == (1, 2)\n@assert even_odd_count(35) == (1, 2)\n@assert\
    \ even_odd_count(36) == (1, 2)\n@assert even_odd_count(37) == (1, 2)\n@assert\
    \ even_odd_count(38) == (1, 2)\n@assert even_odd_count(39) == (1, 2)", "    if\
    \ num < 0\n        error(\"The given number should be positive\")\n    elseif\
    \ num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (odd_count, even_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if num < 0 \n        error(\"The given number\
    \ cannot be negative\")\n    elseif num == 0\n        (1, 1)\n    else\n     \
    \   even, odd = 0, 0\n        while num > 0\n            digit = num % 10\n  \
    \          if digit % 2 == 0\n                even += 1\n            else\n  \
    \              odd += 1\n            num /= 10\n        return (even, odd)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The given number should be positive\")\n    elseif num == 0\n        return (1,\
    \ 0)\n    else\n        even::Int64 = 0\n        odd::Int64 = 0\n        digit::Int64\
    \ = 0\n        while num > 0\n            digit = num % 10\n            if digit\
    \ % 2 == 0\n                even += digit\n            else\n                odd\
    \ += digit\n            end\n            num /= 10\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0\n        error(\"The argument must be positive\")\n    end\n    even, odd\
    \ = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a number as input and returns the number of digits\
    \ in that number.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.4>", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even = 0\n    odd = 0\n    for n in\
    \ num\n        if n % 2 == 0\n            even += 1\n        else\n          \
    \  odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = count(num::Int64,\
    \ 1)\n        even_count = count(num::Int64, 2)\n        return (odd_count, even_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if num < 0\n        error(\"\
    The given number should be positive\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        if num % 2 == 0\n            even += 1\n        else\n    \
    \        odd += 1\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.", "    if num\
    \ < 0\n        error(\"The input number must be positive\")\n    end\n    if num\
    \ == 0\n        return (1, 0)\n    end\n    even, odd = 0, 0\n    while num !=\
    \ 0\n        even, odd = even+1, odd+(num % 10)\n        num = div(num, 10)\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if num < 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n\
    \    while num > 0\n        digit = num % 10\n        if digit % 2 == 0\n    \
    \        even += digit\n        else\n            odd += digit\n        end\n\
    \        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number should be positive\")\n    elseif\
    \ num == 0\n        (1, 1)\n    else\n        odd_count = sum(num % 2 == 0 for\
    \ num in num::Int64)\n        even_count = sum(num % 2 != 0 for num in num::Int64)\n\
    \        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number should be positive\")\n    end\n\
    \    if num == 0\n        return (1, 0)\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        num = num / 10\n        if digit\
    \ % 2 == 0\n            even = even + 1\n        else\n            odd = odd +\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:", "    if num <\
    \ 0\n        error(\"The given number should be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        odd_count = num % 2\n        even_count\
    \ = num - odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    even = num % 2 == 0\n    odd = num % 2 != 0\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function is_palindrome(num) that returns true if the input is a palindrome\
    \ and false otherwise.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += digit\n        else\n        \
    \    odd += digit\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.0>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the digits of an integer.", "    if num\
    \ < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if i % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0\n        error(\"The given number should be positive\")\n    else\n      \
    \  even, odd = 0, 0\n        while num > 0\n            if num % 2 == 0\n    \
    \            even += 1\n                num -= 2\n            else\n         \
    \       odd += 1\n                num -= 1\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n \
    \       error(\"The input must be positive\")\n    end\n    if num == 0\n    \
    \    return (1, 0)\n    end\n    even, odd = 0, 0\n    while num > 0\n       \
    \ digit = num % 10\n        if digit % 2 == 0\n            even += digit\n   \
    \     else\n            odd += digit\n        end\n        num /= 10\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0 \n        error(\"The input must be positive\")\n    end\n    even, odd\
    \ = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit % 2 ==\
    \ 0\n            even += digit\n        else\n            odd += digit\n     \
    \   end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0\n        error(\"Invalid input\")\n  \
    \  elseif num == 0\n        return (0, 0)\n    else\n        even::Int64 = 0\n\
    \        odd::Int64 = 0\n        digit::Int64 = 0\n        while num > 0\n   \
    \         digit = num % 10\n            if digit % 2 == 0\n                even\
    \ += digit\n            else\n                odd += digit\n            end\n\
    \            num /= 10\n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"Invalid\
    \ input\")\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count =\
    \ sum(x % 2 == 1 for x in num::Int64)\n        even_count = sum(x % 2 == 0 for\
    \ x in num::Int64)\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    if num == 0\n        return (1, 0)\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for x in num\n        if x % 2 == 0\n         \
    \   even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.3>", "    if num < 0\n   \
    \     error(\"The argument must be positive\")\n    elseif num == 0\n        return\
    \ (1, 0)\n    else\n        even, odd = 0, 0\n        while num != 0\n       \
    \     digit = num % 10\n            if digit % 2 == 0\n                even +=\
    \ digit\n            else\n                odd += digit\n            end\n   \
    \         num /= 10\n        end\n        return (even, odd)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    else\n        even_odd_count_helper(num)\n    end\nend", " \
    \   if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.3>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.3>", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n       \
    \ odd_count = 0\n        even_count = 0\n        while num > 0\n            if\
    \ num % 2 == 0\n                even_count += 1\n            else\n          \
    \      odd_count += 1\n            end\n            num = num / 2\n        end\n\
    \        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0 \n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Given an integer. return a tuple that has the\
    \ number of even and odd digits respectively.", "    if num < 0\n        error(\"\
    The given number should be positive\")\n    else\n        even, odd = 0, 0\n \
    \       while num != 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += 1\n            else\n                odd += 1\n\
    \            num /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        return (1, 0)\n    else\n        even, odd = 0,\
    \ 0\n        while num > 0\n            if num % 2 == 0\n                even\
    \ += 1\n                num -= 2\n            else\n                odd += 1\n\
    \                num -= 1\n        end\n        return (even, odd)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.", "    if num < 0 \n      \
    \  error(\"The input must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64\
    \ = 0\n    for x in num\n        if x % 2 == 0\n            even += 1\n      \
    \  else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.4>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer.", "    if num < 0\n       \
    \ error(\"The given number must be positive.\")\n    end\n    even = num % 2 ==\
    \ 0\n    odd = num % 2 != 0\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0 \n        error(\"The given number must be positive\")\n    else\
    \ if num == 0\n        (1, 1)\n    else if num % 2 == 0\n        (even_odd_count(num\
    \ / 2), 1)\n    else\n        (even_odd_count(num / 2) + 1, 2)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer and returns\
    \ the sum of the digits of that integer.", "    if num < 0\n        error(\"The\
    \ given number must be positive.\")\n    end\n    even::Int64 = 0\n    odd::Int64\
    \ = 0\n    for n in num\n        if n % 2 == 0\n            even += 1\n      \
    \  else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n\
    @assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer and returns the number of digits in that integer.",
  "    if num < 0 \n        error(\"The input must be positive\")\n    else if num\
    \ == 0\n        (1, 1)\n    else if num % 2 == 0\n        (even_odd_count(num\
    \ / 2), 1)\n    else\n        (even_odd_count(num / 2) + 1, 0)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    end\n    even = 0\n    odd = 0\n    for i in 1:num\n        if i % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if num < 0\n        error(\"The argument must be positive\")\n    end\n   \
    \ if num == 0\n        return (1, 0)\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num /= 10\n \
    \   end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>", " \
    \   if num < 0 \n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n        even_count\
    \ = num - odd_count\n        return (even_count, odd_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string. \nIf the string\
    \ has less than 10 characters, return 0.", "    if num < 0 \n        error(\"\
    The input number should be positive\")\n    else if num == 0\n        (1, 1)\n\
    \    else\n        even, odd = 0, 0\n        while num != 0\n            even\
    \ = even + 1\n            num = num / 10\n        end\n        while num != 0\n\
    \            odd = odd + 1\n            num = num / 10\n        end\n        return\
    \ (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num\
    \ < 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += digit\n        else\n            odd += digit\n        end\n        num /=\
    \ 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer $n$\
    \ and returns the number of digits in $n$ that are even.", "    if num < 0 \n\
    \        error(\"The input must be positive\")\n    else if num == 0 \n      \
    \  return (1, 0)\n    else if num < 10 \n        return (1, 1)\n    else if num\
    \ < 100 \n        return (1, 2)\n    else if num < 1000 \n        return (1, 3)\n\
    \    else if num < 10000 \n        return (1, 4)\n    else if num < 100000 \n\
    \        return (1, 5)\n    else if num < 1000000 \n        return (1, 6)\n  \
    \  else if num < 10000000 \n        return (1, 7)\n    else if num < 100000000\
    \ \n        return (1, 8)\n    else if num < 1000000000 \n        return (1, 9)\n\
    \    else if num < 10000000000 \n        return (1, 10)\n    else if num < 100000000000\
    \ \n        return (1, 11)\n    else if num < 1000000000000 \n        return (1,\
    \ 12)\n    else if num < 10000000000000 \n        return (1, 13)\n    else if\
    \ num < 100000000000000 \n        return (1, 14)\n    else if num < 1000000000000000\
    \ \n        return (1, 15)\n    else if num < 10000000000000000 \n        return\
    \ (1, 16)\n    else if num < 100000000000000000 \n        return (1, 17)\n   \
    \ else if num < 1000000000000000000 \n        return (1, 18)\n    else if num\
    \ < 10000000000000000000 \n        return (1, 19)\n    else if num < 100000000000000000000\
    \ \n        return (1, 20)\n    else if num < 1000000000000000000000 \n      \
    \  return (1, 21)\n    else if num < 10000000000000000000000 \n        return\
    \ (1, 22)\n    else if num < 100000000000000000000000 \n        return (1, 23)\n\
    \    else if num < 1000000000000000000000000 \n        return (1, 24)\n    else\
    \ if num < 10000000000000000000000000 \n        return (1, 25)\n    else if num\
    \ < 100000000000000000000000000 \n        return (1, 26)\n    else if num < 1000000000000000000000000000\
    \ \n        return (1, 27)\n    else if num < 10000000000000000000000000000 \n\
    \        return (1, 28)\n    else if num < 100000000000000000000000000000 \n \
    \       return (1, 29)\n    else if num < 1000000000000000000000000000000 \n \
    \       return (1, 30)\n    else if num < 10000000000000000000000000000000 \n\
    \        return (1, 31)\n    else if num < 100000000000000000000000000000000 \n\
    \        return (1, 32)\n    else if num < 1000000000000000000000000000000000\
    \ \n        return (1, 33)\n    else if num < 10000000000000000000000000000000000\
    \ \n        return (1, 34)\n    else if num < 100000000000000000000000000000000000\
    \ \n        return (1, 35)\n    else if num < 1000000000000000000000000000000000000\
    \ \n        return (1, ", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in 1:num\n    \
    \    if i % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>\n\
    even_odd_count(-12)\n</cell>\n<code language=julia-1.4>\neven_odd_count(123)\n\
    </cell>\n<code language=julia-1.4>", "    if num < 0 \n        error(\"The input\
    \ must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ x in reverse(split(string(num), \"\")) \n        if x % 2 == 0 \n          \
    \  even += 1 \n        else \n            odd += 1 \n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    Invalid input\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        if\
    \ num % 2 == 0\n            even += 1\n        else\n            odd += 1\n  \
    \      end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer.", "    if num < 0\n        error(\"The\
    \ given number must be positive.\")\n    elseif num == 0\n        (1, 1)\n   \
    \ else\n        odd_count = sum(num % 2 == 0 for num in num::Int64)\n        even_count\
    \ = sum(num % 2 == 1 for num in num::Int64)\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n       \
    \ error(\"The given number must be positive.\")\n    end\n    even, odd = 0, 0\n\
    \    for i in reverse(split(string(num), \"\"))\n        if i == \"0\"\n     \
    \       even += 1\n        elseif i == \"1\"\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer and returns\
    \ the number of digits in that number.", "    if num < 0 \n        error(\"The\
    \ input number should be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64\
    \ = 0\n    for i in reverse(digits(num))\n        if i%2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a positive integer and returns the number of digits\
    \ in it.", "    if num < 0\n        error(\"The input number should be positive.\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer $n$\
    \ and returns the number of digits in $n$. \nFor example, if the input $n$ is\
    \ 123, then the output should be 3.", "    if num < 0 \n        error(\"The given\
    \ number must be positive\")\n    else if num == 0 \n        return (1, 0)\n \
    \   else if num < 10 \n        return (1, 1)\n    else \n        odd_count = 0\n\
    \        even_count = 0\n        \n        for n in num:\n            if n % 2\
    \ == 0 \n                even_count += 1\n            else \n                odd_count\
    \ += 1\n        return (even_count, odd_count)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    else\n     \
    \   even, odd = 0, 0\n        while num > 0\n            if num % 2 == 0\n   \
    \             even += 1\n                num -= 2\n            else\n        \
    \        odd += 1\n                num -= 1\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n \
    \       error(\"Invalid input\")\n    elseif num == 0\n        return (0, 0)\n\
    \    else\n        even = num % 2 == 0\n        odd = num % 2 != 0\n        return\
    \ (even + odd, even + odd)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in reverse(digits(num))\n        if i%2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ even_odd_count(-12)\n</cell>\n<code language=julia-1.3>\n@time even_odd_count(123)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a positive integer and\
    \ returns the number of digits in that integer.", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even, odd = 0, 0\n    while num >\
    \ 0\n        digit = num % 10\n        if digit % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a positive integer and returns the number of\
    \ digits in it.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    elseif num == 0 \n        return (1, 0)\n    elseif num < 10 \n       \
    \ return (0, 0)\n    elseif num < 100 \n        return (1, 1)\n    elseif num\
    \ < 1000 \n        return (1, 2)\n    elseif num < 10000 \n        return (2,\
    \ 1)\n    elseif num < 100000 \n        return (2, 2)\n    elseif num < 1000000\
    \ \n        return (3, 1)\n    elseif num < 10000000 \n        return (3, 2)\n\
    \    elseif num < 100000000 \n        return (4, 1)\n    elseif num < 1000000000\
    \ \n        return (4, 2)\n    elseif num < 10000000000 \n        return (5, 1)\n\
    \    elseif num < 100000000000 \n        return (5, 2)\n    elseif num < 1000000000000\
    \ \n        return (6, 1)\n    elseif num < 10000000000000 \n        return (6,\
    \ 2)\n    elseif num < 100000000000000 \n        return (7, 1)\n    elseif num\
    \ < 1000000000000000 \n        return (7, 2)\n    elseif num < 10000000000000000\
    \ \n        return (8, 1)\n    elseif num < 100000000000000000 \n        return\
    \ (8, 2)\n    elseif num < 1000000000000000000 \n        return (9, 1)\n    elseif\
    \ num < 10000000000000000000 \n        return (9, 2)\n    elseif num < 100000000000000000000\
    \ \n        return (10, 1)\n    elseif num < 1000000000000000000000 \n       \
    \ return (10, 2)\n    elseif num < 10000000000000000000000 \n        return (11,\
    \ 1)\n    elseif num < 100000000000000000000000 \n        return (11, 2)\n   \
    \ elseif num < 1000000000000000000000000 \n        return (12, 1)\n    elseif\
    \ num < 10000000000000000000000000 \n        return (12, 2)\n    elseif num <\
    \ 100000000000000000000000000 \n        return (13, 1)\n    elseif num < 1000000000000000000000000000\
    \ \n        return (13, 2)\n    elseif num < 10000000000000000000000000000 \n\
    \        return (14, 1)\n    elseif num < 100000000000000000000000000000 \n  \
    \      return (14, 2)\n    elseif num < 1000000000000000000000000000000 \n   \
    \     return (15, 1)\n    elseif num < 10000000000000000000000000000000 \n   \
    \     return (15, 2)\n    elseif num < 100000000000000000000000000000000 \n  \
    \      return (16, 1)\n    elseif num < 1000000000000000000000000000000000 \n\
    \        return (16, 2)\n    elseif num < 10000000000000000000000000000000000\
    \ \n        return (17, 1)\n    elseif num < 100000000000000000000000000000000000\
    \ \n        return (17, 2)\n    elseif num < 1000000000000000000000000000000000000\
    \ \n        return (18, 1)\n    elseif num < 10000000000000000000000000000000000000\
    \ \n        return (18, 2)\n    elseif num < 100000000000000000000000000000000000000\
    \ \n        return (19, 1)\n    elseif num < 1000000000000000000000000000000000000000\
    \ \n        return (19, 2)\n    elseif num", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even, odd = 0, 0\n    while num >\
    \ 0\n        digit = num % 10\n        if digit % 2 == 0\n            even +=\
    \ digit\n        else\n            odd += digit\n        end\n        num /= 10\n\
    \    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if num < 0\n        error(\"Invalid input\")\n    end\n    even = 0\n    odd\
    \ = 0\n    \n    for digit in num\n        if digit % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.4>", "    if num < 0\n        error(\"\
    The given number should be positive.\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num /= 10\n \
    \   end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.4>", " \
    \   if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit %\
    \ 2 == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.0>\n\
    @time even_odd_count(-12)\n</cell>\n<code language=julia-1.0>\n@time even_odd_count(123)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The given number should be\
    \ positive\")\n    elseif num == 0\n        (1, 1)\n    else\n        even, odd\
    \ = divrem(num, 10)\n        (even_odd_count(even), even_odd_count(odd))\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The input number should be positive\")\n    end\n    even = num % 2 == 0\n   \
    \ odd = num % 2 != 0\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for i in reverse(digits(num))\n\
    \        if i%2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0 \n        error(\"The given number must be positive\")\n    elseif\
    \ num == 0\n        (1, 1)\n    else\n        odd_count = sum(num % 2 == 0 for\
    \ _ in 1:ceil(Int64, num/2))\n        even_count = sum(num % 2 == 1 for _ in 1:ceil(Int64,\
    \ num/2))\n        return (even_count, odd_count)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer. \nFor negative numbers, return -1.", "    if num <\
    \ 0\n        error(\"The given number cannot be negative.\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer and returns the number of\
    \ digits in that number.", "    if num < 0 \n        error(\"The given number\
    \ must be positive\")\n    else if num == 0\n        (1, 1)\n    else\n      \
    \  even = num % 2 == 0\n        odd = num % 2 != 0\n        return (even, odd)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of digits in an integer.", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ i in 1:num\n        if i % 2 == 0\n            even += 1\n        else\n   \
    \         odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer\
    \ and returns the sum of the digits of that integer.", "    if num < 0\n     \
    \   error(\"The input must be positive\")\n    else\n        even = num % 2 ==\
    \ 0\n        odd = num % 2 != 0\n        return (even, odd)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer and returns the number\
    \ of digits in that integer.", "    if num < 0\n        error(\"Invalid input\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    \n    for n in num\n\
    \        if n % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a positive integer and returns the sum of its digits. \nThe function should\
    \ raise an error if the input is not positive.", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even, odd = 0, 0\n    for i in reverse(digits(num))\n\
    \        if i%2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input number should be positive\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.4>", "    if num < 0 \n        error(\"The input must be\
    \ positive\")\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count\
    \ = sum(num % 2 == 0 for _ in num::Int64)\n        even_count = sum(num % 2 ==\
    \ 1 for _ in num::Int64)\n        return (even_count, odd_count)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer and returns the number of digits in that number.",
  "    if num < 0 \n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        (1, 1)\n    else\n        odd_count = sum(num % 2 == 0 for num\
    \ in num::Int64)\n        even_count = sum(num % 2 == 1 for num in num::Int64)\n\
    \        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The given number should be positive\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n          \
    \  even += 1\n        else\n            odd += 1\n        end\n        num /=\
    \ 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a given number is\
    \ a palindrome. Recall that a palindrome is a number that reads the same backward\
    \ as forward.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n            num /= 2\n        else\n            odd +=\
    \ 1\n            num /= 2\n        end\n    end\n    return even, odd\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer and returns\
    \ the sum of the squares of the digits of that integer.", "    if num < 0\n  \
    \      error(\"The input must be positive\")\n    end\n    even, odd = 0, 0\n\
    \    while num != 0\n        if num % 2 == 0\n            even += 1\n        \
    \    num /= 2\n        else\n            odd += 1\n            num /= 2\n    \
    \    end\n    end\n    return (even, odd)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an integer and returns the sum of the squares of the\
    \ digits of that integer.", "    if num < 0 \n        error(\"The input number\
    \ must be positive\")\n    else if num == 0\n        (1, 1)\n    else if num %\
    \ 2 == 0\n        (2, 1)\n    else\n        (1, num % 2)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer and returns\
    \ the number of digits in that integer.", "    if num < 0 \n        error(\"The\
    \ argument must be positive\")\n    else if num == 0\n        (1, 1)\n    else\n\
    \        odd_count = 0\n        even_count = 0\n        \n        for n in num\n\
    \            if n % 2 == 0\n                even_count += 1\n            else\n\
    \                odd_count += 1\n        \n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even, odd = 0, 0\n    for x in num\n\
    \        if x % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for x in num\n        if x % 2 == 0\n         \
    \   even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a number as input and returns the number of digits\
    \ in that number.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n\
    \        even_count = num - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of words in the string.", "    if num < 0 \n        error(\"\
    The argument must be positive\")\n    else if num == 0\n        (1, 1)\n    else\n\
    \        odd_count = 0\n        even_count = 0\n        digits = num % 10\n  \
    \      while digits > 0\n            if digits % 2 == 0\n                even_count\
    \ += 1\n            else\n                odd_count += 1\n            digits /=\
    \ 10\n        return (odd_count, even_count)\n    end\nend\n</cell>\n<code language=julia-1.1>",
  "    if num < 0\n        error(\"The given number must be positive\")\n    end\n\
    \    even::Int64 = 0\n    odd::Int64 = 0\n    for x in num\n        if x % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>", " \
    \   if num < 0\n        error(\"The input must be positive\")\n    elseif num\
    \ == 0\n        return (1, 0)\n    elseif num == 1\n        return (0, 1)\n  \
    \  else\n        even::Int64 = 0\n        odd::Int64 = 0\n        for n in num\n\
    \            if n % 2 == 0\n                even += 1\n            else\n    \
    \            odd += 1\n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n    \
    \    digit = num % 10\n        if digit % 2 == 0\n            even += 1\n    \
    \    else\n            odd += 1\n        end\n        num /= 10\n    end\n   \
    \ return even, odd\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n\
    \        error(\"The argument must be positive\")\n    end\n    even::Int64 =\
    \ 0\n    odd::Int64 = 0\n    for n in num\n        if n % 2 == 0\n           \
    \ even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ even numbers and the sum of the odd numbers. If the list is empty, return (0,\
    \ 0). Do not use loops.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n            num /= 2\n        else\n            odd +=\
    \ 1\n            num /= 2\n        end\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.3>", "    if num < 0\n        error(\"The given number\
    \ must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ x in num\n        if x % 2 == 0\n            even += 1\n        else\n     \
    \       odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer and returns the number of digits in that integer.", "   \
    \ if num < 0\n        error(\"The given number must be positive\")\n    end\n\
    \    even::Int64 = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if i % 2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if num < 0 \n        error(\"The argument must be positive\")\n    else if\
    \ num == 0 \n        (1, 1)\n    else \n        odd_count = num % 2 \n       \
    \ even_count = num - odd_count\n        return (odd_count, even_count)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n    \
    \    if num % 2 == 0\n            even += 1\n        else\n            odd +=\
    \ 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of vowels present in the string.", "    if num\
    \ < 0\n        error(\"The given number must be positive.\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.0>", "    if num <\
    \ 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += 1\n        else\n            odd += 1\n        end\n        num /= 10\n \
    \   end\n    return even, odd\nend\n</cell>\n<code language=julia-1.0>", "   \
    \ if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        odd_count = sum(num % 2 == 0 for num in\
    \ num::Int64)\n        even_count = sum(num % 2 != 0 for num in num::Int64)\n\
    \        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer $n$\
    \ and returns the number of digits in $n$. \nThe function should return $n$ if\
    \ $n$ is 0, 1 if the number is odd, and 2 if the number is even.", "    if num\
    \ < 0\n        error(\"The given number must be positive.\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if i % 2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.3>", "    if num <\
    \ 0\n        error(\"The input must be positive\")\n    end\n    even::Int64 =\
    \ 0\n    odd::Int64 = 0\n    for x in num\n        if x % 2 == 0\n           \
    \ even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a given number. \nThe factorial\
    \ of a number $n$ is defined as:", "    if num < 0 \n        error(\"The input\
    \ must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ x in reverse(digits(num))\n        if x % 2 == 0\n            even += 1\n  \
    \      else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a positive integer and returns the number of digits in that number.", "    if\
    \ num < 0\n        error(\"The input must be positive\")\n    end\n    even, odd\
    \ = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit % 2 ==\
    \ 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.1>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a number as input and\
    \ returns the number of digits in that number. \nThe function should work for\
    \ integers and floating point numbers. \nThe function should work for negative\
    \ numbers as well. \nThe function should work for integers greater than or equal\
    \ to 0.", "    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.3>", "    if num < 0 \n        error(\"The input must be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n \
    \       while num != 0\n            digit = num % 10\n            if digit % 2\
    \ == 0\n                even += digit\n            else\n                odd +=\
    \ digit\n            end\n            num /= 10\n        end\n        return (even,\
    \ odd)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of characters in the string.", "    if num <\
    \ 0 \n        error(\"The input number must be positive.\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n        while num > 0\n\
    \            if num % 2 == 0\n                even += 1\n                num /=\
    \ 2\n            else\n                odd += 1\n                num /= 2\n  \
    \      end\n        return (even, odd)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 1\nWrite a function that takes an integer and returns the sum of the digits\
    \ of that integer. \nThe sum of the digits should be less than or equal to 9.\
    \ \nIf the sum of the digits is greater than 9, then it should return the sum\
    \ of the digits of the number modulo 10.", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    end\n    if num == 0\n        return (1, 0)\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The input number\
    \ must be positive\")\n    end\n    even, odd = 0, 0\n    for i in 1:num\n   \
    \     if i % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even::Int64\
    \ = 0\n    odd::Int64 = 0\n    for x in num\n        if x % 2 == 0\n         \
    \   even += 1\n        else\n            odd += 1\n        end\n    end\n    return\
    \ (even, odd)\nend\n</cell>\n<code language=julia-1.0>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ it.", "    if num < 0\n        error(\"The input must be positive\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n          \
    \  even += 1\n        else\n            odd += 1\n        end\n        num /=\
    \ 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer.", "    if num < 0\n        error(\"The\
    \ argument must be positive\")\n    end\n    even, odd = 0, 0\n    while num >\
    \ 0\n        if num % 2 == 0\n            even += 1\n        else\n          \
    \  odd += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a number as input and returns the number of digits in that number.", "    if\
    \ num < 0\n        error(\"The input number should be positive\")\n    end\n \
    \   even = num % 2 == 0\n    odd = num % 2 != 0\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The input must be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num /= 10\n    end\n    return even,\
    \ odd\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 =\
    \ 0\n    for n in num\n        if n % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n \
    \       error(\"The given number must be positive.\")\n    end\n    even, odd\
    \ = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even += 1\n\
    \        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0\n        error(\"The given number must be positive.\")\n    end\n\
    \    even::Int64 = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if i % 2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.5>\neven_odd_count(123)\n</cell>\n<text>\nExercise\n\
    Write a function that returns the number of digits in an integer.", "    if num\
    \ < 0\n        error(\"The input must be positive\")\n    elseif num == 0\n  \
    \      return (1, 0)\n    elseif num % 2 == 0\n        return (1, num/2)\n   \
    \ else\n        return (num/2, num%2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer.", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n\
    \        digit = num % 10\n        if digit % 2 == 0\n            even += digit\n\
    \        else\n            odd += digit\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0\n        error(\"The input must be positive\")\n    elseif num == 0\n    \
    \    (1, 1)\n    else\n        even, odd = 0, 0\n        for n in num\n      \
    \      if n % 2 == 0\n                even += 1\n            else\n          \
    \      odd += 1\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if num < 0 \n        error(\"The given number must be positive.\")\n    end\n\
    \    even = 0\n    odd = 0\n    for x in num\n        if x % 2 == 0\n        \
    \    even += 1\n        else\n            odd += 1\n        end\n    end\n   \
    \ return even, odd\nend\n</cell>\n<code language=julia-1.4>", "    if num < 0\n\
    \        error(\"The argument must be positive\")\n    elseif num == 0\n     \
    \   (1, 1)\n    else\n        odd_count = num % 10\n        even_count = num -\
    \ odd_count\n        return (odd_count, even_count)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if num < 0\n        error(\"The given number should\
    \ be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        if\
    \ num % 2 == 0\n            even += 1\n        else\n            odd += 1\n  \
    \      end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for x in num\n      \
    \  if x % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>",
  "    if num < 0\n        error(\"The given number should be positive\")\n    end\n\
    \    even::Int64 = 0\n    odd::Int64 = 0\n    for i in 1:num\n        if i % 2\
    \ == 0\n            even += 1\n        else\n            odd += 1\n        end\n\
    \    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ even_odd_count(-12)\n</cell>\n<code language=julia-1.3>\n@time even_odd_count(123)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as:", "    if num <\
    \ 0\n        error(\"The argument must be positive.\")\n    elseif num == 0\n\
    \        return (0, 0)\n    else\n        even::Int64 = 0\n        odd::Int64\
    \ = 0\n        \n        while num > 0\n            if num % 2 == 0\n        \
    \        even += 1\n            else\n                odd += 1\n            end\n\
    \            num /= 10\n        end\n        return (even, odd)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert\
    \ even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of digits in an integer. \nThe function should work\
    \ for integers greater than or equal to 0.", "    if num < 0\n        error(\"\
    The input must be positive\")\n    end\n    even = num % 2 == 0\n    odd = num\
    \ % 2 != 0\n    return even, odd\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer and returns the number\
    \ of digits in it.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n\
    \        even_count = num - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    if num < 0 \n       \
    \ error(\"The input must be positive\")\n    end\n    even = 0\n    odd = 0\n\
    \    while num > 0\n        if num % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"\
    The input must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 =\
    \ 0\n    for x in num\n        if x % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of characters in that string.", "    if num < 0\n        error(\"Invalid input\"\
    )\n    end\n    even = num % 2 == 0\n    odd = num % 2 != 0\n    return even,\
    \ odd\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12) ==\
    \ (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a positive integer and returns the sum of the digits\
    \ of that integer.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    else\n        even_odd_count_helper(num)\n    end\nend", "    if num <\
    \ 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n    while\
    \ num > 0\n        digit = num % 10\n        if digit % 2 == 0\n            even\
    \ += digit\n        else\n            odd += digit\n        end\n        num /=\
    \ 10\n    end\n    return even, odd\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes an integer and returns the sum of the digits of that integer.\
    \ \nFor example if your input is 123, the function should return 1 + 2 + 3 = 6.",
  "    if num < 0\n        error(\"The given number should be positive\")\n    end\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.3>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.3>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if num < 0\n        error(\"The input\
    \ must be positive\")\n    end\n    even, odd = 0, 0\n    for x in num\n     \
    \   if x % 2 == 0\n            even += 1\n        else\n            odd += 1\n\
    \        end\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer and\
    \ returns the sum of the digits of that integer. \nFor example, if the input is\
    \ 123, the function should return 1 + 2 + 3 = 6.", "    if num < 0 \n        error(\"\
    The input must be positive\")\n    else if num == 0\n        (1, 1)\n    else\
    \ if num % 2 == 0\n        (even_odd_count(num / 2), 1)\n    else\n        (even_odd_count(num\
    \ / 2) + 1, even_odd_count(num / 2))\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an integer and returns\
    \ the number of digits in that integer.", "    if num < 0\n        error(\"The\
    \ given number must be positive.\")\n    end\n    even::Int64 = 0\n    odd::Int64\
    \ = 0\n    for n in num\n        if n % 2 == 0\n            even += 1\n      \
    \  else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.3>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n \
    \       odd_count = count_digits(num)\n        even_count = odd_count - count_digits(num)\
    \ % 2\n        return (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of digits\
    \ in an integer.", "    if num < 0 \n        error(\"The input must be positive\"\
    )\n    else if num == 0\n        (1, 1)\n    else\n        odd_count = num % 10\n\
    \        even_count = num - odd_count\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an integer and returns the number of digits in\
    \ that integer.", "    if num < 0\n        error(\"The given number should be\
    \ positive.\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        digit\
    \ = num % 10\n        if digit % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n        num /= 10\n    end\n    return (even,\
    \ odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"\
    The input must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n\
    \        even, odd = 0, 0\n        for n in num\n            if n % 2 == 0\n \
    \               even += 1\n            else\n                odd += 1\n      \
    \  return (even, odd)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes an integer and returns the sum of the squares of the digits of that\
    \ integer.", "    if num < 0\n        error(\"The given number should be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num != 0\n        digit = num % 10\n\
    \        if digit % 2 == 0\n            even += 1\n        else\n            odd\
    \ += 1\n        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.5>\neven_odd_count(-12)\n</cell>\n<code language=julia-1.5>\n\
    even_odd_count(123)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of digits in an integer.", "    if num < 0\n        error(\"The input\
    \ number must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n\
    \        even, odd = 0, 0\n        while num > 0\n            digit = num % 10\n\
    \            if digit % 2 == 0\n                even += digit\n            else\n\
    \                odd += digit\n            end\n            num /= 10\n      \
    \  end\n        return (even, odd)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a positive integer $n$\
    \ and returns the number of digits in $n$. \nThe function should work for negative\
    \ integers as well.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    if num == 0\n        return (1, 0)\n    even::Int64 = 0\n    odd::Int64\
    \ = 0\n    while num > 0\n        if num % 2 == 0\n            even += 1\n   \
    \     else\n            odd += 1\n        end\n        num /= 10\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.", "    if num < 0 \n        error(\"\
    The input must be positive\")\n    else if num == 0\n        (1, 1)\n    else\n\
    \        odd_count = 0\n        even_count = 0\n        \n        for i in 1:num\n\
    \            if i % 2 == 0\n                even_count += 1\n            else\n\
    \                odd_count += 1\n        end\n        return (even_count, odd_count)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"\
    The given number must be positive\")\n    elseif num == 0\n        (1, 1)\n  \
    \  else\n        odd_count = 0\n        even_count = 0\n        digit = num %\
    \ 10\n        while digit > 0\n            if digit % 2 == 0\n               \
    \ even_count += 1\n            else\n                odd_count += 1\n        \
    \    digit = digit / 10\n        return (odd_count, even_count)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>", "    if num < 0\n        error(\"The given\
    \ number must be positive\")\n    end\n    if num == 0\n        return (1, 0)\n\
    \    even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if\
    \ digit % 2 == 0\n            even += digit\n        else\n            odd +=\
    \ digit\n        end\n        num /= 10\n    end\n    return (even, odd)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if num < 0 \n        error(\"The given\
    \ number should be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n\
    \        odd_count = num % 2 \n        even_count = num - odd_count\n        return\
    \ (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The input must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        odd_count = sum(num % 2 == 0 for num in\
    \ nums)\n        even_count = sum(num % 2 == 1 for num in nums)\n        return\
    \ (even_count, odd_count)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes an integer and returns the number of digits in that integer.",
  "    if num < 0\n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    for i in reverse(digits(num))\n        if i%2 == 0\n       \
    \     even += 1\n        else\n            odd += 1\n        end\n    end\n  \
    \  return even, odd\nend\n</cell>\n<code language=julia-1.3>\neven_odd_count(-12)\n\
    </cell>\n<code language=julia-1.3>\neven_odd_count(123)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of digits in an integer.", "   \
    \ if num < 0 \n        error(\"The input must be positive\")\n    end\n    even,\
    \ odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n            even +=\
    \ 1\n        else\n            odd += 1\n        end\n        num /= 10\n    end\n\
    \    return even, odd\nend\n</cell>\n<code language=julia-1.5>\n@assert even_odd_count(-12)\
    \ == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a positive integer and returns the number of\
    \ digits in that integer.", "    if num < 0\n        error(\"The given number\
    \ must be positive.\")\n    elseif num == 0\n        (1, 1)\n    else\n      \
    \  odd_count = num % 10\n        even_count = num / 10 - odd_count\n        return\
    \ (even_count, odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"Invalid input\")\n    end\n    even, odd = 0, 0\n\
    \    while num > 0\n        digit = num % 10\n        if digit % 2 == 0\n    \
    \        even += digit\n        else\n            odd += digit\n        end\n\
    \        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123) == (1, 2)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of an integer.", "    if num < 0\n        error(\"The input number should be\
    \ positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num\
    \ % 2 == 0\n            even += 1\n        else\n            odd += 1\n      \
    \  end\n        num /= 10\n    end\n    return (even, odd)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer.", "    if num < 0\n        error(\"The given number\
    \ must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ x in num\n        if x % 2 == 0\n            even += 1\n        else\n     \
    \       odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if num < 0\n        error(\"The given number\
    \ must be positive\")\n    elseif num == 0\n        (1, 1)\n    else\n       \
    \ odd_count = num % 2\n        even_count = num - odd_count\n        return (even_count,\
    \ odd_count)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0 \n        error(\"The given number must be positive\")\n    elseif num ==\
    \ 0\n        (1, 1)\n    else\n        even, odd = 0, 0\n        while num > 0\n\
    \            digit = num % 10\n            if digit % 2 == 0\n               \
    \ even += 1\n            else\n                odd += 1\n            end\n   \
    \         num /= 10\n        return (even, odd)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if num < 0 \n        error(\"The argument must be\
    \ positive\")\n    elseif num == 0\n        (1, 1)\n    else\n        odd_count\
    \ = sum(num % 2 == 0 for num in num::Int64)\n        even_count = sum(num % 2\
    \ == 1 for num in num::Int64)\n        return (even_count, odd_count)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number\
    \ as input and returns the number of digits in that number.", "    if num < 0\
    \ \n        error(\"The input must be positive\")\n    else if num == 0\n    \
    \    (1, 1)\n    else\n        odd_count = num % 10\n        even_count = num\
    \ - odd_count\n        return (even_count, odd_count)\nend\n</cell>\n<code language=julia-1.5>",
  "    if num < 0\n        error(\"The argument must be positive\")\n    end\n   \
    \ even, odd = 0, 0\n    while num > 0\n        digit = num % 10\n        if digit\
    \ % 2 == 0\n            even += digit\n        else\n            odd += digit\n\
    \        end\n        num /= 10\n    end\n    return even, odd\nend\n</cell>\n\
    <code language=julia-1.3>", "    if num < 0\n        error(\"The given number\
    \ must be positive.\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n   \
    \ for i in 1:num\n        if i % 2 == 0\n            even += 1\n        else\n\
    \            odd += 1\n        end\n    end\n    return (even, odd)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert even_odd_count(-12) == (1, 1)\n@assert even_odd_count(123)\
    \ == (1, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a number\
    \ as input and returns the number of digits in that number.", "    if num < 0\n\
    \        error(\"The given number must be positive\")\n    elseif num == 0\n \
    \       (1, 1)\n    else\n        odd_count = num % 10\n        even_count = num\
    \ - odd_count\n        return (odd_count, even_count)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>", "    if num < 0 \n        error(\"The given number\
    \ must be positive\")\n    end\n    even::Int64 = 0\n    odd::Int64 = 0\n    for\
    \ i in reverse(digits(num))\n        if i%2 == 0\n            even += 1\n    \
    \    else\n            odd += 1\n        end\n    end\n    return (even, odd)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if num < 0\n        error(\"The\
    \ input must be positive\")\n    end\n    even, odd = 0, 0\n    while num > 0\n\
    \        if num % 2 == 0\n            even += 1\n            num /= 2\n      \
    \  else\n            odd += 1\n            num /= 2\n        end\n    end\n  \
    \  return (even, odd)\nend\n</cell>\n<code language=julia-1.5>", "    if num <\
    \ 0\n        error(\"The argument must be positive\")\n    elseif num == 0\n \
    \       return (0, 0)\n    else\n        even = num % 2 == 0\n        odd = num\
    \ % 2 != 0\n        return (even, odd)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a number as input and returns the number of digits\
    \ in that number.", "    if num < 0\n        error(\"The input must be positive\"\
    )\n    end\n    even, odd = 0, 0\n    while num > 0\n        if num % 2 == 0\n\
    \            even += 1\n        else\n            odd += 1\n        end\n    \
    \    num /= 10\n    end\n    return even, odd\nend\n</cell>\n<code language=julia-1.3>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
