name: HumanEval_5_intersperse
language: jl
prompt: "\"\"\" Insert a number 'delimeter' between every two consecutive elements\
  \ of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1,\
  \ 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\nfunction intersperse(numbers::Vector{Int64},\
  \ delimeter::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = intersperse;\n\t@test(candidate(Vector{Int64}([]),\
  \ 7) == Vector{Int64}([]))\n\t@test(candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3,\
  \ 8, 2])\n\t@test(candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2])\nend\n"
completions: ["    if length(numbers) < 2\n        return numbers\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    ", "    if\
    \ length(numbers) < 2\n        return numbers\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n", "    numbers = numbers[:]\n    numbers = numbers[2:end-1]\
    \ .+ [delimeter] .+ numbers[2:end]\n    return numbers\nend\n</cell>\n<code language=julia-1.4>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers. \nFor\
    \ example, \n$$ f([1,2,3]) = 12 + 16 + 9 + 25 = 25$$", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[", "    \n    numbers =\
    \ numbers[:]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    ", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert intersperse([1,2,3], 4) == [1, 4, 2, 4, 3]\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns a list containing all the numbers from 1 to\
    \ n except the number n.", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter\n    numbers\nend\n</cell>\n<text>\nExercise 2: Implement the function\
    \ intersperse!", "    if length(numbers) < 2\n        return numbers\n    \n \
    \   numbers_copy = copy(numbers)\n    \n    numbers_copy[end] = delimeter\n  \
    \  \n    return numbers_copy\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an input list of\
    \ numbers and returns a new list where each element is the sum of the input list\
    \ except the element at position i.", "    if length(numbers) == 0\n        numbers\n\
    \    elseif length(numbers) == 1\n        numbers[1]\n    else\n        numbers[1]\
    \ + delimeter * intersperse(numbers[2:end], delimeter)\n    end\nend\n</code>\n\
    <|/ a tags=julia,list |>\n<| c |>\nThe `intersperse` function does not work as\
    \ intended for an empty list. `intersperse([], 4)` returns `[4]` instead of `[]`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code accordingly.\n\
    <|/ c |>\n<| a dscore=2 |>\nI came up with this solution:\n<code>", "    if length(numbers)\
    \ == 0 \n        return numbers \n    else \n        numbers = numbers[2:end-1]\
    \ \n        numbers = [numbers[1], delimeter, numbers...] \n        return numbers\
    \ \n    end\nend\n</code>\n<|/ a |>\n<| a tags=julia |>\nI wrote a package for\
    \ this. It has two functions: intersperse and intersperse!.\n<code>\nusing Intersperse",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n  \
    \  numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 4)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of elements\
    \ in a list that satisfy a certain condition. For example, how many elements are\
    \ greater than 5?", "    \n    if length(numbers) < 2\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]",
  "    if length(numbers) < delimeter \n        numbers = numbers[:]\n    end\n  \
    \  \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = numbers[start:end]\n\
    \    \n    numbers = numbers[start:end]\n    \n    numbers = ", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    ", "    if length(numbers) < delimeter\
    \ \n        return numbers \n    else \n        numbers[end+1:end+delimeter+1]\
    \ = numbers[end+1:end+delimeter+1] .+ delimeter \n        return numbers[end+1:end+delimeter+1]\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI like using\
    \ map for these kinds of things:\n<code>\njulia> map(x -> x + 1, [1, 2, 3])\n\
    3-element Array{Int64,1}:\n 2\n 3\n 4", "    \n    numbers = numbers[:]\n    \n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end]\n    \n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end]\n    \n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end]\n    \n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end]\n    \n    numbers\
    \ = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end]\n    \n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end]\n    \n    numbers = numbers[2:end-1]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end]\n    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end]\n    \n\
    \    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter\n   \
    \ return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2,\
    \ 3], 4)\n</cell>\n<text>\nExercise 2.2\nWrite a function that takes a vector\
    \ and returns a vector where each element is the sum of the elements at its two\
    \ positions in the original vector. For example, if the input vector is [1,2,3],\
    \ the output vector should be [3, 6, 9].", "    if length(numbers) == 0\n    \
    \    return numbers\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[", "    numbers = numbers[:]\n    numbers = numbers[2:end-1]\
    \ .+ [delimeter] .+ numbers[2:end]\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector. For example, if the input vector is [4, 6, 9, 12], then the output\
    \ should be 42.", "    if length(numbers) == 0\n        numbers\n    else\n  \
    \      numbers[2:end-1] .+ [delimeter] .+ numbers[2:end-1]\n    end\nend\n</code>\n\
    <|/ a tags=julia,list |>\n<| a dscore=2 |>\nI like to use intersperse for this:\n\
    <code>\njulia> intersperse([1,2,3], 4)\n[1, 4, 2, 4]\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a dscore=2 |>\nI like to use intersperse for this:\n<code>\njulia> intersperse([1,2,3],\
    \ 4)\n[1, 4, 2, 4]\n</code>\n<|/ a tags=julia,list |>\n<| a dscore=1 |>\nI like\
    \ to use intersperse for this:\n<code>\njulia> intersperse([1,2,3], 4)\n[1, 4,\
    \ 2, 4]\n</code>\n<|/ a tags=julia,list |>\n<| a dscore=1 |>\nI like to use intersperse\
    \ for this:\n<code>\njulia> intersperse([1,2,3], 4)\n[1, 4, 2, 4]\n</code>\n<|/\
    \ a tags=julia,list |>\n<| a tags=julia,list |>\nI like to use intersperse for\
    \ this:\n<code>\njulia> intersperse([1,2,3], 4)\n[1, 4, 2, 4]\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=1 |>\nI like to use intersperse for this:\n<code>\n\
    julia> intersperse([1,2,3], 4)\n[1, 4, 2, 4]\n</code>\n<|/ a tags=julia,list |>\n\
    <| a tags=julia,list |>\nI like to use intersperse for this:\n<code>\njulia> intersperse([1,2,3],\
    \ 4)\n[1, 4, 2, 4]\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,list |>\nI like\
    \ to use intersperse for this:\n<code>\njulia> intersperse([1,2,3], 4)\n[1, 4,\
    \ 2, 4]\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,list |>\nI like to use intersperse\
    \ for this:\n<code>\njulia> intersperse([1,2,3], 4)\n[1, 4, 2, 4]\n</code>\n<|/\
    \ a dscore=1 |>\n<| a tags=julia,list |>\nI like to use intersperse for this:\n\
    <code>\njulia> intersperse([1,2,3], 4)\n[1, 4, 2, 4]\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 ", "    numbers = numbers[:]\n    numbers = numbers[2:end-1].*(delimeter,\
    \ numbers[2:end-1])\n    numbers = numbers[2:end]\n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(numbers) < delimeter\n        numbers\n\
    \    else\n        numbers[1 : length(numbers)-delimeter+1]\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nA simple solution:\n<code>", "    numbers\
    \ = numbers[:]\n    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n\
    \    return numbers\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter\n   \
    \ return numbers\nend\n</cell>\n<code language=julia-1.5>\n@assert intersperse([1,\
    \ 2, 3], 4) == [1, 4, 2, 4, 3]\n@assert intersperse([1, 2, 3], 5) == [1, 4, 2,\
    \ 3, 4, 5]\n@assert intersperse([1, 2, 3], 6) == [1, 4, 2, 3, 4, 5, 6]\n@assert\
    \ intersperse([1, 2, 3], 7) == [1, 4, 2, 3, 4, 5, 6, 7]\n@assert intersperse([1,\
    \ 2, 3], 8) == [1, 4, 2, 3, 4, 5, 6, 7, 8]\n@assert intersperse([1, 2, 3], 9)\
    \ == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9]\n@assert intersperse([1, 2, 3], 10) == [1,\
    \ 4, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n@assert intersperse([1, 2, 3], 11) == [1, 4,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n@assert intersperse([1, 2, 3], 12) == [1, 4,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n@assert intersperse([1, 2, 3], 13) == [1,\
    \ 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n@assert intersperse([1, 2, 3], 14)\
    \ == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n@assert intersperse([1,\
    \ 2, 3], 15) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n@assert\
    \ intersperse([1, 2, 3], 16) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16]\n@assert intersperse([1, 2, 3], 17) == [1, 4, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n@assert intersperse([1, 2, 3], 18) ==\
    \ [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n@assert\
    \ intersperse([1, 2, 3], 19) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,\
    \ 14, 15, 16, 17, 18, 19]\n@assert intersperse([1, 2, 3], 20) == [1, 4, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n@assert intersperse([1,\
    \ 2, 3], 21) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21]\n@assert intersperse([1, 2, 3], 22) == [1, 4, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n@assert intersperse([1,\
    \ 2, 3], 23) == [1, 4, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21, 22, 23]\n@assert intersperse([1, 2, 3], 24) == [1, 4, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n\
    @assert intersperse([1, 2, 3], 25) == ", "    if length(numbers) < 2\n       \
    \ return numbers\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = [delimeter, numbers...]\n    return numbers\nend", "    if length(numbers)\
    \ < 2\n        return numbers\n    else\n        numbers[2:end] = numbers[2:end]\
    \ + delimeter * [numbers[1]]\n        return numbers[2:end]\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nA simple recursive function can do this:\n\
    <code>", "    if length(numbers) < 2\n        return numbers\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  ", "    if length(numbers) == 0\n        return numbers\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    ", "    if length(numbers) < delimeter\n        return numbers\n  \
    \  else\n        numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[2:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[2:end", "    numbers = numbers[:]\n    numbers = numbers[2:end-1]\
    \ .+ [delimeter] .+ numbers[2:end-1]\n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    numbers = numbers[:]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n   \
    \ numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n", "    if length(numbers) < 2\n  \
    \      return numbers\n    \n    numbers_copy = copy(numbers)\n    numbers_copy[end]\
    \ = numbers_copy[end] + delimeter\n    \n    return numbers_copy\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert intersperse([1,2,3], 4) == [1, 4, 2, 4, 3]\n\
    @assert intersperse([1,2,3], 2) == [1, 3, 2, 4, 3]\n@assert intersperse([1,2,3],\
    \ 1) == [1, 3, 2, 4]\n@assert intersperse([1,2,3], 0) == [1, 2, 3, 4]\n@assert\
    \ intersperse([1,2,3], -1) == [1, 2, 3, 4]\n@assert intersperse([1,2,3], -2) ==\
    \ [1, 3, 2, 4]\n@assert intersperse([1,2,3], -3) == [1, 4, 2, 4]\n@assert intersperse([1,2,3],\
    \ -4) == [1, 4, 2, 3]\n@assert intersperse([1,2,3], -5) == [1, 4, 2, 3]\n@assert\
    \ intersperse([1,2,3], -6) == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -7)\
    \ == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -8) == [1, 4, 2, 3, 4]\n@assert\
    \ intersperse([1,2,3], -9) == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -10)\
    \ == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -11) == [1, 4, 2, 3, 4]\n@assert\
    \ intersperse([1,2,3], -12) == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -13)\
    \ == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -14) == [1, 4, 2, 3, 4]\n@assert\
    \ intersperse([1,2,3], -15) == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -16)\
    \ == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -17) == [1, 4, 2, 3, 4]\n@assert\
    \ intersperse([1,2,3], -18) == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -19)\
    \ == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -20) == [1, 4, 2, 3, 4]\n@assert\
    \ intersperse([1,2,3], -21) == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -22)\
    \ == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -23) == [1, 4, 2, 3, 4]\n@assert\
    \ intersperse([1,2,3], -24) == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -25)\
    \ == [1, 4, 2, 3, 4]\n@assert intersperse([1,2,3], -26) == [1, 4, 2, 3, 4]\n@assert\
    \ intersperse([1,2,3], -27", "    if length(numbers) == 0\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    ", "    numbers = numbers[:]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    ", "    \n\
    \    numbers = numbers[:]\n    \n    if length(numbers) <= 1\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers) <=\
    \ 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n   \
    \ \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n    numbers\
    \ = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers) <=\
    \ 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n   \
    \ \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n    numbers\
    \ = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers) <=\
    \ 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n   \
    \ \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n    numbers\
    \ = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers) <=\
    \ 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n   \
    \ \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n    numbers\
    \ = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers) <=\
    \ 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n   \
    \ \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n    numbers\
    \ = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers) <=\
    \ 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n   \
    \ \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n    numbers\
    \ = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers) <=\
    \ 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n   \
    \ \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n    numbers\
    \ = numbers[2:end]", "    \n    numbers = numbers[:]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    ", "    if\
    \ length(numbers) < delimeter\n        return numbers\n    else\n        numbers[end+1:end+delimeter]\
    \ = numbers[end+1:end+delimeter]\n        numbers[end+delimeter] = delimeter\n\
    \        return numbers\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nI like this\
    \ solution, but I wonder why you chose `Int64` over `Int` for the `delimeter`\
    \ argument. `Int` would work just as well, right?\n<|/ c |>\n<| c |>\nYes, `Int`\
    \ would work just as well. `Int64` is just an alias for `Int` with more precision.\n\
    <|/ c |>\n<| a dscore=2 |>\nI like using zip:\n<code>\njulia> [x for (x,y) in\
    \ zip(numbers, numbers[1:end-1]) if (x != y)]\n1-element Array{Int64,1}:\n 2\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n<code>\njulia> numbers = [1,2,3,4,5,6,7,8,9,10]\n\
    10-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n 10", "    if\
    \ length(numbers) == 0 \n        return numbers \n    else \n        numbers =\
    \ numbers[2:end-1] \n        numbers = [numbers[1], delimeter, numbers...] \n\
    \        return intersperse(numbers, delimeter+1) \nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| a |>\n<code>", "    if length(numbers) < 2\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    ", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] .+ delimeter\n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nThe function\
    \ intersperse is defined in the file src/intersperse.jl.", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise\
    \ 2.2\nWrite a function that takes a vector and returns a new vector where each\
    \ element is the sum of the previous two elements.", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(numbers) == 0 \n        return numbers\
    \ \n    else \n        numbers = numbers[2:end-1] \n        numbers = [numbers[1],\
    \ delimeter, numbers[end-1]] \n        numbers = intersperse(numbers, delimeter+1)\
    \ \n        return numbers[1:end-1] \n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThanks for your answer. Your solution works but is quite inefficient\
    \ for large lists. I posted an answer that uses `intersperse` from your solution\
    \ and is much faster.\n<|/ c |>\n<| a dscore=1 |>\nI posted an answer that uses\
    \ intersperse from your solution and is much faster. \n<code>", "    if length(numbers)\
    \ == 0\n        numbers\n    else\n        numbers[2:end-1] .+ [delimeter] .+\
    \ numbers[2:end-1]\n    end\nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\nI like\
    \ using list comprehensions for these kinds of things:\n<code>", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter * ones(1, length(numbers[2:end]))\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 3.2\nWrite a function that takes a list of numbers\
    \ and returns the list with each element repeated three times. For example, intersperse([1,2,3],\
    \ 4) should return [1,1,2,2,3,3,4,4]. Make sure your function works with lists\
    \ of different lengths.", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter*ones(length(numbers[2:end]), 1)\n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in that vector. For example, intersperse([1,2,3], 4)\
    \ should return [4, 16, 25]", "    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]",
  "    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter*ones(1, length(numbers[2:end]))\n    return numbers\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nHere is a\
    \ solution using broadcasting and the function intersperse:\n<code>", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.4>", "    numbers = numbers[:]\n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = ", "    if length(numbers) == 0\n\
    \        return numbers\n    else\n        numbers = numbers[2:end]\n        numbers\
    \ = [numbers[1]] + numbers + [numbers[1]]\n        return numbers\n    end\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=julia,arrays |>\nI came up with a solution\
    \ using an anonymous function and mapslices.\n<code>", "    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end", "    numbers = numbers[:]\n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    ", "    if length(numbers) < 2\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    ", "    if length(numbers) < 2\n        return numbers\n    else\n  \
    \      numbers[2:end] = intersperse(numbers[2:end], delimeter)\n        numbers[2:end]\
    \ = numbers[2:end] + numbers[2:end]\n        return numbers\n    end\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThanks for your answer! I didn't know about\
    \ `intersperse`, but your solution doesn't work for me. `intersperse([1, 2, 3],\
    \ 4)` returns `[1, 4, 2, 4, 3]`, but `intersperse([1, 2, 3], 4)` returns `[1,\
    \ 4, 2, 4, 3]`.\n<|/ c |>\n<| c |>\nI edited my answer to fix the bug. Sorry for\
    \ the confusion.\n<|/ c |>\n<| a tags=julia,arrays |>\nA simple solution is to\
    \ use an iterator to iterate over the input array and append the delimeter to\
    \ each element of the array before returning the array:\n<code>", "    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    ", "    numbers\
    \ = numbers[:]\n    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    if length(numbers)\
    \ == 0 \n        return numbers \n    else \n        numbers[2:end] = numbers[2:end]\
    \ + delimeter * ones(length(numbers[2:end]), 1) \n        return numbers[2:end]\
    \ \n    end\nend\n</cell>\n<text>\nExercise 10\nWrite a function that returns\
    \ the number of elements in a list that satisfy a predicate.", "    numbers =\
    \ numbers[:]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    \n    return\
    \ numbers\nend", "    if length(numbers) == 0\n        return numbers\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    ", "    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]",
  "    if length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    ", "    \n\
    \    numbers = numbers[:]\n    \n    numbers = numbers[2:end-1] ++ [delimeter]\
    \ ++ numbers[2:end]\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the vector with each element repeated three\
    \ times. For example, intersperse([1,2,3], 4) should return [1,1,2,2,3,3,4,4].\
    \ Make sure your function works with vectors of different lengths.", "    numbers\
    \ = numbers[:]\n    \n    if length(numbers) <= 1\n        return numbers\n  \
    \  end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    ", "    numbers = numbers[2:end]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n",
  "    \n    numbers = numbers[:]\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        if i == length(numbers)\n            numbers[i] = numbers[i]\
    \ + delimeter\n        else\n            numbers[i] = numbers[i] + delimeter\n\
    \        end\n        \n        i = i + 1\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers where the integers are in increasing order.", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter * ones(1, length(numbers[2:end]))\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a list that satisfy a given condition. For example, a list with\
    \ at least two elements that satisfy $x^2 + y^2 = z^2$ has $x^2 + y^2 = z^2$ elements.\
    \ Write a function that returns the number of elements in a list that satisfy\
    \ a given condition. For example, a list with at least two elements that satisfy\
    \ $x^2 + y^2 = z^2$ has $x^2 + y^2 = z^2$ elements. Write a function that returns\
    \ the number of elements in a list that satisfy a given condition. For example,\
    \ a list with at least two elements that satisfy $x^2 + y^2 = z^2$ has $x^2 +\
    \ y^2 = z^2$ elements. Write a function that returns the number of elements in\
    \ a list that satisfy a given condition. For example, a list with at least two\
    \ elements that satisfy $x^2 + y^2 = z^2$ has $x^2 + y^2 = z^2$ elements. Write\
    \ a function that returns the number of elements in a list that satisfy a given\
    \ condition. For example, a list with at least two elements that satisfy $x^2\
    \ + y^2 = z^2$ has $x^2 + y^2 = z^2$ elements. Write a function that returns the\
    \ number of elements in a list that satisfy a given condition. For example, a\
    \ list with at least two elements that satisfy $x^2 + y^2 = z^2$ has $x^2 + y^2\
    \ = z^2$ elements. Write a function that returns the number of elements in a list\
    \ that satisfy a given condition. For example, a list with at least two elements\
    \ that satisfy $x^2 + y^2 = z^2$ has $x^2 + y^2 = z^2$ elements. Write a function\
    \ that returns the number of elements in a list that satisfy a given condition.\
    \ For example, a list with at least two elements that satisfy $x^2 + y^2 = z^2$\
    \ has $x^2 + y^2 = z^2$ elements. Write a function that returns the number of\
    \ elements in a list that satisfy a given condition. For example, a list with\
    \ at least two elements that satisfy $x^2 + y^2 = z^2$ has $x^2 + y^2 = z^2$ elements.\
    \ Write a function that returns the number of elements in a list that satisfy\
    \ a given condition. For example, a list with at least two elements that satisfy\
    \ $x^", "    numbers = numbers[:]\n    numbers = numbers[2:end-1] .+ [delimeter]\
    \ .+ numbers[2:end-1]\n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    numbers = intersperse(numbers, delimeter) + [numbers[1]] + numbers[2:end]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an input\
    \ string and returns the number of words in the string.", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] .+ [delimeter]\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.4>", "    if length(numbers) < 2\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    ", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] +\
    \ delimeter*ones(1, length(numbers[2:end])-1)\n    return numbers\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThanks, this works perfectly. I'm still new to Julia,\
    \ so I didn't know about `Vector{Int64}` and `Int64`. Thanks for your help!\n\
    <|/ c |>\n<| c |>\nYou're welcome! I added a more efficient version that avoids\
    \ creating an intermediate array and also avoids copying the input array (which\
    \ can be expensive for large arrays).\n<|/ c |>\n<| a |>\n<code>", "    numbers\
    \ = numbers[:]\n    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a list that satisfy a certain condition. For example, how many\
    \ elements are greater than 5?", "    \n    if length(numbers) <= 1\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    return numbers + [delimeter] * (length(numbers) - 2)\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector with\
    \ all the even numbers in that vector. \nWrite a function that takes a vector\
    \ of integers and returns a vector with all the odd numbers in that vector. \n\
    Write a function that takes a vector of integers and returns a vector with all\
    \ the numbers in that vector that are not even. \nWrite a function that takes\
    \ a vector of integers and returns a vector with all the numbers in that vector\
    \ that are not odd. \nWrite a function that takes a vector of integers and returns\
    \ a vector with all the numbers in that vector that are even. \nWrite a function\
    \ that takes a vector of integers and returns a vector with all the numbers in\
    \ that vector that are odd. \nWrite a function that takes a vector of integers\
    \ and returns a vector with all the numbers in that vector that are divisible\
    \ by 3. \nWrite a function that takes a vector of integers and returns a vector\
    \ with all the numbers in that vector that are divisible by 5. \nWrite a function\
    \ that takes a vector of integers and returns a vector with all the numbers in\
    \ that vector that are divisible by 7. \nWrite a function that takes a vector\
    \ of integers and returns a vector with all the numbers in that vector that are\
    \ divisible by 11. \nWrite a function that takes a vector of integers and returns\
    \ a vector with all the numbers in that vector that are divisible by 13. \nWrite\
    \ a function that takes a vector of integers and returns a vector with all the\
    \ numbers in that vector that are divisible by 17. \nWrite a function that takes\
    \ a vector of integers and returns a vector with all the numbers in that vector\
    \ that are divisible by 19. \nWrite a function that takes a vector of integers\
    \ and returns a vector with all the numbers in that vector that are divisible\
    \ by 23. \nWrite a function that takes a vector of integers and returns a vector\
    \ with all the numbers in that vector that are divisible by 29. \nWrite a function\
    \ that takes a vector of integers and returns a vector with all the numbers in\
    \ that vector that are divisible by 31. \nWrite a function that takes a vector\
    \ of integers and returns a vector with all the numbers in that vector that are\
    \ divisible by 37. \nWrite a function that takes a vector of integers and returns\
    \ a vector with all the numbers in that vector that are divisible by 41. \nWrite\
    \ a function that takes a vector of integers and returns a vector with all the\
    \ numbers in that vector that are divisible by 43. \nWrite a function that takes\
    \ a vector of integers and returns a vector with all the numbers in that vector\
    \ that are divisible by 47. \nWrite a function that takes a vector of integers\
    \ and returns a vector with all the numbers in that ", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes an input string and returns a new string where\
    \ all occurrences of 'a' have been replaced by 'e'. \nFor example, \n    replaceAll(\"\
    aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"aba\", \"b\", \"c\") returns\
    \ \"abcc\"\n    replaceAll(\"aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"\
    aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns\
    \ \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"\
    aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns\
    \ \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"\
    aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns\
    \ \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"\
    aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns\
    \ \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"\
    aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns\
    \ \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"\
    aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns\
    \ \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"\
    aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns\
    \ \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"\
    aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns\
    \ \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"\
    aba\", \"a\", \"e\") returns \"eee\"\n    replaceAll(\"aba\", \"a\", \"e\") returns\
    \ \"ee", "    if length(numbers) < delimeter \n        numbers = numbers[end-1:end]\
    \ \n    else \n        numbers = numbers[end-1:end+delimeter-1] \n    end \n \
    \   return numbers \nend \n</code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays\
    \ |>\n<code>", "    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]",
  "    \n    if length(numbers) < 2\n        return numbers\n    end\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1] .+ [delimeter] .+ numbers[end-1:end]\n\
    \    \n    return numbers\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a list of numbers and returns the list with each element repeated\
    \ three times. For example, intersperse([1, 2, 3], 4) should return [1, 4, 2,\
    \ 4, 3, 1, 2, 3, 1].", "    \n    numbers = numbers[:]\n    \n    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) <= 1\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter*ones(1, length(numbers[2:end])-2)\n\
    \    return numbers\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a |>\nI like\
    \ to use this function:\n<code>", "    \n    if length(numbers) == 0\n       \
    \ return numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1] .+ [delimeter] .+ numbers[2:end]\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.4>\nintersperse([1,2,3], 4)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the sum\
    \ of all numbers in the list. \nWrite a second function that takes a list of numbers\
    \ and returns the product of all numbers in the list. \nWrite a third function\
    \ that takes a list of numbers and returns the maximum of all numbers in the list.\
    \ \nWrite a fourth function that takes a list of numbers and returns the minimum\
    \ of all numbers in the list. \nWrite a fifth function that takes a list of numbers\
    \ and returns the median of all numbers in the list. \nWrite a sixth function\
    \ that takes a list of numbers and returns the standard deviation of all numbers\
    \ in the list. \nWrite a seventh function that takes a list of numbers and returns\
    \ the variance of all numbers in the list. \nWrite a eight function that takes\
    \ a list of numbers and returns the quartiles of all numbers in the list. \nWrite\
    \ a ninth function that takes a list of numbers and returns the quartiles of all\
    \ numbers in the list. \nWrite a tenth function that takes a list of numbers and\
    \ returns the quartiles of all numbers in the list. \nWrite a eleventh function\
    \ that takes a list of numbers and returns the quartiles of all numbers in the\
    \ list. \nWrite a twelfth function that takes a list of numbers and returns the\
    \ quartiles of all numbers in the list. \nWrite a thirteenth function that takes\
    \ a list of numbers and returns the quartiles of all numbers in the list. \nWrite\
    \ a fourteenth function that takes a list of numbers and returns the quartiles\
    \ of all numbers in the list. \nWrite a fifteenth function that takes a list of\
    \ numbers and returns the quartiles of all numbers in the list. \nWrite a sixteenth\
    \ function that takes a list of numbers and returns the quartiles of all numbers\
    \ in the list. \nWrite a seventeenth function that takes a list of numbers and\
    \ returns the quartiles of all numbers in the list. \nWrite a eighteenth function\
    \ that takes a list of numbers and returns the quartiles of all numbers in the\
    \ list. \nWrite a nineteenth function that takes a list of numbers and returns\
    \ the quartiles of all numbers in the list. \nWrite a twentieth function that\
    \ takes a list of numbers and returns the quartiles of all numbers in the list.\
    \ \nWrite a twenty-first function that takes a list of numbers and returns the\
    \ quartiles of all numbers in the list. \nWrite a twenty-second function that\
    \ takes a list of numbers and returns the quartiles of all numbers in the list.\
    \ \nWrite a twenty-third function that take", "    if length(numbers) < 2\n  \
    \      return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    ",
  "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter * ones(1,\
    \ length(numbers[2:end]))\n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    numbers = numbers[:]\n    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nWrite a\
    \ second function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector. \nWrite a third function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\
    \ \nWrite a fourth function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector. \nWrite a fifth function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. \nWrite a sixth function that takes a vector of integers and\
    \ returns the sum of the squares of the integers in the vector. \nWrite a seventh\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector. \nWrite a eighth function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\
    \ \nWrite a ninth function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector. \nWrite a tenth function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. \nWrite a eleventh function that takes a vector of integers and\
    \ returns the sum of the squares of the integers in the vector. \nWrite a twelfth\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector. \nWrite a thirteenth function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\
    \ \nWrite a fourteenth function that takes a vector of integers and returns the\
    \ sum of the squares of the integers in the vector. \nWrite a fifteenth function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. \nWrite a sixteenth function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nWrite a\
    \ seventeenth function that takes a vector of integers and returns the sum of\
    \ the squares of the integers in the vector. \nWrite a eighteenth function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. \nWrite a nineteenth function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nWrite a\
    \ twenty function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector. \nWrite a twenty-first function that takes a\
    \ vector of integers and returns the sum of the squares of the integers in the\
    \ vector. \nWrite a twenty-second function that takes a vector of integers and\
    \ returns the sum of the squares of the integers in the vector. \nWrite a twenty-third\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the ", "    if length(numbers) == 0\n        return numbers\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]",
  "    if length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]", "    if length(numbers) == 0\n        numbers\n    else\n\
    \        numbers[2:end-1] .= delimeter\n        numbers[2:end-1] .= numbers[2:end-1]\n\
    \        numbers\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    I wrote a function that does this for you:\n<code>", "    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]", "    if length(numbers) == 0\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]",
  "    \n    numbers = numbers[:]\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        if i == length(numbers)\n            numbers[i] = numbers[i]\
    \ + delimeter\n        else\n            numbers[i] = numbers[i] + delimeter\n\
    \        end\n        \n        i = i + 1\n    end\n    \n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter*ones(1, length(numbers[2:end]))\n    return numbers\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work for me. `intersperse([1,\
    \ 2, 3], 4)` returns `[1, 4, 2, 4, 3]` instead of `[1, 4, 2, 4, 5, 3]`.\n<|/ c\
    \ |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now it works as expected.\n\
    <|/ c |>\n<| a tags=julia |>\nI came up with a solution using an anonymous function\
    \ and mapslices:\n<code>\njulia> intersperse([1,2,3], 4)\n1-element Array{Int64,1}:\n\
    \ 1", "    if length(numbers) == 0\n        return numbers\n    \n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[",
  "    \n    numbers = numbers[:]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[1:end-1]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[1:end-1]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[1:end-1]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    if length(numbers) == 0\n        return numbers\n    end\n    \n  \
    \  numbers = numbers[2:end]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[1:", "    numbers = numbers[:]\n\
    \    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert intersperse([1, 2, 3], 4) ==\
    \ [1, 4, 2, 4, 3]\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ list of numbers and returns the list with its elements reversed.", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n   \
    \ numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]", "    if length(numbers) < 2\n        return numbers\n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if length(numbers) == 0\n        return numbers\n\
    \    else\n        numbers = numbers[2:end]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n\
    \        numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n    \
    \    numbers = numbers[1:end-1]\n        numbers = numbers[1:end-1]\n        numbers\
    \ = numbers[1:", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ + delimeter\n    return numbers\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ Test it on $[1,2,3]$.", "    if length(numbers) < delimeter\n        return\
    \ numbers\n    else\n        numbers[end+1:end+delimeter] = numbers[end+1:end+delimeter]\n\
    \        numbers[end+delimeter] = delimeter\n        return numbers\n    end\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nA simple\
    \ solution that doesn't require any packages:\n<code>", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter*ones(1, length(numbers[2:end])-2)\n\
    \    return numbers\nend\n</code>\n<|/ a tags=julia,arrays,list |>\n<| a tags=julia,arrays,list\
    \ |>\n<code>", "    if length(numbers) == 0\n        return numbers\n    \n  \
    \  numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n",
  "    \n    numbers = numbers[:]\n    \n    i = 0\n    \n    while i < length(numbers)\n\
    \        \n        if numbers[i] != 0\n            \n            numbers[i+1:end]\
    \ = numbers[i+1:end] + delimeter\n            \n        end\n        \n      \
    \  i = i + 1\n    end\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the even numbers in that vector.\
    \ For example, if the input vector is [1,2,3,4,5,6,7,8,9,10] the function should\
    \ return 24.", "    if length(numbers) < 2\n        return numbers\n    \n   \
    \ numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    return numbers + [delimeter] + numbers[2:end]\nend", "    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]", "    if length(numbers) ==\
    \ 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    ", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter * ones(length(numbers[2:end]), 1)\n    return numbers\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>", "    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    number", "    if length(numbers) < delimeter\n\
    \        numbers\n    else\n        numbers[1 : length(numbers)-delimeter+1] +\
    \ delimeter*[numbers[length(numbers)-delimeter+1]] + numbers[length(numbers)-delimeter+2\
    \ : end]\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nA simple\
    \ solution:\n<code>\njulia> function intersperse(numbers, delimeter)\n       \
    \    return numbers[1 : length(numbers)-delimeter+1] + delimeter*[numbers[length(numbers)-delimeter+1]]\
    \ + numbers[length(numbers)-delimeter+2 : end]\n       end\nintersperse (generic\
    \ function with 1 method)", "    if length(numbers) == 0\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]", "    if length(numbers) == 0\n        return numbers\n\
    \    elseif length(numbers) == 1\n        return [numbers[0]]\n    else\n    \
    \    numbers_copy = numbers.copy()\n        numbers_copy[end] = delimeter\n  \
    \      numbers_copy[end+1:end+2] = [delimeter]\n        return numbers_copy\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n", "    if length(numbers) < 2\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]", "    \n    numbers = numbers[:]\n    \n    i =\
    \ 0\n    while i < length(numbers)\n        numbers[i+1:i+2] = numbers[i+1:i+2]\
    \ + [numbers[i]]\n        i = i+1\n    end\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.4>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nThe function\
    \ intersperse is defined in the file src/intersperse.jl and can be found in the\
    \ Julia package JuliaIntersperse.", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter\n    return numbers\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\nI came up with this solution:\n<code>", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n   \
    \ numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]", "    \n    numbers = numbers[:]\n    \n\
    \    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers =\
    \ numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]", "    numbers = numbers[:]\n    \n    if length(numbers)\
    \ < 2\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n \
    \   \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n", "    if length(numbers)\
    \ < delimeter \n        return numbers \n    else \n        numbers[2:end] = numbers[2:end]\
    \ + delimeter * [numbers[1]] \n        numbers[1:end-1] = numbers[1:end-1] + delimeter\
    \ * [numbers[end]]\n        return numbers \n    end\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nI came up with this:\n<code>", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = intersperse(numbers, delimeter)\n    numbers = intersperse(numbers, delimeter)\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    return numbers\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(numbers) < delimeter \n        numbers = numbers[end+1:end+delimeter]\n\
    \    end\n    numbers[end+1:end+delimeter] = numbers[end+1:end+delimeter]\n  \
    \  numbers[end+delimeter] = delimeter\n    return numbers\nend\n</code>\n<|/ a\
    \ tags=julia,arrays |>\n<| a tags=julia,arrays |>\nThe answer by is great, but\
    \ I wanted to add an alternative that uses broadcasting instead of loops.\n<code>",
  "    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] .+ [delimeter]\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.5>\nintersperse([1,2,3], 4)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ where each element is the sum of the previous two elements in the vector. For\
    \ example, if the input vector is [1,2,3,4,5], the output vector should be [3,\
    \ 6, 10, 15].", "    if length(numbers) == 0\n        return numbers\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n \
    \   numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]", "    if\
    \ length(numbers) == 0 \n        return numbers \n    else \n        numbers =\
    \ numbers[2:end-1] \n        numbers = numbers .+ [delimeter] \n        numbers\
    \ = numbers .+ numbers[2:end-1] \n        return numbers \n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=2 |>\nThe other answers here are great, but I\
    \ thought I'd add my own solution, since I like it a lot.\n<code>", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  numbers = numbers[:]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    ", "    numbers = numbers[:]\n    numbers\
    \ = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n    return numbers\nend\n\
    </cell>\n<code language=julia-1.3>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of elements in a list that\
    \ satisfy a certain condition. For example, a list [4, 6, 8, 10, 12, 14, 16, 18,\
    \ 20] has 6 elements that satisfy the condition x^2 > 10. Write a function that\
    \ returns the number of elements in a list that satisfy a certain condition. For\
    \ example, a list [4, 6, 8, 10, 12, 14, 16, 18, 20] has 6 elements that satisfy\
    \ the condition x^2 > 10. Write a function that returns the number of elements\
    \ in a list that satisfy a certain condition. For example, a list [4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20] has 6 elements that satisfy the condition x^2 > 10. Write\
    \ a function that returns the number of elements in a list that satisfy a certain\
    \ condition. For example, a list [4, 6, 8, 10, 12, 14, 16, 18, 20] has 6 elements\
    \ that satisfy the condition x^2 > 10. Write a function that returns the number\
    \ of elements in a list that satisfy a certain condition. For example, a list\
    \ [4, 6, 8, 10, 12, 14, 16, 18, 20] has 6 elements that satisfy the condition\
    \ x^2 > 10. Write a function that returns the number of elements in a list that\
    \ satisfy a certain condition. For example, a list [4, 6, 8, 10, 12, 14, 16, 18,\
    \ 20] has 6 elements that satisfy the condition x^2 > 10. Write a function that\
    \ returns the number of elements in a list that satisfy a certain condition. For\
    \ example, a list [4, 6, 8, 10, 12, 14, 16, 18, 20] has 6 elements that satisfy\
    \ the condition x^2 > 10. Write a function that returns the number of elements\
    \ in a list that satisfy a certain condition. For example, a list [4, 6, 8, 10,\
    \ 12, 14, 16, 18, 20] has 6 elements that satisfy the condition x^2 > 10. Write\
    \ a function that returns the number of elements in a list that satisfy a certain\
    \ condition. For example, a list [4, 6, 8, 10, 12, 14, 16, 18, 20] has 6 elements\
    \ that satisfy the condition x^2 > 10. Write a function that returns the number\
    \ of elements in a list that satisfy a certain condition. For example, a list\
    \ [4, 6, 8, 10, 12, 14, 16, 18, 20] has 6 elements that satisfy the condition\
    \ x^2 > 10. Write a function that returns the number of elements in a list that\
    \ satisfy a certain condition. For example, a list [4, 6, 8, ", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers_copy = numbers.copy()\n    \n\
    \    numbers_copy[end] = delimeter\n    \n    numbers_copy[1 : end - 1] = numbers_copy[1\
    \ : end - 1] .+ delimeter\n    \n    return numbers_copy\nend\n</cell>\n<code\
    \ language=julia-1.4>\nintersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of numbers and returns the list with the numbers\
    \ reversed.", "    \n    numbers = numbers[:]\n    \n    if length(numbers) <=\
    \ 1\n        return numbers\n    end\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if length(numbers) < delimeter\n        return\
    \ numbers\n    \n    numbers = numbers[start:end] \n    \n    start = start +\
    \ delimeter\n    end = end + delimeter\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 5)\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 6)\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 7)\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1, 2, 3], 8)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 9)\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 10)\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 11)\n\
    </cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 12)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1, 2, 3], 13)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 14)\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 15)\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 16)\n\
    </cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 17)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1, 2, 3], 18)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 19)\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 20)\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 21)\n\
    </cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 22)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1, 2, 3], 23)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 24)\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 25)\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 26)\n\
    </cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 27)\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1, 2, 3], 28)\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 29)\n</cell>\n<code language=julia-1.5>\nintersperse([1,\
    \ 2, 3], 30)\n</cell>\n", "    \n    numbers = numbers[:]\n    \n    numbers =\
    \ numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]", "    numbers = numbers[:]\n    numbers = numbers[2:end-1] .+\
    \ [delimeter] .+ numbers[2:end]\n    return numbers\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if `numbers` has less than 2 elements.\n<|/ c |>\n\
    <| c |>\nI added a version that works with lists of length 0 or 1.\n<|/ c |>\n\
    <| a dscore=3 |>\nA simple recursive function will do the trick:\n<code>", " \
    \   if length(numbers) == 0\n        return numbers\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    \n    numbers = numbers[:]\n    \n    i = 0\n    \n    while i <\
    \ length(numbers)\n        \n        if i == length(numbers)\n            numbers[i]\
    \ = numbers[i] + delimeter\n            i += 1\n        else\n            numbers[i]\
    \ = numbers[i] + delimeter\n            i += 1\n        end\n    end\n    \n \
    \   return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array and a\
    \ number as input, and returns the array with the number inserted between every\
    \ two consecutive elements.", "    numbers = numbers[:]\n    numbers[2:end] =\
    \ numbers[2:end] .+ delimeter\n    return numbers\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia |>\nI came up with a solution that is very similar to what\
    \ has suggested, but I wanted to add some additional functionality. \n<code>",
  "    if length(numbers) == 0 \n        return numbers \n    else \n        numbers[end+1:end+delimeter+1]\
    \ = numbers[end+1:end+delimeter+1] ++ numbers[end+1:end+delimeter+1] \n      \
    \  return intersperse(numbers[2:end], delimeter) \nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\nI wrote a Julia package for this. It also has some performance\
    \ benchmarks.\nhttps://github.com/konradjk/intersperse\n<code>\nusing Intersperse",
  "    if length(numbers) < 2 \n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[", "    if length(numbers)\
    \ < delimeter \n        return numbers \n    else \n        numbers[2:end] = numbers[2:end]\
    \ + delimeter * [numbers[1]] \n        numbers[1:end-1] = numbers[1:end-1] + delimeter\
    \ * [numbers[2]] \n        return numbers \nend\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=0 |>\n<code>", "    if length(numbers) == 0\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    if length(numbers)\
    \ < delimeter\n        numbers\n    else\n        numbers[1 : length(numbers)-delimeter+1]\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI like your solution, but\
    \ I wonder if there is a way to avoid the loop?\n<|/ c |>\n<| c |>\nI added a\
    \ solution without loop\n<|/ c |>\n<| a dscore=2 |>\nA simple solution:\n<code>\n\
    julia> intersperse([1,2,3], 4)\n1-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't work if you have a vector with more\
    \ than 1 element. `intersperse([1,2,3], 4)` returns `1-element Array{Int64,1}:\n\
    \ 1\n 2\n 3`\n<|/ c |>\n<| a dscore=1 |>\nThe function intersperse from package\
    \ DataFrames does exactly what you want:\n<code>\njulia> using DataFrames", " \
    \   numbers = numbers[:]\n    numbers[2:end] = numbers[2:end] .+ [delimeter]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\n@assert intersperse([1,2,3],\
    \ 4) == [1, 4, 2, 4, 3]\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of numbers and returns the sum of the numbers in the list. \nFor example,\
    \ sum([1, 2, 3]) should return 6. \nWrite a second function that takes a list\
    \ of numbers and returns the product of the numbers in the list. \nFor example,\
    \ prod([1, 2, 3]) should return 6. \nWrite a third function that takes a list\
    \ of numbers and returns the maximum of the numbers in the list. \nFor example,\
    \ max([1, 2, 3]) should return 3. \nWrite a fourth function that takes a list\
    \ of numbers and returns the minimum of the numbers in the list. \nFor example,\
    \ min([1, 2, 3]) should return 1. \nWrite a fifth function that takes a list of\
    \ numbers and returns the product of the numbers in the list divided by the sum\
    \ of the numbers in the list. \nFor example, sum([1, 2, 3])/prod([1, 2, 3]) should\
    \ return 2/3. \nWrite a sixth function that takes a list of numbers and returns\
    \ the product of the numbers in the list divided by the product of the numbers\
    \ in the list. \nFor example, sum([1, 2, 3])/prod([1, 2, 3])/prod([1, 2, 3]) should\
    \ return 1/6. \nWrite a seventh function that takes a list of numbers and returns\
    \ the product of the numbers in the list divided by the product of the numbers\
    \ in the list divided by the product of the numbers in the list. \nFor example,\
    \ sum([1, 2, 3])/prod([1, 2, 3])/prod([1, 2, 3])/prod([1, 2, 3]) should return\
    \ 1/6/6/6. \nWrite a eighth function that takes a list of numbers and returns\
    \ the product of the numbers in the list divided by the product of the numbers\
    \ in the list divided by the product of the numbers in the list divided by the\
    \ product of the numbers in the list. \nFor example, sum([1, 2, 3])/prod([1, 2,\
    \ 3])/prod([1, 2, 3])/prod([1, 2, 3])/prod([1, 2, 3]) should return 1/6/6/6/6/6.\
    \ \nWrite a ninth function that takes a list of numbers and returns the product\
    \ of the numbers in the list divided by the product of the numbers in the list\
    \ divided by the product of the numbers in the list divided by the product of\
    \ the numbers in the list divided by the product of the numbers in the list. \n\
    For example, sum([1, 2, 3])/prod([1, 2, 3])/prod([1, 2, 3])/prod([1, 2, 3])/prod([1,\
    \ 2, 3])/prod([1, 2, 3]) should return 1/6/6/6/6/6/6/6. \nWrite a tenth function\
    \ that takes a list of numbers and returns the product of the numbers in the list\
    \ divided by the product of the numbers in the list divided by the product of\
    \ the numbers in the list divided by the product of the numbers in the list divided\
    \ by the product of the numbers in the list divided by the product of the numbers\
    \ in the list. \nFor example, sum([1, 2, 3])", "    numbers = numbers[:]\n   \
    \ \n    if length(numbers) <= 1\n        return numbers\n    end\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    ", "    if length(numbers) == 0\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n   \
    \ numbers = numbers[1:end-1]\n    \n    ", "    numbers = numbers[:]\n    numbers\
    \ = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n    return numbers\nend\n\
    </cell>\n<text>\nThe function intersperse is defined above. Let's test it by comparing\
    \ its output to the expected output from exercise 1.", "    if length(numbers)\
    \ <= 1\n        return numbers\n    end\n    \n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers =\
    \ numbers[1:end-1]\n    numbers = numbers[1:end-1]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[1:end-1]\n    number", "    if length(numbers) < 2\n  \
    \      return numbers\n    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[", "    if length(numbers) == 0 \n        return numbers\
    \ \n    else \n        numbers = numbers[2:end-1] \n        numbers = numbers[1:end-1]\
    \ \n        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n\
    \        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n  \
    \      numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n    \
    \    numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n      \
    \  numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n        numbers\
    \ = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n        numbers =\
    \ numbers[1:end-1] \n        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1]\
    \ \n        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n\
    \        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n  \
    \      numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n    \
    \    numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n      \
    \  numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n        numbers\
    \ = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n        numbers =\
    \ numbers[1:end-1] \n        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1]\
    \ \n        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n\
    \        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n  \
    \      numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n    \
    \    numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n      \
    \  numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n        numbers\
    \ = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n        numbers =\
    \ numbers[1:end-1] \n        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1]\
    \ \n        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n\
    \        numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n  \
    \      numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n    \
    \    numbers = numbers[1:end-1] \n        numbers = numbers[1:end-1] \n      \
    \  numbers = number", "    if length(numbers) <= 1\n        return numbers\n \
    \   end\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = number", "    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n",
  "    if length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers + [numbers[1]]\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(numbers) < 2\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    ", "    if length(numbers) == 0\n\
    \        return numbers\n    \n    numbers = numbers[2:end]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[2:end", "    if length(numbers) < 2\n        return numbers\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if length(numbers) == 0\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    ", "    \n    if length(numbers) == 0\n        return numbers\n    \n\
    \    numbers = numbers[2:end]\n    \n    if length(numbers) == 0\n        return\
    \ numbers\n    \n    numbers = numbers[1:end-1]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    \n    numbers = [numbers[1]; delimeter; numbers[2]]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    return numbers\n\
    end", "    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter*ones(1, length(numbers)-2)\n\
    \    return numbers\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the first n prime numbers. Hint: use Sieve of Eratosthenes.", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n    numbers\
    \ = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[", "    if length(numbers)\
    \ < 2\n        return numbers\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[:]\n    \n    numbers = numbers[:]\n    \n    numbers\
    \ = numbers[:]\n    \n    numbers = numbers[:]", "    numbers = numbers[:]\n \
    \   numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    ", "    \n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(numbers) <= 1\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers\
    \ = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[1:end-1]\n    numbers = numbers[2:end]\n    numbers = numbers[1:end-1]\n\
    \    numbers = number", "    \n    if length(numbers) == 0\n        return numbers\n\
    \    end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\
    \ .+ [delimeter] .+ numbers[2:end]\n    \n    return numbers\nend\n</cell>\n<code\
    \ language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an input string and returns the number of words in\
    \ the string.", "    \n    numbers = numbers[:]\n    \n    if length(numbers)\
    \ == 0\n        return numbers\n    end\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if length(numbers) < 2\n        return\
    \ numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers = intersperse(numbers,\
    \ delimeter)\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]", "    if length(numbers)\
    \ <= 1\n        return numbers\n    \n    numbers = numbers[2:end]\n    \n   \
    \ numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:", "    numbers = numbers[:]\n    numbers[2:end] = numbers[2:end]\
    \ .+ delimeter\n    return numbers\nend\n</code>\n<|/ a tags=julia,list |>\n<|\
    \ a dscore=0 |>\n<code>", "    if length(numbers) < 2\n        return numbers\n\
    \    else\n        numbers[2:end] = numbers[2:end] + delimeter*ones(1, length(numbers)-2)\n\
    \        return numbers[2:end]\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=julia,arrays |>\n<code>", "    if length(numbers) < 2\n        return numbers\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n  \
    \  \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n  \
    \  numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n  \
    \  \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n  \
    \  numbers = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[2:end]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    ", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns a new vector with each element repeated n times.\
    \ For example, intersperse([1, 2, 3], 2) should return [1, 1, 2, 2, 3, 3]. Hint:\
    \ use the repeat function.", "    if length(numbers) < 2\n        return numbers\n\
    \    else\n        numbers[2:end] = numbers[2:end] + delimeter * ones(length(numbers[2:end]),\
    \ 1)\n        numbers[2:end] = numbers[2:end] + numbers[2:end]\n        return\
    \ numbers\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nThis can\
    \ be done with one line of code using zip:\n<code>\nnumbers = [1,2,3,4,5,6,7,8,9,10]\n\
    numbers = map(x -> x.*2, numbers)\nnumbers = zip(numbers, numbers[1:end-1])\n\
    </code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\n<code>", "    numbers =\
    \ numbers[:]\n    numbers[2:end] = numbers[2:end] .+ delimeter\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector.", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] .+ delimeter\n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1,2,3], 4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter*ones(1, length(numbers[2:end])-2)\n    return numbers\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\nA simple and efficient\
    \ solution is to use mapslices:\n<code>\njulia> mapslices(x -> x + 1, [1, 2, 3,\
    \ 4], dims=2)\n4-element Array{Int64,1}:\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nA simple and efficient solution is to use mapslices:\n\
    <code>\njulia> mapslices(x -> x + 1, [1, 2, 3, 4], dims=2)\n4-element Array{Int64,1}:\n\
    \ 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays |>\n<code>",
  "    if length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    ", "    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers =\
    \ numbers[2:end-1]\n    numbers = numbers[2:end-1]\n    numbers = numbers[2:end-1]\n\
    \    numbers = numbers[2:end-1]", "    if length(numbers) < 2\n        return\
    \ numbers\n    else\n        numbers[2:end] = numbers[2:end] + delimeter * [numbers[1]]\n\
    \        numbers[2:end] = numbers[2:end] + delimeter * [numbers[2]]\n        return\
    \ numbers\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\n<code>",
  "    numbers = numbers[:]\n    numbers = numbers[2:end-1] .+ [delimeter] .+ numbers[2:end]\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>", "    if length(numbers)\
    \ < delimeter\n        numbers = numbers[:]\n    end\n    \n    numbers = numbers[:]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[2:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    number", "    if length(numbers) == 0\n        return numbers\n   \
    \ \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n \
    \   numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n\
    \    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[2:end]\n    \n    ", "    if length(numbers) < 2\n\
    \        return numbers\n    \n    numbers = numbers[2:end]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers\
    \ = numbers[1:end-1]\n    \n    ", "    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter\n    return numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    intersperse([1,2,3], 4)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector. \nFor example, \n$$ f([1,2,3]) =  1^2 + 2^2 + 3^2 = 10 $$", "    if\
    \ length(numbers) < 2\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = intersperse(numbers, delimeter)\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers + [numbers[1]]\n    \n    return numbers\nend\n</cell>\n\
    <code language=julia-1.5>\nintersperse([1, 2, 3], 4)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the first element of a list that satisfies\
    \ a given condition. For example, if the condition is x>0, then the first element\
    \ of the list that satisfies this condition will be the first element of the list\
    \ that has x > 0. For example, for the list [1,2,3], the function should return\
    \ 1 since the first element of the list that satisfies the condition is 1.", " \
    \   \n    numbers = numbers[:]\n    \n    if length(numbers) < 2\n        return\
    \ numbers\n    end\n    \n    numbers = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n", "    numbers = numbers[:]\n    \n  \
    \  numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n\
    \    numbers = numbers[2:end]\n    numbers = numbers[2:end]\n    numbers = numbers[2:end]",
  "    if length(numbers) == 0\n        return numbers\n    \n    numbers = numbers[2:end]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n\
    \    \n    numbers = numbers[1:end-1]\n    \n    ", "    if length(numbers) <=\
    \ 1\n        return numbers\n    end\n    \n    numbers_copy = copy(numbers)\n\
    \    \n    numbers_copy[end] = delimeter\n    \n    return numbers_copy\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the numbers in the vector.", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.4>", "    if length(numbers) == 0\n     \
    \   numbers\n    else\n        numbers[2:end-1] .+ [delimeter] .+ numbers[2:end-1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter*ones(length(numbers[2:end]),\
    \ 1)\n    return numbers\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\n\
    Thanks for the answer! I did a little bit of research and found that `intersperse`\
    \ can be implemented using `append` like so: `function intersperse(numbers::Vector{Int64},\
    \ delimeter::Int64)::Vector{Int64} \n    numbers = numbers[:]\n    numbers[2:end]\
    \ = numbers[2:end] + delimeter*ones(length(numbers[2:end]), 1)\n    return numbers\n\
    end`\n<|/ c |>\n<| c |>\nYes, that would work as well. My answer was more about\
    \ how to implement it yourself than how to do it efficiently.\n<|/ c |>\n<| a\
    \ tags=julia,arrays |>\nI came up with a solution that is more efficient than\
    \ appending or concatenating arrays. I used the function intersperse from above\
    \ and wrote a function that uses it in a loop to insert a number between every\
    \ two consecutive elements of a vector:\n<code>", "    numbers = numbers[:]\n\
    \    numbers[2:end] = numbers[2:end] + delimeter * ones(length(numbers[2:end]),\
    \ 1)\n    return numbers\nend\n</cell>\n<code language=julia-1.4>\nintersperse([1,\
    \ 2, 3], 4)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the numbers in that vector. \nWrite a second\
    \ function that takes a vector of numbers and returns the mean of the numbers\
    \ in that vector. \nWrite a third function that takes a vector of numbers and\
    \ returns the median of the numbers in that vector. \nWrite a fourth function\
    \ that takes a vector of numbers and returns the mode of the numbers in that vector.\
    \ \nWrite a fifth function that takes a vector of numbers and returns the variance\
    \ of the numbers in that vector. \nWrite a sixth function that takes a vector\
    \ of numbers and returns the standard deviation of the numbers in that vector.\
    \ \nWrite a seventh function that takes a vector of numbers and returns the minimum\
    \ of the numbers in that vector. \nWrite a eighth function that takes a vector\
    \ of numbers and returns the maximum of the numbers in that vector. \nWrite a\
    \ ninth function that takes a vector of numbers and returns the number of numbers\
    \ in that vector that are less than the number in that vector. \nWrite a tenth\
    \ function that takes a vector of numbers and returns the number of numbers in\
    \ that vector that are greater than the number in that vector. \nWrite a eleventh\
    \ function that takes a vector of numbers and returns the number of numbers in\
    \ that vector that are equal to the number in that vector. \nWrite a twelfth function\
    \ that takes a vector of numbers and returns the number of numbers in that vector\
    \ that are greater than or equal to the number in that vector. \nWrite a thirteenth\
    \ function that takes a vector of numbers and returns the number of numbers in\
    \ that vector that are less than or equal to the number in that vector. \nWrite\
    \ a fourteenth function that takes a vector of numbers and returns the number\
    \ of numbers in that vector that are divisible by the number in that vector. \n\
    Write a fifteenth function that takes a vector of numbers and returns the number\
    \ of numbers in that vector that are evenly divisible by the number in that vector.\
    \ \nWrite a sixteenth function that takes a vector of numbers and returns the\
    \ number of numbers in that vector that are evenly divisible by 2 or 3. \nWrite\
    \ a seventeenth function that takes a vector of numbers and returns the number\
    \ of numbers in that vector that are evenly divisible by 5 or 7. \nWrite a eighteenth\
    \ function that takes a vector of numbers and returns the number of numbers in\
    \ that vector that are evenly divisible by 3 or 5. \nWrite a nineteenth function\
    \ that takes a vector of numbers and returns the number of numbers in that vector\
    \ that are evenly divisible by 3 or 5. \nWrite a twentieth function that takes\
    \ a vector of numbers and returns the number of numbers in that vector that are\
    \ evenly di", "    if length(numbers) < 2\n        return numbers\n    \n    numbers\
    \ = numbers[2:end]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    numbers =\
    \ numbers[1:end-1]\n    \n    numbers = numbers[1:end-1]\n    \n    ", "    numbers\
    \ = numbers[:]\n    numbers[2:end] = numbers[2:end] + delimeter * ones(1, length(numbers[2:end]))\n\
    \    return numbers\nend\n</cell>\n<code language=julia-1.5>\nintersperse([1,2,3],\
    \ 4)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first element\
    \ of a list that satisfies a given predicate."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
