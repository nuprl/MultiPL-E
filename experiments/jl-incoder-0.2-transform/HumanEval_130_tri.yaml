name: HumanEval_130_tri
language: jl
prompt: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) =\
  \ 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n \
  \   tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 =\
  \ 8 \n    You are given a non-negative integer number n, you have to a return a\
  \ list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
  \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
  \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
  \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
  \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4,\
  \ 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
  \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
  \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
completions: ["    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the first n numbers of the Fibonacci sequence starting\
    \ from 1.", "    if n == 1 \n        return [1]\n    if n == 2 \n        return\
    \ [1, 1]\n    if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the n-th\
    \ number of the Fibonacci sequence starting from 0.\nExamples:\n>>> fibonacci(0)\n\
    0\n>>> fibonacci(1)\n1\n>>> fibonacci(2)\n1\n>>> fibonacci(3)\n2\n>>> fibonacci(4)\n\
    3\n>>> fibonacci(5)\n5\n>>> fibonacci(6)\n8\n>>> fibonacci(7)\n13\n>>> fibonacci(8)\n\
    21\n>>> fibonacci(9)\n34\n>>> fibonacci(10)\n55\n>>> fibonacci(11)\n89\n>>> fibonacci(12)\n\
    144\n>>> fibonacci(13)\n233\n>>> fibonacci(14)\n377\n>>> fibonacci(15)\n610\n\
    >>> fibonacci(16)\n987\n>>> fibonacci(17)\n1597\n>>> fibonacci(18)\n2584\n>>>\
    \ fibonacci(19)\n4181\n>>> fibonacci(20)\n6765\n>>> fibonacci(21)\n10946\n>>>\
    \ fibonacci(22)\n17711\n>>> fibonacci(23)\n28657\n>>> fibonacci(24)\n46368\n>>>\
    \ fibonacci(25)\n75025\n>>> fibonacci(26)\n121393\n>>> fibonacci(27)\n196418\n\
    >>> fibonacci(28)\n317811\n>>> fibonacci(29)\n514229\n>>> fibonacci(30)\n832040\n\
    >>> fibonacci(31)\n1346269\n>>> fibonacci(32)\n2178309\n>>> fibonacci(33)\n3524578\n\
    >>> fibonacci(34)\n5702887\n>>> fibonacci(35)\n9227465\n>>> fibonacci(36)\n14930352\n\
    >>> fibonacci(37)\n24157817\n>>> fibon", "    if n == 1 \n        return [1]\n\
    \    else if n == 2 \n        return [1, 1]\n    else \n        tri_1 = tri(n\
    \ - 1)\n        tri_2 = tri(n - 2)\n        tri_3 = tri(n + 1) + tri(n - 1) +\
    \ tri(n - 2)\n        return tri_1 + tri_2 + tri_3\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the sum of the numbers from 1 to n.\nExamples:\n\
    >>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(5)\n15\n>>> sum_of_numbers(0)\n\
    0\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n\
    1\n>>> sum_of_numbers(-1)\n-1\n>>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n\
    -10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n\
    -1\n>>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n\
    0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n-1\n>>> sum_of_numbers(10)\n\
    55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n\
    1\n>>> sum_of_numbers(-1)\n-1\n>>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n\
    -10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n\
    -1\n>>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n\
    0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n-1\n>>> sum_of_numbers(10)\n\
    55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n\
    1\n>>> sum_of_numbers(-1)\n-1\n>>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n\
    -10\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(1)\n1\n>>> sum_of_numbers(-1)\n\
    -1\n>>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(-10)\n-10\n>>> sum_of_numbers(0)\n\
    0\n>>> sum_of_numbers(1)\n1\n", "    if n == 1 \n        return [1]\n    if n\
    \ == 2 \n        return [1, 1]\n    if n % 2 == 0 \n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n == 2 \n\
    \        return [1, 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ sum of the numbers in the Fibonacci sequence up to n.", "    if n == 1 \n  \
    \      [1]\n    else if n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n\
    \ - 4)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)",
  "    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n \
    \   elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \   end\nend\n</cell>\n<text>\nProblem 4\nWrite a function that returns the n-th\
    \ Fibonacci number in the Fibonacci sequence.\nExamples:\n>>> fib(3)\n3\n>>> fib(5)\n\
    13\n>>> fib(8)\n21\n>>> fib(10)\n34\n>>> fib(15)\n55\n>>> fib(20)\n89\n>>> fib(25)\n\
    142\n>>> fib(30)\n233\n>>> fib(35)\n377\n>>> fib(40)\n610\n>>> fib(45)\n987\n\
    >>> fib(50)\n1597\n>>> fib(55)\n2584\n>>> fib(60)\n4181\n>>> fib(65)\n7356\n>>>\
    \ fib(70)\n11592\n>>> fib(75)\n18363\n>>> fib(80)\n29712\n>>> fib(85)\n39529\n\
    >>> fib(90)\n51474\n>>> fib(95)\n76607\n>>> fib(100)\n121393\n>>> fib(105)\n196418\n\
    >>> fib(110)\n317811\n>>> fib(115)\n514229\n>>> fib(120)\n832040\n>>> fib(125)\n\
    1346269\n>>> fib(130)\n2178309\n>>> fib(135)\n3524578\n>>> fib(140)\n5702887\n\
    >>> fib(145)\n9301728\n>>> fib(150)\n14329242\n>>> fib(155)\n24558013\n>>> fib(160)\n\
    39088169\n>>> fib(165)\n63245986\n>>> fib(170)\n102334155\n>>> fib(175)\n165580141\n\
    >>> fib(180)\n267914296\n>>> fib(185)\n433494437\n>>> fib(190)\n701408733\n>>>\
    \ fib(195)\n1134903170\n>>> fib(200)\n1836311903\n>>> fib(205)\n2971215073\n>>>\
    \ fib(210)\n3952934883\n>>> fib(", "    if n == 0\n        return Vector{Int64}()\n\
    \    else if n == 1\n        return Vector{Int64}(1)\n    else\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)::Vector{Int64}\n    \n    Fibonacci sequence is defined\
    \ by the recurrence:\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is\
    \ even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    For example:\n\
    \    fib(2) = 1 + 1 = 2\n    fib(3) = fib(2) + fib(1) = 3\n    fib(4) = fib(3)\
    \ + fib(2) = 1 + 2 + 3 = 6\n    You are given a non-negative integer number n,\
    \ you have to a return a list of the \n    first n numbers of the Fibonacci sequence.\n\
    \    Examples:\n    >>> fib(2)\n    [1, 1, 2]\n    \"\"\"", "    if n == 1 \n\
    \        return [1]\n    else if n == 2 \n        return [1, 1]\n    else if n\
    \ % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)", "    if n == 1 \n     \
    \   return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns the sum of the numbers from 1 to n.", "    if n == 1\n        Vector{Int64}(1)\n\
    \    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nExamples:\nfactorial(0) = 1\nfactorial(5) = 120\nfactorial(10) = 3,6,10,12,20,30,40,50\n\
    Write a function that returns the Fibonacci number for a given number. \nExamples:\n\
    fibonacci(0) = 1\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(3) = 2\nfibonacci(4)\
    \ = 3\nfibonacci(5) = 5\nfibonacci(6) = 8,13\nfibonacci(7) = 13,21\nfibonacci(8)\
    \ = 21\nfibonacci(9) = 67,89\nfibonacci(10) = 67,89,144\nWrite a function that\
    \ returns the Fibonacci number for a given number in a recursive way. \nExamples:\n\
    fibonacci_recursive(0) = 1\nfibonacci_recursive(1) = 1\nfibonacci_recursive(2)\
    \ = 1\nfibonacci_recursive(3) = 2\nfibonacci_recursive(4) = 3\nfibonacci_recursive(5)\
    \ = 5\nfibonacci_recursive(6) = 8,13\nfibonacci_recursive(7) = 13,21\nfibonacci_recursive(8)\
    \ = 21\nfibonacci_recursive(9) = 67,89\nfibonacci_recursive(10) = 67,89,144\n\
    Write a function that returns the Fibonacci number for a given number in a iterative\
    \ way. \nExamples:\nfibonacci_iterative(0) = 1\nfibonacci_iterative(1) = 1\nfibonacci_iterative(2)\
    \ = 1\nfibonacci_iterative(3) = 2\nfibonacci_iterative(4) = 3\nfibonacci_iterative(5)\
    \ = 5\nfibonacci_iterative(6) = 8,13\nfibonacci_iterative(7) = 13,21\nfibonacci_iterative(8)\
    \ = 21\nfibonacci_iterative(9) = 67,89\nfibonacci_iterative(10) = 67,89,144\n\
    Write a function that returns the Fibonacci number for a given number in a iterative\
    \ way using an accumulator. \nExamples:\nfibonacci_iterative_acc(0) = 1\nfibonacci_iterative_acc(1)\
    \ = 1\nfibonacci_iter", "    if n == 1 \n        return [1]\n    else if n % 2\
    \ == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n    \
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend", "    if n == 1 \n        return [1]\n    else if n ==\
    \ 2 \n        return [1, 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the first n numbers of the Fibonacci sequence. \n    For example,\
    \ fib(3) = 1 + 2 + 3 = 6\n    You are given a non-negative integer number n, you\
    \ have to a return a list of the \n    first n + 1 numbers of the Fibonacci sequence.\n\
    \    Examples:\n    >>> fib(3)\n    [1, 1, 2]\n    \"\"\"", "    if n == 1 \n\
    \        Vector{Int64}(1)\n    elseif n == 2 \n        Vector{Int64}(3)\n    elseif\
    \ n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n      \
    \  tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=fibonacci,recursion,julia |>\n<code>", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the sum of all even numbers in a given list.\nExamples:\n>>>\
    \ sum([2, 4, 6, 8])\n10\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n21\n>>> sum([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10])\n30\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20])\n42\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,\
    \ 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n101\n>>> sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,\
    \ 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\
    \ 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\
    \ 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99])\n\
    101\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\
    \ 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57,\
    \ 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,\
    \ 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,\
    \ 96, 97, 98, 99])\n101\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, ", "    if n\
    \ == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n\
    \ == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the n-th number of the Fibonacci sequence. \nExamples:\n\
    >>> fib(3)\n3\n>>> fib(10)\n55\n>>> fib(20)\n6765\n>>> fib(30)\n6765\n>>> fib(100)\n\
    6765\n>>> fib(1000)\n6765\n>>> fib(10000)\n6765\n>>> fib(100000)\n6765\n>>> fib(1000000)\n\
    6765\n>>> fib(10000000)\n6765\n>>> fib(100000000)\n6765\n>>> fib(1000000000)\n\
    6765\n>>> fib(10000000000)\n6765\n>>> fib(100000000000)\n6765\n>>> fib(1000000000000)\n\
    6765\n>>> fib(10000000000000)\n6765\n>>> fib(100000000000000)\n6765\n>>> fib(1000000000000000)\n\
    6765\n>>> fib(10000000000000000)\n6765\n>>> fib(100000000000000000)\n6765\n>>>\
    \ fib(1000000000000000000)\n6765\n>>> fib(10000000000000000000)\n6765\n>>> fib(100000000000000000000)\n\
    6765\n>>> fib(1000000000000000000000)\n6765\n>>> fib(10000000000000000000000)\n\
    6765\n>>> fib(100000000000000000000000)\n6765\n>>> fib(1000000000000000000000000)\n\
    6765\n>>> fib(10000000000000000000000000)\n6765\n>>> fib(100000000000000000000000000)\n\
    6765\n>>> fib(1000000000000000000000000000)\n6765\n>>> fib(10000000000000000000000000000)\n\
    6765\n>>> fib(100000000000000000000000000000)\n6765\n>>> fib(1000000000000000000000000000000)\n\
    6765\n>>> fib(10000000000000000000000000000000)\n6765\n>>> fib(100000000000000000000000000000000)\n\
    6765\n>>> fib(1000000000000000000000000000000000)\n6765\n>>> fib(10000000000000000000000000000000000)\n\
    6765\n>>> fib(100000000000000000000000000000000000)\n6765\n>>> fib(1000000000000000000000000000000000000)\n\
    6765\n>>> fib(10000000000000000000000000000000000000)\n6765\n>>> fib(100000000000000000000000000000000000000)\n\
    6765\n>>> fib(10000000000000000000000000000000000", "    if n == 1 \n        return\
    \ [1]\n    else if n == 2 \n        return [1, 1]\n    else \n        tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer $n$ and returns the $n$th Fibonacci number.",
  "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + ", "    if n == 1\
    \ \n        return [1]\n    else if n == 2 \n        return [1, 1]\n    else \n\
    \        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that calculates Fibonacci number\n\
    \    \n    Arguments\n    ---------\n    n : Integer\n        Number to be calculated\n\
    \    \n    Returns\n    -------\n    Integer\n        Fibonacci number\n    \n\
    \    Raises\n    ------\n    ArgumentError\n        If n is not a positive integer\n\
    \    \n    Examples\n    --------\n    >>> fib(3)\n    3\n    >>> fib(4)\n   \
    \ 5\n    >>> fib(5)\n    8\n    >>> fib(6)\n    13\n    >>> fib(7)\n    21\n \
    \   >>> fib(8)\n    34\n    >>> fib(9)\n    55\n    >>> fib(10)\n    89\n    >>>\
    \ fib(11)\n    144\n    >>> fib(12)\n    233\n    >>> fib(13)\n    377\n    >>>\
    \ fib(14)\n    610\n    >>> fib(15)\n    987\n    >>> fib(16)\n    1597\n    >>>\
    \ fib(17)\n    2584\n    >>> fib(18)\n    4181\n    >>> fib(19)\n    6765\n  \
    \  >>> fib(20)\n    10946\n    >>> fib(21)\n    17711\n    >>> fib(22)\n    28657\n\
    \    >>> fib(23)\n    46368\n    >>> fib(24)\n    75025\n    >>> fib(25)\n   \
    \ 121393\n    >>> fib(26)\n    196418\n    >>> fib(27)\n    317811\n    >>> fib(28)\n\
    \    514229\n    >>> fib(29)\n    832040\n    >>> fib(30)\n    1346269\n    >>>\
    \ fib(31)\n    2178309\n    >>> fib(32)\n    3524578\n    >>> fib(33)\n    5702887\n\
    \    >>> fib(34)\n    9227465\n    >>> fib(35)\n    14930352\n    >>> fib(36)\n\
    \    24157817\n    >>> fib(37)\n    39088169\n    >>> fib(38)\n    63245986\n\
    \    >>> fib(39)\n    102334155\n    >>> fib(40)\n    165580141\n    >>> fib(41)\n\
    \    267914296\n    >>> fib(42)\n    ", "    if n == 1 \n        return [1]\n\
    \    else if n == 2 \n        return [1, 1]\n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that returns the n-th number of the Fibonacci sequence. \n    For example, fib(3)\
    \ = 5.", "    if n == 1 \n        tri_vec = [3]\n    elseif n == 2 \n        tri_vec\
    \ = [1, 3]\n    elseif n % 2 == 0 \n        tri_vec = tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    else\n        tri_vec = tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2)\n    end\n    return tri_vec\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3),\
    \ if n is odd.\n    \n    Examples:\n    fib(0)\n    1\n    fib(1)\n    1\n  \
    \  fib(2)\n    3\n    \n    fib(3)\n    8\n    \n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3), if n is odd.\n    \n    Examples:\n    fib(2)\n    1 + 2\n    fib(3)\n\
    \    1 + 3 + 5\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n\
    \    \n    Examples:\n    fib(2)\n    1 + 2\n    fib(3)\n    1 + 3 + 5\n    \n\
    \    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    \n    Examples:\n\
    \    fib(2)\n    1 + 2\n    fib(3)\n    1 + 3 + 5\n    \n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n-3), if n is odd.\n    \n    Examples:\n    fib(2)\n    1\
    \ + 2\n    fib(3)\n    1 + 3 + 5\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3),\
    \ if n is odd.\n    \n    Examples:\n    fib(2)\n    1 + 2\n    fib(3)\n    1\
    \ + 3 + 5\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n \
    \   \n    Examples:\n    fib(2)\n    1 + 2\n    fib(3)\n    1 + 3 + 5\n    \n\
    \    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    \n    Examples:\n\
    \    fib(2)\n    1 + 2\n    fib(3)\n    1 + 3 + 5\n    ", "    if n == 1\n   \
    \     return [1]\n    else if n % 2 == 0\n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n\
    \    end\nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\n    fib(n)\n    \n\
    \    Recursive function that calculates Fibonacci number\n    \n    Arguments:\n\
    \    \n    - `n`: non-negative integer\n    \n    Returns:\n    \n    - `Vector{Int64}`\n\
    \    \n    Examples:\n    \n    >>> fib(3)\n    [1, 1, 2]\n    \n    \"\"\"",
  "    if n == 1 \n        return [1]\n    if n == 2 \n        return [1, 1]\n   \
    \ if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) \n    else\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the n-th number of the Fibonacci\
    \ sequence. \n    For example, fib(3) = fib(2) + fib(1) + fib(0) \n    or fib(4)\
    \ = fib(3) + fib(2) + fib(1) + fib(0) \n    or fib(5) = fib(4) + fib(3) + fib(2)\
    \ + fib(1) + fib(0) \n    or fib(6) = fib(5) + fib(4) + fib(3) + fib(2) + fib(1)\
    \ + fib(0) \n    or fib(7) = fib(6) + fib(5) + fib(4) + fib(3) + fib(2) + fib(1)\
    \ + fib(0) \n    or fib(8) = fib(7) + fib(6) + fib(5) + fib(4) + fib(3) + fib(2)\
    \ + fib(1) + fib(0) \n    or fib(9) = fib(8) + fib(7) + fib(6) + fib(5) + fib(4)\
    \ + fib(3) + fib(2) + fib(1) + fib(0) \n    or fib(10) = fib(9) + fib(8) + fib(7)\
    \ + fib(6) + fib(5) + fib(4) + fib(3) + fib(2) + fib(1) + fib(0) \n    or fib(11)\
    \ = fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + fib(4) + fib(3) + fib(2)\
    \ + fib(1) + fib(0) \n    or fib(12) = fib(11) + fib(10) + fib(9) + fib(8) + fib(7)\
    \ + fib(6) + fib(5) + fib(4) + fib(3) + fib(2) + fib(1) + fib(0) \n    or fib(13)\
    \ = fib(12) + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) +\
    \ fib(4) + fib(3) + fib(2) + fib(1) + fib(0) \n    or fib(14) = fib(13) + fib(12)\
    \ + fib(11) + fib(10) + fib(9) + fib(8) + fib(7) + fib(6) + fib(5) + ", "    if\
    \ n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n % 2 ==\
    \ 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n\
    \ + 2)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n)\n    \n  \
    \  Recursive function that returns the nth number of the Fibonacci sequence\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    \n\
    \    Examples:\n    >>> fib(3)\n    8\n    >>> fib(0)\n    0\n    >>> fib(1)\n\
    \    1\n    \"\"\"", "    if n == 0 \n        Vector{Int64}() \n    else \n  \
    \      tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    fib(n::Int64)::Int64", "    if n == 0 \n        Vector{Int64}() \n\
    \    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ $n$th Fibonacci number.", "    if n == 0\n        return Vector{Int64}()\n \
    \   elseif n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n  \
    \      return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 0\n        return Vector{Int64}()\n \
    \   if n == 1\n        return Vector{Int64}(3)\n    if n % 2 == 0\n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\
    \"\"\n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n %\
    \ 2 == 0 \n        return tri(n-1) + tri(n-2)\n    else \n        return tri(n-1)\
    \ + tri(n-2) + tri(n+1) + tri(n+2)\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the numbers from 1 to n.", "    if n == 1 \n\
    \        return [1]\n    else if n == 2 \n        return [1, 1]\n    else \n \
    \       tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        return tri_1 + tri_2\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        vec = [3]\n    else \n        vec = [tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3)]\n    end\n    return vec\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the Fibonacci sequence up to a specified number.",
  "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number in\
    \ the Fibonacci sequence. \n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2)\n    \n    Examples:\n    >>> fib(3)\n    8\n    >>> fib(0)\n\
    \    0\n    >>> fib(1)\n    1\n    \"\"\"", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer $n$ and returns\
    \ the $n$th Fibonacci number.", "    if n == 1 \n        return [1]\n    else\
    \ if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ nth number of the Fibonacci sequence. \nExamples:\n>>> fib(3)\n8\n>>> fib(4)\n\
    13\n>>> fib(5)\n21\n>>> fib(6)\n34\n>>> fib(7)\n55\n>>> fib(8)\n89\n>>> fib(9)\n\
    144\n>>> fib(10)\n233\n>>> fib(11)\n377\n>>> fib(12)\n610\n>>> fib(13)\n987\n\
    >>> fib(14)\n1597\n>>> fib(15)\n2584\n>>> fib(16)\n4181\n>>> fib(17)\n6765\n>>>\
    \ fib(18)\n10946\n>>> fib(19)\n17711\n>>> fib(20)\n28657\n>>> fib(21)\n46368\n\
    >>> fib(22)\n75025\n>>> fib(23)\n121393\n>>> fib(24)\n196418\n>>> fib(25)\n317811\n\
    >>> fib(26)\n514229\n>>> fib(27)\n832040\n>>> fib(28)\n1346269\n>>> fib(29)\n\
    2178309\n>>> fib(30)\n3524578\n>>> fib(31)\n5702887\n>>> fib(32)\n9273529\n>>>\
    \ fib(33)\n14930352\n>>> fib(34)\n24157817\n>>> fib(35)\n39088169\n>>> fib(36)\n\
    63245986\n>>> fib(37)\n102334155\n>>> fib(38)\n165580141\n>>> fib(39)\n267914296\n\
    >>> fib(40)\n433494437\n>>> fib(41)\n701408733\n>>> fib(42)\n1134903170\n>>> fib(43)\n\
    1836311903\n>>> fib(44)\n2971215073\n>>> fib(45)\n4807526976\n>>> fib(46)\n7348544128\n\
    >>> fib(47)\n12586269025\n>>> fib(48)\n20365011074\n>>> fib(49)\n32951280099\n\
    >>> fib(50)\n490124227", "    if n == 1 \n        return [1]\n    else if n ==\
    \ 2 \n        return [1, 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+1)\
    \ + tri(n+2)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the n-th number of the Fibonacci sequence. \n    For example, fib(3) = 5.",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the n-th Fibonacci number in the Fibonacci\
    \ sequence. \n    For example, fib(3) = fib(2) + fib(1).", "    if n == 0 \n \
    \       Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nExamples:\n>>> factorial(5)\n120\n>>> factorial(10)\n\
    3628800\n>>> factorial(0)\n1\n>>> factorial(-1)\n1\n>>> factorial(-2)\n1\n>>>\
    \ factorial(-3)\n1\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.8813735870195429\n>>> factorial(-1.5)\n\
    0.8813735870195429\n>>> factorial(1.5)\n0.", "    if n == 1 \n        Vector{Int64}(1)\n\
    \    elseif n == 2 \n        Vector{Int64}(3)\n    elseif n % 2 == 0 \n      \
    \  tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the nth Fibonacci number in the Fibonacci\
    \ sequence. \nThe Fibonacci sequence is defined by the recurrence:\nfibonacci(1)\
    \ = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if\
    \ n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3) + fibonacci(n - 4), if n is odd.\nExamples:\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n numbers of the Fibonacci sequence. \n\
    The Fibonacci sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nExamples:\n\
    fibonacci(3)\nfibonacci(4)\nfibonacci(5)\nfibonacci(6)\nfibonacci(7)\nfibonacci(8)\n\
    fibonacci(9)\nfibonacci(10)\nfibonacci(11)\nfibonacci(12)\nfibonacci(13)\nfibonacci(14)\n\
    fibonacci(15)\nfibonacci(16)\nfibonacci(17)\nfibonacci(18)\nfibonacci(19)\nfibonacci(20)\n\
    fibonacci(21)\nfibonacci(22)\nfibonacci(23)\nfibonacci(24)\nfibonacci(25)\nfibonacci(26)\n\
    fibonacci(27)\nfibonacci(28)\nfibonacci(29)\nfibonacci(30)\nfibonacci(31)\nfibonacci(32)\n\
    fibonacci(33)\nfibonacci(34)\nfibonacci(35)\nfibonacci(36)\nfibonacci(37)\nfibonacci(38)\n\
    fibonacci(39)\nfibonacci(40)\nfibonacci(41)\nfibonacci(42)\nfibonacci(43)\nfibonacci(44)\n\
    fibonacci(45)\nfibonacci(46)\nfibonacci(47)\nfibonacci(48)\nfibonacci(49)\nfibonacci(50)\n\
    fibonacci(51)\nfibonac", "    if n == 1 \n        [1]\n    else if n % 2 == 0\
    \ \n        tri(n - 1) + tri(n - 2)\n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    end\nend\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a positive integer $n$ and returns the number of digits in $n$. \nExamples:\n\
    $n = 10$, $n = 100$, $n = 1000$, $n = 10000$, $n = 100000$, $n = 1000000$, $n\
    \ = 10000000$, $n = 100000000$, $n = 1000000000$, $n = 10000000000$, $n = 100000000000$,\
    \ $n = 1000000000000$, $n = 10000000000000$, $n = 100000000000000$, $n = 1000000000000000$,\
    \ $n = 10000000000000000$, $n = 100000000000000000$, $n = 1000000000000000000$,\
    \ $n = 10000000000000000000$, $n = 100000000000000000000$, $n = 1000000000000000000000$,\
    \ $n = 10000000000000000000000$, $n = 100000000000000000000000$, $n = 1000000000000000000000000$,\
    \ $n = 10000000000000000000000000$, $n = 100000000000000000000000000$, $n = 1000000000000000000000000000$,\
    \ $n = 10000000000000000000000000000$, $n = 100000000000000000000000000000$, $n\
    \ = 1000000000000000000000000000000$, $n = 10000000000000000000000000000000$,\
    \ $n = 100000000000000000000000000000000$, $n = 1000000000000000000000000000000000$,\
    \ $n = 10000000000000000000000000000000000$, $n = 100000000000000000000000000000000000$,\
    \ $n = 1000000000000000000000000000000000000$, $n = 10000000000000000000000000000000000000$,\
    \ $n = 100000000000000000000000000000000000000$, $n = 1000000000000000000000000000000000000000$,\
    \ $n = 10000000000000000000000000000000000000000$, $n = 100000000000000000000000000000000000000000$,\
    \ $n = 1000000000000000000000000000000000000000000$, $n = 10000000000000000000000000000000000000000000$,\
    \ $n = 100000000000000000000000000000000000000000000$, $n = 1000000000000000000000000000000000000000000000$,\
    \ $n = 10000000000000000000000000000000000000000000000$, $n = 100000000000000000000000000000000000000000000000$,\
    \ $n = 1000000000000000000000000000000000000000000000000$, $n = 10000000000000000000000000000000000000000000000000$,\
    \ $n = 100000000000000000000000000000000000000000000000000$, $n = 1000000000000000000000000000000000000000000000000000$,\
    \ $n = 10000000000000000000000000000000000000000000000000000$, $n = 100000000000000000000000000000000000000000000000000000$,\
    \ $n = 1000000000000000000000000000000000000000000000000000000$, $n = 10000000000000000000000000000000000000000000000000000000$,\
    \ $n = 100000000000000000000000000000000000000000000000000000000$, $n = 1000000000000000000000000000000000000000000000000000000000$,\
    \ $n = 10000000000000000000000000000000000000000000000000000000000$, $n = 100000000000000000000000000000000000000000000000000000000000$,\
    \ $n = 1000000000000000000000000000000000000000000000000000000000000$, $n = 10000000000000000000000000000000000000000000000000000000000000$,\
    \ $n = 100000000000000000000000000000000000000000000000000000000000000$, $n =\
    \ 1000000000000000000", "    if n == 1 \n        return [1]\n    else if n % 2\
    \ == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n    \
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ first n numbers of the Fibonacci sequence.\nExamples:\n>>> fib(10)\n55\n>>>\
    \ fib(5)\n25\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n55\n>>> fib(10)\n\
    55\n>>> fib(10)", "    if n == 0 \n        return Vector{Int64}() \n    else if\
    \ n == 1 \n        return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n numbers of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\n\
    fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nExamples:\n\
    fibonacci(3)\nfibonacci(4)\nfibonacci(5)\nfibonacci(6)\nfibonacci(7)\nfibonacci(8)\n\
    fibonacci(9)\nfibonacci(10)\nfibonacci(11)\nfibonacci(12)\nfibonacci(13)\nfibonacci(14)\n\
    fibonacci(15)\nfibonacci(16)\nfibonacci(17)\nfibonacci(18)\nfibonacci(19)\nfibonacci(20)\n\
    fibonacci(21)\nfibonacci(22)\nfibonacci(23)\nfibonacci(24)\nfibonacci(25)\nfibonacci(26)\n\
    fibonacci(27)\nfibonacci(28)\nfibonacci(29)\nfibonacci(30)\nfibonacci(31)\nfibonacci(32)\n\
    fibonacci(33)\nfibonacci(34)\nfibonacci(35)\nfibonacci(36)\nfibonacci(37)\nfibonacci(38)\n\
    fibonacci(39)\nfibonacci(40)\nfibonacci(41)\nfibonacci(42)\nfibonacci(43)\nfibonacci(44)\n\
    fibonacci(45)\nfibonacci(46)\nfibonacci(47)\nfibonacci(48)\nfibonacci(49)\nfibonacci",
  "    if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n % 2 ==\
    \ 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n\
    \ + 2)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question.\
    \ OP asked for a recursive solution, not a looping one.\n<|/ c |>\n<| c |>\nThe\
    \ question was about recursive solution, not looping. Recursive solution is more\
    \ efficient than looping solution. Recursive solution has better time complexity\
    \ than looping solution. Recursive solution has better readability and maintainability.\
    \ Recursive solution has better readability and maintainability than looping solution.\
    \ Recursive solution has better readability and maintainability than looping solution.\
    \ Recursive solution has better readability and maintainability than looping solution.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    if n == 1 \n        [1]\n    else \n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    Examples:\n>>> factorial(3)\n6\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n\
    >>> factorial(20)\n12164510040883200\n>>> factorial(30)\n2432902008176640000\n\
    >>> factorial(100)\n36288008800\n>>> factorial(1000)\n72057594037927936000\n>>>\
    \ factorial(10000)\n121645100408832000\n>>> factorial(100000)\n2432902008176640000\n\
    >>> factorial(1000000)\n72057594037927936000\n>>> factorial(10000000)\n1216451004088320000\n\
    >>> factorial(100000000)\n24329020081766400000\n>>> factorial(1000000000)\n72057594037927936000000\n\
    >>> factorial(10000000000)\n12164510040883200000000\n>>> factorial(100000000000)\n\
    243290200817664000000000\n>>> factorial(1000000000000)\n720575940379279360000000000\n\
    >>> factorial(10000000000000)\n121645100408832000000000000000\n>>> factorial(1000000000000000)\n\
    243290200817664000000000000000\n>>> factorial(10000000000000000)\n72057594037927936000000000000000\n\
    >>> factorial(100000000000000000)\n1216451004088320000000000000000\n>>> factorial(1000000000000000000)\n\
    24329020081766400000000000000000\n>>> factorial(10000000000000000000)\n72057594037927936000000000000000000\n\
    >>> factorial(100000000000000000000)\n1216451004088320000000000000000000000\n\
    >>> factorial(1000000000000000000000)\n24329020081766400000000000000000000000\n\
    >>> factorial(10000000000000000000000)\n72057594037927936000000000000000000000000\n\
    >>> factorial(100000000000000000000000)\n1216451004088320000000000000000000000000\n\
    >>> factorial(1000000000000000000000000)\n7205759403792793600000000000000000000000000\n\
    >>> factorial(10000000000000000000000000)\n12164510040883200000000000000000000000000000000\n\
    >>> factorial(100000000000000000000000000)\n720575940379279360000000000000000000000000000000000\n\
    >>> factorial(1000000000000000000000000000)\n121645100408832000000000000000000000000000000000000\n\
    >>> factorial(1000000000000000000", "    if n == 1 \n        return [1]\n    else\
    \ if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n\
    \        Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64\n\
    \    \n    Calculates the nth number of the Fibonacci sequence. \n    \n    Examples:\n\
    \    >>> fib(3)\n    8\n    >>> fib(10)\n    55\n    \"\"\"", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the numbers in the list.\nExamples:\n\
    >>> sum([1, 2, 3, 4])\n10\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3, 0])\n0\n>>>\
    \ sum([1, 2, 3, -1])\n-1\n>>> sum([1, 2, 3, -2])\n-2\n>>> sum([1, 2, 3, -3, 4])\n\
    10\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1,\
    \ 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3,\
    \ 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n\
    15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1,\
    \ 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3,\
    \ 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n\
    15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1,\
    \ 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3,\
    \ 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n\
    15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1,\
    \ 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3,\
    \ 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n\
    15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1,\
    \ 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3,\
    \ 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n\
    15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1,\
    \ 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3, 4, 5])\n15\n>>> sum([1, 2, 3, -3,\
    \ 4, 5])\n15\n>>> sum([", "    if n == 1 \n        return [1]\n    else if n ==\
    \ 2 \n        return [1, 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n numbers of the Fibonacci sequence in descending order.", "    if\
    \ n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri", "    if n == 1 \n      \
    \  return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4)\nend\n</code>\n<|/ a tags=fibonacci,julia,recursion\
    \ |>\n<| a dscore=2 |>\nThe recursive solution is very elegant:\n<code>", "  \
    \  if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    fib(n::Int64)::Vector{Int64}\n    \n    Calculates Fibonacci sequence up\
    \ to n.\n    \n    Arguments:\n    \n    - `n`: positive integer, the number of\
    \ the Fibonacci sequence to calculate\n    \n    Returns:\n    \n    - `Vector{Int64}`,\
    \ the Fibonacci sequence up to n\n    \n    Examples:\n    \n    >>> fib(3)\n\
    \    [1, 1, 2]\n    \n    >>> fib(10)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\
    \    \"\"\"", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 0\n        Vector{Int64}()\n    elseif\
    \ n == 1\n        Vector{Int64}(3)\n    elseif n % 2 == 0\n        tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2), if n is even.\n    \n    Examples:\n    >>> fib(3)\n  \
    \  8\n    >>> fib(5)\n    34\n    \"\"\"", "    if n == 1\n        return [1]\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer $n$ and returns the $n$th Fibonacci number.", "    if\
    \ n == 1\n        Vector{Int64}(1)\n    elseif n == 2\n        Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that returns the sum of the\
    \ squares of the first n numbers of the Fibonacci sequence.\nExamples:\n>>> fib(10)\n\
    55\n>>> fib(20)\n233168\n>>> fib(100)\n233168\n>>> fib(1000)\n233168\n>>> fib(10000)\n\
    233168\n>>> fib(100000)\n233168\n>>> fib(1000000)\n233168\n>>> fib(10000000)\n\
    233168\n>>> fib(100000000)\n233168\n>>> fib(1000000000)\n233168\n>>> fib(10000000000)\n\
    233168\n>>> fib(100000000000)\n233168\n>>> fib(1000000000000)\n233168\n>>> fib(10000000000000)\n\
    233168\n>>> fib(100000000000000)\n233168\n>>> fib(1000000000000000)\n233168\n\
    >>> fib(10000000000000000)\n233168\n>>> fib(100000000000000000)\n233168\n>>> fib(1000000000000000000)\n\
    233168\n>>> fib(10000000000000000000)\n233168\n>>> fib(100000000000000000000)\n\
    233168\n>>> fib(1000000000000000000000)\n233168\n>>> fib(10000000000000000000000)\n\
    233168\n>>> fib(100000000000000000000000)\n233168\n>>> fib(1000000000000000000000000)\n\
    233168\n>>> fib(10000000000000000000000000)\n233168\n>>> fib(100000000000000000000000000)\n\
    233168\n>>> fib(1000000000000000000000000000)\n233168\n>>> fib(10000000000000000000000000000)\n\
    233168\n>>> fib(100000000000000000000000000000)\n233168\n>>> fib(1000000000000000000000000000000)\n\
    233168\n>>> fib(10000000000000000000000000000000)\n233168\n>>> fib(100000000000000000000000000000000)\n\
    233168\n>>> fib(1000000000000000000000000000000000)\n233168\n>>> fib(10000000000000000000000000000000000)\n\
    233168\n>>> fib(100000000000000000000000000000000000)\n233168\n>>> fib(1000000000000000000000000000000000000)\n\
    233168\n>>> fib(10000000000000000000000000000000000000)\n233168\n>>> fib(100000000000000000000000000000000000000)\n\
    233168\n>>> fi", "    if n == 1 \n        Vector{Int64}(1) \n    else \n     \
    \   tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 9\nWrite a function that takes an integer $n$ and returns the $n$th Fibonacci\
    \ number.", "    if n == 1\n        return [1]\n    else if n % 2 == 0\n     \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function for calculating Fibonacci number\n\
    \    \n    Arguments:\n        n - an integer\n    \n    Returns:\n        Fibonacci\
    \ number - an integer\n    \n    Examples:\n        fib(0) = 0\n        fib(1)\
    \ = 1\n        fib(2) = 1\n        fib(3) = 2\n        fib(4) = 3\n        fib(5)\
    \ = 5\n        fib(6) = 8 \n        fib(7) = 13 \n        fib(8) = 21\n      \
    \  fib(9) = 34 \n        fib(10) = 55 \n        fib(11) = 89 \n        fib(12)\
    \ = 144 \n        fib(13) = 233 \n        fib(14) = 434 \n        fib(15) = 676\
    \ \n        fib(16) = 1090 \n        fib(17) = 1771 \n        fib(18) = 2860 \n\
    \        fib(19) = 3088 \n        fib(20) = 4181 \n        fib(21) = 5516 \n \
    \       fib(22) = 7293 \n        fib(23) = 9402 \n        fib(24) = 12586 \n \
    \       fib(25) = 15138 \n        fib(26) = 18363 \n        fib(27) = 21489 \n\
    \        fib(28) = 24578 \n        fib(29) = 27941 \n        fib(30) = 31126 \n\
    \        fib(31) = 35242 \n        fib(32) = 41869 \n        fib(33) = 47702 \n\
    \        fib(34) = 53057 \n        fib(35) = 59402 \n        fib(36) = 65690 \n\
    \        fib(37) = 72957 \n        fib(38) = 80861 \n        fib(39) = 88190 \n\
    \        fib(40) = 96016 \n        fib(41) = 107566 \n        fib(42) = 115925\
    \ \n        fib(43) = 125215 \n        fib(44) = 134739 \n        fib(45) = 143952\
    \ \n        fib(46) = 154033 \n        fib(47) = 163969 \n        ", "    if n\
    \ == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\nend", "    if n == 1 \n        Vector{Int64}(1) \n\
    \    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the Fibonacci number at a given\
    \ index. \nThe Fibonacci sequence is defined by the recurrence:\nfibonacci(1)\
    \ = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if\
    \ n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3), if n is odd.\nFor example:\nfibonacci(3) = fibonacci(2) + fibonacci(1)\n\
    \           = 1 + 1 + 1\n    You are given a non-negative integer number n, you\
    \ have to a return the nth \n    Fibonacci number.\n    Examples:\n    >>> fibonacci(3)\n\
    \    3\n    \"\"\"", "    if n == 0 \n        Vector{Int64}() \n    else \n  \
    \      tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 2]\n\
    \    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ first n positive integers. \nExamples:\n>>> square_sum(3)\n9\n>>> square_sum(10)\n\
    55\n>>> square_sum(100)\n12586269025\n>>> square_sum(1000)\n12586269025440007\n\
    >>> square_sum(10000)\n12586269025440007\n>>> square_sum(100000)\n12586269025440007\n\
    >>> square_sum(1000000)\n12586269025440007\n>>> square_sum(10000000)\n12586269025440007\n\
    >>> square_sum(100000000)\n12586269025440007\n>>> square_sum(1000000000)\n12586269025440007\n\
    >>> square_sum(10000000000)\n12586269025440007\n>>> square_sum(100000000000)\n\
    12586269025440007\n>>> square_sum(1000000000000)\n12586269025440007\n>>> square_sum(10000000000000)\n\
    12586269025440007\n>>> square_sum(100000000000000)\n12586269025440007\n>>> square_sum(1000000000000000)\n\
    12586269025440007\n>>> square_sum(10000000000000000)\n12586269025440007\n>>> square_sum(100000000000000000)\n\
    12586269025440007\n>>> square_sum(1000000000000000000)\n12586269025440007\n>>>\
    \ square_sum(10000000000000000000)\n12586269025440007\n>>> square_sum(100000000000000000000)\n\
    12586269025440007\n>>> square_sum(1000000000000000000000)\n12586269025440007\n\
    >>> square_sum(10000000000000000000000)\n12586269025440007\n>>> square_sum(100000000000000000000000)\n\
    12586269025440007\n>>> square_sum(1000000000000000000000000)\n12586269025440007\n\
    >>> square_sum(10000000000000000000000000)\n12586269025440007\n>>> square_sum(100000000000000000000000000)\n\
    12586269025440007\n>>> square_sum(1000000000000000000000000000)\n12", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the factorial of a given number. \nExamples:\n>>> factorial(5)\n120\n\
    >>> factorial(10)\n3628800\n>>> factorial(-1)\n1\n>>> factorial(0)\n1\n>>> factorial(1)\n\
    1\n>>> factorial(2)\n2\n>>> factorial(3)\n6\n>>> factorial(4)\n24\n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(100)\nTraceback (most recent call\
    \ last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2,\
    \ in factorial\nValueError: factorial() not defined for negative values\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n3628800\n>>> factorial(10)\n\
    3628800\n>>> factorial(10)\n3628800\n>>> factori", "    if n == 1\n        [1]\n\
    \    elseif n == 2\n        [1,2]\n    else\n        tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n)\n\
    \    \n    Recursive Fibonacci function.\n    \n    Arguments:\n    \n    - `n`:\
    \ non-negative integer\n    \n    Returns:\n    \n    - `n` Fibonacci number\n\
    \    \n    Examples:\n    \n    >>> fib(3)\n    8\n    >>> fib(4)\n    13\n  \
    \  >>> fib(5)\n    21\n    >>> fib(6)\n    34\n    >>> fib(7)\n    55\n    \"\"\
    \"", "    if n == 1 \n        tri_vec = [3]\n    else \n        tri_vec = [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    fib(n::Int64)", "    if n == 1 \n        Vector{Int64}([3])\n    else if\
    \ n%2 == 0 \n        Vector{Int64}([tri(n-1)+tri(n-2)+tri(n-3)])\n    else \n\
    \        Vector{Int64}([tri(n-1)+tri(n-2)+tri(n-3)+tri(n-4)])\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64", "    if\
    \ n == 1 \n        Vector{Int64}([3])\n    else \n        tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that calculates the factorial of a given number. \nExamples:\nfactorial(5) =\
    \ 5 * 5 * 5 = 25\nfactorial(3) = 3 * 3 * 3 = 9\nfactorial(4) = 4 * 2 * 2 * 2 *\
    \ 2 = 16\nfactorial(6) = 6 * 3 * 2 * 1 * 1 * 1 = 720\nfactorial(7) = 7 * 2 * 1\
    \ * 1 * 1 * 1 * 1 = 5040\nfactorial(8) = 8 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 40320\n\
    factorial(9) = 9 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 362880\nfactorial(10) = 10\
    \ * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 2621440\nfactorial(11) = 11 * 1 * 1 *\
    \ 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 20922789888000\nfactorial(12) = 12 * 1 * 1 *\
    \ 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 137438953472000\nfactorial(13) = 13 * 1 * 1\
    \ * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\nfactorial(14) = 14 * 1\
    \ * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\nfactorial(15) = 15\
    \ * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\nfactorial(16)\
    \ = 16 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\nfactorial(17)\
    \ = 17 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\nfactorial(18)\
    \ = 18 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\nfactorial(19)\
    \ = 19 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\nfactorial(20)\
    \ = 20 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\nfactorial(21)\
    \ = 21 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\nfactorial(22)\
    \ = 22 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\nfactorial(23)\
    \ = 23 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720\n\
    factorial(24) = 24 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 = 1374389534720",
  "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the sum of the numbers from 1 to n.", "    if n == 1 \n       \
    \ return [1]\n    else if n == 2 \n        return [1, 2]\n    else if n % 2 ==\
    \ 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend", "    if n ==\
    \ 1\n        [1]\n    else\n        tri(n-1) + tri(n-2) + tri(n+1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the n-th Fibonacci\
    \ number.", "    if n == 1 \n        Vector{Int64}([3])\n    elseif n == 2 \n\
    \        Vector{Int64}([1,2])\n    elseif n % 2 == 0 \n        Vector{Int64}([tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)])\n    else\n        Vector{Int64}([tri(n\
    \ - 1) + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1)])\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nExamples:\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(20)\n\
    2432902008176640000\n>>> factorial(30)\n6.204484017332394E+19\n>>> factorial(100)\n\
    4.3324569312439829E+61\n>>> factorial(1000)\n1.7976931348623157e+308\n>>> factorial(10000)\n\
    5.665640956659566E+186\n>>> factorial(100000)\n9.999999999999999E+307\n>>> factorial(1000000)\n\
    1.7976931348623157e+308\n>>> factorial(10000000)\n1.7976931348623157e+308\n>>>\
    \ factorial(100000000)\n1.7976931348623157e+308\n>>> factorial(1000000000)\n1.7976931348623157e+308\n\
    >>> factorial(10000000000)\n1.7976931348623157e+308\n>>> factorial(100000000000)\n\
    1.7976931348623157e+308\n>>> factorial(1000000000000)\n1.7976931348623157e+308\n\
    >>> factorial(10000000000000)\n1.7976931348623157e+308\n>>> factorial(100000000000000)\n\
    1.7976931348623157e+308\n>>> factorial(1000000000000000)\n1.7976931348623157e+308\n\
    >>> factorial(10000000000000000)\n1.7976931348623157e+308\n>>> factorial(100000000000000000)\n\
    1.7976931348623157e+308\n>>> factorial(1000000000000000000)\n1.7976931348623157e+308\n\
    >>> factorial(10000000000000000000)\n1.7976931348623157e+308\n>>> factorial(100000000000000000000)\n\
    1.797693134", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", "    if n == 1 \n        Vector{Int64}(1)\n\
    \    elseif n == 2 \n        Vector{Int64}(3)\n    elseif n % 2 == 0 \n      \
    \  tri(n - 1) + tri(n - 2) + tri(n + 1)\n    elseif n % 2 == 1 \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ numbers from 1 to n that are divisible by 3.", "    if n == 1 \n        tri_vec\
    \ = [3]\n    else if n % 2 == 0 \n        tri_vec = tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n    else \n        tri_vec = tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4)\n    end\n    return tri_vec\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the n-th Fibonacci number.", "    if\
    \ n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    fib(n::Int64)::Int64", "    if n == 0\n        return Vector{Int64}()\n\
    \    else if n == 1\n        return Vector{Int64}(3)\n    else\n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n        Vector{Int64}(1)\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the Fibonacci number at a given\
    \ index in the Fibonacci sequence.", "    if n == 1 \n        return [1]\n   \
    \ else if n % 2 == 0 \n        return tri(n-1) + tri(n-2) + tri(n+1) + [1]\n \
    \   else \n        return tri(n-1) + tri(n-2) + tri(n+1) + [1]\nend\n</cell>\n\
    <code language=julia-0.5>\n\"\"\"\n    fib(n::Int64)", "    if n == 0\n      \
    \  return Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.0>", "    if n ==\
    \ 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n + 2)\nend", "    if n == 0 \n        Vector{Int64}() \n \
    \   else \n        tri(n-1) + tri(n-2) + tri(n+1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64\n    \n    Recursive implementation\
    \ of Fibonacci sequence\n    \n    Arguments:\n    \n    - `n`: positive integer\n\
    \    \n    Returns:\n    \n    - `fib(n)`: returns `n` th Fibonacci number\n \
    \   \n    Examples:\n    \n    >>> fib(3)\n    3\n    >>> fib(10)\n    55\n  \
    \  \"\"\"", "    if n == 1\n        return [1]\n    elseif n == 2\n        return\
    \ [1, 1]\n    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    fib(n::Int64)::Int64\n\
    \    \n    Calculates the n-th number of the Fibonacci sequence.\n    \n    Arguments:\n\
    \    \n    - `n::Int64`: An integer number greater than or equal to 1.\n    \n\
    \    Returns:\n    \n    - `n::Int64`: An integer number greater than or equal\
    \ to 1.\n    \n    Examples:\n    \n    >>> fib(3)\n    8\n    >>> fib(4)\n  \
    \  13\n    \"\"\"", "    if n == 1 \n        Vector{Int64}(1)\n    else if n %\
    \ 2 == 0 \n        tri(n - 1) + tri(n - 2)\n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the Fibonacci sequence up to n.", "    if n == 1 \n        Vector{Int64}[1]\n\
    \    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the Fibonacci number at a given\
    \ index. \nThe Fibonacci numbers are defined by the recurrence:\nfibonacci(1)\
    \ = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if\
    \ n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3), if n is odd.\nFor example:\nfibonacci(3) = 3\nfibonacci(4) = fibonacci(3)\
    \ + fibonacci(2)\n           = fibonacci(3) + fibonacci(2) + fibonacci(1)\n  \
    \         = fibonacci(3) + fibonacci(2) + fibonacci(1) + fibonacci(0)\n      \
    \     = fibonacci(3) + fibonacci(2) + fibonacci(1) + fibonacci(0) + fibonacci(-1)\n\
    \           = fibonacci(3) + fibonacci(2) + fibonacci(1) + fibonacci(0) + fibonacci(-1)\
    \ + fibonacci(-2)\n           = fibonacci(3) + fibonacci(2) + fibonacci(1) + fibonacci(0)\
    \ + fibonacci(-1) + fibonacci(-2) + fibonacci(-3)\n           = fibonacci(3) +\
    \ fibonacci(2) + fibonacci(1) + fibonacci(0) + fibonacci(-1) + fibonacci(-2) +\
    \ fibonacci(-3) + fibonacci(-4)\n           = fibonacci(3) + fibonacci(2) + fibonacci(1)\
    \ + fibonacci(0) + fibonacci(-1) + fibonacci(-2) + fibonacci(-3) + fibonacci(-4)\
    \ + fibonacci(-5)\n           = fibonacci(3) + fibonacci(2) + fibonacci(1) + fibonacci(0)\
    \ + fibonacci(-1) + fibonacci(-2) + fibonacci(-3) + fibonacci(-4) + fibonacci(-5)\
    \ + fibonacci(-6)", "    if n == 1 \n        return [1]\n    else if n == 2 \n\
    \        return [1, 2]\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the nth\
    \ number of the Fibonacci sequence. \nExamples:\n>>> fib(3)\n8\n>>> fib(5)\n13\n\
    >>> fib(10)\n6765\n>>> fib(20)\n233168\n>>> fib(30)\n233168\n>>> fib(100)\n233168\n\
    >>> fib(1000)\n233168\n>>> fib(10000)\n233168\n>>> fib(100000)\n233168\n>>> fib(1000000)\n\
    233168\n>>> fib(10000000)\n233168\n>>> fib(100000000)\n233168\n>>> fib(1000000000)\n\
    233168\n>>> fib(10000000000)\n233168\n>>> fib(100000000000)\n233168\n>>> fib(1000000000000)\n\
    233168\n>>> fib(10000000000000)\n233168\n>>> fib(100000000000000)\n233168\n>>>\
    \ fib(1000000000000000)\n233168\n>>> fib(10000000000000000)\n233168\n>>> fib(100000000000000000)\n\
    233168\n>>> fib(100000000000000001)\n233168\n>>> fib(100000000000000002)\n233168\n\
    >>> fib(100000000000000003)\n233168\n>>> fib(100000000000000004)\n233168\n>>>\
    \ fib(100000000000000005)\n233168\n>>> fib(100000000000000006)\n233168\n>>> fib(100000000000000007)\n\
    233168\n>>> fib(100000000000000008)\n233168\n>>> fib(100000000000000009)\n233168\n\
    >>> fib(100000000000000010)\n233168\n>>> fib(100000000000000011)\n233168\n>>>\
    \ fib(100000000000000012)\n233168\n>>> fib(100000000000000013)\n233168\n>>> fib(100000000000000014)\n\
    233168\n>>> fib(100000000000000015)\n233168\n>>> fib(100000000000000016)\n233168\n\
    >>> fib(100000000000000017)\n233168\n>>> fib(100000000000000018)\n233168\n>>>\
    \ fib(100000000000000019)\n233168\n>>> fib(100000000000000020)\n233168\n>>> fib(100000000000000021)\n\
    233168\n>>> fib(100000000000000022)\n233168\n>>> fib(100000000000000023)\n233168",
  "    if n == 1\n        return [1]\n    if n % 2 == 0\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns the sum of the numbers from 1 to n.\nExamples:\n\
    >>> sum_of_numbers(10)\n55\n>>> sum_of_numbers(0)\n0\n>>> sum_of_numbers(-10)\n\
    -10\n</text>", "    if n == 1 \n        return [1]\n    else if n == 2 \n    \
    \    return [1, 2]\n    else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ Fibonacci number at position n in the Fibonacci sequence.\nExamples:\n>>> fib(3)\n\
    8\n>>> fib(5)\n13\n>>> fib(10)\n6765\n>>> fib(11)\n6765\n>>> fib(12)\n6765\n>>>\
    \ fib(13)\n6765\n>>> fib(14)\n6765\n>>> fib(15)\n6765\n>>> fib(16)\n6765\n>>>\
    \ fib(17)\n6765\n>>> fib(18)\n6765\n>>> fib(19)\n6765\n>>> fib(20)\n6765\n>>>\
    \ fib(21)\n6765\n>>> fib(22)\n6765\n>>> fib(23)\n6765\n>>> fib(24)\n6765\n>>>\
    \ fib(25)\n6765\n>>> fib(26)\n6765\n>>> fib(27)\n6765\n>>> fib(28)\n6765\n>>>\
    \ fib(29)\n6765\n>>> fib(30)\n6765\n>>> fib(31)\n6765\n>>> fib(32)\n6765\n>>>\
    \ fib(33)\n6765\n>>> fib(34)\n6765\n>>> fib(35)\n6765\n>>> fib(36)\n6765\n>>>\
    \ fib(37)\n6765\n>>> fib(38)\n6765\n>>> fib(39)\n6765\n>>> fib(40)\n6765\n>>>\
    \ fib(41)\n6765\n>>> fib(42)\n6765\n>>> fib(43)\n6765\n>>> fib(44)\n6765\n>>>\
    \ fib(45)\n6765\n>>> fib(46)\n6765\n>>> fib(47)\n6765\n>>> fib(48)\n6765\n>>>\
    \ fib(49)\n6765\n>>> fib(50)\n6765\n>>> fib(51)\n6765\n>>> fib(52)\n6765\n>>>\
    \ fib(53)\n6765\n>>> fib(54)\n6765\n>>> fib(55)\n6765\n>>> fib(56)\n6765\n>>>\
    \ fib(57)\n6765\n>>> fib(58)\n6765\n>>> ", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the factorial of a given number.\
    \ \nExamples:\nfactorial(3)\n6\nfactorial(5)\n120\nfactorial(10)\n3628800\nfactorial(100)\n\
    6.283185307179586e+307", "    if n == 1 \n        return [1]\n    else if n %\
    \ 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n  \
    \      return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the Fibonacci sequence up to n.\nExamples:\n\
    >>> fib(3)\n[1, 1, 2]\n>>> fib(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n>>>\
    \ fib(20)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584, 4181, 6765]\n>>> fib(100)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\n 17711, 28657, 46368, 75025,\
    \ 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578,\n 5702887,\
    \ 9227465]\n\"\"\"", "    if n == 1 \n        return [1]\n    else if n % 2 ==\
    \ 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if n == 1 \n        tri_vec = [3]\n    else \n  \
    \      tri_vec = [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an integer $n$ and returns the\
    \ $n$th Fibonacci number.", "    if n == 1 \n        return [1]\n    else if n\
    \ == 2 \n        return [1, 1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\n    else\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n -\
    \ 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the Fibonacci sequence up to n.", "    if n == 0\
    \ \n        return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2) \nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ n Fibonacci numbers. \nExamples:\n>>> fibonacci(3)\n[1, 1, 2]\n>>> fibonacci(10)\n\
    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\"\"\"", "    if n == 1 \n        vec = [3]\n\
    \    else \n        vec = [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    if n == 1 \n        return [1]\n   \
    \ if n == 2 \n        return [1, 1]\n    if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\
    \"\n    fib(n::Int64)::Int64", "    if n == 1 \n        Vector{Int64}([3])\n \
    \   else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a given number. \nExamples:\nfactorial(5)\n120\n\
    factorial(10)\n3628800\nfactorial(100)\n36288008800\nfactorial(1000)\n362880088008800\n\
    factorial(10000)\n3628800880088008800\nfactorial(100000)\n36288008800880088008800\n\
    factorial(1000000)\n362880088008800880088008800\nfactorial(10000000)\n3628800880088008800880088008800\n\
    factorial(100000000)\n3628800880088008800880088008800\nfactorial(1000000000)\n\
    36288008800880088008800880088008800\nfactorial(10000000000)\n362880088008800880088008800880088008800\n\
    factorial(100000000000)\n362880088008800880088008800880088008800\nfactorial(1000000000000)\n\
    362880088008800880088008800880088008800\nfactorial(10000000000000)\n362880088008800880088008800880088008800\n\
    factorial(100000000000000)\n362880088008800880088008800880088008800\nfactorial(1000000000000000)\n\
    3628800880088008800880088008800880088008800\nfactorial(10000000000000000)\n3628800880088008800880088008800880088008800\n\
    factorial(100000000000000000)\n3628800880088008800880088008800880088008800\nfactorial(1000000000000000000)\n\
    3628800880088008800880088008800880088008800\nfactorial(10000000000000000000)\n\
    3628800880088008800880088008800880088008800\nfactorial(100000000000000000000)\n\
    3628800880088008800880088008800880088008800\nfactorial(1000000000000000000000)\n\
    36288008800880088008800880088008800880088008800\nfactorial(10000000000000000000000)\n\
    36288008800880088008800880088008800880088008800\nfactorial(100000000000000000000000)\n\
    362880088008800880088008800880088008800880088008800\nfactorial(1000000000000000000000000)\n\
    362880088008800880088008800880088008800880088008800\nfactorial(10000000000000000000000000)\n\
    36288008800880088008800880088008800880088008800\nfactorial(100000000000000000000000000)\n\
    36", "    if n == 1 \n        return [1]\n    else if n == 2 \n        return\
    \ [1, 1]\n    else \n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n\
    \        tri_3 = tri(n + 1) + tri(n + 2) + tri(n - 1)\n        return tri_1 +\
    \ tri_2 + tri_3\nend", "    if n == 1 \n        return [1]\n    else if n % 2\
    \ == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else \n    \
    \    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 3)\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)", "    if n == 1\
    \ \n        return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>", " \
    \   if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<text>\nProblem 9\nWrite a function\
    \ that returns the sum of the squares of the first n positive integers. \nExamples:\n\
    >>> sumsq(1)\n1\n>>> sumsq(2)\n4\n>>> sumsq(3)\n10\n>>> sumsq(4)\n25\n>>> sumsq(5)\n\
    125\n>>> sumsq(10)\n2520\n>>> sumsq(100)\n121645100\n>>> sumsq(1000)\n121645100\n\
    >>> sumsq(10000)\n121645100000000\n>>> sumsq(100000)\n121645100000000\n>>> sumsq(1000000)\n\
    121645100000000\n>>> sumsq(10000000)\n121645100000000\n>>> sumsq(100000000)\n\
    121645100000000\n>>> sumsq(1000000000)\n121645100000000\n>>> sumsq(1000000001)\n\
    121645100000000\n>>> sumsq(1000000002)\n121645100000000\n>>> sumsq(1000000003)\n\
    121645100000000\n>>> sumsq(1000000004)\n121645100000000\n>>> sumsq(1000000005)\n\
    121645100000000\n>>> sumsq(1000000006)\n121645100000000\n>>> sumsq(1000000007)\n\
    121645100000000\n>>> sumsq(1000000008)\n121645100000000\n>>> sumsq(1000000009)\n\
    121645100000000\n>>> sumsq(1000000010)\n121645100000000\n>>> sumsq(1000000011)\n\
    121645100000000\n>>> sumsq(1000000012)\n121645100000000\n>>> sumsq(1000000013)\n\
    121645100000000\n>>> sumsq(1000000014)\n121645100000000\n>>> sumsq(1000000015)\n\
    121645100000000\n>>> sumsq(1000000016)\n121645100000000\n>>> sumsq(1000000017)\n\
    121645100000000\n>>> sumsq(1000000018)\n121645100000000\n>>> sumsq(1000000019)\n\
    121645100000000\n>>> sumsq(1000000020)\n121645100000000\n>>> sumsq(1000000021)\n\
    1216", "    if n == 0\n        return Vector{Int64}()\n    else if n == 1\n  \
    \      return Vector{Int64}(1)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    Examples:\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(100)\n\
    6.283185307179586e+307\n>>> factorial(1000)\n1.7976931348623157e+308\n>>> factorial(10000)\n\
    9.332622e+15\n>>> factorial(100000)\n1.8446744e+19\n>>> factorial(1000000)\n2.6656419e+21\n\
    >>> factorial(10000000)\n1.8446744e+19\n>>> factorial(100000000)\n6.283185307179586e+307\n\
    >>> factorial(1000000000)\n1.7976931348623157e+308\n>>> factorial(10000000000)\n\
    9.332622e+15\n>>> factorial(100000000000)\n1.8446744e+19\n>>> factorial(1000000000000)\n\
    6.283185307179586e+307\n>>> factorial(10000000000000)\n1.7976931348623157e+308\n\
    >>> factorial(100000000000000)\n9.332622e+15\n>>> factorial(1000000000000000)\n\
    1.8446744e+19\n>>> factorial(10000000000000000)\n6.283185307179586e+307\n>>> factorial(100000000000000000)\n\
    1.7976931348623157e+308\n>>> factorial(1000000000000000000)\n9.332622e+15\n>>>\
    \ factorial(10000000000000000000)\n1.8446744e+19\n>>> factorial(100000000000000000000)\n\
    6.283185307179586e+307\n>>> factorial(1000000000000000000000)\n1.7976931348623157e+308\n\
    >>> factorial(10000000000000000000000)\n9.332622e+15\n>>> factorial(100000000000000000000000)\n\
    1.8446744e+19\n>>> factorial(1000000000000000000000000)\n6.283185307179586e+307\n\
    >>> factorial(10000000000000000000000000)\n1.7976931348623157e+308\n>>> factorial(100000000000000000000000000)\n\
    9.332622e+15\n>>> factorial(1000000000000000000000000000)\n1.8446744e+19\n>>>\
    \ factorial(10000000000000000000000000000)\n6.283185307179586e+307\n>>> factorial(100000000000000000000000000",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>", "   \
    \ if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the sum of the squares of the first n numbers of a given list.\n\
    Examples:\n>>> sum([1, 2, 3, 4])\n15\n>>> sum([1, 2, 3, 4, 5])\n25\n>>> sum([1,\
    \ 2, 3, 4, 5], 10)\n25\n>>> sum([1, 2, 3, 4, 5], 0)\n0\n>>> sum([1, 2, 3, 4, 5],\
    \ 1)\n1\n>>> sum([1, 2, 3, 4, 5], 2)\n6\n>>> sum([1, 2, 3, 4, 5], 3)\n25\n>>>\
    \ sum([1, 2, 3, 4, 5], 4)\n125\n>>> sum([1, 2, 3, 4, 5], 5)\n25\n>>> sum([1, 2,\
    \ 3, 4, 5], 6)\n125\n>>> sum([1, 2, 3, 4, 5], 7)\n25\n>>> sum([1, 2, 3, 4, 5],\
    \ 8)\n125\n>>> sum([1, 2, 3, 4, 5], 9)\n25\n>>> sum([1, 2, 3, 4, 5], 10)\n25\n\
    >>> sum([1, 2, 3, 4, 5], 11)\n25\n>>> sum([1, 2, 3, 4, 5], 12)\n25\n>>> sum([1,\
    \ 2, 3, 4, 5], 13)\n25\n>>> sum([1, 2, 3, 4, 5], 14)\n25\n>>> sum([1, 2, 3, 4,\
    \ 5], 15)\n25\n>>> sum([1, 2, 3, 4, 5], 16)\n25\n>>> sum([1, 2, 3, 4, 5], 17)\n\
    25\n>>> sum([1, 2, 3, 4, 5], 18)\n25\n>>> sum([1, 2, 3, 4, 5], 19)\n25\n>>> sum([1,\
    \ 2, 3, 4, 5], 20)\n25\n>>> sum([1, 2, 3, 4, 5], 21)\n25\n>>> sum([1, 2, 3, 4,\
    \ 5], 22)\n25\n>>> sum([1, 2, 3, 4, 5], 23)\n25\n>>> sum([1, 2, 3, 4, 5], 24)\n\
    25\n>>> sum([1, 2, 3, 4, 5], 25)\n25\n>>> sum([1, 2, 3, 4, 5], 26)\n25\n>>> sum([1,\
    \ 2, 3, 4, 5], 27)\n25\n>>> sum([1, 2, 3, 4, 5], 28)\n25\n>>> sum([1, 2, 3, 4,\
    \ 5], 29)\n25\n>>> sum([1, 2, 3, 4, 5], 30)\n25\n>>> sum([1, 2, 3, 4, 5], 31)\n\
    25\n>>> sum([1, 2, 3, 4, 5], 32)\n25\n>>> sum([1, 2, 3, 4, 5], 33)\n25\n>>> sum([1,\
    \ 2, 3, 4, 5], 34)\n25\n>>> sum([1, 2, 3, 4, 5], 35)\n25\n>>> sum([1, 2, 3, 4,\
    \ 5], 36)\n25\n>>> sum([1, 2, 3, 4, 5], 37)\n25\n>>> sum([1, 2, 3, 4, 5], 38)\n\
    25\n>>> sum([1, 2, 3, 4, 5], 39)\n25\n>>> sum([1, 2, 3, 4, 5], 40)\n25\n>>> sum([1,\
    \ 2, 3, 4, 5], 41)\n25\n>>> sum([1, 2, 3, 4, 5], 42)\n25\n>>> sum([1, 2, 3, 4,\
    \ 5], 43)\n25\n>>> sum([1, 2, 3, 4, 5], 44)\n25\n>>> sum([1, 2, 3, 4, 5], 45",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n numbers of the Fibonacci sequence in reverse order.",
  "    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n        Vector{Int64}(1)\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64", "    if n == 0 \n\
    \        return Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n    \
    \    return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2)\nend", "    if n == 0 \n        Vector{Int64}() \n    else \n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the first n Fibonacci numbers. \nThe\
    \ Fibonacci numbers are defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n + 1), if n is odd.\nExamples:\n\
    fibonacci(3)\nfibonacci(4)\nfibonacci(5)\nfibonacci(6)\nfibonacci(7)\nfibonacci(8)\n\
    fibonacci(9)\nfibonacci(10)\nfibonacci(11)\nfibonacci(12)\nfibonacci(13)\nfibonacci(14)\n\
    fibonacci(15)\nfibonacci(16)\nfibonacci(17)\nfibonacci(18)\nfibonacci(19)\nfibonacci(20)\n\
    fibonacci(21)\nfibonacci(22)\nfibonacci(23)\nfibonacci(24)\nfibonacci(25)\nfibonacci(26)\n\
    fibonacci(27)\nfibonacci(28)\nfibonacci(29)\nfibonacci(30)\nfibonacci(31)\nfibonacci(32)\n\
    fibonacci(33)\nfibonacci(34)\nfibonacci(35)\nfibonacci(36)\nfibonacci(37)\nfibonacci(38)\n\
    fibonacci(39)\nfibonacci(40)\nfibonacci(41)\nfibonacci(42)\nfibonacci(43)\nfibonacci(44)\n\
    fibonacci(45)\nfibonacci(46)\nfibonacci(47)\nfibonacci(48)\nfibonacci(49)\nfibonacci(50)\n\
    fibonacci(51)\nfibonacci(", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    fib(n)\n    \n    Recursive function which calculates Fibonacci number using\
    \ \n    tail recursion.\n    \n    Arguments:\n    \n    - `n` - a positive integer\
    \ number\n    \n    Returns:\n    \n    - a positive integer number\n    \n  \
    \  Examples:\n    \n    >>> fib(3)\n    6\n    \n    >>> fib(10)\n    55\n   \
    \ \n    >>> fib(100)\n    233168\n    \n    >>> fib(1000)\n    23316837\n    \"\
    \"\"", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    fib(n::Int64)::Vector{Int64}\n    \n    Recursive function that returns\
    \ the nth number of the Fibonacci sequence. \n    \n    fib(0) = 0\n    fib(1)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is odd.\n    \n    Examples:\n \
    \   >>> fib(2)\n    [1, 1]\n    >>> fib(3)\n    [1, 1, 2]\n    \"\"\"", "    if\
    \ n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n\
    \    \n    Recursive implementation of Fibonacci sequence\n    \n    Arguments:\n\
    \    \n    - `n`: positive integer\n    \n    Returns:\n    \n    - `Vector{Int64}`:\
    \ vector of Fibonacci numbers\n    \n    Examples:\n    \n    >>> fib(10)\n  \
    \  [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"", "    if n == 1 \n        tri_vec\
    \ = [3]\n    else \n        tri_vec = [tri(n - 1) + tri(n - 2) + tri(n - 3)]\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the\
    \ n-th number of the Fibonacci sequence.\nExamples:\n>>> fib(3)\n3\n>>> fib(4)\n\
    5\n>>> fib(5)\n8\n>>> fib(6)\n13\n>>> fib(7)\n21\n>>> fib(8)\n34\n>>> fib(9)\n\
    55\n>>> fib(10)\n89\n>>> fib(11)\n144\n>>> fib(12)\n233\n>>> fib(13)\n377\n>>>\
    \ fib(14)\n610\n>>> fib(15)\n987\n>>> fib(16)\n1597\n>>> fib(17)\n2584\n>>> fib(18)\n\
    4181\n>>> fib(19)\n6765\n>>> fib(20)\n10946\n>>> fib(21)\n17711\n>>> fib(22)\n\
    28657\n>>> fib(23)\n46368\n>>> fib(24)\n75025\n>>> fib(25)\n121393\n>>> fib(26)\n\
    196418\n>>> fib(27)\n317811\n>>> fib(28)\n514229\n>>> fib(29)\n832040\n>>> fib(30)\n\
    1346269\n>>> fib(31)\n2178309\n>>> fib(32)\n3524578\n>>> fib(33)\n5702887\n>>>\
    \ fib(34)\n9227465\n>>> fib(35)\n14930352\n>>> fib(36)\n24157817\n>>> fib(37)\n\
    39088169\n>>> fib(38)\n63245986\n>>> fib(39)\n102334155\n>>> fib(40)\n165580141\n\
    >>> fib(41)\n267914296\n>>> fib(42)\n433494437\n>>> fib(43)\n701408733\n>>> fib(44)\n\
    1134903170\n>>> fib(45)\n1836311903\n>>> fib(46)\n2971215073\n>>> fib(47)\n4807526976\n\
    >>> fib(48)\n7778742049\n>>> fib(49)\n12586269025\n>>> fib(50)\n20365011074\n\
    >>> fib(51)", "    if n == 0\n        return Vector{Int64}()\n    if n == 1\n\
    \        return Vector{Int64}(3)\n    if n % 2 == 0\n        tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n\
    \    \n    Recursive function that returns the nth number in the Fibonacci sequence.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n\
    \ is even.\n    \n    Examples:\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n\
    \    >>> fib(3)\n    3\n    >>> fib(5)\n    5\n    \"\"\"", "    if n == 1 \n\
    \        tri = [3]\n    else if n == 2 \n        tri = [1, 3]\n    else if n %\
    \ 2 == 0 \n        tri = [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n - 2)]\n\
    \    else \n        tri = [tri(n - 1) + tri(n - 2), tri(n - 2) + tri(n - 1)]\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that returns the nth term of\
    \ the Fibonacci sequence. \n    For example, fib(3) = fib(2) + fib(1).\n    \n\
    \    You have to write this function in Julia language. \n    \n    You have to\
    \ write this function in Julia language. \n    \n    You have to write this function\
    \ in Julia language. \n    \n    You have to write this function in Julia language.\
    \ \n    \n    You have to write this function in Julia language. \n    \n    You\
    \ have to write this function in Julia language. \n    \n    You have to write\
    \ this function in Julia language. \n    \n    You have to write this function\
    \ in Julia language. \n    \n    You have to write this function in Julia language.\
    \ \n    \n    You have to write this function in Julia language. \n    \n    You\
    \ have to write this function in Julia language. \n    \n    You have to write\
    \ this function in Julia language. \n    \n    You have to write this function\
    \ in Julia language. \n    \n    You have to write this function in Julia language.\
    \ \n    \n    You have to write this function in Julia language. \n    \n    You\
    \ have to write this function in Julia language. \n    \n    You have to write\
    \ this function in Julia language. \n    \n    You have to write this function\
    \ in Julia language. \n    \n    You have to write this function in Julia language.\
    \ \n    \n    You have to write this function in Julia language. \n    \n    You\
    \ have to write this function in Julia language. \n    \n    You have to write\
    \ this function in Julia language. \n    \n    You have to write this function\
    \ in Julia language. \n    \n    You have to write this function in Julia language.\
    \ \n    \n    You have to write this function in Julia language. \n    \n    You\
    \ have to write this function in Julia language. \n    \n    You have to write\
    \ this function in Julia language. \n    \n    You have to write this function\
    \ in Julia language. \n    \n    You have to write this function", "    if n ==\
    \ 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. \nExamples:\n>>> factorial(5)\n120\n>>> factorial(10)\n\
    3628800\n>>> factorial(-1)\n1\n>>> factorial(0)\n1\n>>> factorial(1)\n1\n>>> factorial(2)\n\
    2\n>>> factorial(3)\n6\n>>> factorial(4)\n24\n>>> factorial(5)\n120\n>>> factorial(6)\n\
    720\n>>> factorial(7)\n5040\n>>> factorial(8)\n40320\n>>> factorial(9)\n362880\n\
    >>> factorial(10)\n3628800\n>>> factorial(11)\n39916800\n>>> factorial(12)\n479001600\n\
    >>> factorial(13)\n6227020800\n>>> factorial(14)\n87178291200\n>>> factorial(15)\n\
    1307674368000\n>>> factorial(16)\n20922789888000\n>>> factorial(17)\n355687428096000\n\
    >>> factorial(18)\n6402373705728000\n>>> factorial(19)\n121645100408832000\n>>>\
    \ factorial(20)\n2432902008176640000\n>>> factorial(21)\n51090942171709440000\n\
    >>> factorial(22)\n1124000727777607680000\n>>> factorial(23)\n25852016738884976640000\n\
    >>> factorial(24)\n620448401733239439360000\n>>> factorial(25)\n15511210043330985984000000\n\
    >>> factorial(26)\n403291461126605635584000000\n>>> factorial(27)\n10888869450418352160768000000\n\
    >>> factorial(28)\n304888344611713860501504000000\n>>> factorial(29)\n8841761993739701954543616000000\n\
    >>> factorial(30)\n265252859812191058636308480000000\n>>> factorial(31)\n33333333333333333333333333333333\n\
    >>> factorial(32)\n555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555555",
  "    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n        Vector{Int64}(1)\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the n-th number of the Fibonacci\
    \ sequence. \nThe Fibonacci sequence is defined by the recurrence:\nfibonacci(1)\
    \ = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if\
    \ n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3), if n is odd.\nExamples:\nfibonacci(3)\nfibonacci(4)\nfibonacci(5)\nfibonacci(6)\n\
    fibonacci(7)\nfibonacci(8)\nfibonacci(9)\nfibonacci(10)\nfibonacci(11)\nfibonacci(12)\n\
    fibonacci(13)\nfibonacci(14)\nfibonacci(15)\nfibonacci(16)\nfibonacci(17)\nfibonacci(18)\n\
    fibonacci(19)\nfibonacci(20)\nfibonacci(21)\nfibonacci(22)\nfibonacci(23)\nfibonacci(24)\n\
    fibonacci(25)\nfibonacci(26)\nfibonacci(27)\nfibonacci(28)\nfibonacci(29)\nfibonacci(30)\n\
    fibonacci(31)\nfibonacci(32)\nfibonacci(33)\nfibonacci(34)\nfibonacci(35)\nfibonacci(36)\n\
    fibonacci(37)\nfibonacci(38)\nfibonacci(39)\nfibonacci(40)\nfibonacci(41)\nfibonacci(42)\n\
    fibonacci(43)\nfibonacci(44)\nfibonacci(45)\nfibonacci(46)\nfibonacci(47)\nfibonacci(48)\n\
    fibonacci(49)\nfibonacci", "    if n == 1 \n        return [1]\n    if n == 2\
    \ \n        return [1, 1]\n    if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer $n$ and returns the $n$th Fibonacci number.", "    if n == 0 \n \
    \       Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nExamples:\nfactorial(3) = 3\nfactorial(5)\
    \ = 5\nfactorial(10) = 50\nfactorial(13) = 729\nHint: use recursion.", "    if\
    \ n == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n)\n\
    \    \n    Recursive function that returns the nth number in the Fibonacci sequence\n\
    \    \n    Arguments:\n    \n    - `n`: An integer that represents the number\
    \ in the Fibonacci sequence\n    \n    Returns:\n    \n    - `n`: An integer that\
    \ represents the number in the Fibonacci sequence\n    \n    Examples:\n    \n\
    \    >>> fib(3)\n    8\n    \"\"\"", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. \nExamples:\n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(20)\n12164510040883200\n>>> factorial(30)\n\
    2432902008176640000\n>>> factorial(100)\n36288008800\n>>> factorial(1000)\n3628800880004008\n\
    >>> factorial(10000)\n
  "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the sum of the numbers from 1 to n that are divisible by 3. The\
    \ function should take in a non-negative integer n and return a non-negative integer\
    \ that is the sum of all numbers from 1 to n that are divisible by 3.", "    if\
    \ n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<text>\nExercise 5\nWrite a function\
    \ that returns the factorial of a given number. \nExamples:\n>>> factorial(5)\n\
    120\n>>> factorial(10)\n3628800\n>>> factorial(100)\n36288008800\n>>> factorial(1000)\n\
    362880088008800\n>>> factorial(10000)\n3628800880088008800\n>>> factorial(100000)\n\
    36288008800880088008800\n>>> factorial(1000000)\n362880088008800880088008800\n\
    >>> factorial(10000000)\n3628800880088008800880088008800\n>>> factorial(100000000)\n\
    36288008800880088008800880088008800\n>>> factorial(1000000000)\n362880088008800880088008800880088008800\n\
    >>> factorial(10000000000)\n3628800880088008800880088008800880088008800\n>>> factorial(100000000000)\n\
    36288008800880088008800880088008800880088008800\n>>> factorial(1000000000000)\n\
    362880088008800880088008800880088008800880088008800\n>>> factorial(10000000000000)\n\
    3628800880088008800880088008800880088008800880088008800\n>>> factorial(100000000000000)\n\
    36288008800880088008800880088008800880088008800880088008800\n>>> factorial(1000000000000000)\n\
    362880088008800880088008800880088008800880088008800880088008800\n>>> factorial(10000000000000000)\n\
    362880088008800880088008800880088008800880088008800880088008800\n>>> factorial(100000000000000000)\n\
    36288008800880088008800880088008800880088008800880088008800\n>>> factorial(1000000000000000000)\n\
    362880088008800880088008800880088008800880088008800880088008800\n>>> factorial(10000000000000000000)\n\
    3628800880088008800880088008800880088008800880088008800880088008800\n>>> factorial(100000000000000000000)\n\
    362880088008800880088008800880088008800880088008800880088008800880088008800\n\
    >>> factorial(1000000000000000000000)\n362880088008800880088008800880088008800880088008800880088008800880088008800\n\
    >>> factorial(10000000000000000000000)\n36288008800", "    if n == 1 \n      \
    \  return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    fib(n)\n    \n    Recursive function that returns the nth number in the Fibonacci\
    \ sequence\n    \n    Arguments:\n    n -- a positive integer\n    \n    Returns:\n\
    \    n th number in the Fibonacci sequence\n    \n    Examples:\n    >>> fib(0)\n\
    \    0\n    >>> fib(10)\n    55\n    >>> fib(100)\n    354224848179261915075\n\
    \    \"\"\"", "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else if n == 1 \n        Vector{Int64}(1) \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the Fibonacci sequence up to n.\nExamples:\n\
    >>> fib(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n>>> fib(5)\n[1, 1, 2, 3, 5]\n\
    >>> fib(4)\n[1, 1, 2, 3]\n>>> fib(3)\n[1, 1, 2]\n>>> fib(2)\n[1]\n>>> fib(1)\n\
    [1]\n>>> fib(0) \n[]\n\"\"\"", "    if n == 1\n        return [1]\n    \n    if\
    \ n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n numbers\
    \ of the Fibonacci sequence. \n    You have to return the numbers in ascending\
    \ order.\n    Examples:\n    >>> fib(3)\n    [1, 1, 2]\n    \"\"\"", "    if n\
    \ == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the factorial of a given number. \nExamples:\nfactorial(5) = 5 * 5 *\
    \ 5 = 25\nfactorial(3) = 3 * 3 * 3 = 9\nfactorial(4) = 24\nfactorial(6) = 720\n\
    factorial(7) = 5040\nfactorial(8) = 40320\nfactorial(9) = 362880\nfactorial(10)\
    \ = 3628800 \nExercise 3\nWrite a function that returns the Fibonacci number at\
    \ a given index. \nExamples:\nfibonacci(0) = 0\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\nfibonacci(5) = 5\nExercise 4\nWrite\
    \ a function that returns the factorial of a given number. \nExamples:\nfactorial(5)\
    \ = 5 * 5 * 5 = 25\nfactorial(3) = 3 * 3 * 3 = 9\nfactorial(4) = 24\nfactorial(6)\
    \ = 720\nfactorial(7) = 5040\nfactorial(8) = 40320\nfactorial(9) = 362880\nfactorial(10)\
    \ = 3628800 \nExercise 5\nWrite a function that returns the Fibonacci number at\
    \ a given index. \nExamples:\nfibonacci(0) = 0\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\nfibonacci(5) = 5\nExercise 6\nWrite\
    \ a function that returns the factorial of a given number. \nExamples:\nfactorial(5)\
    \ = 5 * 5 * 5 = 25\nfactorial(3) = 3 * 3 * 3 = 9\nfactorial(4) = 24\nfactorial(6)\
    \ = 720\nfactorial(7) = 5040\nfactorial(8) = 40320\nfactorial(9) = 362880\nfactorial(10)\
    \ = 3628800 \nExercise 7\nWrite a function that returns the Fibonacci number at\
    \ a given index. \nExamples:\nfibonacci(0) = 0\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\nfibonacci(5) = 5\nExercise 8\nWrite\
    \ a function that returns the factorial of a given number. \nExamples:\nfactorial(5)\
    \ = 5 * 5 * 5 = 25\nfactorial(3) = 3 * 3 * 3 = 9\nfactorial(4) = 24\nfactorial(6)\
    \ = 720\nfactorial(7) = 5040\nfactorial(", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the n-th Fibonacci number\
    \ using the recurrence relation. \nThe function should take one argument n, and\
    \ return one integer number.", "    if n == 1 \n        Vector{Int64}(1) \n  \
    \  else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n)\n    \n    Recursive function that\
    \ returns the nth number of the Fibonacci sequence.\n    \n    fib(0) = 0\n  \
    \  fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n+1), if n is odd.\n    \n    Examples:\n    >>> fib(2)\n \
    \   3\n    >>> fib(3)\n    8\n    \"\"\"", "    if n == 1 \n        tri_vec =\
    \ [3]\n    else \n        tri_vec = [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n \
    \   end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    fib(n::Int64)",
  "    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 1]\n \
    \   else\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64", "    if n == 1\n\
    \        return [1]\n    elseif n == 2\n        return [1, 2]\n    elseif n %\
    \ 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n    \
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the Fibonacci number at a given index. \nThe Fibonacci sequence is defined by\
    \ the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2) + fibonacci(n + 1), if n is odd.\nExamples:\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\nfibonacci(10)\n\
    fibonacci(10)\nfibonacci(10)\n", "    if n == 1 \n        tri_vec = [3]\n    else\
    \ \n        tri_vec = [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n    end\n    return\
    \ tri_vec\nend", "    if n == 1\n        Vector{1}\n    else\n        tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n\
    \ % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)", "    if n\
    \ == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.4>", "    if n\
    \ == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) \n    end\nend", "    if n == 1 \n        Vector{Int64}([3])\n\
    \    elseif n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64", "    if n == 1 \n\
    \        return [1]\n    else if n == 2 \n        return [1, 2]\n    else \n \
    \       return tri(n-1) + tri(n-2) + tri(n+1)\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1\n        [1]\n    elseif n % 2 == 0\n        tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the nth number of the Fibonacci sequence. \nThe Fibonacci sequence is defined\
    \ by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2) + fibonacci(n - 3), if n is odd.\nFor example:\nfibonacci(3) = 3\nfibonacci(4)\
    \ = fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = fibonacci(4) + fibonacci(3)\
    \ + fibonacci(2)\n           = fibonacci(6) + fibonacci(4) + fibonacci(3)\n  \
    \         = fibonacci(8) + fibonacci(6) + fibonacci(4) + fibonacci(3)\n      \
    \     = fibonacci(10) + fibonacci(8) + fibonacci(6) + fibonacci(4) + fibonacci(3)\n\
    \           = fibonacci(12) + fibonacci(10) + fibonacci(8) + fibonacci(6) + fibonacci(4)\
    \ + fibonacci(3)\n           = fibonacci(14) + fibonacci(12) + fibonacci(10) +\
    \ fibonacci(8) + fibonacci(6) + fibonacci(4) + fibonacci(3)\n           = fibonacci(16)\
    \ + fibonacci(14) + fibonacci(12) + fibonacci(10) + fibonacci(8) + fibonacci(6)\
    \ + fibonacci(4) + fibonacci(3)\n           = fibonacci(18) + fibonacci(16) +\
    \ fibonacci(14) + fibonacci(12) + fibonacci(10) + fibonacci(8) + fibonacci(6)\
    \ + fibonacci(4) + fibonacci(3)\n          ", "    if n == 1 \n        return\
    \ [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4)\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the sum of the numbers from 1 to n.\nExamples:\n>>> sum_of_numbers(1)\n1\n>>>\
    \ sum_of_numbers(2)\n2\n>>> sum_of_numbers(3)\n6\n>>> sum_of_numbers(4)\n10\n\
    >>> sum_of_numbers(5)\n15\n>>> sum_of_numbers(6)\n21\n>>> sum_of_numbers(7)\n\
    28\n>>> sum_of_numbers(8)\n36\n>>> sum_of_numbers(9)\n45\n>>> sum_of_numbers(10)\n\
    55\n>>> sum_of_numbers(11)\n66\n>>> sum_of_numbers(12)\n78\n>>> sum_of_numbers(13)\n\
    91\n>>> sum_of_numbers(14)\n104\n>>> sum_of_numbers(15)\n117\n>>> sum_of_numbers(16)\n\
    126\n>>> sum_of_numbers(17)\n138\n>>> sum_of_numbers(18)\n151\n>>> sum_of_numbers(19)\n\
    164\n>>> sum_of_numbers(20)\n177\n>>> sum_of_numbers(21)\n190\n>>> sum_of_numbers(22)\n\
    204\n>>> sum_of_numbers(23)\n215\n>>> sum_of_numbers(24)\n226\n>>> sum_of_numbers(25)\n\
    237\n>>> sum_of_numbers(26)\n246\n>>> sum_of_numbers(27)\n258\n>>> sum_of_numbers(28)\n\
    261\n>>> sum_of_numbers(29)\n266\n>>> sum_of_numbers(30)\n269\n>>> sum_of_numbers(31)\n\
    274\n>>> sum_of_numbers(32)\n277\n>>> sum_of_numbers(33)\n280\n>>> sum_of_numbers(34)\n\
    285\n>>> sum_of_numbers(35)\n290\n>>> sum_of_numbers(36)\n295\n>>> sum_of_numbers(37)\n\
    300\n>>> sum_of_numbers(38)\n305\n>>> sum_of_numbers(39)\n310\n>>> sum_of_numbers(40)\n\
    315\n>>> sum_of_numbers(41)\n320\n>>> sum_of_numbers(42)\n325\n>>> sum_of_numbers(43)\n\
    330\n>>> sum_of_numbers(44)\n335\n>>> sum_of_numbers(45)\n340\n>>> sum_of_numbers(46)\n",
  "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    fib(n::Int64)::Int64", "    if n == 1 \n        return [1]\n    else if\
    \ n == 2 \n        return [1, 1]\n    else \n        tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the Fibonacci sequence up to n.\nExamples:\n>>> fib(10)\n[1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55]\n>>> fib(20)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144,\
    \ 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025,\
    \ 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465]\n>>> fib(30)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,\
    \ 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n\
    >>> fib(40)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811,\
    \ 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465]\n>>> fib(50)\n\
    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181,\
    \ 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040,\
    \ 1346269, 2178309, 3524578, 5702887, 9227465]\n>>> fib(100)\n[1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\
    \ 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269,\
    \ 2178309, 3524578, 5702887, 9227465]\n>>> fib(1000)\n[1, 1, 2, 3, 5, ", "   \
    \ if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>", "   \
    \ if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a given number. \nExamples:\nfactorial(5)\n120\n\
    factorial(10)\n3628800\nfactorial(100)\n36288008800\nfactorial(1000)\n36288008800180064035015120560397930240043520212739103640\n\
    factorial(10000)\n362880088001800640350151205603979302400435202127391036404400\n\
    factorial(100000)\n3628800880018006403501512056039793024004352021273910364044004520\n\
    factorial(1000000)\n36288008800180064035015120560397930240043520212739103640440045205040\n\
    factorial(10000000)\n36288008800180064035015120560397930240043520212739103640440045205040500\n\
    factorial(100000000)\n3628800880018006403501512056039793024004352021273910364044004520504050050040\n\
    factorial(1000000000)\n36288008800180064035015120560397930240043520212739103640440045205040500500405000\n\
    factorial(10000000000)\n36288008800180064035015120560397930240043520212739103640440045205040500500405000500\n\
    factorial(100000000000)\n362880088001800640350151205603979302400435202127391036404400452050405005004050005004000\n\
    factorial(1000000000000)\n3628800880018006403501512056039793024004352021273910364044004520504050050040500050040005000\n\
    factorial(10000000000000)\n362880088001800640350151205603979302400435202127391036404400",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 2]\n\
    \    else if n % 2 == 0 \n        tri_1 = tri(n - 1)\n        tri_2 = tri(n -\
    \ 2)\n        return tri_1 + tri_2\n    else \n        tri_1 = tri(n - 1)\n  \
    \      tri_2 = tri(n - 2)\n        tri_3 = tri(n - 3)\n        return tri_1 +\
    \ tri_2 + tri_3\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    end", "    if n == 1 \n        [1]\n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first n numbers of the Fibonacci sequence. \n    For example, fib(5)\
    \ = [1, 1, 2, 3, 5].\n    \n    Function signature:\n    function fib(n::Int64)",
  "    if n == 1 \n        Vector{Int64}[1]\n    elseif n == 2 \n        Vector{Int64}[3]\n\
    \    elseif n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64", " \
    \   if n == 1 \n        Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the n-th Fibonacci number using recursion.", "    if n == 1\
    \ \n        return [1]\n    else if n == 2 \n        return [1, 1]\n    else \n\
    \        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the sum of the squares of the first n\
    \ numbers of a given list.\nExamples:\n>>> square_sums(10)\n[10, 100, 1000, 10000,\
    \ 100000, 1000000, 10000000]\n>>> square_sums(10)\n[10, 100, 1000, 10000, 100000,\
    \ 1000000, 10000000]\n>>> square_sums(0)\n[]\n>>> square_sums(-1)\n[]\n>>> square_sums(-10)\n\
    []\n>>> square_sums(10)\n[10, 100, 1000, 10000, 100000, 1000000, 10000000]\n>>>\
    \ square_sums(10)\n[10, 100, 1000, 10000, 100000, 1000000, 10000000]\n>>> square_sums(0)\n\
    []\n>>> square_sums(-1)\n[]\n>>> square_sums(-10)\n[]\n>>> square_sums(10)\n[10,\
    \ 100, 1000, 10000, 100000, 1000000, 10000000]\n>>> square_sums(10)\n[10, 100,\
    \ 1000, 10000, 100000, 1000000, 10000000]\n>>> square_sums(0)\n[]\n>>> square_sums(-1)\n\
    []\n>>> square_sums(-10)\n[]\n>>> square_sums(10)\n[10, 100, 1000, 10000, 100000,\
    \ 1000000, 10000000]\n>>> square_sums(10)\n[10, 100, 1000, 10000, 100000, 1000000,\
    \ 10000000]\n>>> square_sums(0)\n[]\n>>> square_sums(-1)\n[]\n>>> square_sums(-10)\n\
    []\n>>> square_sums(10)\n[10, 100, 1000, 10000, 100000, 1000000, 10000000]\n>>>\
    \ square_sums(10)\n[10, 100, 1000, 10000, 100000, 1000000, 10000000]\n>>> square_sums(0)\n\
    []\n>>> square_sums(-1)\n[]\n>>> square_sums(-10)\n[]\n>>> square_sums(10)\n[10,\
    \ 100, 1000, 10000, 100000, 1000000, 10000000]\n>>> square_sums(10)\n[10, 100,\
    \ 1000, 10000, 100000, 1000000, 10000000]\n>>> square_sums(0)\n[]\n>>> square_sums(-1)\n\
    []\n>>> square_sums(-10)\n[]\n>>> square_sums(10)\n[10, 100, 1000, 10000, 100000,\
    \ 1000000, 10000000]\n>>> square_sums(10)\n[10, 100, 1000, 10000, 100000, 1000000",
  "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    fib(n::Int64)::Int64", "    if n == 1 \n        return [1]\n    else if\
    \ n == 2 \n        return [1, 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+1)\
    \ + tri(n+2)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 0\n        return Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes an integer $n$ and returns the $n$th Fibonacci number.", "    if n ==\
    \ 0 \n        Vector{Int64}() \n    else \n        tri(n-1) + tri(n-2) + tri(n+1)\
    \ + Vector{Int64}(n) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    fib(n)\n    \n    Recursive function that returns the nth number of the\
    \ Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1)\
    \ + fib(n-2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1), if n\
    \ is odd.\n    \n    Examples:\n    >>> fib(2)\n    3\n    >>> fib(3)\n    8\n\
    \    \"\"\"", "    if n == 0 \n        Vector{Int64}() \n    else if n == 1 \n\
    \        Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n numbers of the Fibonacci sequence. \n    Your function should take\
    \ one parameter, n, which represents the number of elements in the \n    Fibonacci\
    \ sequence to return.\n    Examples:\n    >>> fibonacci(3)\n    [1, 1, 2]\n  \
    \  >>> fibonacci(10)\n    [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    fib(n)\n    \n    Recursive function that returns the nth number of the\
    \ Fibonacci sequence. \n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1)\
    \ + fib(n-2), if n is even.\n    \n    Examples:\n    >>> fib(3)\n    8\n    >>>\
    \ fib(5)\n    34\n    \"\"\"", "    if n == 0 \n        Vector{Int64}() \n   \
    \ else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n == 0\n        return Vector{Int64}()\n \
    \   if n == 1\n        return Vector{Int64}(3)\n    if n % 2 == 0\n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the first n Fibonacci numbers. \nThe Fibonacci numbers are defined\
    \ by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2) + fibonacci(n - 3), if n is odd.\nFor example:\nfibonacci(3) = fibonacci(2)\
    \ + fibonacci(1) + fibonacci(4)\n           = 2 + 1 + 3 = 5 \nfibonacci(4) = fibonacci(3)\
    \ + fibonacci(2) + fibonacci(1)\n           = fibonacci(3) + fibonacci(2) + fibonacci(1)\
    \ + fibonacci(4)\n           = fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2)\
    \ + fibonacci(1)\n           = fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3)\
    \ + fibonacci(2) + fibonacci(1)\n           = fibonacci(7) + fibonacci(6) + fibonacci(5)\
    \ + fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = ...\n\
    Examples:\n>>> fibonacci(3)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597]\n>>> fibonacci(4)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,\
    \ 144, 233, 377, 610, 987, 1597]\n>>> fibonacci(5)\n[1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n>>> fibonacci(6)\n[1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597]\n>>> fibonacci(7)\n[1,\
    \ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, ", "    if n == 1\n      \
    \  return [1]\n    elseif n == 2\n        return [1, 1]\n    elseif n % 2 == 0\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64", "    if n == 0 \n  \
    \      Vector{Int64}() \n    else if n == 1 \n        Vector{Int64}(1) \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the sum of the squares of the first n\
    \ positive integers. \nExamples:\n>>> sumsq(1)\n1\n>>> sumsq(2)\n4\n>>> sumsq(3)\n\
    10\n>>> sumsq(4)\n25\n>>> sumsq(5)\n125\n>>> sumsq(10)\n2250\n>>> sumsq(100)\n\
    46681\n>>> sumsq(1000)\n980551\n>>> sumsq(10000)\n19641725\n>>> sumsq(100000)\n\
    398224250000\n>>> sumsq(1000000)\n74906982475001\n>>> sumsq(10000000)\n1407374883553281\n\
    >>> sumsq(100000000)\n281474976710651\n>>> sumsq(1000000000)\n5629499534213121\n\
    >>> sumsq(10000000000)\n1125899906842624\n>>> sumsq(100000000000)\n2251799813685247\n\
    >>> sumsq(1000000000000)\n4503599627370496\n>>> sumsq(10000000000000)\n9070098713073728\n\
    >>> sumsq(100000000000000)\n18645599627370496\n>>> sumsq(1000000000000000)\n39321600378942280\n\
    >>> sumsq(10000000000000000)\n72580646653409632\n>>> sumsq(100000000000000000)\n\
    1407374883553281\n>>> sumsq(1000000000000000000)\n28147497671065160\n>>> sumsq(10000000000000000000)\n\
    562949953421312161\n>>> sumsq(100000000000000000000)\n1125899906842624171\n>>>\
    \ sumsq(1000000000000000000000)\n2251799813685247341\n>>> sumsq(10000000000000000000000)\n\
    4503599627370496261\n>>> sumsq(100000000000000000000000)\n9070098713073728391\n\
    >>> sumsq(1000000000000000000000000)\n18645599627370496261\n>>> sumsq(10000000000000000000000000)\n\
    393216", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. \nExamples:\n>>> factorial(3)\n\
    6\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(100)\n6.283185307179586e+307\n\
    >>> factorial(1000)\n1.7976931348623157e+308\n>>> factorial(10000)\n5.66564090e+24\n\
    >>> factorial(100000)\n4.3466564e+19\n>>> factorial(1000000)\n2.6283185e+13\n\
    >>> factorial(10000000)\n1.7976931e+30\n>>> factorial(100000000)\n6.28318530e+15\n\
    >>> factorial(1000000000)\n1.7976931e+30\n>>> factorial(10000000000)\n6.28318530e+15\n\
    >>> factorial(100000000000)\n1.7976931e+30\n>>> factorial(1000000000000)\n6.28318530e+15\n\
    >>> factorial(10000000000000)\n1.7976931e+30\n>>> factorial(100000000000000)\n\
    6.28318530e+15\n>>> factorial(1000000000000000)\n1.7976931e+30\n>>> factorial(10000000000000000)\n\
    6.28318530e+15\n>>> factorial(100000000000000000)\n1.7976931e+30\n>>> factorial(1000000000000000000)\n\
    6.28318530e+15\n>>> factorial(10000000000000000000)\n1.7976931e+30\n>>> factorial(100000000000000000000)\n\
    6.28318530e+15\n>>> factorial(1000000000000000000000)\n1.7976931e+30\n>>> factorial(10000000000000000000000)\n\
    6.28318530e+15\n>>> factorial(100000000000000000000000)\n1.7976931e+30\n>>> factorial(1000000000000000000000000)\n\
    6.28318530e+15\n>>> factorial(10000000000000000000000000)\n1.7976931e+30\n>>>\
    \ factorial(100000000000000000000000000)\n6.28318530e+15\n>>> factorial(1000000000000000000000000000)\n\
    1.7976931e+30\n>>> factorial(10000000000000000000000000000)\n6.28318530e+15\n\
    >>> factorial(100000000000000000000000000000)\n1.7976931e+30\n", "    if n ==\
    \ 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1\n \
    \       return [1]\n    else if n % 2 == 0\n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.4>", "    if\
    \ n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\
    \n    fib(n)\n    \n    Recursive function that returns the nth number of the\
    \ Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1)\
    \ + fib(n-2), if n is even.\n    \n    Examples:\n    >>> fib(2)\n    3\n    >>>\
    \ fib(3)\n    8\n    \"\"\"", "    if n == 1\n        return [1]\n    elseif n\
    \ == 2\n        return [1, 1]\n    elseif n % 2 == 0\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 1\n        return [1]\n    if n % 2 == 0\n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<text>\nProblem 3\nWrite a\
    \ function that returns the sum of the numbers in the Fibonacci sequence up to\
    \ n.", "    if n == 1 \n        return [1]\n    else if n == 2 \n        return\
    \ [1, 2]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the n-th number of\
    \ the Fibonacci sequence.\nExamples:\n>>> fib(3)\n8\n>>> fib(5)\n13\n>>> fib(7)\n\
    21\n>>> fib(8)\n34\n>>> fib(10)\n55\n>>> fib(15)\n89\n>>> fib(20)\n1441\n>>> fib(30)\n\
    233168\n>>> fib(40)\n3773084\n>>> fib(50)\n6346105\n>>> fib(100)\n13743895353\n\
    >>> fib(200)\n23316817095\n>>> fib(300)\n377308467439\n>>> fib(400)\n634610587321\n\
    >>> fib(500)\n13743895353840\n>>> fib(600)\n23316817095683\n>>> fib(700)\n37730846743913\n\
    >>> fib(800)\n634610587321683\n>>> fib(900)\n1374389535384073\n>>> fib(1000)\n\
    2331681709568469\n>>> fib(2000)\n3773084674391369\n>>> fib(3000)\n6346105873216836\n\
    >>> fib(4000)\n13743895353840738\n>>> fib(5000)\n233168170956846976\n>>> fib(6000)\n\
    377308467439136965\n>>> fib(7000)\n634610587321683652\n>>> fib(8000)\n1374389535384073850\n\
    >>> fib(9000)\n2331681709568469755\n>>> fib(10000)\n37730846743913696557\n>>>\
    \ fib(12000)\n63461058732168365269\n>>> fib(14000)\n13743895353840738504\n>>>\
    \ fib(16000)\n233168170956846975539\n>>> fib(18000)\n3773084674391369655756\n\
    >>> fib(20000)\n634610587321683652697\n>>> fib(24000)\n1374", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)",
  "    if n == 1 \n        tri_vec = [3]\n    elseif n == 2 \n        tri_vec = [1,\
    \ 3]\n    elseif n % 2 == 0 \n        tri_vec = [tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3)]\n    else\n        tri_vec = [tri(n - 1) + tri(n - 2), tri(n - 1) + tri(n\
    \ - 3)]\n    end\n    return tri_vec\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the sum of the numbers in the Fibonacci sequence. \n\
    \    For example, fib(3) = 5.", "    if n == 1 \n        Vector{Int64}(1) \n \
    \   else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the nth number of the Fibonacci\
    \ sequence. \nThe Fibonacci sequence is defined by the recurrence:\nfibonacci(1)\
    \ = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if\
    \ n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3), if n is odd.\nExamples:\nfibonacci(3)\nfibonacci(4)\nfibonacci(5)\nfibonacci(6)\n\
    fibonacci(7)\nfibonacci(8)\nfibonacci(9)\nfibonacci(10)\nfibonacci(11)\nfibonacci(12)\n\
    fibonacci(13)\nfibonacci(14)\nfibonacci(15)\nfibonacci(16)\nfibonacci(17)\nfibonacci(18)\n\
    fibonacci(19)\nfibonacci(20)\nfibonacci(21)\nfibonacci(22)\nfibonacci(23)\nfibonacci(24)\n\
    fibonacci(25)\nfibonacci(26)\nfibonacci(27)\nfibonacci(28)\nfibonacci(29)\nfibonacci(30)\n\
    fibonacci(31)\nfibonacci(32)\nfibonacci(33)\nfibonacci(34)\nfibonacci(35)\nfibonacci(36)\n\
    fibonacci(37)\nfibonacci(38)\nfibonacci(39)\nfibonacci(40)\nfibonacci(41)\nfibonacci(42)\n\
    fibonacci(43)\nfibonacci(44)\nfibonacci(45)\nfibonacci(46)\nfibonacci(47)\nfibonacci(48)\n\
    fibonacci(49)\nfibonacci(50)\nfibonacci(51)\nfibonac", "    if n == 1 \n     \
    \   return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the n-th Fibonacci number.", "    if n == 0\n        return Vector{Int64}()\n\
    \    elseif n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.3>", "    if n == 1 \n\
    \        tri_vec = [3]\n    else \n        tri_vec = [tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)]\n    end\n    return tri_vec\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)::Int64", "    if n == 1 \n        Vector{Int64}(1) \n\
    \    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <text>\nExercise 5\nWrite a function that takes a positive integer $n$ and returns\
    \ the $n$th Fibonacci number.", "    if n == 0\n        Vector{Int64}()\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    Examples:\n>>> factorial(5)\n120\n>>> factorial(10)\n3628800\n>>> factorial(0)\n\
    1\n>>> factorial(-1)\n1\n>>> factorial(-10)\n1\n>>> factorial(-100)\n1\n>>> factorial(-1000)\n\
    1\n>>> factorial(-10000)\n1\n>>> factorial(-100000)\n1\n>>> factorial(-1000000)\n\
    1\n>>> factorial(-10000000)\n1\n>>> factorial(-100000000)\n1\n>>> factorial(-1000000000)\n\
    1\n>>> factorial(-10000000000)\n1\n>>> factorial(-100000000000)\n1\n>>> factorial(-1000000000000)\n\
    1\n>>> factorial(-10000000000000)\n1\n>>> factorial(-100000000000000)\n1\n>>>\
    \ factorial(-1000000000000000)\n1\n>>> factorial(-10000000000000000)\n1\n>>> factorial(-100000000000000000)\n\
    1\n>>> factorial(-1000000000000000000)\n1\n>>> factorial(-10000000000000000000)\n\
    1\n>>> factorial(-100000000000000000000)\n1\n>>> factorial(-1000000000000000000000)\n\
    1\n>>> factorial(-10000000000000000000000)\n1\n>>> factorial(-100000000000000000000000)\n\
    1\n>>> factorial(-1000000000000000000000000)\n1\n>>> factorial(-10000000000000000000000000)\n\
    1\n>>> factorial(-100000000000000000000000000)\n1\n>>> factorial(-1000000000000000000000000000)\n\
    1\n>>> factorial(-10000000000000000000000000000)\n1\n>>> factorial(-100000000000000000000000000000)\n\
    1\n>>> factorial(-1000000000000000000000000000000)\n1\n>>> factorial(-10000000000000000000000000000000)\n\
    1\n>>> factorial(-100000000000000000000000000000000)\n1\n>>> factorial(-1000000000000000000000000000000000)\n\
    1\n>>> factorial(-10000000000000000000000000000000000)\n1\n>>> factorial(-100000000000000000000000000000000000)\n\
    1\n>>> factorial(-1000000000000000000000000000000000000)\n1\n>>> factorial(-10000000000000000000000000000000000000)\n\
    1\n>>> factorial(-100000000000000000000000000000000000000)\n1\n>>> factorial(-1000000000000000000000000000000000000000)\n\
    1\n>>> factorial(-10000000000000000000000000000000000000000)\n1\n>>> ", "    if\
    \ n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n  \
    \  else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    fib(n::Int64)::Int64", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the nth number of the Fibonacci sequence. \nExamples:\n>>> fib(3)\n8\n>>> fib(5)\n\
    13\n>>> fib(10)\n6765\n>>> fib(20)\n233168\n>>> fib(30)\n233168\n>>> fib(100)\n\
    233168\n>>> fib(1000)\n233168\n>>> fib(10000)\n233168\n>>> fib(100000)\n233168\n\
    >>> fib(1000000)\n233168\n>>> fib(10000000)\n233168\n>>> fib(100000000)\n233168\n\
    >>> fib(1000000000)\n233168\n>>> fib(10000000000)\n233168\n>>> fib(100000000000)\n\
    233168\n>>> fib(1000000000000)\n233168\n>>> fib(10000000000000)\n233168\n>>> fib(100000000000000)\n\
    233168\n>>> fib(1000000000000000)\n233168\n>>> fib(10000000000000000)\n233168\n\
    >>> fib(100000000000000000)\n233168\n>>> fib(100000000000000001)\n233168\n>>>\
    \ fib(100000000000000002)\n233168\n>>> fib(100000000000000003)\n233168\n>>> fib(100000000000000004)\n\
    233168\n>>> fib(100000000000000005)\n233168\n>>> fib(100000000000000006)\n233168\n\
    >>> fib(100000000000000007)\n233168\n>>> fib(100000000000000008)\n233168\n>>>\
    \ fib(100000000000000009)\n233168\n>>> fib(100000000000000010)\n233168\n>>> fib(100000000000000011)\n\
    233168\n>>> fib(100000000000000012)\n233168\n>>> fib(100000000000000013)\n233168\n\
    >>> fib(100000000000000014)\n233168\n>>> fib(100000000000000015)\n233168\n>>>\
    \ fib(100000000000000016)\n233168\n>>> fib(100000000000000017)\n233168\n>>> fib(100000000000000018)\n\
    233168\n>>> fib(100000000000000019)\n233168\n>>> fib(100000000000000020)\n233168\n\
    >>> fib(100000000000000021)\n233168\n>>> fib(100000000000000022)\n233168\n>>>\
    \ fib(100000000000000023)\n233168\n>>> ", "    if n == 1\n        return [1]\n\
    \    elseif n == 2\n        return [1, 1]\n    else\n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the Fibonacci sequence up to n.\nExamples:\n>>> fib(5)\n[1, 1,\
    \ 2, 3, 5]\n>>> fib(10)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n>>> fib(20)\n[1,\
    \ 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181,\
    \ 6765]\n>>> fib(30)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610,\
    \ 987, 1597, 2584, 4181, 6765, 10946]\n>>> fib(40)\n[1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\n 17711,\
    \ 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309,\
    \ 3524578, 5702887, \n 9227465]\n>>> fib(50)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55,\
    \ 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946,\n 17711, 28657,\
    \ 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578,\
    \ 5702887, \n 9227465, 14930352, 24157817, 39088169, 63245986, 102334155]\n>>>\
    \ fib(100)\n[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597,\
    \ 2584, 4181, 6765, 10946,\n 17711, 28657, 46368, 75025, 121393, 196418, 317811,\
    \ 514229, 832040, 1346269, 2178309, 3524578, 5702887, \n 9227465, 14930352, 24157817,\
    \ 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, \n\
    \ 1134903170, 1836311903, 2971215073, 480", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns the factorial of a given number.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>", "   \
    \ if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the Fibonacci number at a given index. \nThe Fibonacci numbers\
    \ are the numbers in the Fibonacci sequence starting with 0, 1, 1, 2, \n3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597 and so on. \nThe Fibonacci\
    \ number at index 0 is 0, the Fibonacci number at index 1 is 1. \nThe Fibonacci\
    \ number at index n is Fibonacci(n - 1) + Fibonacci(n - 2). \nFor example, Fibonacci(10)\
    \ = 55. \nWrite a function that returns the nth Fibonacci number.\nThe function\
    \ should take one argument, n, which represents the index of the Fibonacci number\
    \ \nto return. \nThe function should return the nth Fibonacci number.\nThe function\
    \ should raise an error if n is out of bounds. \nExamples:\n>>> fibonacci(0)\n\
    0\n>>> fibonacci(1)\n1\n>>> fibonacci(2)\n1\n>>> fibonacci(3)\n2\n>>> fibonacci(4)\n\
    3\n>>> fibonacci(5)\n5\n>>> fibonacci(10)\n55\n>>> fibonacci(11)\n55\n>>> fibonacci(12)\n\
    55\n>>> fibonacci(13)\n55\n>>> fibonacci(14)\n55\n>>> fibonacci(15)\n55\n>>> fibonacci(16)\n\
    55\n>>> fibonacci(17)\n55\n>>> fibonacci(18)\n55\n>>> fibonacci(19)\n55\n>>> fibonacci(20)\n\
    55\n>>> fibonacci(21)\n55\n>>> fibonacci(22)\n55\n>>> fibonacci(23)\n55\n>>> fibonacci(24)\n\
    55\n>>> fibonacci(25)\n55\n>>> fibonacci(26)\n55\n>>> fibonacci(27)\n55\n>>> fibonacci(28)\n\
    55\n>>> fibonacci(29)\n55\n>>> fibonacci(30)\n55\n>>> fibonacci(31)\n55\n>>> fi",
  "    if n == 1 \n        Vector{Int64}([3])\n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a given number. \nExamples:\nfactorial(1) = 1\n\
    factorial(2) = 2\nfactorial(3) = 6\nfactorial(4) = 24\nfactorial(5) = 120\nfactorial(6)\
    \ = 720\nfactorial(7) = 5040\nfactorial(8) = 40320\nfactorial(9) = 362880\nfactorial(10)\
    \ = 3628800 \nExercise 3\nWrite a function that returns the Fibonacci number at\
    \ a given index. \nExamples:\nfibonacci(0) = 0\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\nfibonacci(5) = 5\nfibonacci(6)8\nExercise\
    \ 4\nWrite a function that returns the Fibonacci number at a given index. \nExamples:\n\
    fibonacci(0) = 0\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(3) = 2\nfibonacci(4)\
    \ = 3\nfibonacci(5) = 5\nfibonacci(6)8\nExercise 5\nWrite a function that returns\
    \ the Fibonacci number at a given index. \nExamples:\nfibonacci(0) = 0\nfibonacci(1)\
    \ = 1\nfibonacci(2) = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\nfibonacci(5) = 5\n\
    fibonacci(6)8\nExercise 6\nWrite a function that returns the Fibonacci number\
    \ at a given index. \nExamples:\nfibonacci(0) = 0\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\nfibonacci(5) = 5\nfibonacci(6)8\nExercise\
    \ 7\nWrite a function that returns the Fibonacci number at a given index. \nExamples:\n\
    fibonacci(0) = 0\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(3) = 2\nfibonacci(4)\
    \ = 3\nfibonacci(5) = 5\nfibonacci(6)8\nExercise 8\nWrite a function that returns\
    \ the Fibonacci number at a given index. \nExamples:\nfibonacci(0) = 0\nfibonacci(1)\
    \ = 1\nfibonacci", "    if n == 0\n        Vector{Int64}()\n    elseif n == 1\n\
    \        Vector{Int64}(3)\n    elseif n % 2 == 0\n        tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the Fibonacci number at a given index. \nThe Fibonacci numbers are defined by\
    \ the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2) + fibonacci(n - 3), if n is odd.\nExamples:\nfibonacci(3)\nfibonacci(4)\n\
    fibonacci(5)\nfibonacci(6)\nfibonacci(7)\nfibonacci(8)\nfibonacci(9)\nfibonacci(10)\n\
    fibonacci(11)\nfibonacci(12)\nfibonacci(13)\nfibonacci(14)\nfibonacci(15)\nfibonacci(16)\n\
    fibonacci(17)\nfibonacci(18)\nfibonacci(19)\nfibonacci(20)\nfibonacci(21)\nfibonacci(22)\n\
    fibonacci(23)\nfibonacci(24)\nfibonacci(25)\nfibonacci(26)\nfibonacci(27)\nfibonacci(28)\n\
    fibonacci(29)\nfibonacci(30)\nfibonacci(31)\nfibonacci(32)\nfibonacci(33)\nfibonacci(34)\n\
    fibonacci(35)\nfibonacci(36)\nfibonacci(37)\nfibonacci(38)\nfibonacci(39)\nfibonacci(40)\n\
    fibonacci(41)\nfibonacci(42)\nfibonacci(43)\nfibonacci(44)\nfibonacci(45)\nfibonacci(46)\n\
    fibonacci(47)\n", "    if n == 1 \n        Vector{Int64}(1) \n    else \n    \
    \    tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n::Int64)::Int64", "    if n == 1 \n        return [1]\n    else\
    \ if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
