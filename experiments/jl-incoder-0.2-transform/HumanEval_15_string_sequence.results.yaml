language: jl
name: HumanEval_15_string_sequence
results:
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings as an input and returns\
    \ a vector of integers representing the number of times each string appears in\
    \ the input vector.\nFor example, if the input vector is [\"a\", \"b\", \"c\"\
    , \"a\", \"b\", \"a\"], then the output vector should be [1, 1, 2, 1, 1, 1].\n\
    Hint: Use a for loop to iterate over the input vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpnmj6cv_m.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnmj6cv_m.jl:9\n\
    in expression starting at /tmp/tmpnmj6cv_m.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq += String(i)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp968a6cxr.jl:13\nin expression starting at\
    \ /tmp/tmp968a6cxr.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive. \"\n    \n    string = \"\"\n    for i = 1 to n do\n        string\
    \ = string + \" \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpme6xcwun.jl:11 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpme6xcwun.jl:11\n\
    in expression starting at /tmp/tmpme6xcwun.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should work for both vectors\
    \ of numbers and vectors of strings.\nThe function should work for vectors of\
    \ any length.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp8w38g_f8.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8w38g_f8.jl:9\n\
    in expression starting at /tmp/tmp8w38g_f8.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + to_string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n is even\" if the number is even, and \"\
    n is odd\" if the number is odd.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpz6nrpo82.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz6nrpo82.jl:10\n\
    in expression starting at /tmp/tmpz6nrpo82.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + to_string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 10\nWrite a function that takes\
    \ a string and returns the number of characters in the string.\nHint: Use a for\
    \ loop to iterate over the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpq06we9x3.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq06we9x3.jl:10\n\
    in expression starting at /tmp/tmpq06we9x3.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the string\
    \ with all the letters capitalized.\nHint: Use a for loop to iterate over the\
    \ characters in the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpszuymyv6.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpszuymyv6.jl:9\n\
    in expression starting at /tmp/tmpszuymyv6.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq[i] = i\n    end\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ array of numbers and returns the sum of the numbers. \nThe function should also\
    \ accept a second argument that specifies the number of elements in the array.\
    \ \nThe function should return an error if the number of elements is less than\
    \ or equal to 0.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjl2amp3.jl:14\nin expression starting at\
    \ /tmp/tmpxjl2amp3.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n  \
    \  return string\nend\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpduuebd_c.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpduuebd_c.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpduuebd_c.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpduuebd_c.jl:18\ntest set: Error\
    \ During Test at /tmp/tmpduuebd_c.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(3) == \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(!Matched::T,\
    \ ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128, UInt16, UInt32,\
    \ UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n \
    \   +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/centos7/julia/1.7.3/share/julia/base/char.jl:237\n\
    \    ...\n  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmpduuebd_c.jl:10\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpduuebd_c.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpduuebd_c.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpduuebd_c.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching\
    \ +(::String, ::Int64)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(!Matched::T, ::T) where T<:Union{Int128, Int16, Int32, Int64, Int8, UInt128,\
    \ UInt16, UInt32, UInt64, UInt8} at /shared/centos7/julia/1.7.3/share/julia/base/int.jl:87\n\
    \    +(!Matched::T, ::Integer) where T<:AbstractChar at /shared/cen"
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]()\n    for n in 0..n\n        string_seq.append(string(n))\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n is even\" if the number is even, and \"\
    n is odd\" if the number is odd.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp8wfuwfa.jl:13\nin expression starting at\
    \ /tmp/tmpp8wfuwfa.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n\n        string_seq = string_seq + i\n \
    \   end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nWrite a function that takes a string and returns the number of\
    \ characters in the string.\nHint: Use length()\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps87dmgds.jl:14\nin expression starting at\
    \ /tmp/tmps87dmgds.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else\n        string_sequence(n-1).\"\
    \ \".(0:n)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a number\
    \ n and returns the string \"n is a power of two\" if n is a power of two, otherwise\
    \ \"n is not a power of two\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0bhf7o5k.jl:13\nin expression starting at\
    \ /tmp/tmp0bhf7o5k.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc80kyceh.jl:14\nin expression starting at\
    \ /tmp/tmpc80kyceh.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n  \
    \  return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the string with\
    \ all the letters capitalized.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpem00p59h.jl:14\nin expression starting at\
    \ /tmp/tmpem00p59h.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector.\nFor example,\
    \ if the input vector is [1,2,3,4,5], the output should be 15.\nHint: Use a for\
    \ loop to iterate over the elements of the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4f615ko2.jl:14\nin expression starting at\
    \ /tmp/tmp4f615ko2.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpk1jgnkvm.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk1jgnkvm.jl:9\n\
    in expression starting at /tmp/tmpk1jgnkvm.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for n in 0 .. n\n        string_seq += String(n)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<text>\nThe function string_sequence\
    \ is now available in the Julia REPL.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeoyacq6q.jl:13\nin expression starting at\
    \ /tmp/tmpeoyacq6q.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpfkzr3kej.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfkzr3kej.jl:9\n\
    in expression starting at /tmp/tmpfkzr3kej.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lower case. \nThe function should\
    \ ignore all non-alphabetic characters.\nThe function should ignore all empty\
    \ strings.\nThe function should ignore all strings consisting of only whitespace.\n\
    The function should ignore all strings consisting of only digits.\nThe function\
    \ should ignore all strings consisting of only letters.\nThe function should ignore\
    \ all strings consisting of only special characters.\nThe function should ignore\
    \ all strings consisting of only letters and digits.\nThe function should ignore\
    \ all strings consisting of only letters and special characters.\nThe function\
    \ should ignore all strings consisting of only letters, digits and special characters.\n\
    The function should ignore all strings consisting of only letters, digits and\
    \ whitespace.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace and special characters.\nThe function should ignore all strings\
    \ consisting of only letters, digits, whitespace, special characters and empty\
    \ strings.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace, special characters, empty strings and digits.\nThe function\
    \ should ignore all strings consisting of only letters, digits, whitespace, special\
    \ characters, empty strings and digits.\nThe function should ignore all strings\
    \ consisting of only letters, digits, whitespace, special characters, empty strings\
    \ and digits.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace, special characters, empty strings and digits.\nThe function\
    \ should ignore all strings consisting of only letters, digits, whitespace, special\
    \ characters, empty strings and digits.\nThe function should ignore all strings\
    \ consisting of only letters, digits, whitespace, special characters, empty strings\
    \ and digits.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace, special characters, empty strings and digits.\nThe function\
    \ should ignore all strings consisting of only letters, digits, whitespace, special\
    \ characters, empty strings and digits.\nThe function should ignore all strings\
    \ consisting of only letters, digits, whitespace, special characters, empty strings\
    \ and digits.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace, special characters, empty strings and digits.\nThe function\
    \ should ignore all strings consisting of only letters, digits, whitespace, special\
    \ characters, empty strings and digits.\nThe function should ignore all strings\
    \ consisting of only letters, digits, whitespace, special characters, empty strings\
    \ and digits.\nThe function should ignore all strings consisting of only letters,\
    \ digits, whitespace, special characters, empty strings and digits.\nThe function\
    \ should ignore all strings \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp37jnz8o2.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp37jnz8o2.jl:9\n\
    in expression starting at /tmp/tmp37jnz8o2.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Initialize a string variable with an empty string.\"\
    \n    \" Initialize a variable i to 0.\"\n    \" Initialize a variable j to n.\"\
    \n    \" Initialize a variable k to 0.\"\n    \" Initialize a variable l to 0.\"\
    \n    \" Initialize a variable m to 0.\"\n    \" Initialize a variable n to n.\"\
    \n    \" Initialize a variable o to 0.\"\n    \" Initialize a variable p to 0.\"\
    \n    \" Initialize a variable q to 0.\"\n    \" Initialize a variable r to 0.\"\
    \n    \" Initialize a variable s to 0.\"\n    \" Initialize a variable t to 0.\"\
    \n    \" Initialize a variable u to 0.\"\n    \" Initialize a variable v to 0.\"\
    \n    \" Initialize a variable w to 0.\"\n    \" Initialize a variable x to 0.\"\
    \n    \" Initialize a variable y to 0.\"\n    \" Initialize a variable z to 0.\"\
    \n    \" Initialize a variable a to 0.\"\n    \" Initialize a variable b to 0.\"\
    \n    \" Initialize a variable c to 0.\"\n    \" Initialize a variable d to 0.\"\
    \n    \" Initialize a variable e to 0.\"\n    \" Initialize a variable f to 0.\"\
    \n    \" Initialize a variable g to 0.\"\n    \" Initialize a variable h to 0.\"\
    \n    \" Initialize a variable i to n.\"\n    \" Initialize a variable j to n.\"\
    \n    \" Initialize a variable k to n.\"\n    \" Initialize a variable l to n.\"\
    \n    \" Initialize a variable m to n.\"\n    \" Initialize a variable n to n.\"\
    \n    \" Initialize a variable o to n.\"\n    \" Initialize a variable p to n.\"\
    \n    \" Initialize a variable q to n.\"\n    \" Initialize a variable r to n.\"\
    \n    \" Initialize a variable s to n.\"\n    \" Initialize a variable t to n.\"\
    \n    \" Initialize a variable u to n.\"\n    \" Initialize a variable v to n.\"\
    \n    \" Initialize a variable w to n.\"\n    \" Initialize a variable x to n.\"\
    \n    \" Initialize a variable y to n.\"\n    \" Initialize a variable z to n.\"\
    \n    \" Initialize a variable a to n.\"\n    \" Initialize a variable b to n.\"\
    \n    \" Initialize a variable c to n.\"\n    \" Initialize a variable d to n.\"\
    \n    \" Initialize a variable e to n.\"\n    \" \nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp7rqr5il2.jl:7 expected\
    \ \"end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7rqr5il2.jl:66\n\
    in expression starting at /tmp/tmp7rqr5il2.jl:66\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector. For example, if the vector\
    \ is [1,2,3,4,5], the function should return 15.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpi8jcy8_4.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi8jcy8_4.jl:10\n\
    in expression starting at /tmp/tmpi8jcy8_4.jl:10\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = n-1, 0, -1 do\n        string_seq.append(i%10^6)\n\
    \        i /= 10^6\n    end\n    return string_seq.join(\" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(0)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(100000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(10000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuapsgycw.jl:9\nin expression starting at /tmp/tmpuapsgycw.jl:9\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    if n == 0\n        return \"0\"\n    \n    string = \"\"\n    \n  \
    \  for i = 1 to n\n        string = string + \" \" + string_sequence(i)\n    \n\
    \    return string\n</code>\n<|/ a tags=recursion,haskell |>\n<| c |>\nThank you\
    \ very much for your answer! I understand it now. :)\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpwiihac6f.jl:14 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwiihac6f.jl:14\n\
    in expression starting at /tmp/tmpwiihac6f.jl:14\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ string with all the letters in lower case. For example, \"Hello World\" becomes\
    \ \"hello world\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp07_5303u.jl:9\nin expression starting at /tmp/tmp07_5303u.jl:9\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive. \"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The numbers are separated\
    \ by spaces.\"\n    \" The numbers are separated by spaces.\"\n    \" The numbers\
    \ are separated by spaces.\"\n    \" The numbers are separated by spaces.\"\n\
    \    \" The numbers are separated by spaces.\"\n    \" The number\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpk4094v_e.jl:7 expected\
    \ \"end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk4094v_e.jl:64\n\
    in expression starting at /tmp/tmpk4094v_e.jl:64\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a number n and returns the string \"n is even\".\nWrite\
    \ a function that takes a number n and returns the string \"n is odd\".\nWrite\
    \ a function that takes a number n and returns the string \"n is positive\".\n\
    Write a function that takes a number n and returns the string \"n is negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is odd\"\
    .\nWrite a function that takes a number n and returns the string \"n is even\"\
    .\nWrite a function that takes a number n and returns the string \"n is positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is odd\"\
    .\nWrite a function that takes a number n and returns the string \"n is even\"\
    .\nWrite a function that takes a number n and returns the string \"n is positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is odd\"\
    .\nWrite a function that takes a number n and returns the string \"n is even\"\
    .\nWrite a function that takes a number n and returns the string \"n is positive\"\
    .\nWrite a function that takes a number n and returns the string \"n is negative\"\
    .\nWrite a function that takes a number n and returns the string \"n is zero\"\
    .\nWrite a function that takes a number n and returns the string \"n is non-positive\"\
    .\n\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1jxy6y56.jl:14\nin expression starting at\
    \ /tmp/tmp1jxy6y56.jl:14\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]\n    for n in 0 .. n\n        string_sequence\
    \ += String(n)\n    return string_sequence\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nThanks for your answer! I edited my question to make it more clear what\
    \ I'm looking for. Your answer doesn't seem to work for me though.\n<|/ c |>\n\
    <| c |>\nI edited my answer to include a solution that should work for you\n<|/\
    \ c |>\n<| c |>\nThanks for your answer! I edited my question to make it more\
    \ clear what I'm looking for. Your answer doesn't seem to work for me though.\n\
    <|/ c |>\n<| c |>\nI edited my answer to include a solution that should work for\
    \ you\n<|/ c |>\n<| a tags=julia |>\nThe easiest way is to use join:\n<code>\n\
    julia> join(\" \", 0:5)\n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=3 |>\n<| c |>\n\
    Thanks for your answer! I edited my question to make it more clear what I'm looking\
    \ for. Your answer doesn't seem to work for me though.\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include a solution that should work for you\n<|/ c |>\n<| a dscore=2\
    \ |>\nI believe that this is what you are looking for:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1o72xv43.jl:12\nin expression starting at\
    \ /tmp/tmp1o72xv43.jl:12\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n-1 downto 1 do\n        string_seq = string_seq\
    \ + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp83ov6y7i.jl:9 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp83ov6y7i.jl:9\n\
    in expression starting at /tmp/tmp83ov6y7i.jl:9\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string as input and\
    \ returns the string with all the characters in lower case.\nHint: Use lowercase()\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5nhtfbx.jl:14\nin expression starting at\
    \ /tmp/tmpy5nhtfbx.jl:14\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n\n        do\n            string_seq = string_seq\
    \ + i\n        end\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a number n and returns the string\
    \ \"n!\".\nWrite a function that takes a number n and returns the string \"n-n!\"\
    .\nWrite a function that takes a number n and returns the string \"n-n-n!\".\n\
    Write a function that takes a number n and returns the string \"n-n-n-n!\".\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp45xunal7.jl:10\nin expression starting at /tmp/tmp45xunal7.jl:10\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = String[]\n    \n    for i in 0 .. n\n        string_sequence\
    \ += String(i)\n    \n    return string_sequence\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThanks for the answer! I didn't know that you can define functions in\
    \ Julia. I'm still a beginner at Julia, so I didn't know that you could define\
    \ functions like that. Thanks again!\n<|/ c |>\n<| c |>\nNo problem! I added some\
    \ more information to my answer about defining functions in Julia. Hope it helps!\n\
    <|/ c |>\n<| c |>\nThanks for the additional info! I really appreciate it!\n<|/\
    \ c |>\n<| a dscore=1 |>\nI wrote a package called Strings.jl that does exactly\
    \ this. It has many useful string manipulation functions, including join, split,\
    \ and replace. \n<code>\njulia> using Strings\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplrest3ri.jl:15\nin expression starting at\
    \ /tmp/tmplrest3ri.jl:15\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence\
    \ = string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns a string\
    \ with all the characters in lower case. \nFor example if the input string is\
    \ \"Hello World\" the output should be \"hello world\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpkpg3_qhd.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkpg3_qhd.jl:10\n\
    in expression starting at /tmp/tmpkpg3_qhd.jl:10\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of strings and returns a vector of integers containing the number of\
    \ times each string appears in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqi5fv9vh.jl:15\nin expression starting at\
    \ /tmp/tmpqi5fv9vh.jl:15\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n\
    \ - 1) ++ \" \" ++ string_sequence(n - 1)\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\nHere is a recursive solution:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8nx15kqe.jl:9\nin expression starting at /tmp/tmp8nx15kqe.jl:9\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n\n        string_seq = string_seq + i\n \
    \   end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all the\
    \ letters capitalized. \nFor example: \n\"hello\" => \"Hello\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\
    \n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\"\
    \ => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\
    \n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\"\
    \ => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\
    \n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\"\
    \ => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\
    \n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\"\
    \ => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\
    \n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\"\
    \ => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"\
    HELLO\"\n\"hello\" => \"HELLO\"\n\"hello\" => \"HELLO\"\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckglaoxu.jl:14\nin expression starting at\
    \ /tmp/tmpckglaoxu.jl:14\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpv_jenpw1.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv_jenpw1.jl:9\n\
    in expression starting at /tmp/tmpv_jenpw1.jl:9\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n\
    \    str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n prime numbers. \nHint: Use a for loop and\
    \ a prime number generator function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_7bew6c.jl:14\nin expression starting at\
    \ /tmp/tmpq_7bew6c.jl:14\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(string(i))\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nThe function should ignore\
    \ punctuation and only count the words. \nThe function should ignore numbers and\
    \ only count the words.\nThe function should ignore capitalization and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic characters and only count\
    \ the words.\nThe function should ignore non-alphabetic character\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsn3e1kkm.jl:13\nin expression starting at\
    \ /tmp/tmpsn3e1kkm.jl:13\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = String[Int64]()\n    for i = 1:n\n        str = str + i\n    end\n\
    \    return str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nThe function string_sequence is now a Julia function, which can\
    \ be called from Julia code using the function call syntax:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx3d4p9yi.jl:14\nin expression starting at\
    \ /tmp/tmpx3d4p9yi.jl:14\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb64k0b4l.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb64k0b4l.jl:1\n\
    in expression starting at /tmp/tmpb64k0b4l.jl:1\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a for loop and a prime number generator to generate prime numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpaq5ir3eq.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpaq5ir3eq.jl:9\n\
    in expression starting at /tmp/tmpaq5ir3eq.jl:9\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n <= 0 \n        error(\"n must be positive\")\n    else if n == 1\n \
    \       return \"0\"\n    else \n        string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns a string with all the characters in the string capitalized. \nFor\
    \ example, string_sequence(\"Hello World\") should return \"Hello World\".\nHint:\
    \ Use a for loop.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlonp_cg.jl:10\nin expression starting at\
    \ /tmp/tmpwlonp_cg.jl:10\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + string(i)\n    end\n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the string \"Hello World!\" if the argument\
    \ n is greater than or equal to 10 and less than or equal to 100. Otherwise return\
    \ the string \"Goodbye World!\".\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpd4h_7i2e.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd4h_7i2e.jl:9\n\
    in expression starting at /tmp/tmpd4h_7i2e.jl:9\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = n\n    do\n        string += i\n \
    \       string += \" \"\n    done\n    \n    return string\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nI like to use string interpolation for this.\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxefjjut5.jl:12\nin expression starting at /tmp/tmpxefjjut5.jl:12\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n Fibonacci numbers. \nHint: Use a recursive function.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmputxb94ri.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmputxb94ri.jl:10\n\
    in expression starting at /tmp/tmputxb94ri.jl:10\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns a string containing all the characters of the string in alphabetical\
    \ order.\nFor example if the input string is \"hello\" then the output string\
    \ should be \"hbeol\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpn6prdfex.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn6prdfex.jl:9\n\
    in expression starting at /tmp/tmpn6prdfex.jl:9\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq[i] = i\n    end\n\
    \    return join(string_seq,\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgw7_e4f6.jl:14\nin expression starting at\
    \ /tmp/tmpgw7_e4f6.jl:14\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0:n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxz89vswb.jl:13\nin expression starting at\
    \ /tmp/tmpxz89vswb.jl:13\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i in 0:n-1\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxn6kj0u2.jl:14\nin expression starting at\
    \ /tmp/tmpxn6kj0u2.jl:14\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length()\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph34kgccv.jl:14\nin expression starting at\
    \ /tmp/tmph34kgccv.jl:14\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(100)\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string as input and returns the string with all\
    \ the letters capitalized.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp_aemgbib.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_aemgbib.jl:9\n\
    in expression starting at /tmp/tmp_aemgbib.jl:9\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt43yreni.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt43yreni.jl:1\n\
    in expression starting at /tmp/tmpt43yreni.jl:1\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = \"\"\n    for i = 1:n\n        string_sequence =\
    \ string_sequence + \" \" + string(i)\n    end\n    \n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the numbers in that vector. \nFor example, if the input vector is [1,2,3,4,5],\
    \ the output should be 15.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpper13ouu.jl:16\nin expression starting at\
    \ /tmp/tmpper13ouu.jl:16\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string as input and returns the string with all the\
    \ characters in lower case.\nHint: Use tolower function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp29hcoo_r.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp29hcoo_r.jl:9\n\
    in expression starting at /tmp/tmp29hcoo_r.jl:9\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = n\n    do\n        string = string + \" \" + string(i)\n\
    \    done\n    return string\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbr8y985j.jl:10\nin expression starting at /tmp/tmpbr8y985j.jl:10\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \" \"\n    for i = 1:n\n        str = str + i\n    end\n    return\
    \ str\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first n prime numbers. \n\
    Hint: Use a for loop to iterate over all numbers from 2 to n inclusive.\nHint:\
    \ Use a while loop to iterate over all numbers from 2 to n inclusive.\nHint: Use\
    \ a recursive function to implement the algorithm.\nHint: Use a while loop to\
    \ iterate over all numbers from 2 to n inclusive.\nHint: Use a recursive function\
    \ to implement the algorithm.\nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n inclusive.\nHint: Use a recursive function to implement the algorithm.\n\
    Hint: Use a while loop to iterate over all numbers from 2 to n inclusive.\nHint:\
    \ Use a recursive function to implement the algorithm.\nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n inclusive.\nHint: Use a recursive function\
    \ to implement the algorithm.\nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n inclusive.\nHint: Use a recursive function to implement the algorithm.\n\
    Hint: Use a while loop to iterate over all numbers from 2 to n inclusive.\nHint:\
    \ Use a recursive function to implement the algorithm.\nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n inclusive.\nHint: Use a recursive function\
    \ to implement the algorithm.\nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n inclusive.\nHint: Use a recursive function to implement the algorithm.\n\
    Hint: Use a while loop to iterate over all numbers from 2 to n inclusive.\nHint:\
    \ Use a recursive function to implement the algorithm.\nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n inclusive.\nHint: Use a recursive function\
    \ to implement the algorithm.\nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n inclusive.\nHint: Use a recursive function to implement the algorithm.\n\
    Hint: Use a while loop to iterate over all numbers from 2 to n inclusive.\nHint:\
    \ Use a recursive function to implement the algorithm.\nHint: Use a while loop\
    \ to iterate over all numbers from 2 to n inclusive.\nHint: Use a recursive function\
    \ to implement the algorithm.\nHint: Use a while loop to iterate over all numbers\
    \ from 2 to n inclusive.\nHint: Use a recursive function to implement the algorithm.\n\
    Hint: Use a while loop to iterate over all numbers from 2 to n inclusive.\n\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43x1yh6f.jl:14\nin expression starting at\
    \ /tmp/tmp43x1yh6f.jl:14\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt43yreni.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt43yreni.jl:1\n\
    in expression starting at /tmp/tmpt43yreni.jl:1\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ the string \"n is a power of two\" if n is a power of two, and \"n is not a\
    \ power of two\" if n is not a power of two.\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5_gqwwqz.jl:9\nin expression starting at /tmp/tmp5_gqwwqz.jl:9\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + to_string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer n and returns the string \"n is a multiple of 4\" if the integer is\
    \ divisible by 4, otherwise return \"n is not a multiple of 4\".\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmphg9payil.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphg9payil.jl:10\n\
    in expression starting at /tmp/tmphg9payil.jl:10\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = n\n    do\n        string += i\n       \
    \ i += 1\n    done\n    return string\n</code>\n<|/ a tags=julia,string |>\n<|\
    \ a tags=julia,string |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu0e8grdd.jl:11\nin expression starting at /tmp/tmpu0e8grdd.jl:11\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0..n-1\n        string_seq[i] = \"%d\
    \ \" \n        string_seq[i+1] = i\n    end\n    string_seq[n] = \"\"\n    return\
    \ join(string_seq)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0tcm0j4h.jl:16\nin expression starting at\
    \ /tmp/tmp0tcm0j4h.jl:16\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]()\n    for i = 1:n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of strings and returns a vector of Int64s.\nThe function should convert\
    \ each string in the vector to its corresponding Int64 value.\nThe function should\
    \ ignore any non-numeric characters in the string.\nThe function should ignore\
    \ any empty strings.\nThe function should ignore any strings that are not of the\
    \ form \"x\".\nThe function should ignore any strings that are not of the form\
    \ \"x\" or \"y\".\nThe function should ignore any strings that are not of the\
    \ form \"x\" or \"y\" or \"z\".\nThe function should ignore any strings that are\
    \ not of the form \"x\" or \"y\" or \"z\" or \"w\".\nThe function should ignore\
    \ any strings that are not of the form \"x\" or \"y\" or \"z\" or \"w\" or \"\
    a\" or \"b\" or \"c\" or \"d\" or \"e\" or \"f\" or \"g\" or \"h\" or \"i\" or\
    \ \"j\" or \"k\" or \"l\" or \"m\" or \"n\" or \"o\" or \"p\" or \"q\" or \"r\"\
    \ or \"s\" or \"t\" or \"u\" or \"v\" or \"w\" or \"x\" or \"y\" or \"z\" or \"\
    w\" or \"a\" or \"b\" or \"c\" or \"d\" or \"e\" or \"f\" or \"g\" or \"h\" or\
    \ \"i\" or \"j\" or \"k\" or \"l\" or \"m\" or \"n\" or \"o\" or \"p\" or \"q\"\
    \ or \"r\" or \"s\" or \"t\" or \"u\" or \"v\" or \"w\" or \"x\" or \"y\" or \"\
    z\" or \"w\" or \"a\" or \"b\" or \"c\" or \"d\" or \"e\" or \"f\" or \"g\" or\
    \ \"h\" or \"i\" or \"j\" or \"k\" or \"l\" or \"m\" or \"n\" or \"o\" or \"p\"\
    \ or \"q\" or \"r\" or \"s\" or \"t\" or \"u\" or \"v\" or \"w\" or \"x\" or \"\
    y\" or \"z\" or \"w\" or \"a\" or \"b\" or \"c\" or \"d\" or \"e\" or \"f\" or\
    \ \"g\" or \"h\" or \"i\" or \"j\" or \"k\" or \"l\" or \"m\" or \"n\" or \"o\"\
    \ or \"p\" or \"q\" or \"r\" or \"s\" or \"t\" or \"u\" or \"v\" or \"w\" or \"\
    x\" or \"y\" or \"z\" or \"w\" or \"a\" or \"b\" or \"c\" or \"d\" or \"e\" or\
    \ \"f\" or \"g\" or \"h\" or \"i\" or \"j\" or \"k\" or \"l\" or \"m\" or \"n\"\
    \ or \"o\" or \"p\" or \"q\" or \"r\" or \"s\" or \"t\" or \"u\" or \"v\" or \"\
    w\" or \"x\" or \"y\" or \"z\" or \"w\" or \"a\" or \"b\" or \"c\" or \"d\" or\
    \ \"e\" or \"f\" or \"g\" or \"h\" or \"i\" or \"j\" or \"k\" or \"l\" or \"m\"\
    \ or \"n\" or \"o\" or \"p\" or \"q\" or \"r\" or \"s\" or \"t\" or \"u\" or \"\
    v\" or \"w\" or \"x\" or \"y\" or \"z\" or \"w\" or \"a\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp95nytp5h.jl:13\nin expression starting at\
    \ /tmp/tmp95nytp5h.jl:13\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of numbers as an argument and returns the sum\
    \ of the numbers. \nThe function should also return the number of elements in\
    \ the vector.\nThe function should also return a string containing the sum of\
    \ the numbers and the length of the vector.\nThe function should also return a\
    \ string containing the number of elements in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmicjh0tv.jl:14\nin expression starting at\
    \ /tmp/tmpmicjh0tv.jl:14\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in that string.\nHint: Use length()\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaio9pvra.jl:14\nin expression starting at\
    \ /tmp/tmpaio9pvra.jl:14\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function which takes an integer n and returns\
    \ the string \"n!\".\nHint: Use a for loop.\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpigzxh68e.jl:15\nin expression starting at\
    \ /tmp/tmpigzxh68e.jl:15\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 7\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lower case.\nFor example, string_lowercase(\"\
    Hello World!\") should return \"hello world!\".\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp4qzn3_j_.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4qzn3_j_.jl:9\n\
    in expression starting at /tmp/tmp4qzn3_j_.jl:9\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of numbers and returns the sum of the numbers. \nThe function should\
    \ work for both vectors of numbers and vectors of strings. \nThe function should\
    \ work for vectors of any length.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpyy6luxdb.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyy6luxdb.jl:9\n\
    in expression starting at /tmp/tmpyy6luxdb.jl:9\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ number n and returns the string \"nth term\" where n is given as an input to\
    \ the function.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmps_kqhw1m.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps_kqhw1m.jl:9\n\
    in expression starting at /tmp/tmps_kqhw1m.jl:9\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0..n-1\n        string_seq[i] = i\n \
    \   return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 1\nWrite a function that takes a string and returns\
    \ the string with all the letters capitalized. \nFor example, \"hello\" => \"\
    Hello\"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8jjpnco.jl:13\nin expression starting at\
    \ /tmp/tmpm8jjpnco.jl:13\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of integers containing\
    \ the number of times each string appears in the vector.\nFor example, string_sequence(\"\
    hello\", \"world\", \"hello\") should return a vector [1, 1, 2].\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzqachljz.jl:14\nin expression starting at\
    \ /tmp/tmpzqachljz.jl:14\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n-1, 0, -1 do\n        string_seq = string_seq\
    \ + string(i)\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise: Write a function that takes a string\
    \ and returns the string with all spaces replaced by '%20'\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxp2snr8.jl:9\nin expression starting at /tmp/tmptxp2snr8.jl:9\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all the\
    \ characters in lower case and all the characters in upper case.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp8e1n1qp3.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8e1n1qp3.jl:10\n\
    in expression starting at /tmp/tmp8e1n1qp3.jl:10\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = String()\n    \n    for i = 1:n\n        string_sequence\
    \ = string_sequence + i\n    end\n    \n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of numbers and returns a vector of the same length\
    \ with each element being the square of the corresponding element in the input\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfqc5p4n0.jl:17\nin expression starting at\
    \ /tmp/tmpfqc5p4n0.jl:17\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise: Write a function that takes a number n and returns\
    \ the string \"n\"\n    e.g. string_sequence(5) returns \"5\"\n    e.g. string_sequence(0)\
    \ returns \"0\"\n    e.g. string_sequence(1) returns \"1\"\n    e.g. string_sequence(2)\
    \ returns \"1 2\"\n    e.g. string_sequence(3) returns \"1 2 3\"\n    e.g. string_sequence(4)\
    \ returns \"1 2 3 4\"\n    e.g. string_sequence(5) returns \"1 2 3 4 5\"\n   \
    \ e.g. string_sequence(6) returns \"1 2 3 4 5 6\"\n    e.g. string_sequence(7)\
    \ returns \"1 2 3 4 5 6 7\"\n    e.g. string_sequence(8) returns \"1 2 3 4 5 6\
    \ 7 8\"\n    e.g. string_sequence(9) returns \"1 2 3 4 5 6 7 8 9\"\n    e.g. string_sequence(10)\
    \ returns \"1 2 3 4 5 6 7 8 9 10\"\n    e.g. string_sequence(11) returns \"1 2\
    \ 3 4 5 6 7 8 9 10 11\"\n    e.g. string_sequence(12) returns \"1 2 3 4 5 6 7\
    \ 8 9 10 11 12\"\n    e.g. string_sequence(13) returns \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13\"\n    e.g. string_sequence(14) returns \"1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14\"\n    e.g. string_sequence(15) returns \"1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15\"\n    e.g. string_sequence(16) returns \"1 2 3 4 5 6 7 8 9 10 11 12 13\
    \ 14 15 16\"\n    e.g. string_sequence(17) returns \"1 2 3 4 5 6 7 8 9 10 11 12\
    \ 13 14 15 16 17\"\n    e.g. string_sequence(18) returns \"1 2 3 4 5 6 7 8 9 10\
    \ 11 12 13 14 15 16 17 18\"\n    e.g. string_sequence(19) returns \"1 2 3 4 5\
    \ 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n    e.g. string_sequence(20) returns\
    \ \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n    e.g. string_sequence(21)\
    \ returns \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n    e.g.\
    \ string_sequence(22) returns \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvkm23ul.jl:14\nin expression starting at\
    \ /tmp/tmplvkm23ul.jl:14\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a string\
    \ containing space-delimited numbers starting from 0 upto n inclusive.\nWrite\
    \ a function that returns a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nWrite a function\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nWrite a function that returns a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\nWrite a function that returns a \n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp289wzwbv.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp289wzwbv.jl:9\n\
    in expression starting at /tmp/tmp289wzwbv.jl:9\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]\n    for i in 0:n\n        string_sequence +=\
    \ i\n    return string_sequence\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptey3gi22.jl:12\nin expression starting at\
    \ /tmp/tmptey3gi22.jl:12\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = String[]()\n    for i = 1:n\n        string_sequence +=\
    \ String(i)\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nFor example, string_length(\"\
    Hello World\") should return 11.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe2tbmfvz.jl:14\nin expression starting at\
    \ /tmp/tmpe2tbmfvz.jl:14\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for x in 0:n\n        string_seq <- string_seq\
    \ + String(x)\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number from base 10 to base 16. \nThe function should take two arguments:\
    \ the first is the number to be converted, and the second is the base of the number\
    \ to be converted.\nThe function should return a string containing the number\
    \ in base 16 represented as a string.\nThe function should return an error if\
    \ the base is not 10 or 16.\nThe function should return an error if the number\
    \ is negative.\nThe function should return an error if the number is too large.\n\
    The function should return an error if the number is too small.\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rupj_v8.jl:13\nin expression starting at\
    \ /tmp/tmp1rupj_v8.jl:13\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for k in 0..n-1\n        string_seq[k] = \"$(k+1)\"\
    \n    end\n    string_seq[n] = \"$(k+1)\"\n    return join(string_seq,\" \")\n\
    end\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the string with all\
    \ the letters capitalized.\nFor example, string_upper(\"hello\") should return\
    \ \"HELLO\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnvmmgv98.jl:15\nin expression starting at\
    \ /tmp/tmpnvmmgv98.jl:15\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length() function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxno0oymh.jl:14\nin expression starting at\
    \ /tmp/tmpxno0oymh.jl:14\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i::Int64 in 0 .. n\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadgomaft.jl:13\nin expression starting at\
    \ /tmp/tmpadgomaft.jl:13\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    str = \" \"\n    for i = 1 to n do\n        str = str + i\n    end\n    return\
    \ str\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"n\"\nWrite a function that takes a number n and returns the string \"n\"\n\
    Write a function that takes a number n and returns the string \"n\"\nWrite a function\
    \ that takes a number n and returns the string \"n\"\nWrite a function that takes\
    \ a number n and returns the string \"n\"\nWrite a function that takes a number\
    \ n and returns the string \"n\"\nWrite a function that takes a number n and returns\
    \ the string \"n\"\nWrite a function that takes a number n and returns the string\
    \ \"\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpk8fkqrh0.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk8fkqrh0.jl:9\n\
    in expression starting at /tmp/tmpk8fkqrh0.jl:9\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = n-1, 0, -1 do\n        string_seq.append(i%10)\n\
    \        i/=10\n    end\n    return string_seq.join(\" \")\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the string with all\
    \ the characters in reverse order.\nHint: Use reverse() function\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmya7z5yr.jl:9\nin expression starting at /tmp/tmpmya7z5yr.jl:9\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nHint: Use a for loop to iterate over all numbers\
    \ from 2 to n and check whether they are prime or not.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaii9pn9x.jl:13\nin expression starting at\
    \ /tmp/tmpaii9pn9x.jl:13\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length() function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx6hhald4.jl:9\nin expression starting at /tmp/tmpx6hhald4.jl:9\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpje51_ijf.jl:14\nin expression starting at\
    \ /tmp/tmpje51_ijf.jl:14\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for k in 0..n\n        string_seq[k] = str(k)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that converts a string to a vector of integers. Each element of the\
    \ vector should be the integer represented by the corresponding character in the\
    \ string. For example, if the string \"123\" were to be converted, the vector\
    \ [1,2,3] would be returned.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe6pl7dbs.jl:13\nin expression starting at\
    \ /tmp/tmpe6pl7dbs.jl:13\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n prime numbers. \nThe function should take one argument, n::Int64.\
    \ \nThe function should return one number, the first n prime numbers. \nThe function\
    \ should return nothing if n is less than or equal to 0. \nThe function should\
    \ return nothing if n is less than or equal to 1. \nThe function should return\
    \ nothing if n is less than or equal to 2. \nThe function should return nothing\
    \ if n is less than or equal to 3. \nThe function should return nothing if n is\
    \ less than or equal to 4. \nThe function should return nothing if n is less than\
    \ or equal to 5. \nThe function should return nothing if n is less than or equal\
    \ to 6. \nThe function should return nothing if n is less than or equal to 7.\
    \ \nThe function should return nothing if n is less than or equal to 8. \nThe\
    \ function should return nothing if n is less than or equal to 9. \nThe function\
    \ should return nothing if n is less than or equal to 10. \nThe function should\
    \ return nothing if n is less than or equal to 11. \nThe function should return\
    \ nothing if n is less than or equal to 12. \nThe function should return nothing\
    \ if n is less than or equal to 13. \nThe function should return nothing if n\
    \ is less than or equal to 14. \nThe function should return nothing if n is less\
    \ than or equal to 15. \nThe function should return nothing if n is less than\
    \ or equal to 16. \nThe function should return nothing if n is less than or equal\
    \ to 17. \nThe function should return nothing if n is less than or equal to 18.\
    \ \nThe function should return nothing if n is less than or equal to 19. \nThe\
    \ function should return nothing if n is less than or equal to 20. \nThe function\
    \ should return nothing if n is less than or equal to 21. \nThe function should\
    \ return nothing if n is less than or equal to 22. \nThe function should return\
    \ nothing if n is less than or equal to 23. \nThe function should return nothing\
    \ if n is less than or equal to 24. \nThe function should return nothing if n\
    \ is less than or equal to 25. \nThe function should return nothing if n is less\
    \ than or equal to 26. \nThe function should return nothing if n is less than\
    \ or equal to 27. \nThe function should return nothing if n is less than or equal\
    \ to 28. \nThe function should return nothing if n is less than or equal to 29.\
    \ \nThe function should return nothing if n is less than or equal to 30. \nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmprmgdlmbr.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprmgdlmbr.jl:9\n\
    in expression starting at /tmp/tmprmgdlmbr.jl:9\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(10000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(100000000)\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(1000000000)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10000000000)\n</cell>\n<code language=julia-1.5>\nstring_sequence(100000000000)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000000)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000002)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000003)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000004)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000005)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000006)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000007)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000008)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000009)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000010)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000011)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000012)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000013)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(1000000000014)\n</cell>\n<code language=julia-1.5>\nstring_sequence(1000000000015)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(1000000000016)\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(1000000000017)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1zezk5tx.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1zezk5tx.jl:10\n\
    in expression starting at /tmp/tmp1zezk5tx.jl:10\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = n\n    do\n        string += i\n    done\n\
    \    \n    return string\n</code>\n<|/ a tags=julia,for-loop |>\n<| a dscore=1\
    \ |>\nFor a more general solution, one can use mapslices:\n<code>\njulia> mapslices(x\
    \ -> string(x), 0:5, dims=2)\n5-element Array{String,1}:\n \"0\"\n \"1\"\n \"\
    2\"\n \"3\"\n \"4\"\n</code>\n<|/ a tags=julia,for-loop |>\n<| a tags=julia,for-loop\
    \ |>\nAnother solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0ymt6zr0.jl:11\nin expression starting at /tmp/tmp0ymt6zr0.jl:11\n"
  stdout: ''
  timestamp: 1659822519
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers in the vector.\nThe function should take an argument\
    \ of the type Vector{Int64}.\nThe function should return the sum of the numbers\
    \ in the vector.\nThe function should return a value of type Int64.\nThe function\
    \ should use an accumulator of type Int64.\nThe function should use an accumulator\
    \ of type Int64 to store the sum of the numbers in the vector.\nThe function should\
    \ return the accumulator at the end of the function.\nThe function should use\
    \ an accumulator of type Int64 to store the sum of the numbers in the vector.\n\
    The function should return the accumulator at the end of the function.\nThe function\
    \ should use an accumulator of type Int64 to store the sum of the numbers in the\
    \ vector.\nThe function should return the accumulator at the end of the function.\n\
    The function should use an accumulator of type Int64 to store the sum of the numbers\
    \ in the vector.\nThe function should return the accumulator at the end of the\
    \ function.\nThe function should use an accumulator of type Int64 to store the\
    \ sum of the numbers in the vector.\nThe function should return the accumulator\
    \ at the end of the function.\nThe function should use an accumulator of type\
    \ Int64 to store the sum of the numbers in the vector.\nThe function should return\
    \ the accumulator at the end of the function.\nThe function should use an accumulator\
    \ of type Int64 to store the sum of the numbers in the vector.\nThe function should\
    \ return the accumulator at the end of the function.\nThe function should use\
    \ an accumulator of type Int64 to store the sum of the numbers in the vector.\n\
    The function should return the accumulator at the end of the function.\nThe function\
    \ should use an accumulator of type Int64 to store the sum of the numbers in the\
    \ vector.\nThe function should return the accumulator at the end of the function.\n\
    The function should use an accumulator of type Int64 to store the sum of the numbers\
    \ in the vector.\nThe function should return the accumulator at the end of the\
    \ function.\nThe function should use an accumulator of type Int64 to store the\
    \ sum of the numbers in the vector.\nThe function should return the accumulator\
    \ at the end of the function.\nThe function should use an accumulator of type\
    \ Int64 to store the sum of the numbers in the vector.\nThe function should return\
    \ the accumulator at the end of the function.\nThe function should use an accumulator\
    \ of type Int64 to store the sum of the numbers in the vector.\nThe function should\
    \ return the accumulator at the end of the function.\nThe function should use\
    \ an accumulator of type Int64 to store the sum of the numbers in the vector.\n\
    The function should return the accumulator at the end of the function.\nThe function\
    \ should use an accumulator of type Int64 to store the sum of the numbers in the\
    \ vector.\nThe function should return the accumulator at the end of the function.\n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1sievirl.jl:15\nin expression starting at\
    \ /tmp/tmp1sievirl.jl:15\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should also work for vectors\
    \ of different lengths.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz9f8lzd.jl:15\nin expression starting at\
    \ /tmp/tmpnz9f8lzd.jl:15\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for x in 0:n\n        string_seq <- append(string_seq,x)\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length() function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp561dioau.jl:13\nin expression starting at\
    \ /tmp/tmp561dioau.jl:13\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0:n-1\n        string_seq[i] = i\n  \
    \  return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.1>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ returns a vector of integers containing the number of occurrences of each string.\n\
    For example, if the input vector is [\"a\", \"b\", \"c\", \"a\", \"a\", \"b\"\
    ] then the output vector should be [2, 2, 1, 1, 2, 1].\nHint: Use a dictionary\
    \ to store the counts and then iterate over the input vector and increment the\
    \ count for each element.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsqdl2_mk.jl:13\nin expression starting at\
    \ /tmp/tmpsqdl2_mk.jl:13\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that converts a string to a vector\
    \ of integers. For example,\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpk8g37ykx.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk8g37ykx.jl:9\n\
    in expression starting at /tmp/tmpk8g37ykx.jl:9\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a while loop and a prime number test.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2cncapt.jl:13\nin expression starting at\
    \ /tmp/tmpj2cncapt.jl:13\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers in the vector.\nFor example, if the vector is\
    \ [1,2,3,4,5], the function should return 15.\nHint: use the sum function.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp171ovo1.jl:15\nin expression starting at\
    \ /tmp/tmpp171ovo1.jl:15\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ni4iqs9.jl:14\nin expression starting at\
    \ /tmp/tmp2ni4iqs9.jl:14\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the string with all the characters in lower case and spaces removed.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4jqtxyfv.jl:15\nin expression starting at\
    \ /tmp/tmp4jqtxyfv.jl:15\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n-1)\n\
    \        + \" \" + to_string(n) \n    end\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=2 |>\nIn Julia 1.5 you can use the function repeat:\n<code>\njulia>\
    \ repeat(1:5, 3)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=2 |>\nIn Julia 1.5 you can use the function repeat:\n\
    <code>\njulia> repeat(1:5, 3)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\
    </code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.5 you can use the\
    \ function repeat:\n<code>\njulia> repeat(1:5, 3)\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nIn Julia\
    \ 1.5 you can use the function repeat:\n<code>\njulia> repeat(1:5, 3)\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a |>\nIn\
    \ Julia 1.5 you can use the function repeat:\n<code>\njulia> repeat(1:5, 3)\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 tags=julia\
    \ |>\n<| a tags=julia |>\nIn Julia 1.5 you can use the function repeat:\n<code>\n\
    julia> repeat(1:5, 3)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nIn Julia 1.5 you can use the function repeat:\n\
    <code>\njulia> repeat(1:5, 3)\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn Julia 1.5 you can use the function\
    \ repeat:\n<code>\njulia> repeat(1:5, 3)\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk0qvd4el.jl:9\nin expression starting at /tmp/tmpk0qvd4el.jl:9\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n  \
    \      return \"0\"\n    else\n        string_sequence(n - 1) + \" \" + to_string(n)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of words\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65mfvojj.jl:10\nin expression starting at\
    \ /tmp/tmp65mfvojj.jl:10\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = 1 to n do\n        string = string\
    \ + \" \" + i\n    \n    return string\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp08pe7u6s.jl:11 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp08pe7u6s.jl:11\n\
    in expression starting at /tmp/tmp08pe7u6s.jl:11\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = String[]\n    \n    for i in 0 .. n\n        string_seq.append(i.toString())\n\
    \    \n    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of strings and returns a vector of integers containing the number of\
    \ times each string appears in the vector.\nFor example, if the vector is [\"\
    a\", \"a\", \"b\", \"c\", \"c\", \"c\"] then the function should return [1, 1,\
    \ 2, 1, 1, 1].\nHint: Use a for loop to iterate over the strings in the vector\
    \ and increment a counter variable for each time the string appears in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpowp6uk8f.jl:16\nin expression starting at\
    \ /tmp/tmpowp6uk8f.jl:16\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n) \nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkhvut5ca.jl:13\nin expression starting at\
    \ /tmp/tmpkhvut5ca.jl:13\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nFor example,\
    \ given [1,2,3,4,5], the function should return 25.\nHint: use the reduce function.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb31ic16v.jl:9\nin expression starting at /tmp/tmpb31ic16v.jl:9\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n\
    \ - 1)\n        +\" \"\n        +string_sequence(n - 1)\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| a tags=julia,recursion |>\nHere's a recursive solution that uses no loops:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg1gkw36d.jl:9\nin expression starting at /tmp/tmpg1gkw36d.jl:9\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n\
    </cell>\n<text>\nExercise: Write a function that takes a number n and returns\
    \ the string \"n!\".\nHint: Use recursion.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5xx1cwgq.jl:13\nin expression starting at\
    \ /tmp/tmp5xx1cwgq.jl:13\n"
  stdout: ''
  timestamp: 1659822520
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a for loop and a prime number test.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmplp3e33uj.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplp3e33uj.jl:9\n\
    in expression starting at /tmp/tmplp3e33uj.jl:9\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n\
    \ - 1) + \" \" ++ string_sequence(n)\nend\n</cell>\n<code language=julia-1.1>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in that string.\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpat0r5rje.jl:9\nin expression starting at /tmp/tmpat0r5rje.jl:9\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n-1 do\n        string_seq[i] =\
    \ i\n    end\n    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprkimwcnz.jl:9\nin expression starting at /tmp/tmprkimwcnz.jl:9\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + i\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9ocrhny.jl:14\nin expression starting at\
    \ /tmp/tmpc9ocrhny.jl:14\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n\
    \ - 1) ++ \" \" ++ string_sequence(n)\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of words in the string.\nThe input string\
    \ can contain spaces.\nThe function should ignore leading and trailing spaces.\n\
    The function should ignore punctuation.\nThe function should ignore numbers.\n\
    The function should ignore uppercase and lowercase letters.\nThe function should\
    \ ignore special characters.\nThe function should ignore empty strings.\nThe function\
    \ should ignore strings with only spaces.\nThe function should ignore strings\
    \ with only punctuation.\nThe function should ignore strings with only numbers.\n\
    The function should ignore strings with only uppercase and lowercase letters.\n\
    The function should ignore strings with only special characters.\nThe function\
    \ should ignore strings with only empty strings.\nThe function should ignore strings\
    \ with only spaces.\nThe function should ignore strings with only punctuation.\n\
    The function should ignore strings with only numbers.\nThe function should ignore\
    \ strings with only uppercase and lowercase letters.\nThe function should ignore\
    \ strings with only special characters.\nThe function should ignore strings with\
    \ only empty strings.\nThe function should ignore strings with only spaces.\n\
    The function should ignore strings with only punctuation.\nThe function should\
    \ ignore strings with only numbers.\nThe function should ignore strings with only\
    \ uppercase and lowercase letters.\nThe function should ignore strings with only\
    \ special characters.\nThe function should ignore strings with only empty strings.\n\
    The function should ignore strings with only spaces.\nThe function should ignore\
    \ strings with only punctuation.\nThe function should ignore strings with only\
    \ numbers.\nThe function should ignore strings with only uppercase and lowercase\
    \ letters.\nThe function should ignore strings with only special characters.\n\
    The function should ignore strings with only empty strings.\nThe function should\
    \ ignore strings with only spaces.\nThe function should ignore strings with only\
    \ punctuation.\nThe function should ignore strings with only numbers.\nThe function\
    \ should ignore strings with only uppercase and lowercase letters.\nThe function\
    \ should ignore strings with only special characters.\nThe function should ignore\
    \ strings with only empty strings.\nThe function should ignore strings with only\
    \ spaces.\nThe function should ignore strings with only punctuation.\nThe function\
    \ should ignore strings with only numbers.\nThe function should ignore strings\
    \ with only uppercase and lowercase letters.\nThe function should ignore strings\
    \ with only special characters.\nThe function should ignore strings with only\
    \ empty strings.\nThe function should ignore strings with \nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyo14udd1.jl:9\nin expression starting at /tmp/tmpyo14udd1.jl:9\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0..n-1\n        string_seq[i] = i\n \
    \   return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a string and returns the\
    \ number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlfcop3u.jl:13\nin expression starting at\
    \ /tmp/tmptlfcop3u.jl:13\n"
  stdout: ''
  timestamp: 1659822521
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for x in 0..n\n        string_seq <- string_seq\
    \ + String(x)\n    return string_seq\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0riynn1h.jl:12\nin expression starting at\
    \ /tmp/tmp0riynn1h.jl:12\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 5\nWrite a function that takes a\
    \ string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpend_hhqb.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpend_hhqb.jl:10\n\
    in expression starting at /tmp/tmpend_hhqb.jl:10\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nWrite a function that takes a string and returns the number of\
    \ words in the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp36b_mvvw.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp36b_mvvw.jl:9\n\
    in expression starting at /tmp/tmp36b_mvvw.jl:9\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt43yreni.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt43yreni.jl:1\n\
    in expression starting at /tmp/tmpt43yreni.jl:1\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt43yreni.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt43yreni.jl:1\n\
    in expression starting at /tmp/tmpt43yreni.jl:1\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0 then return \"0\"\n    else return string_sequence(n-1) + \", \"\
    \ + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nFor example, string_sequence(\"The quick\
    \ brown fox jumps over the lazy dog\") should return 5.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkzgt56ep.jl:8\nin expression starting at /tmp/tmpkzgt56ep.jl:8\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for n in 0 .. n\n        string_seq += string(n)\n\
    \    return string_seq\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hjfykay.jl:12\nin expression starting at\
    \ /tmp/tmp5hjfykay.jl:12\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    \n    for i = n\n    do\n        string_seq\
    \ = string_seq + i\n    done\n    \n    return string_seq\nend\n</cell>\n<text>\n\
    The function string_sequence is now defined. Let's test it.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuxy1ig9r.jl:12\nin expression starting at /tmp/tmpuxy1ig9r.jl:12\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp9h4hip3s.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9h4hip3s.jl:9\n\
    in expression starting at /tmp/tmp9h4hip3s.jl:9\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n  \
    \      return \"0\"\n    else\n        str = string_sequence(n-1)\n        str\
    \ = str + \" \"\n        str = str + string_sequence(n-1)\n        return str\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpone69tzi.jl:10\nin expression starting at\
    \ /tmp/tmpone69tzi.jl:10\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a number n and returns the string \"n!\".\nHint: Use a\
    \ for loop.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3aj4u7xx.jl:14\nin expression starting at\
    \ /tmp/tmp3aj4u7xx.jl:14\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n  \
    \      return \"0\"\n    else\n        str = string_sequence(n-1)\n        str\
    \ = str + \" \"\n        str = str + string_sequence(n)\n        return str\n\
    end\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of digits in an integer.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicpeju8s.jl:10\nin expression starting at\
    \ /tmp/tmpicpeju8s.jl:10\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + i\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and returns a vector of integers containing\
    \ the number of times each string appears in the vector.\nFor example, if the\
    \ input vector is [\"a\", \"b\", \"c\", \"a\"], the output vector should be [1,\
    \ 1, 2, 1].\nHint: Use a for loop to iterate through the input vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp2_a7edsf.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2_a7edsf.jl:9\n\
    in expression starting at /tmp/tmp2_a7edsf.jl:9\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.\nWrite a function that takes a vector of integers and returns\
    \ the product of the integers in the vector.\nWrite a function that takes a vector\
    \ of integers and returns the maximum of the integers in the vector.\nWrite a\
    \ function that takes a vector of integers and returns the minimum of the integers\
    \ in the vector.\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.\nWrite a function that\
    \ takes a vector of integers and returns the product of the squares of the integers\
    \ in the vector.\nWrite a function that takes a vector of integers and returns\
    \ the maximum of the squares of the integers in the vector.\nWrite a function\
    \ that takes a vector of integers and returns the minimum of the squares of the\
    \ integers in the vector.\nWrite a function that takes a vector of integers and\
    \ returns the sum of the cubes of the integers in the vector.\nWrite a function\
    \ that takes a vector of integers and returns the product of the cubes of the\
    \ integers in the vector.\nWrite a function that takes a vector of integers and\
    \ returns the maximum of the cubes of the integers in the vector.\nWrite a function\
    \ that takes a vector of integers and returns the minimum of the cubes of the\
    \ integers in the vector.\nWrite a function that takes a vector of integers and\
    \ returns the sum of the squares of the cubes of the integers in the vector.\n\
    Write a function that takes a vector of integers and returns the product of the\
    \ squares of the cubes of the integers in the vector.\nWrite a function that takes\
    \ a vector of integers and returns the maximum of the squares of the cubes of\
    \ the integers in the vector.\nWrite a function that takes a vector of integers\
    \ and returns the minimum of the squares of the cubes of the integers in the vector.\n\
    Write a function that takes a vector of integers and returns the sum of the cubes\
    \ of the squares of the integers in the vector.\nWrite a function that takes a\
    \ vector of integers and returns the product of the cubes of the squares of the\
    \ integers in the vector.\nWrite a function that takes a vector of integers and\
    \ returns the maximum of the cubes of the squares of the integers in the vector.\n\
    Write a function that takes a vector of integers and returns the minimum of the\
    \ cubes of the squares of the integers in the vector.\nWrite a function that takes\
    \ a vector of integers and returns the sum of the cubes of the cubes of the integers\
    \ in the vector.\nWrite a function that takes a vector of integers and returns\
    \ the product of the cubes of the cubes of the integers in the vector.\nWrite\
    \ a function that takes a vector of integers and returns the maximum of the cubes\
    \ of the cubes of the integers in the vector.\nWrite a function that takes a vector\
    \ of integers and returns the minimum of the cubes of the cubes of the integers\
    \ in the vector.\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the cubes of the squares of the integers in the vector.\n\
    Write a function that takes a vector of integers and returns the product of the\
    \ squares of the cubes of the squares of the integers in the vector.\nWrite a\
    \ function that takes a vector of integers and returns the maximum of the squares\
    \ of the cubes of the squares of the integers in the vector.\n\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytnxucms.jl:14\nin expression starting at\
    \ /tmp/tmpytnxucms.jl:14\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer $n$ and returns\
    \ the string \"The first $n numbers in the Fibonacci sequence are \"\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4dp_spq9.jl:13\nin expression starting at\
    \ /tmp/tmp4dp_spq9.jl:13\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    \n    for i = 1:n\n        string = string + i\n\
    \    end\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should only take one argument.\
    \ \nThe function should return a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9j9fxn_.jl:17\nin expression starting at\
    \ /tmp/tmpo9j9fxn_.jl:17\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in that string in reverse order.\n\
    For example, string_sequence(\"hello\") should return \"olleh\"\nHint: Use reverse()\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsl0sgml9.jl:14\nin expression starting at\
    \ /tmp/tmpsl0sgml9.jl:14\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n-1 do\n        string_seq[i] =\
    \ i\n    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nHint: Use length()\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjqjqc4nm.jl:9\nin expression starting at /tmp/tmpjqjqc4nm.jl:9\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n  \
    \  return string\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns a string where each character is repeated n times. For example, if the\
    \ input string is \"hello\", the output string should be \"hehehehehehehe\".\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5gstea3q.jl:14\nin expression starting at\
    \ /tmp/tmp5gstea3q.jl:14\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq += String(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nHint: Use length() function\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbpilnlj4.jl:14\nin expression starting at\
    \ /tmp/tmpbpilnlj4.jl:14\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        push!(string_seq,string(i))\n\
    \    end\n    return join(\" \",string_seq)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an integer $n$ and returns the string \"0 1 2 3 4\
    \ 5\" up to $n$.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwrl7oq8.jl:14\nin expression starting at\
    \ /tmp/tmpfwrl7oq8.jl:14\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + string(i)\n    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp3mmsu9cg.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3mmsu9cg.jl:10\n\
    in expression starting at /tmp/tmp3mmsu9cg.jl:10\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \" Return a\
    \ string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \" Return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\"\n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \" Return a string containing\
    \ space-delimited \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp9covh85e.jl:7 expected\
    \ \"end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9covh85e.jl:42\n\
    in expression starting at /tmp/tmp9covh85e.jl:42\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = n\n    do\n        string_seq = string_seq\
    \ + string(i)\n    done\n    return string_seq\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp139xogdo.jl:10\nin expression starting at /tmp/tmp139xogdo.jl:10\n"
  stdout: ''
  timestamp: 1659822522
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i in 0 .. n\n        string_seq = string_seq +\
    \ string(i)\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a number to a string with leading zeros up to a specified length. For example,\
    \ converting the number 12 to \"0012\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp93iavsg8.jl:14\nin expression starting at\
    \ /tmp/tmp93iavsg8.jl:14\n"
  stdout: ''
  timestamp: 1659822523
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n<0\n        error(\"n must be positive\")\n    elseif n==0\n        return\
    \ \"0\"\n    else\n        string_sequence(n-1)+\", \"+string_sequence(n-1)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function called string_sequence\
    \ that returns a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\nThe function should raise an error if n is not positive.\nThe\
    \ function should raise an error if n is 0.\nThe function should raise an error\
    \ if n is greater than the length of the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnwio1ik.jl:16\nin expression starting at\
    \ /tmp/tmptnwio1ik.jl:16\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 1\nWrite a function that takes a number n and returns the string \"n\
    \ is a power of two\" if n is a power of two. Otherwise, return \"n is not a power\
    \ of two\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwoe2usk1.jl:10\nin expression starting at\
    \ /tmp/tmpwoe2usk1.jl:10\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0\n        return \"0\"\n    else if n==1\n        return \"1\"\n \
    \   else\n        return string_sequence(n-1) + \", \" + string_sequence(n-2)\
    \ + \", \" + string_sequence(n-3) + \", \" + string_sequence(n-4) + \", \" + string_sequence(n-5)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of integers containing the number of times each string appears in the vector.\n\
    For example, given [\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"], your function should\
    \ return [1, 1, 2, 1, 1, 1].\nHint: You can use the function count from StatsBase.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyc4f345n.jl:10\nin expression starting at\
    \ /tmp/tmpyc4f345n.jl:10\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_sequence = \" \"\n    for n in 1:n\n        string_sequence\
    \ = string_sequence + \" \" + string(n)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function which takes a number n and returns the string \"\
    n!\".\nHint: use the factorial function.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplidmssb8.jl:15\nin expression starting at\
    \ /tmp/tmplidmssb8.jl:15\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq[i] = \"0\"\n \
    \   end\n    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp_xyoczy.jl:14\nin expression starting at\
    \ /tmp/tmpp_xyoczy.jl:14\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a number n and returns\
    \ the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes\
    \ a number n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite\
    \ a function that takes a number n and returns the string \"0 1 2 3 4 5\" up to\
    \ and including n.\nWrite a function that takes a number n and returns the string\
    \ \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes a number\
    \ n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function\
    \ that takes a number n and returns the string \"0 1 2 3 4 5\" up to and including\
    \ n.\nWrite a function that takes a number n and returns the string \"0 1 2 3\
    \ 4 5\" up to and including n.\nWrite a function that takes a number n and returns\
    \ the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes\
    \ a number n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite\
    \ a function that takes a number n and returns the string \"0 1 2 3 4 5\" up to\
    \ and including n.\nWrite a function that takes a number n and returns the string\
    \ \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes a number\
    \ n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function\
    \ that takes a number n and returns the string \"0 1 2 3 4 5\" up to and including\
    \ n.\nWrite a function that takes a number n and returns the string \"0 1 2 3\
    \ 4 5\" up to and including n.\nWrite a function that takes a number n and returns\
    \ the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes\
    \ a number n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite\
    \ a function that takes a number n and returns the string \"0 1 2 3 4 5\" up to\
    \ and including n.\nWrite a function that takes a number n and returns the string\
    \ \"0 1 2 3 4 5\" up to and including n.\nWrite a function that takes a number\
    \ n and returns the string \"0 1 2 3 4 5\" up to and including n.\nWrite a function\
    \ that takes a number n and returns the string \"0 1 2 3 4 5\" up to and including\
    \ n.\nWrite a function that takes a number n and returns the string \"0 1 2 3\
    \ 4 5\" up to and including n.\nWrite \nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppaqca8fc.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppaqca8fc.jl:9\n\
    in expression starting at /tmp/tmppaqca8fc.jl:9\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb64k0b4l.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb64k0b4l.jl:1\n\
    in expression starting at /tmp/tmpb64k0b4l.jl:1\n"
  stdout: ''
  timestamp: 1659822515
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xjcqbly.jl:13\nin expression starting at\
    \ /tmp/tmp_xjcqbly.jl:13\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nHint: Use length() function\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2kxr93w0.jl:14\nin expression starting at\
    \ /tmp/tmp2kxr93w0.jl:14\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of characters in the string.\nHint: Use length()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx3kr71v1.jl:9\nin expression starting at /tmp/tmpx3kr71v1.jl:9\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \" \"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + i\n    end\n    return string_sequence\nend\n</cell>\n<code language=julia-1.3>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 1\nWrite a function that returns\
    \ the first n Fibonacci numbers. \nHint: Use a while loop and a recursive function.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxc_0ifvo.jl:14\nin expression starting at\
    \ /tmp/tmpxc_0ifvo.jl:14\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    end\n    return string_sequence\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings. Each string in the returned\
    \ vector is the string representation of each integer in the input vector. For\
    \ example, if the input vector is [1,2,3] the returned vector should be [\"1\"\
    ,\"2\",\"3\"].\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfxg0_h8.jl:14\nin expression starting at\
    \ /tmp/tmpsfxg0_h8.jl:14\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else\n        str = string_sequence(n-1)\n        str\
    \ = str + \" \"\n        str = str + str\n        return str\nend\n</cell>\n<code\
    \ language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of numbers and returns a vector of strings containing\
    \ the first n numbers in the vector in space-delimited form.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7o6pzpi0.jl:10\nin expression starting at\
    \ /tmp/tmp7o6pzpi0.jl:10\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n==0 then return \"0\"\n    else return string_sequence(n-1) + \", \"\
    \ + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns the string with all the letters in upper case. \nFor example if the\
    \ input is \"Hello World\" the output should be \"HELLO WORLD\".\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkpc1iqwp.jl:8\nin expression starting at /tmp/tmpkpc1iqwp.jl:8\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        then return \"0\"\n    else \n        string_sequence(n\
    \ - 1)\n        ++ \" \" ++ (string_sequence(n - 1))\nend\n</code>\n<|/ a tags=julia,recursion,string\
    \ |>\n<| c |>\nThis doesn't seem to work. `string_sequence(5)` returns `\"0 1\
    \ 2 3 4 5\"` instead of `\"0 1 2 3 4 5 0 1 2 3 4 5\"`.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug in the code. Thanks for pointing it out.\n<|/ c |>\n<| a tags=julia,recursion,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9imvpa3n.jl:9\nin expression starting at /tmp/tmp9imvpa3n.jl:9\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp9stj65ti.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9stj65ti.jl:9\n\
    in expression starting at /tmp/tmp9stj65ti.jl:9\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\
    \n    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-2)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a number n and returns the nth Fibonacci\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkrh_q6he.jl:10\nin expression starting at\
    \ /tmp/tmpkrh_q6he.jl:10\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for x in 0:n-1\n        string_seq.append(x)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<text>\nThe function string_sequence\
    \ is now defined. Let's try it out on a few examples:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiis40kq7.jl:13\nin expression starting at\
    \ /tmp/tmpiis40kq7.jl:13\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]()\n    for i = 1:n\n        string_seq.append(i::Int64)\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 4\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector. \nFor\
    \ example, if the vector is [1,2,3,4,5], the function should return 15.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9y6jquog.jl:13\nin expression starting at\
    \ /tmp/tmp9y6jquog.jl:13\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else\n        string_sequence(n - 1) + \" \" ++ string_sequence(n)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_41n53qr.jl:10\nin expression starting at\
    \ /tmp/tmp_41n53qr.jl:10\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    if n == 0 \n        \" Return an empty string.\"\n\
    \        return \"\"\n    \n    \" Initialize a variable called result to an empty\
    \ string.\"\n    result = \"\"\n    \n    \" Initialize a variable called i to\
    \ 1.\"\n    i = 1\n    \n    \" While i is less than or equal to n, append a space\
    \ to the result string and increment i.\"\n    while i <= n \n        result =\
    \ result + \" \" + i\n        i = i + 1\n    \n    \" Return the result string.\"\
    \n    return result\n</cell>\n<text>\nExercise 5\nWrite a function that takes\
    \ a number n and returns the string \"0 1 2 3 4 5\".\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4grnt69w.jl:27\nin expression starting at\
    \ /tmp/tmp4grnt69w.jl:27\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else if n == 1\n        return \"1\"\n    else\n     \
    \   return string_sequence(n - 1) + \" \" + string_sequence(n)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a number n and returns the string\
    \ \"n!\".\nThe function should raise an error if n is not positive.\nHint: Use\
    \ recursion.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t\
    @test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx1micwhr.jl:10\nin expression starting at\
    \ /tmp/tmpx1micwhr.jl:10\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1:n\n        string_sequence = string_sequence\
    \ + \" \" + string(i)\n    end\n    return string_sequence\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.\nHint: Use length() function.\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xlyj9e3.jl:14\nin expression starting at\
    \ /tmp/tmp6xlyj9e3.jl:14\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n<0\n        error(\"n must be positive\")\n    else if n==0\n       \
    \ return \"0\"\n    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a number n and returns the string \"n!\"\
    .\nFor example, string_sequence(5) returns \"5!\".\nHint: Use recursion.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkzm6nke.jl:10\nin expression starting at\
    \ /tmp/tmplkzm6nke.jl:10\n"
  stdout: ''
  timestamp: 1659822524
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that generates a string containing\
    \ all the numbers from 0 to n inclusive.\nHint: Use a for loop.\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmphrqpyry4.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphrqpyry4.jl:10\n\
    in expression starting at /tmp/tmphrqpyry4.jl:10\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 5\nWrite a function that takes a vector of numbers and\
    \ returns the sum of the numbers. \nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    The function should work for vectors of any element type.\nThe function should\
    \ work for vectors of any element type.\nThe function should work for vectors\
    \ of any element type.\nThe function should work for vectors of any element type.\n\
    \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8t_gl8n1.jl:14\nin expression starting at\
    \ /tmp/tmp8t_gl8n1.jl:14\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = n-1, 0, -1 do\n        string_seq[(i-1)%n]\
    \ = i\n    end\n    return join(string_seq,\" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    @time string_sequence(10)\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns the number of words in that string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9834bsx4.jl:9\nin expression starting at /tmp/tmp9834bsx4.jl:9\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt43yreni.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt43yreni.jl:1\n\
    in expression starting at /tmp/tmpt43yreni.jl:1\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq + string(i)\n\
    \    end\n    return string_seq\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 1 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmplf8ro85x.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmplf8ro85x.jl:19\n  Expression: candidate(0)\
    \ == \"0\"\n   Evaluated: \"\" == \"0\"\nStacktrace:\n [1] macro expansion\n \
    \  @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplf8ro85x.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplf8ro85x.jl:18\ntest set: Error During Test\
    \ at /tmp/tmplf8ro85x.jl:20\n  Test threw exception\n  Expression: candidate(3)\
    \ == \"0 1 2 3\"\n  MethodError: no method matching +(::String, ::String)\n  Closest\
    \ candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmplf8ro85x.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplf8ro85x.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplf8ro85x.jl:18\ntest set:\
    \ Error During Test at /tmp/tmplf8ro85x.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\"\n  MethodError: no method matching\
    \ +(::String, ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n   [1] string_sequence(n::Int64)\n     @ Main /tmp/tmplf8ro85x.jl:10\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplf8ro85x.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplf8ro85x.jl:18\nTest Summary:\
    \ | Fail  Error  Total\ntest set      |    1      2      3\n"
  timestamp: 1659822529
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else if n == 1\n        return \"1\"\
    \n    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of times the string \"hello\" appears in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49a33o2g.jl:10\nin expression starting at\
    \ /tmp/tmp49a33o2g.jl:10\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0:n\n        push!(string_seq,i)\n  \
    \  end\n    return join(\" \",string_seq)\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a number n and returns the string \"n!\".\nWrite a\
    \ function that takes a number n and returns the string \"n!!\".\nWrite a function\
    \ that takes a number n and returns the string \"n!!!!\".\nWrite a function that\
    \ takes a number n and returns the string \"n!!!!!\".\nWrite a function that takes\
    \ a number n and returns the string \"n!!!!!!\".\nWrite a function that takes\
    \ a number n and returns the string \"n!!!!!!!\".\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3656gufs.jl:14\nin expression starting at\
    \ /tmp/tmp3656gufs.jl:14\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = 1 to n do\n        string = string + \" \" + string(i)\n\
    \    return string\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpyedmctov.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyedmctov.jl:9\n\
    in expression starting at /tmp/tmpyedmctov.jl:9\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = n\n    do\n        string += i\n        string\
    \ += \" \"\n    done\n    return string\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia\
    \ |>\nI like using mapslices for these kinds of problems:\n<code>\nmapslices(x->string(x),\
    \ 0:5, dims=2)\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4sjx9mte.jl:10\nin expression starting at /tmp/tmp4sjx9mte.jl:10\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \" Return a string containing space-delimited numbers starting from 0 upto\
    \ n inclusive.\"\n    \n    \" Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 upto n inclusive.\"\n    \n    \" Return a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\"\n    \n    \" Return\
    \ a string containing space-delimited numbers starting from 0 upto n inclusive.\"\
    \n    \n    \" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\"\n    \n    \" Return a string containing space-delimited\
    \ numbers starting from 0 \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmphyqzqwem.jl:7 expected\
    \ \"end\", got \"0\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyqzqwem.jl:64\n\
    in expression starting at /tmp/tmphyqzqwem.jl:64\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1 to n do\n        string = string + \"\
    \ \" + i\n    end\n    return string\nend\n</cell>\n<code language=julia-1.4>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp1vjwrcow.jl:10 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1vjwrcow.jl:10\n\
    in expression starting at /tmp/tmp1vjwrcow.jl:10\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \" \"\n    for n in 0 .. n\n        string_sequence = string_sequence\
    \ + \" \" + string(n)\n    return string_sequence\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=julia,string |>\nIn Julia 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\
    \n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\
    \n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=1 |>\n<| a |>\nIn Julia 1.5 you can do:\n\
    <code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4\"\n</code>\n<|/ a tags=julia,string dscore=1\
    \ |>\n<| a dscore=0 |>\nIn Julia 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\n\"\
    0 1 2 3 4\"\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=0 |>\nIn Julia 1.5\
    \ you can do:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4\"\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\
    \n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\
    \n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string |>\nIn Julia\
    \ 1.5 you can do:\n<code>\njulia> \"$(0:5)\"\n\"0 1 2 3 4\"\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1ph7ug0.jl:12\nin expression starting at\
    \ /tmp/tmpv1ph7ug0.jl:12\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string as input and\
    \ returns a string with all the characters in lower case. \nFor example, string_lower(\"\
    Hello World\") should return \"hello world\".\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv3ah2sdv.jl:15\nin expression starting at\
    \ /tmp/tmpv3ah2sdv.jl:15\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nThe function string_sequence is now available\
    \ in the namespace JuliaStrings.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpftei1qeq.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpftei1qeq.jl:9\n\
    in expression starting at /tmp/tmpftei1qeq.jl:9\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        string_sequence(n -\
    \ 1) + \" \" + to_string(n)\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nThe function string_sequence is now available in the Julia REPL.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6l5_eajt.jl:13\nin expression starting at\
    \ /tmp/tmp6l5_eajt.jl:13\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else\n        return string_sequence(n-1) + \", \" + string_sequence(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n Fibonacci numbers. \nThe\
    \ Fibonacci numbers are defined as:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp861p67_4.jl:10\nin expression starting at\
    \ /tmp/tmp861p67_4.jl:10\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq += String(i)\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ string with all the characters in lower case. For example, \"Hello World\" becomes\
    \ \"hello world\".\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xldpwkg.jl:13\nin expression starting at\
    \ /tmp/tmp3xldpwkg.jl:13\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + i\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(0)\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ strings containing the integers separated by spaces.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppl88c86z.jl:15\nin expression starting at\
    \ /tmp/tmppl88c86z.jl:15\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ vector of strings and returns a vector of integers containing the number of\
    \ times each string appears in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpjft45c3q.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjft45c3q.jl:9\n\
    in expression starting at /tmp/tmpjft45c3q.jl:9\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        return \"0\"\n    else\n        string_sequence(n-1) +\
    \ \", \" + to_string(n-1)\nend\n</cell>\n<code language=julia-1.0>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in it.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4kzmf2x.jl:13\nin expression starting at\
    \ /tmp/tmpx4kzmf2x.jl:13\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string = \"\"\n    for i = n-1 downto 1 do\n        string = string + string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop and a prime number generator function.\nusing Test\n\n\
    @testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppmh6dt44.jl:9 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppmh6dt44.jl:9\n\
    in expression starting at /tmp/tmppmh6dt44.jl:9\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt43yreni.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt43yreni.jl:1\n\
    in expression starting at /tmp/tmpt43yreni.jl:1\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt43yreni.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt43yreni.jl:1\n\
    in expression starting at /tmp/tmpt43yreni.jl:1\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n   \
    \     return \"0\"\n    else if n == 1\n        return \"1\"\n    else\n     \
    \   return string_sequence(n - 1) + \" \" + (string_sequence(n - 1))\nend\n</cell>\n\
    <code language=julia-1.4>\nstring_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first n prime numbers. \nHint: Use a for loop to\
    \ iterate over all numbers from 2 to n and check whether they are prime or not.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to iterate over all numbers from 2 to n and check whether\
    \ they are prime or not. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: \nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpem0884b5.jl:10\nin expression starting at\
    \ /tmp/tmpem0884b5.jl:10\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1:n\n        string_seq[i] = i\n    end\n\
    \    return string_seq\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nFor example, string_length(\"Hello\
    \ World\") should return 11.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhe0ir_c.jl:14\nin expression starting at\
    \ /tmp/tmpfhe0ir_c.jl:14\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0\n        \"\"\n    else\n        string_sequence(n-1) + \", \"\
    \ + to_string(n)\n    end\nend\n</cell>\n<code language=julia-1.3>\nstring_sequence(5)\n\
    </cell>\n<text>\nThe function string_sequence is now available in the Julia REPL.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3l8qzh8.jl:14\nin expression starting at\
    \ /tmp/tmpf3l8qzh8.jl:14\n"
  stdout: ''
  timestamp: 1659822526
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = \"\"\n    for i = 1 to n do\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns a string with all the characters in lower case.\n\
    For example \"Hello World\" -> \"hello world\"\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmph9g2s1b_.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph9g2s1b_.jl:9\n\
    in expression starting at /tmp/tmph9g2s1b_.jl:9\n"
  stdout: ''
  timestamp: 1659822528
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n        string_sequence = string_sequence\
    \ + \" \" + to_string(i)\n    return string_sequence\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,string |>\nIn Julia 1.5.0 you can use the following code:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3a8mypfw.jl:12\nin expression starting at\
    \ /tmp/tmp3a8mypfw.jl:12\n"
  stdout: ''
  timestamp: 1659822528
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + i\n    end\n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of numbers and\
    \ returns the sum of the numbers in the array.\nHint: Use a for loop to iterate\
    \ through the array.\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaps_soqt.jl:15\nin expression starting at\
    \ /tmp/tmpaps_soqt.jl:15\n"
  stdout: ''
  timestamp: 1659822527
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + string(i)\n    end\n    return string_sequence\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp60tpv_o_.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp60tpv_o_.jl:9\n\
    in expression starting at /tmp/tmp60tpv_o_.jl:9\n"
  stdout: ''
  timestamp: 1659822527
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string = \"\"\n    for i = 1:n\n        string = string + \" \" + to_string(i)\n\
    \    end\n    return string\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns a string containing\
    \ space-delimited numbers starting from 0 upto n inclusive.\nThe function should\
    \ take two arguments: n and m. n and m should be integers greater than 0.\nThe\
    \ function should return a string containing space-delimited numbers starting\
    \ from 0 upto n inclusive.\nThe function should return an empty string if n is\
    \ less than or equal to 0.\nThe function should return an empty string if m is\
    \ less than or equal to 0.\nThe function should return an empty string if n and\
    \ m are both less than or equal to 0.\nThe function should return an empty string\
    \ if n and m are both greater than 0.\nThe function should return an empty string\
    \ if n and m are both equal to 0.\nThe function should return an empty string\
    \ if n is greater than 0 and m is greater than 0.\nThe function should return\
    \ an empty string if n is equal to 0 and m is equal to 0.\nThe function should\
    \ return an empty string if n is greater than 0 and m is equal to 0.\nThe function\
    \ should return an empty string if n is equal to 0 and m is greater than 0.\n\
    The function should return an empty string if n is greater than 0 and m is less\
    \ than 0.\nThe function should return an empty string if n is less than 0 and\
    \ m is greater than 0.\nThe function should return an empty string if n is less\
    \ than 0 and m is less than 0.\nThe function should return an empty string if\
    \ n is less than 0 and m is equal to 0.\nThe function should return an empty string\
    \ if n is less than 0 and m is less than 0.\nThe function should return an empty\
    \ string if n is equal to 0 and m is less than 0.\nThe function should return\
    \ an empty string if n is equal to 0 and m is equal to 0.\nThe function should\
    \ return an empty string if n is equal to 0 and m is less than 0.\nThe function\
    \ should return an empty string if n is equal to 0 and m is equal to 0.\nThe function\
    \ should return an empty string if n is greater than 0 and m is greater than 0.\n\
    The function should return an empty string if n is greater than 0 and m is less\
    \ than 0.\nThe function should return an empty string if n is greater than 0 and\
    \ m is equal to 0.\nThe function should return an empty string if n is greater\
    \ than 0 and m is less than 0.\nThe function should return an empty string if\
    \ n is less than 0 and m is greater than 0.\nThe function should return an empty\
    \ string if n is less than 0 and m is less than 0.\nThe function should return\
    \ an empty string if n is less than 0 and m is equal to 0.\nThe function should\
    \ return an empty string if n is \nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_8a486m.jl:15\nin expression starting at\
    \ /tmp/tmps_8a486m.jl:15\n"
  stdout: ''
  timestamp: 1659822528
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    if n == 0 \n        return \"0\" \n    else \n        return string_sequence(n-1)\
    \ + \", \" + string_sequence(n-1)\nend\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise: Write a function that takes a number n and returns\
    \ the string \"n!\".\nHint: You can use the factorial function from the math package.\n\
    using Test\n\n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0)\
    \ == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"\
    0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjurubxjh.jl:13\nin expression starting at\
    \ /tmp/tmpjurubxjh.jl:13\n"
  stdout: ''
  timestamp: 1659822528
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \"\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"\
    0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt43yreni.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt43yreni.jl:1\n\
    in expression starting at /tmp/tmpt43yreni.jl:1\n"
  stdout: ''
  timestamp: 1659822517
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = n\n    do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    done\n    return string_sequence\n\
    </code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwt8gzs31.jl:10\nin expression starting at /tmp/tmpwt8gzs31.jl:10\n"
  stdout: ''
  timestamp: 1659822528
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_sequence = \"\"\n    for i = 1 to n do\n        string_sequence =\
    \ string_sequence + \" \" + to_string(i)\n    end\n    return string_sequence\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n<text>\n\
    Write a function that takes a string and returns the number of characters in the\
    \ string.\nFor example, string_length(\"hello\") should return 5.\nusing Test\n\
    \n@testset begin\n\ncandidate = string_sequence;\n\t@test(candidate(0) == \"0\"\
    )\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4\
    \ 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpimwvt_y5.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpimwvt_y5.jl:9\n\
    in expression starting at /tmp/tmpimwvt_y5.jl:9\n"
  stdout: ''
  timestamp: 1659822528
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    \n    string_seq = \"\"\n    for i = 1:n\n        string_seq = string_seq\
    \ + i\n    end\n    return string_seq\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(5)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string as input and returns the number of characters in the string.\nHint: Use\
    \ length() function\nusing Test\n\n@testset begin\n\ncandidate = string_sequence;\n\
    \t@test(candidate(0) == \"0\")\n\t@test(candidate(3) == \"0 1 2 3\")\n\t@test(candidate(10)\
    \ == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpphcqx3rd.jl:15\nin expression starting at\
    \ /tmp/tmpphcqx3rd.jl:15\n"
  stdout: ''
  timestamp: 1659822528
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i in 0 .. n\n        string_seq[i] = i\n \
    \   return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.4>\nstring_sequence(5)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3) ==\
    \ \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1_ieih62.jl:13\nin expression starting at\
    \ /tmp/tmp1_ieih62.jl:13\n"
  stdout: ''
  timestamp: 1659822528
- exit_code: 1
  program: "\"\"\" Return a string containing space-delimited numbers starting from\
    \ 0 upto n inclusive.\n    >>> string_sequence(0)\n    \"0\"\n    >>> string_sequence(5)\n\
    \    \"0 1 2 3 4 5\"\n    \"\"\"\nfunction string_sequence(n::Int64)::String \n\
    \    string_seq = String[]\n    for i = 1 to n do\n        string_seq.append(i.toString())\n\
    \    return string_seq.join(\" \")\nend\n</cell>\n<code language=julia-1.5>\n\
    string_sequence(0)\n</cell>\n<code language=julia-1.5>\nstring_sequence(5)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the first n prime numbers. \n\
    Hint: Use a for loop and a prime number test.\nusing Test\n\n@testset begin\n\n\
    candidate = string_sequence;\n\t@test(candidate(0) == \"0\")\n\t@test(candidate(3)\
    \ == \"0 1 2 3\")\n\t@test(candidate(10) == \"0 1 2 3 4 5 6 7 8 9 10\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpbrr4sxtv.jl:9 expected \"\
    end\", got \"n\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbrr4sxtv.jl:9\n\
    in expression starting at /tmp/tmpbrr4sxtv.jl:9\n"
  stdout: ''
  timestamp: 1659822528
