name: HumanEval_65_circular_shift
language: jl
prompt: "\"\"\"Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n    and return the result as a string.\n    If shift > number of digits,\
  \ return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12,\
  \ 2)\n    \"12\"\n    \"\"\"\nfunction circular_shift(x::Int64, shift::Int64)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = circular_shift;\n\t@test(candidate(100,\
  \ 2) == \"001\")\n\t@test(candidate(12, 2) == \"12\")\n\t@test(candidate(97, 8)\
  \ == \"79\")\n\t@test(candidate(12, 1) == \"21\")\n\t@test(candidate(11, 101) ==\
  \ \"11\")\nend\n"
completions: ["    if shift > length(x)\n        digits = reverse(x)\n    else\n \
    \       digits = digits(x)\n    digits = digits[shift:end]\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    digits = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = reverse(x[shift:end])\n    return digits\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(12, 1)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 2)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.", "    if shift > length(x) || shift\
    \ < 0\n        error(\"shift must be in range 0 to length(x)\")\n    else\n  \
    \      digits = digits(x)\n        digits = digits[shift:end]\n        digits\
    \ = reverse(digits)\n        return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x) || shift < 0\n      \
    \  error(\"shift must be in range 0 to length(x)\")\n    else\n        digits\
    \ = digits(x)\n        digits[shift] = digits[shift] % 10\n        digits = reverse(digits)\n\
    \        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.4>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    end\n    return join(reverse(digits[shift:end]))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert circular_shift(12,\
    \ 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer. For example, length(123) should return 3.", "    if\
    \ shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift >\
    \ length(x)\n        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 2)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 3)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 4)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 7)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 8)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 9)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 10)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 11)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 14)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 15)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 16)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 17)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 18)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.4>\n@time\
    \ circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789,\
    \ 21)\n</cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 22)\n\
    </cell>\n<code language=julia-1.4>\n@time circular_shift(123456789, 23)\n</cell>\n\
    <code language=julia-1.4>\n@time circular_shift(123456789, 24)\n</cell>\n<code\
    \ language=julia-1.4>\n@time circular_shift(123456789, 25)\n</cell>\n<code language=julia-1.4>\n\
    @time circular_shift(123456789, ", "    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return circular_shift(x, -shift)\n    else\n \
    \       digits = digits(x)\n        digits = digits[shift:end]\n        return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    return join(digits, digits[shift+1:end])\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the number of digits in an integer. Test it\
    \ on $12$.", "    if shift > length(x)\n        digits = reverse(x)\n    else\n\
    \        digits = digits(x)\n    digits = digits[shift:end]\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be between 0\
    \ and $length(x)\")\n    else\n        digits = digits(x)\n        digits[shift]\
    \ = digits[shift] % 10\n        digits = reverse(digits)\n        return join(digits)\n\
    end\n</cell>\n<text>\nThe function digits() returns an array of digits of x, in\
    \ reverse order.", "    if shift > length(x)\n        digits = reverse(x)\n  \
    \  else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x) - 1 \n        then return reverse(x)\n    else \n        digits\
    \ = digits(x)\n        digits = digits[shift:end]\n        return reverse(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if shift > length(x)\
    \ || shift < 0\n        error(\"shift must be between 0 and $length(x)\")\n  \
    \  else\n        digits = digits(x)\n        digits = digits[shift:end]\n    \
    \    digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert circular_shift(12,\
    \ 2) == 12\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of digits in an integer. Test it on all of the\n    integers from 0 to 20.",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = x\n    digits = digits[shift:end]\n    return digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(digits(x))\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ circular_shift(12, 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of digits in an integer.",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<text>\nThe function reverse(x) returns\
    \ a string containing the characters in reverse order. For example, \n    reverse(\"\
    hello\") returns \"olleh\".", "    if shift > length(x) || shift < 0\n       \
    \ error(\"shift must be between 0 and length(x)\")\n    else\n        digits =\
    \ digits(x)\n        digits = digits[shift:end]\n        digits = reverse(digits)\n\
    \        return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert\
    \ circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise: Circular shift the digits\
    \ of the integer x, shift the digits right by shift\n    and return the result\
    \ as a string.\n    If shift > number of digits, return digits reversed.\n   \
    \ >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"\
    12\"\n    \"\"\"", "    if shift > length(x)\n        digits = reverse(x)\n  \
    \  else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer. For example, length(1234) = 4.", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(digits(x))\n    else\n     \
    \   digits = digits(x)\n    digits[shift] = digits[shift] % 10\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.\nWrite a function that returns the number of digits in\
    \ an integer, rounded up to the nearest integer.\nWrite a function that returns\
    \ the number of digits in an integer, rounded down to the nearest integer.\nWrite\
    \ a function that returns the number of digits in an integer, rounded up to the\
    \ nearest integer, ignoring trailing zeros.\nWrite a function that returns the\
    \ number of digits in an integer, rounded down to the nearest integer, ignoring\
    \ trailing zeros.\nWrite a function that returns the number of digits in an integer,\
    \ rounded up to the nearest integer, ignoring trailing zeros.\nWrite a function\
    \ that returns the number of digits in an integer, rounded down to the nearest\
    \ integer, ignoring trailing zeros.\nWrite a function that returns the number\
    \ of digits in an integer, rounded up to the nearest integer, ignoring trailing\
    \ zeros.\nWrite a function that returns the number of digits in an integer, rounded\
    \ down to the nearest integer, ignoring trailing zeros.\nWrite a function that\
    \ returns the number of digits in an integer, rounded up to the nearest integer,\
    \ ignoring trailing zeros.\nWrite a function that returns the number of digits\
    \ in an integer, rounded down to the nearest integer, ignoring trailing zeros.\n\
    Write a function that returns the number of digits in an integer, rounded up to\
    \ the nearest integer, ignoring trailing zeros.\nWrite a function that returns\
    \ the number of digits in an integer, rounded down to the nearest integer, ignoring\
    \ trailing zeros.\nWrite a function that returns the number of digits in an integer,\
    \ rounded up to the nearest integer, ignoring trailing zeros.\nWrite a function\
    \ that returns the number of digits in an integer, rounded down to the nearest\
    \ integer, ignoring trailing zeros.\nWrite a function that returns the number\
    \ of digits in an integer, rounded up to the nearest integer, ignoring trailing\
    \ zeros.\nWrite a function that returns the number of digits in an integer, rounded\
    \ down to the nearest integer, ignoring trailing zeros.\nWrite a function that\
    \ returns the number of digits in an integer, rounded up to the nearest integer,\
    \ ignoring trailing zeros.\nWrite a function that returns the number of digits\
    \ in an integer, rounded down to the nearest integer, ignoring trailing zeros.\n\
    Write a function that returns the number of digits in an integer, rounded up to\
    \ the nearest integer, ignoring trailing zeros.\nWrite a function that returns\
    \ the number of digits in an integer, rounded down to the nearest integer, ignoring\
    \ trailing zeros.\nWrite a function that returns the number of digits in an integer,\
    \ rounded up to the nearest integer, ignoring trailing zeros.\nWrite a function\
    \ that returns the number of digits in an integer, rounded down to the nearest\
    \ integer, ignoring trailing zeros.\nWrite a function that returns the number\
    \ of digits in an integer, rounded up to the nearest integer, ignoring trailing\
    \ zeros.\nWrite a function that returns the number of digits in an integer, rounded\
    \ down to the nearest integer, ignoring trailing zeros.", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\n\
    end\n</cell>\n<code language=julia-1.3>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    digits = reverse(digits)\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift >\
    \ length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else if shift < 0\n        return\
    \ reverse(circular_shift(reverse(x), -shift))\n    else\n        return reverse(circular_shift(reverse(x),\
    \ shift))\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\
    \ || shift < 0\n        error(\"shift must be in range 0 to length(x)\")\n   \
    \ else\n        digits = digits(x)\n        digits_reversed = reverse(digits)\n\
    \        digits_shifted = shift(digits_reversed, shift)\n        digits_shifted_reversed\
    \ = reverse(digits_shifted)\n        return digits_shifted_reversed\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be between 0\
    \ and length(x)\")\n    else\n        digits = digits(x)\n        digits = digits[-shift:]\
    \ + digits[: shift]\n        return join(digits, \"\")\nend\n</cell>\n<text>\n\
    The function digits() returns the digits of an integer as a string in reverse\
    \ order.", "    if shift > length(x)\n        return reverse(x)\n    else\n  \
    \      return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        return join(digits, \"\")\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits, \"\")\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n\
    @assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the number of digits in an integer. Test it on all integers from\
    \ 0 to 20.", "    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = digits(x)\n        digits_reversed\
    \ = reverse(digits)\n        digits_shifted = shift(digits_reversed, shift)\n\
    \        digits_shifted_reversed = reverse(digits_shifted)\n        return digits_shifted_reversed\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[shift:end]\n    digits = reverse(digits)\n    return digits\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x) || shift < 0\n        error(\"shift must be in range 0 to length(x)\"\
    )\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return x[shift:length(x)+shift]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(12, 1)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(12,\
    \ 2)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be in range 0 to length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  return join(digits)\nend\n</cell>\n<code language=julia-1.4>", "    if shift\
    \ > length(x) || shift < 0\n        error(\"shift must be in range 0 to length(x)\"\
    )\n    else\n        digits = split(x, digits)\n        digits = digits[shift:end]\n\
    \        digits = join(digits, digits)\n        return digits\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n    digits(x::Int64)::Array{Int64}\n\
    \    digits(x::Int64)::Array{", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[shift:end]\n    return digits\nend\n</cell>\n<code language=julia-1.1>",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be between 0\
    \ and length(x)\")\n    else\n        digits = digits(x)\n        digits[shift]\
    \ = digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n\
    \        digits = reverse(digits)\n        digits = join(digits, \"\")\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nHere's a solution that doesn't\
    \ use any packages:\n<code>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\
    \ || shift < 0\n        error(\"shift must be in range 0 to length(x)\")\n   \
    \ else\n        digits = digits(x)\n        digits = digits[shift:end]\n     \
    \   digits = reverse(digits)\n        digits = join(digits)\n        return digits\n\
    \    end\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns a string\
    \ containing the digits of x, as a string. For example,\n    digits(123) = \"\
    123\".\nThe function length(x::Int64) returns the number of digits in x. For example,\n\
    \    length(123) = 4.\nThe function reverse(x::String) returns a string containing\
    \ the digits of x, in reverse order. For example,\n    reverse(\"123\") = \"321\"\
    .\nThe function join(y::String) returns a string containing the characters of\
    \ y joined together. For example,\n    join([\"a\", \"b\", \"c\"]) = \"abc\".\n\
    The function reverse(y::String) returns a string containing the characters of\
    \ y joined together. For example,\n    reverse(\"abc\") = \"cba\".\nThe function\
    \ digits(x::Int64) returns a string containing the digits of x, as a string. For\
    \ example,\n    digits(123) = \"123\".\nThe function length(x::Int64) returns\
    \ the number of digits in x. For example,\n    length(123) = 4.\nThe function\
    \ reverse(x::String) returns a string containing the digits of x, in reverse order.\
    \ For example,\n    reverse(\"123\") = \"321\".\nThe function join(y::String)\
    \ returns a string containing the characters of y joined together. For example,\n\
    \    join([\"a\", \"b\", \"c\"]) = \"abc\".\nThe function reverse(y::String) returns\
    \ a string containing the characters of y joined together. For example,\n    reverse(\"\
    abc\") = \"cba\".\nThe function digits(x::Int64) returns a string containing the\
    \ digits of x, as a string. For example,\n    digits(123) = \"123\".\nThe function\
    \ length(x::Int64) returns the number of digits in x. For example,\n    length(123)\
    \ = 4.\nThe function reverse(x::String) returns a string containing the digits\
    \ of x, in reverse order. For example,\n    reverse(\"123\") = \"321\".\nThe function\
    \ join(y::String) returns a string containing the characters of y joined together.\
    \ For example,\n    join([\"a\", \"b\", \"c\"]) = \"abc\".\nThe function reverse(y::String)\
    \ returns a string containing the characters of y joined together. For example,\n\
    \    reverse(\"abc\") = \"cba\".\nThe function digits(x::Int64) returns a string ",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = reverse(x[shift:end])\n    return digits\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n   \
    \ digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n\
    \    digits(x::Int64)::Vector{Int64}\n    digits(x::Int64)::Vector{Int64}\n  \
    \  digits(x::Int64)::Vector{Int64}\n    digits(x::Int", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x)\n        digits = reverse(digits(x))\n    else\n        digits =\
    \ digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n\
    <code language=julia-1.4>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        return reverse(x)\n    else if shift < 0\n  \
    \      return reverse(reverse(x))\n    else\n        return reverse(reverse(reverse(x)))\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as input\
    \ and returns the string with all the letters in lower case.\nIf the string has\
    \ any spaces, they should be replaced with underscores.\nIf the string starts\
    \ or ends with an underscore, the underscore should be removed.\nIf the string\
    \ has any other characters, it should be left unchanged.\nFor example, if the\
    \ input is \"the quick brown fox\", the output should be \"the_quick_brown_fox\"\
    .\nWrite a function that takes a string as input and returns the string with all\
    \ the letters in upper case.\nIf the string has any spaces, they should be replaced\
    \ with underscores.\nIf the string starts or ends with an underscore, the underscore\
    \ should be removed.\nIf the string has any other characters, it should be left\
    \ unchanged.\nFor example, if the input is \"the quick brown fox\", the output\
    \ should be \"THE_QUICK_BROWN_FOX\".\nWrite a function that takes a string as\
    \ input and returns the string with all the letters in title case.\nIf the string\
    \ has any spaces, they should be replaced with underscores.\nIf the string starts\
    \ or ends with an underscore, the underscore should be removed.\nIf the string\
    \ has any other characters, it should be left unchanged.\nFor example, if the\
    \ input is \"the quick brown fox\", the output should be \"The Quick Brown Fox\"\
    .\nWrite a function that takes a string as input and returns the string with all\
    \ the letters in mixed case.\nIf the string has any spaces, they should be replaced\
    \ with underscores.\nIf the string starts or ends with an underscore, the underscore\
    \ should be removed.\nIf the string has any other characters, it should be left\
    \ unchanged.\nFor example, if the input is \"the quick brown fox\", the output\
    \ should be \"the quick brown fox\".\nWrite a function that takes a string as\
    \ input and returns the string with all the letters in mixed case and spaces removed.\n\
    If the string has any spaces, they should be replaced with underscores.\nIf the\
    \ string starts or ends with an underscore, the underscore should be removed.\n\
    If the string has any other characters, it should be left unchanged.\nFor example,\
    \ if the input is \"the quick brown fox\", the output should be \"thequickbrownfox\"\
    .\nWrite a function that takes a string as input and returns the string with all\
    \ the letters in upper case and spaces removed.\nIf the string has any spaces,\
    \ they should be replaced with underscores.\nIf the string starts or ends with\
    \ an underscore, the underscore should be removed.\nIf the string has any other\
    \ characters, it should be left unchanged.\nFor example, if the input is \"the\
    \ quick brown fox\", the output should be ", "    if shift > length(x)\n     \
    \   return reverse(x)\n    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x) || shift < 0\n        error(\"shift must be between 0 and\
    \ length(x)\")\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ digits\nend\n</cell>\n<text>\nThe function digits() is defined in the file digit.jl\
    \ and looks like this:", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    return join(digits, digits[shift:end])\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x) || shift < 0\n        error(\"shift must be in range 0 to\
    \ length(x)\")\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift >\
    \ length(x) || shift < 0\n        error(\"shift must be in range 0 to length(x)\"\
    )\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.4>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)::Array{Int64,1}\n\
    Return the digits of x in a numeric array.\n\"\"\"", "    if shift > length(x)\n\
    \        return reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x)\n        digits = reverse(digits(x))\n    else\n        digits =\
    \ digits(x)\n    digits = digits[shift:end]\n    return join(digits, \"\")\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert\
    \ circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer.", "    if shift > length(x)\n  \
    \      return reverse(x)\n    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x) || shift < 0\n        error(\"shift must be in range 0 to\
    \ length(x)\")\n    elseif shift == 0\n        return x\n    else\n        digits\
    \ = split(x, \"0123456789\")\n        digits_reversed = reverse(digits)\n    \
    \    digits_shifted = shift(digits_reversed, shift)\n        return join(digits_shifted,\
    \ \"0123456789\")\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[shift:end]\n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer, rounded down.\n\
    Write a function that returns the number of digits in an integer, rounded up.\n\
    Write a function that returns the number of digits in an integer, rounded towards\
    \ zero.\nWrite a function that returns the number of digits in an integer, rounded\
    \ away from zero.\nWrite a function that returns the number of digits in an integer,\
    \ rounded towards even.\nWrite a function that returns the number of digits in\
    \ an integer, rounded towards -infinity.\nWrite a function that returns the number\
    \ of digits in an integer, rounded towards infinity.\nWrite a function that returns\
    \ the number of digits in an integer, rounded away from -infinity.\nWrite a function\
    \ that returns the number of digits in an integer, rounded away from infinity.\n\
    Write a function that returns the number of digits in an integer, rounded towards\
    \ NaN.\nWrite a function that returns the number of digits in an integer, rounded\
    \ away from NaN.\nWrite a function that returns the number of digits in an integer,\
    \ rounded towards +Inf.\nWrite a function that returns the number of digits in\
    \ an integer, rounded away from +Inf.\nWrite a function that returns the number\
    \ of digits in an integer, rounded towards -1.\nWrite a function that returns\
    \ the number of digits in an integer, rounded away from -1.\nWrite a function\
    \ that returns the number of digits in an integer, rounded towards -0.\nWrite\
    \ a function that returns the number of digits in an integer, rounded away from\
    \ -0.\nWrite a function that returns the number of digits in an integer, rounded\
    \ towards +Inf.\nWrite a function that returns the number of digits in an integer,\
    \ rounded away from +Inf.\nWrite a function that returns the number of digits\
    \ in an integer, rounded towards -1.\nWrite a function that returns the number\
    \ of digits in an integer, rounded away from -1.\nWrite a function that returns\
    \ the number of digits in an integer, rounded towards -0.\nWrite a function that\
    \ returns the number of digits in an integer, rounded away from -0.\nWrite a function\
    \ that returns the number of digits in an integer, rounded towards +Inf.\nWrite\
    \ a function that returns the number of digits in an integer, rounded away from\
    \ +Inf.\nWrite a function that returns the number of digits in an integer, rounded\
    \ towards -1.\nWrite a function that returns the number of digits in an integer,\
    \ rounded away from -1.\nWrite a function that returns the number of digits in\
    \ an integer, rounded towards -0.\nWrite a function that returns the number of\
    \ digits in an integer, rounded away from -0.\nWrite a function that returns the\
    \ number of digits in an integer, rounded towards +Inf.\nWrite a function that\
    \ returns the number of digits in an integer, rounded away from +Inf.\nWrite a\
    \ function that returns the number of digits in an integer, rounded to", "   \
    \ if shift > length(x) || shift < 0\n        error(\"shift must be between 0 and\
    \ length(x)\")\n    else\n        digits = digits(x)\n        digits[shift] =\
    \ digits[shift] % 10\n        digits[length(x)-shift] = digits[length(x)-shift]\
    \ % 10\n        digits = digits[0..(length(x)-shift-1)]\n        return join(digits,\
    \ \"\")\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = x\n    digits = digits[shift:end]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else if shift < 0\n        return\
    \ reverse(x)\n    else\n        return reverse(x[1:shift]) + x[(shift+1):length(x)]\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[-shift:] + digits[-1:]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x) || shift < 0\n        error(\"shift must be in range 0 to\
    \ length(x)\")\n    else\n        digits = digits(x)\n        digits_reversed\
    \ = reverse(digits)\n        digits_shifted = shift(digits_reversed, shift)\n\
    \        digits_shifted_reversed = reverse(digits_shifted)\n        return digits_shifted_reversed\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<text>\nThe function digits(x::Int64)\
    \ returns a string containing the digits of x, in reverse order.", "    if shift\
    \ > length(x) || shift < 0\n        error(\"shift must be in range 0 to length(x)\"\
    )\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end-1]) + reverse(x[1:shift])\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift\
    \ > length(x) || shift < 0\n        error(\"shift must be in range 0 to length(x)\"\
    )\n    elseif shift == 0\n        return \"\"\n    else\n        return reverse(digits(x))\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nWrite a function that returns the number of digits in\
    \ an integer, rounded up to the nearest integer.\nWrite a function that returns\
    \ the number of digits in an integer, rounded down to the nearest integer.\nWrite\
    \ a function that returns the number of digits in an integer, rounded up to the\
    \ nearest integer, ignoring trailing zeros.\nWrite a function that returns the\
    \ number of digits in an integer, rounded down to the nearest integer, ignoring\
    \ trailing zeros.", "    if shift > length(x)\n        return reverse(x)\n   \
    \ else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and $length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits[shift] = digits[shift] % 10\n        digits[length(x)-shift] =\
    \ digits[length(x)-shift] % 10\n        return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(x)\n    else\n        return reverse(x[1:shift])\
    \ + x[(shift + 1):length(x)]\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    digits(x::Int64)::Vector{Int64}\nReturn the digits of an integer x in a vector.\n\
    \"\"\"", "    if shift > length(x)\n        digits = reverse(digits(x))\n    else\n\
    \        digits = digits(x)\n    digits = digits[shift:end]\n    return join(digits,\
    \ \"\")\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns a list of\
    \ digits of x in reverse order.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(digits(x))\n    else\n     \
    \   digits = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n\
    @assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that converts a string to a vector of integers. If the string cannot be converted\
    \ to a vector of integers, return an empty vector.\nFor example, given \"123\"\
    , the function should return [1,2,3].\nGiven \"-123\", the function should return\
    \ [-1,2,3].\nGiven \"qwertyuiop\", the function should return [].\nGiven \"-12qwertyuiop\"\
    , the function should return [-12,1,2,3].", "    if shift > length(x)\n      \
    \  digits = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[-shift:]\
    \ + digits[-1:]\n    return digits\nend\n</cell>\n<code language=julia-1.1>",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = digits(x)\n        digits_reversed\
    \ = reverse(digits)\n        digits_shifted = shift(digits_reversed, shift)\n\
    \        digits_shifted_reversed = reverse(digits_shifted)\n        return digits_shifted_reversed\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    end\n    digits[shift::Int64]\
    \ = digits[-shift::Int64]\n    return join(digits, \"\")\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return digits\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x) || shift < 0\n        error(\"shift must be between 0 and\
    \ length(x)\")\n    else\n        digits = digits(x)\n        digits[shift] =\
    \ digits[shift] % 10\n        digits = digits[0..(length(digits)-shift-1)]\n \
    \       digits = reverse(digits)\n        return join(digits, \"\")\n    end\n\
    end\n</cell>\n<text>\nThe function digits() returns an array of digits of an integer,\
    \ x, in reverse order.", "    if shift > length(x)\n        digits = reverse(digits(x))\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    end\n    return join(reverse(digits[shift:end]))\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n\
    \    else if shift < 0\n        return reverse(circular_shift(reverse(x), -shift))\n\
    \    else\n        return reverse(x[shift:end-1] + x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    circular_shift(x, shift)", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in the string.\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n    8\n    >>> count_words(\"The quick brown fox jumps over the ", " \
    \   if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert\
    \ circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of digits in an integer. Test it on all of the\nintegers\
    \ from 0 to 20.", "    if shift > length(x)\n        digits = reverse(x)\n   \
    \ else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = reverse(x[shift:end])\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    digits\
    \ = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = digits(x)\n        digits[shift]\
    \ = digits[shift] % 10\n        digits[length(digits)] = digits[length(digits)]\
    \ % 10\n        digits = digits[0..(length(digits)-1)]\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)\n        digits\
    \ = reverse(digits)\n        digits = reverse(digits)\n        digits = reverse(digits)\n\
    \        digits = reverse(digits)\n        digits = reverse(digits)", "    if\
    \ shift > length(x) || shift < 0\n        error(\"shift must be in range 0 to\
    \ length(x)\")\n    else\n        digits = digits(x)\n        digits_reversed\
    \ = reverse(digits)\n        digits_shifted = shift(digits_reversed, shift)\n\
    \        digits_shifted_reversed = reverse(digits_shifted)\n        return digits_shifted_reversed\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.\nWrite a function that returns the number of digits in\
    \ an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in ", "    if shift > length(x)\n        digits = reverse(x)\n   \
    \ else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x) || shift < 0\n        error(\"\
    shift must be between 0 and length(x)\")\n    else\n        digits = digits(x)\n\
    \        digits = digits[shift:end]\n        digits = reverse(digits)\n      \
    \  digits = join(digits)\n        return digits\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift < 0\n\
    \        error(\"shift must be in range 0 to length(x)\")\n    else\n        digits\
    \ = digits(x)\n        digits = digits[shift:end]\n        digits = reverse(digits)\n\
    \        return join(digits)\nend\n</cell>\n<code language=julia-1.3>", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n    return digits\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of characters in that string.\nWrite a function that takes a string\
    \ and returns the number of words in that string.\nWrite a function that takes\
    \ a string and returns the number of lines in that string.\nWrite a function that\
    \ takes a string and returns the number of characters in that string that are\
    \ not spaces.\nWrite a function that takes a string and returns the number of\
    \ words in that string that are not spaces.\nWrite a function that takes a string\
    \ and returns the number of lines in that string that are not spaces.\nWrite a\
    \ function that takes a string and returns the number of characters in that string\
    \ that are spaces.\nWrite a function that takes a string and returns the number\
    \ of words in that string that are spaces.\nWrite a function that takes a string\
    \ and returns the number of lines in that string that are spaces.\nWrite a function\
    \ that takes a string and returns the number of characters in that string that\
    \ are spaces and are not spaces.\nWrite a function that takes a string and returns\
    \ the number of words in that string that are spaces and are not spaces.\nWrite\
    \ a function that takes a string and returns the number of lines in that string\
    \ that are spaces and are not spaces.\nWrite a function that takes a string and\
    \ returns the number of characters in that string that are spaces and are not\
    \ spaces.\nWrite a function that takes a string and returns the number of words\
    \ in that string that are spaces and are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in that string that are spaces and\
    \ are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in that string that are spaces and are not spaces.\nWrite a function\
    \ that takes a string and returns the number of words in that string that are\
    \ spaces and are not spaces.\nWrite a function that takes a string and returns\
    \ the number of lines in that string that are spaces and are not spaces.\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string that are spaces and are not spaces.\nWrite a function that takes a string\
    \ and returns the number of words in that string that are spaces and are not spaces.\n\
    Write a function that takes a string and returns the number of lines in that string\
    \ that are spaces and are not spaces.\nWrite a function that takes a string and\
    \ returns the number of characters in that string that are spaces and are not\
    \ spaces.\nWrite a function that takes a string and returns the number of words\
    \ in that string that are spaces and are not spaces.\nWrite a function that takes\
    \ a string and returns the number of lines in that string that are spaces and\
    \ are not spaces.\nWrite a function that takes a string and returns the number\
    \ of characters in that string that are spaces and are not spaces.\nWrite a function\
    \ that takes a string and returns the number of words in that string that are\
    \ spaces and are not spaces.\nWrite a function that takes a string and returns\
    \ the number of lines in that ", "    if shift > length(x)\n        return reverse(x)\n\
    \    else \n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits(x::Int64) returns a\
    \ string containing the digits of x.", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else if shift < 0\n        return reverse(circular_shift(x,\
    \ -shift))\n    else\n        return reverse(circular_shift(x, shift))\nend\n\
    </cell>\n<code language=julia-1.3>", "    if shift > length(x)\n        return\
    \ reverse(x)\n    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code language=julia-1.3>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[-shift:] + digits[: shift]\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift >\
    \ length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return digits\n\
    end\n</cell>\n<code language=julia-1.4>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n  \
    \  digits(x::Int64)", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[-shift:]+digits[:shift]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else if shift < 0\n        return\
    \ circular_shift(x, -shift)\n    else\n        return reverse(circular_shift(reverse(x),\
    \ shift-length(x)))\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[-shift:end]\n\
    \    digits = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = digits(x)\n        digits[shift]\
    \ = digits[shift] % 10\n        digits = digits[0 : shift-1] + digits[shift :\
    \ end]\n        digits = reverse(digits)\n        return join(digits)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x) || shift <\
    \ 0\n        error(\"shift must be in range 0 to length(x)\")\n    else\n    \
    \    digits = digits(x)\n        digits[shift] = digits[shift] % 10\n        digits[length(x)-shift]\
    \ = digits[length(x)-shift] % 10\n        digits = reverse(digits)\n        return\
    \ join(digits)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[-shift:] + digits[: shift]\n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert circular_shift(12, 1) == 21\n@assert circular_shift(12,\
    \ 2) == 12\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of digits in an integer. For example, length(1234) == 4.", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[shift:end]\n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[-shift:] + digits[: shift]\n    return digits\n\
    end\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 2)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 3)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 4)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 5)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 6)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 7)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 8)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 9)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 10)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 11)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 12)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 13)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 14)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 15)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 16)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 17)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 18)\n</cell>\n<code\
    \ language=julia-1.3>\n@time circular_shift(123456789, 19)\n</cell>\n<code language=julia-1.3>\n\
    @time circular_shift(123456789, 20)\n</cell>\n<code language=julia-1.3>\n@time\
    \ circular_shift(123456789, 21)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 22)\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 23)\n\
    </cell>\n<code language=julia-1.3>\n@time circular_shift(123456789, 24)\n</cell>\n\
    <code language=julia-1.3>\n@time circular_shift(123456789, 25)\n</cell>\n<code\
    \ language=julia-1.3>\n@time cir", "    if shift > length(x) || shift < 0\n  \
    \      error(\"shift must be in range 0 to length(x)\")\n    else\n        digits\
    \ = digits(x)\n        digits[shift] = digits[shift] % 10\n        digits[length(digits)]\
    \ = digits[length(digits)] % 10\n        return join(digits, \"\")\n    end\n\
    end\n</cell>\n<code language=julia-1.4>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x) || shift < 0\n        error(\"shift must be in range 0 to length(x)\"\
    )\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <text>\nThe function digits(x::Int64) returns a list of digits of the integer\
    \ x. For example, digits(12) returns [1,2,0]. digits(x) returns x if x is positive,\
    \ otherwise it returns -x.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n@time circular_shift(123456789,\
    \ 2)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ digits in an integer.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nThe function\
    \ reverse() reverses a string. For example, circular_shift(reverse(\"hello\"),\
    \ \"world\") returns \"olleh\".", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    end\n    digits[shift::shift] = digits[-shift::-shift]\n  \
    \  return join(digits, \"\")\nend\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2\
    \ |>\n<code>", "    if shift > length(x)\n        digits = reverse(x)\n    else\n\
    \        digits = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\n\
    end\n</cell>\n<text>\nThe function digits(x::Int64) returns a string containing\
    \ the digits of x.\nThe function reverse(x::String) returns a string containing\
    \ the digits of x in reverse order.\nThe function join(digits::String) returns\
    \ a string containing the concatenation of digits in the order they appear in\
    \ the string.\nThe function shift(x::Int64, shift::Int64) returns a string containing\
    \ the digits of x shifted right by shift.\nThe function length(x::String) returns\
    \ the number of characters in x.", "    if shift > length(x)\n        digits =\
    \ reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of digits in an integer.", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift >\
    \ length(x)\n        digits = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift >\
    \ length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    digits = reverse(digits)\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@time digits(123456789)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 1)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 2)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 3)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 4)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 5)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 6)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 7)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 8)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 9)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 10)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 11)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 12)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 13)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 14)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 15)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 16)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(123456789, 17)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789,\
    \ 18)\n</cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 19)\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 20)\n</cell>\n\
    <code language=julia-1.5>\n@time circular_shift(123456789, 21)\n</cell>\n<code\
    \ language=julia-1.5>\n@time circular_shift(123456789, 22)\n</cell>\n<code language=julia-1.5>\n\
    @time circular_shift(123456789, 23)\n</cell>\n<code language=julia-1.5>\n@time\
    \ circular_shift(", "    if shift > length(x)\n        return reverse(x)\n   \
    \ else\n        return reverse(x[shift:end])\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes an integer and returns the sum of the digits of that\
    \ integer. For example, digit_sum(12) should return 1 + 2 + 3 = 6.", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[-shift:end]\n    return join(digits, \"\")\nend\n</cell>\n\
    <text>\nThe function digits(x::Int64) returns a string containing the digits of\
    \ x, in reverse order.", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end]) + reverse(x[1:shift])\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    return join(reverse(digits[shift:end-1]),\
    \ digits[end])\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    digits(x::Int64)",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = x\n    digits = digits[shift:end]\n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>", "    if shift >\
    \ length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end-1])\
    \ + reverse(x[1:shift])\nend\n</cell>\n<code language=julia-1.5>", "    if shift\
    \ > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if shift > length(x)\n\
    \        digits = reverse(x)\n    else\n        digits = digits(x)\n    digits\
    \ = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = reverse(x[shift:end])\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    digits = reverse(digits)\n    return digits\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x)\n        digits = reverse(x)\n    else\n        digits\
    \ = digits(x)\n    digits = digits[shift:end]\n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\n@time circular_shift(123456789, 2)\n</cell>\n\
    <text>\nExercise: Implement the function digits(x::Int64) which returns a string\
    \ containing all the digits of x.\n    For example, digits(123456789) should return\
    \ \"123456789\".\n    digits(0) should return \"\".\n    digits(-123456) should\
    \ return \"-123456\".\n    digits(123456789123456789) should return \"123456789123456789\"\
    .\n    digits(123456789123456789123456789) should return \"123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789) should return \"123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789) should return \"\
    123456789123456789123456789123456789123456789\".\n    digits(123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789\".\n\
    \    digits(123456789123456789123456789123456789123456789123456789123456789) should\
    \ return \"123456789123456789123456789123456789123456789123456789123456789\".\n\
    \    digits(123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789)\
    \ should return \"123456789123456789123456789123456789123456789123456789123456789123456789123456789\"\
    .\n    digits(123456789123456789123456789", "    if shift > length(x)\n      \
    \  return reverse(x)\n    else if shift < 0\n        return circular_shift(x,\
    \ -shift)\n    else\n        digits = digits(x)\n        digits = digits[shift\
    \ .. end]\n        return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert circular_shift(12, 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of digits in an integer.\
    \ For example, length(123) == 3.", "    if shift > length(x)\n        digits =\
    \ reverse(x)\n    else\n        digits = reverse(x[shift:end])\n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    digits(x::Int64)", "    if\
    \ shift > length(x)\n        digits = reverse(x)\n    else\n        digits = digits(x)\n\
    \    digits = digits[shift:end]\n    return join(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert circular_shift(12,\
    \ 1) == 21\n@assert circular_shift(12, 2) == 12\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of digits in an integer.", "    if shift\
    \ > length(x)\n        return reverse(x)\n    else\n        return reverse(x[shift:end])\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ digits in an integer.\nWrite a function that returns the number of digits in\
    \ an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.\nWrite a function that returns the number\
    \ of digits in an integer.\nWrite a function that returns the number of digits\
    \ in an integer.\nWrite a function that returns the number of digits in an integer.\n\
    Write a function that returns the number of digits in an integer.\nWrite a function\
    \ that returns the number of digits in an integer.\nWrite a function that returns\
    \ the number of digits in an integer.", "    if shift > length(x)\n        digits\
    \ = reverse(x)\n    else\n        digits = digits(x)\n    digits = digits[shift:end]\n\
    \    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    digits(x::Int64)", "    if shift > length(x)\n        return reverse(x)\n\
    \    else\n        return reverse(x[shift:end])\nend\n</cell>\n<code language=julia-1.5>",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<text>\nThe function digits() is defined in the\
    \ file digits.py, which is available in the directory /opt/conda/lib/python3.7/site-packages/.",
  "    if shift > length(x) || shift < 0\n        error(\"shift must be in range 0\
    \ to length(x)\")\n    else\n        digits = digits(x)\n        digits = digits[shift:end]\n\
    \        digits = reverse(digits)\n        return join(digits)\nend\n</cell>\n\
    <code language=julia-1.3>", "    if shift > length(x)\n        digits = reverse(x)\n\
    \    else\n        digits = digits(x)\n    digits = digits[shift:end]\n    return\
    \ join(digits)\nend\n</cell>\n<code language=julia-1.5>", "    if shift > length(x)\n\
    \        digits = reverse(digits(x))\n    else\n        digits = digits(x)\n \
    \   digits = digits[shift:end]\n    digits = reverse(digits)\n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.0>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
