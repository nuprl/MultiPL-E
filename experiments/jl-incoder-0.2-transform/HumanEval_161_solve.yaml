name: HumanEval_161_solve
language: jl
prompt: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the\
  \ string contains no letters, reverse the string.\n    The function should return\
  \ the resulted string.\n    Examples\n    >>> solve(\"1234\")\n    \"4321\"\n  \
  \  >>> solve(\"ab\")\n    \"AB\"\n    >>> solve(\"#a@C\")\n    \"#A@c\"\n    \"\"\
  \"\nfunction solve(s::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
  ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
  ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
  ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
  #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
completions: ["    if s.length==0\n        return \"\"\n    if isLetter(s[0])\n  \
    \      return reverse(s.substring(1))\n    return reverse(s.substring(0,1))+s[0]\n\
    end\n</cell>\n<code language=julia-1.0>", "    if length(s) == 0 then return s\n\
    \    if s[0] == '#' then return reverse(s[2:])\n    if s[0] == '@' then return\
    \ reverse(s[2:])\n    if s[0] == '$' then return reverse(s[2:])\n    if s[0] ==\
    \ '%' then return reverse(s[2:])\n    if s[0] == '&' then return reverse(s[2:])\n\
    \    if s[0] == '*' then return reverse(s[2:])\n    if s[0] == '(' or s[0] ==\
    \ ')' then return reverse(s[2:])\n    if s[0] == '[' or s[0] == ']' then return\
    \ reverse(s[2:])\n    if s[0] == '{' or s[0] == '}' then return reverse(s[2:])\n\
    \    if s[0] == '<' or s[0] == '>' then return reverse(s[2:])\n    if s[0] ==\
    \ '^' or s[0] == '_' then return reverse(s[2:])\n    if s[0] == '+' or s[0] ==\
    \ '-' then return reverse(s[2:])\n    if s[0] == '=' then return reverse(s[2:])\n\
    \    if s[0] == '|' then return reverse(s[2:])\n    if s[0] == '\\\\' then return\
    \ reverse(s[2:])\n    if s[0] == '!' then return reverse(s[2:])\n    if s[0] ==\
    \ '.' then return reverse(s[2:])\n    if s[0] == ',' then return reverse(s[2:])\n\
    \    if s[0] == ';' then return reverse(s[2:])\n    if s[0] == '?' then return\
    \ reverse(s[2:])\n    if s[0] == '\\'' then return reverse(s[2:])\n    if s[0]\
    \ == '\"' then return reverse(s[2:])\n    if s[0] == '$' then return reverse(s[2:])\n\
    \    if s[0] == '%' then return reverse(s[2:])\n    if s[0] == '&' then return\
    \ reverse(s[2:])\n    if s[0] == '*' then return reverse(s[2:])\n    if s[0] ==\
    \ '(' or s[0] == ')' then return reverse(s[2:])\n    if s[0] == '[' or s[0] ==\
    \ ']' then return reverse(s[2:])\n    if s[0] == '{' or s[0] == '}' then return\
    \ reverse(s[2:])\n    if s[0] == '<' or s[0] == '>' then return reverse(s[2:])\n\
    \    if s[0] == '^' or s[0] == '_' then return reverse(s[2:])\n    if s[0] ==\
    \ '+' or s[0] == '-' then return reverse(s[2:])\n    if s[0] == '=' then return\
    \ reverse(s[2:])\n    if s[0] == '|' then return reverse(s[2:])\n    if s[0] ==\
    \ '\\\\' then return reverse(s[2:])\n    if s[0] == '!' then return reverse(s[2:])\n\
    \    if s[0] == '.' then return reverse(s[2:])\n    if s[0] == ',' then return\
    \ reverse(s[2:])\n    if s[0]", "    if length(s) <= 0 \n        return s \n \
    \   \n    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend", "    if s.length == 0 \n        return s \n    else\
    \ if is_letter(s) \n        return reverse(s.toLowerCase()) \n    else \n    \
    \    return reverse(s.toUpperCase()) \nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    if s.length == 0 \n        return s \n    else if isLetter(s)\
    \ \n        return reverse(s.toLowerCase()) \n    else \n        return reverse(s.toUpperCase())\
    \ \nend\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=1 |>\n<code>", "   \
    \ if length(s) <= 0 \n        return s \n    else if is_letter(s) \n        return\
    \ reverse(upper(s))\n    else \n        return reverse(lower(s))\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if length(s) <= 0\n       \
    \ return \"\"\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    if isLetter(toUpper(s))\n        return reverse(toLower(s))\n    \n\
    \    return s\nend\n</cell>\n<code language=julia-1.0>", "    if s.length == 0\
    \ \n        \"\" \n    else if is_letter(s) \n        solve_reverse(s.toLower())\
    \ \n    else \n        solve_reverse(s) \nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>", "    if length(s) <= 1 \n        return\
    \ s\n    \n    if isLetter(s[end-1]) \n        return reverse(s[end-1:end-1])\
    \ + s[end]\n    \n    return reverse(s[end-1:end]) + s[end]\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(s) <= 0 \n        then return s\n    else\
    \ if isLetter(s) \n        then return reverse(upper(s))\n        else return\
    \ reverse(lower(s))\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you\
    \ have a string like \"#a@C\" which should be \"#A@c\"\n<|/ c |>\n<| c |>\nI didn't\
    \ know that `isLetter` was a function that returns true for letters. I thought\
    \ it was a function that returns true for strings that only contain letters. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if length(s)\
    \ == 0 \n        return s \n    else if length(s) == 1 \n        return reverse(s[1,1])\
    \ \n    else \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        ",
  "    if length(s) <= 0\n        return s\n    else if isLetter(s)\n        return\
    \ reverse(toUpper(s))\n    else\n        return reverse(toLower(s))\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question. OP asked for a recursive\
    \ solution.\n<|/ c |>\n<| c |>\nI agree with you, my answer is not the best one,\
    \ but I thought that if someone is looking for recursive solution, they will find\
    \ this answer useful.\n<|/ c |>\n<| a tags=string,julia |>\n<code>", "    if s.length\
    \ == 0 \n        return s \n    else if isLetter(s) \n        return reverse(toUpper(s))\n\
    \    else \n        return reverse(toLower(s))\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=julia,string |>\n<code>", "    if s.length == 0 \n        then return\
    \ s\n    else if isLetter(s) \n        then return reverse(toUpper(s))\n     \
    \   else return reverse(toLower(s))\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for `solve(\"ab\")` which should return `\"AB\"`\n<|/ c |>\n<| c |>\nI\
    \ see what you mean. I've updated my answer to include a solution that works.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for `solve(\"ab\")` which should return `\"\
    AB\"`\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer to include\
    \ a solution that works.\n<|/ c |>\n<| a tags=string,julia,reverse |>\n<code>",
  "    \n    if s.length == 0 \n        return s \n    \n    \n    if isLetter(s)\
    \ \n        return reverse(s.toLowerCase()) \n    \n    \n    if isLetter(s.charAt(0))\
    \ \n        return reverse(s.substring(1))\n    \n    \n    return s\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,haskell,reverse |>\n<code>\nimport Data.Char\n\
    import Data.List", "    if s.length == 0 \n        then return \"\"\n    else\
    \ if length(s) mod 2 != 0 \n        then return \"#\" + solve((reverse(s))) \n\
    \        else return solve((reverse(s))) \nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ c |>\nThis doesn't work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nI\
    \ tested it and it works fine. Can you give me an example where it fails?\n<|/\
    \ c |>\n<| c |>\nIt fails for `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works fine. Can you give me an example where it fails?\n<|/ c |>\n<|\
    \ c |>\nIt fails for `solve(\"ab\")`.\n<|/ c |>\n<| a dscore=1 |>\n<code>", " \
    \   if s.length == 0 \n        \"\" \n    else if length(s) >= 1 \n        if\
    \ isLetter(s) \n            reverse(toUpper(s))\n        else \n            reverse(toLower(s))\n\
    \    else \n        reverse(s)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia,reverse\
    \ |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(s) <= 0\n        return s\n    \n    \n    \n    if isLetter(s)\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[0])\n \
    \       return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-1])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-2])\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end-3])\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end-4])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-5])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-6])\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end-7])\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end-8])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-9])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-10])\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end-11])\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end-12])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-13])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-14])\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end-15])\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end-16])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-17])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-18])\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end-19])\n\
    \        return reverse(upper(s))\n    \n    \n    \n    if isLetter(s[end-20])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-21])\n\
    \        return reverse(lower(s))\n    \n    \n    \n    if isLetter(s[end-22])\n\
    \        return reverse(upper(", "    if length(s) <= 0\n        return s\n  \
    \  \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend", "    if s.length == 0 \n        return \"#@A\"\n\
    \    if isLetter(s) \n        return reverse(toUpper(s))\n    return reverse(toLower(s))\n\
    end\n</code>\n<|/ a |>\n<| c |>\nI like your solution, however it fails for \"\
    #a@C\" which should return \"#A@c\"\n<|/ c |>\n<| c |>\nI fixed the problem with\
    \ #a@C\n<|/ c |>\n<| c |>\nI like your solution, however it fails for \"#a@C\"\
    \ which should return \"#A@c\"\n<|/ c |>\n<| c |>\nI fixed the problem with #a@C\n\
    <|/ c |>\n<| a tags=string,julia,reverse |>\n<code>", "    if s.length == 0 \n\
    \        return s \n    else if isLetter(s) \n        return reverse(toUpper(s))\n\
    \    else \n        return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>",
  "    if s.length == 0 \n        return s \n    else if contains(s, char.upper(s[0]))\
    \ \n        return reverse(s.substring(0,1)) + s.substring(1) \n    else \n  \
    \      return reverse(s.substring(0,1)) + s.substring(1) \nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if s.length == 0 \n        \"\" \n    else if length(s)\
    \ <= 1 \n        s \n    else if isLetter(s) \n        solve(reverseCase(s))\n\
    \    else \n        solve(reverseCase(s))\n    end\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis doesn't work if the string contains any non-letters.\n<|/ c |>\n\
    <| c |>\nThanks for pointing that out. I've edited the answer to include a check\
    \ for that.\n<|/ c |>\n<| c |>\nThanks for your answer. Your code works perfectly\
    \ for my problem. Thanks again.\n<|/ c |>\n<| a tags=string,julia,reverse |>\n\
    <code>", "    if length(s) <= 0\n        return s\n    \n    \n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    \n    \n    if isLetter(toUpper(s))\n\
    \        return reverse(toLower(s))\n    \n    \n    if isLetter(toLower(s))\n\
    \        return reverse(toUpper(s))\n    \n    \n    if isLetter(toUpper(toLower(s)))\n\
    \        return reverse(toLower(toUpper(toLower(s))))\n    \n    \n    return\
    \ s\n</code>\n<|/ a tags=string,haskell,reverse |>\n<| c |>\nThanks for your answer.\
    \ Your solution is very similar to mine. I am just wondering why you used `if\
    \ isLetter(s)` instead of `if isLetter(toUpper(s))`. What is the difference?\n\
    <|/ c |>\n<| c |>\n`isLetter` checks if the string contains only letters. `toUpper`\
    \ converts the string to upper case and `toLower` converts the string to lower\
    \ case. `isLetter` checks if the string contains only letters. `toUpper` converts\
    \ the string to upper case and `toLower` converts the string to lower case. `isLetter`\
    \ checks if the string contains only letters. `toUpper` converts the string to\
    \ upper case and `toLower` converts the string to lower case. `isLetter` checks\
    \ if the string contains only letters. `toUpper` converts the string to upper\
    \ case and `toLower` converts the string to lower case. `isLetter` checks if the\
    \ string contains only letters. `toUpper` converts the string to upper case and\
    \ `toLower` converts the string to lower case. `isLetter` checks if the string\
    \ contains only letters. `toUpper` converts the string to upper case and `toLower`\
    \ converts the string to lower case. `isLetter` checks if the string contains\
    \ only letters. `toUpper` converts the string to upper case and `toLower` converts\
    \ the string to lower case. `isLetter` checks if the string contains only letters.\
    \ `toUpper` converts the string to upper case and `toLower` converts the string\
    \ to lower case. `isLetter` checks if the string contains only letters. `toUpper`\
    \ converts the string to upper case and `toLower` converts the string to lower\
    \ case. `isLetter` checks if the string contains only letters. `toUpper` converts\
    \ the string to upper case and `toLower` converts the string to lower case. `isLetter`\
    \ checks if the string contains only letters. `toUpper` converts the string to\
    \ upper case and `toLower` converts the string to lower ", "    if s.length ==\
    \ 0 \n        return s \n    else if is_letter(s) \n        return reverse(s.toLowerCase())\
    \ \n    else \n        return reverse(s.toUpperCase()) \nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>", "    if s.length == 0 then return s\n\
    \    if isLetter(s) then return upperCase(s) else return lowerCase(s)\n    if\
    \ isLetter(s) then return upperCase(s) else return lowerCase(s)\n    return s\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `solve(\"\
    ab\")`.\n<|/ c |>\n<| c |>\nI did try it and it worked. Did you try it with the\
    \ example I gave?\n<|/ c |>\n<| c |>\nYes, I did. `solve(\"ab\")` returns `\"\
    Ab\"`, not `\"AB\"`.\n<|/ c |>\n<| c |>\nOh I see what you mean. Yeah I see what\
    \ you mean. I just edited my answer to fix it.\n<|/ c |>\n<| c |>\nI edited my\
    \ answer to fix the problem you mentioned.\n<|/ c |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.Char", "    if s.length == 0 \n        return \"#@A\"\
    \n    if s.head == s.tail \n        return s.head \n    if s.head == s.tail.head\
    \ \n        return s.head + solve( s.tail.tail )\n    if s.head == s.tail.tail.head\
    \ \n        return s.head + solve( s.tail.tail.tail )\n    if s.head == s.tail.tail.tail.head\
    \ \n        return s.head + solve( s.tail.tail.tail.tail )\n    if s.head == s.tail.tail.tail.tail.head\
    \ \n        return s.head + solve( s.tail.tail.tail.tail.tail )\n    if s.head\
    \ == s.tail.tail.tail.tail.tail.head \n        return s.head + solve( s.tail.tail.tail.tail.tail.tail\
    \ )\n    if s.head == s.tail.tail.tail.tail.tail.tail.head \n        return s.head\
    \ + solve( s.tail.tail.tail.tail.tail.tail.tail )\n    if s.head == s.tail.tail.tail.tail.tail.tail.tail.head\
    \ \n        return s.head + solve( s.tail.tail.tail.tail.tail.tail.tail.tail )\n\
    \    if s.head == s.tail.tail.tail.tail.tail.tail.tail.tail.head \n        return\
    \ s.head + solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail )\n    if s.head\
    \ == s.tail.tail.tail.tail.tail.tail.tail.tail.tail.head \n        return s.head\
    \ + solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail )\n    if s.head\
    \ == s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head \n        return\
    \ s.head + solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail )\n\
    \    if s.head == s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\
    \ \n        return s.head + solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ )\n    if s.head == s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.head\
    \ \n        return s.head + solve( s.", "    if s.length == 0 \n        s \n \
    \   else if s.head == 0 \n        solve( s.tail ) \n    else if s.head == 1 \n\
    \        solve( s.tail.tail ) \n    else if s.head == 2 \n        solve( s.tail.tail.tail\
    \ ) \n    else if s.head == 3 \n        solve( s.tail.tail.tail.tail ) \n    else\
    \ if s.head == 4 \n        solve( s.tail.tail.tail.tail.tail ) \n    else if s.head\
    \ == 5 \n        solve( s.tail.tail.tail.tail.tail.tail ) \n    else if s.head\
    \ == 6 \n        solve( s.tail.tail.tail.tail.tail.tail.tail ) \n    else if s.head\
    \ == 7 \n        solve( s.tail.tail.tail.tail.tail.tail.tail.tail ) \n    else\
    \ if s.head == 8 \n        solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ) \n    else if s.head == 9 \n        solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ) \n    else if s.head == 10 \n        solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ) \n    else if s.head == 11 \n        solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ) \n    else if s.head == 12 \n        solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ) \n    else if s.head == 13 \n        solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ) \n    else if s.head == 14 \n        solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ) \n    else if s.head == 15 \n        solve( s.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail.tail\
    \ ) \n    else if s.head == 16 \n", "    if length(s) <= 1 \n        return s\n\
    \    else if isLetter(s) \n        then reverse(upper(s))\n        else reverse(lower(s))\n\
    \    end\nend\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n\
    <code>", "    if s.length == 0 \n        return s \n    else if is_letter(s) \n\
    \        return reverse(s.toLowerCase()) \n    else \n        return reverse(s.toUpperCase())\
    \ \nend\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=2 |>\n<code>", "   \
    \ if length(s) <= 0\n        return s\n    if isLetter(s[0])\n        return reverse(toUpper(s))\n\
    \    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if s.length ==\
    \ 0 \n        s \n    else if is_letter(s) \n        solve_reverse(s)\n    else\
    \ \n        solve_reverse(s.reverse())\nend\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis doesn't work. `solve(\"ab\")` returns `\"ba\"` instead of `\"ab\"`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing out. Fixed the code.\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    if length(s)==0\n        return s\n    else if isLetter(s)\n\
    \        uppercase(s,0)\n    else\n        lowercase(s,0)\n    end\nend", "  \
    \  if s.length == 0 \n        \"\"\n    else if length(s) >= 1 \n        if isLetter(s)\
    \ \n            reverse(toUpper(s))\n        else \n            reverse(toLower(s))\n\
    \    else \n        reverse(s)\nend\n</code>\n<|/ a |>\n<| a tags=string,julia\
    \ |>\n<code>", "    if length(s) <= 1 \n        return s\n    \n    if isLetter(s[end-1])\
    \ && isLetter(s[end])\n        return reverse(s[end-1:end-1]) + s[end]\n    \n\
    \    if isLetter(s[end-1])\n        return reverse(s[end-1:end]) + s[end]\n  \
    \  \n    if isLetter(s[end])\n        return reverse(s[end-1:end-1]) + s[end]\n\
    \    \n    return s\nend\n</cell>\n<code language=julia-1.5>", "    if length(s)\
    \ <= 0\n        return \"\"\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n        return\
    \ reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if length(s) <= 0\n        return s\n    \n    if\
    \ isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of vowels contained in the string.\nExamples\n>>> vowels(\"hello\"\
    )\n2\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"\
    abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\"\
    )\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"\
    abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\"\
    )\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"\
    abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\"\
    )\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"\
    abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\"\
    )\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"\
    abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\"\
    )\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"\
    abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\"\
    )\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"abracadabra\")\n3\n>>> vowels(\"\
    abracadabra\")\n3\n", "    if length(s) <= 0 \n        then return s\n    else\
    \ if length(s) <= 1 \n        then return s.reverse()\n    else \n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(s)\n\
    \        letter(s)\n        letter(s)\n        letter(s)\n        letter(", " \
    \   if s.length==0\n        return s\n    if isLetter(s[0])\n        return reverse(s,0)\n\
    \    return s\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia |>\n<code>",
  "    if s.length == 0 \n        return s \n    \n    if isLetter(s) \n        return\
    \ reverse(s.toLower()) \n    \n    return reverse(s.toUpper()) \nend\n</cell>\n\
    <code language=julia-1.0>", "    if s.length==0\n        return \"\"\n    if isLetter(s[0])\n\
    \        return reverse(s,1)\n    return s\n</code>\n<|/ a tags=string,haskell,reverse\
    \ |>\n<| a tags=string,haskell,reverse |>\n<code>\nimport Data.Char", "    if\
    \ length(s)==0 \n        return \"0\"\n    if length(s)==1 \n        return toupper(tolower(s))\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ s.length == 0 \n        return s \n    else if isLetter(s) \n        return\
    \ reverse(upper(s))\n    else \n        return reverse(lower(s))\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,julia,reverse |>\n<code>", "    if s.length==0\
    \ then return s\n    if isLetter(s) then return reverse(upper(s))\n    return\
    \ reverse(lower(s))\nend\n</code>\n<|/ a tags=string,julia,reverse |>\n<| a tags=string,julia,reverse\
    \ |>\n<code>", "    if s.length==0\n        return \"\"\n    if isLetter(s[0])\n\
    \        return reverse(s.substring(1))\n    return reverse(s.substring(0,1))+s[0]\n\
    end\n</cell>\n<code language=julia-1.0>", "    if length(s) <= 0\n        return\
    \ s\n    \n    if isLetter(s[0])\n        \n        if isLetter(s[1])\n      \
    \      \n            if isLetter(s[2])\n                \n                if isLetter(s[3])\n\
    \                    \n                    if isLetter(s[4])\n               \
    \         \n                        if isLetter(s[5])\n                      \
    \      \n                            if isLetter(s[6])\n                     \
    \           \n                                if isLetter(s[7])\n            \
    \                        \n                                    if isLetter(s[8])\n\
    \                                        \n                                  \
    \      if isLetter(s[9])\n                                            \n     \
    \                                       if isLetter(s[10])\n                 \
    \                               \n                                           \
    \     if isLetter(s[11])\n                                                   \
    \ \n                                                    if isLetter(s[12])\n \
    \                                                       \n                   \
    \                                     if isLetter(s[13])\n                   \
    \                                         \n                                 \
    \                           if isLetter(s[14])\n                             \
    \                                   \n                                       \
    \                         if isLetter(s[15])\n                               \
    \                                     \n                                     \
    \                               if isLetter(s[16])\n                         \
    \                                               \n                           \
    \                                             if isLetter(s[17])\n           \
    \                                                                 \n         \
    \                                                                       if isLetter(s[18])\n\
    \                                                                            \
    \        \n                                                                  \
    \                      if isLetter(s[19])\n                                  \
    \                                                          \n                \
    \                                                                            if\
    \ isLetter(s[20])\n                                                          \
    \                                      \n                                    \
    \                                                            if isLetter(s[21])\n\
    \                                                                            \
    \                        \n                                                  \
    \                                                      if isLetter(s[22])\n  \
    \                                                                            \
    \                              \n                                            \
    \                                                    if isLetter(s[23])\n    \
    \                                                                            \
    \                    \n                                                      \
    \                                              if isLetter(s[24])\n          \
    \                                                                            \
    \                  \n                                                        \
    \                                                if isLetter(s[25])\n        \
    \                                                                            \
    \                        \n                                                  \
    \                                              if isLetter(s[26])\n          \
    \                                                                            \
    \              \n                                                            \
    \                                        if isLetter(s[27])\n                \
    \                                                                            \
    \            \n                                                              \
    \                                          if isLetter(s[28])\n              \
    \                                                                            \
    \                  \n                                                        \
    \                                        if isLetter(s[29])\n                \
    \                                                                            \
    \        \n                                                                  \
    \                                  if isLetter(s[30])\n                      \
    \                                                                            \
    \      \n                                                                    \
    \                                    if isLetter(s[31])\n                    \
    \                                                                            \
    \            \n                                                              \
    \                                  if isLetter(s[32])\n                      \
    \                                                                            \
    \  \n                                                                        \
    \                            if isLetter(s[33])\n                            \
    \                                                                            \n\
    \                                                                            \
    \                            if isLetter(s[34])\n                            \
    \                                                                            \
    \    \n                                                                      \
    \                          if isLetter(s[35])\n                              \
    \                                                                      \n    \
    \                                                                            \
    \                    if isLetter(s[36])\n                                    \
    \                                                                    \n      \
    \                                                                            \
    \                      if isLetter(s[37])\n                                  \
    \                                                                          \n\
    \                                                                            \
    \                    if isLetter(s[38])\n                                    \
    \                                                                \n          \
    \                                                                            \
    \              if isLetter(s[39])\n                                          \
    \                                                              \n            \
    \                                                                            \
    \                if isLetter(s[40])\n                                        \
    \                                                                    \n      \
    \                                                                            \
    \              if isLetter(s[41])\n                                          \
    \                                                          \n                \
    \                                                                            \
    \        if isLetter(s[42])\n                                                \
    \                                                        \n                  \
    \                                                                            \
    \          if isLetter(", "    if length(s)==0\n        return \"\"\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport\
    \ Data.Char", "    if s.length==0 \n        then return \"\"\n    else if length(s)\
    \ mod 2 ==0 \n        then return s.reverse\n    else \n        let  \n      \
    \      res=reverse(s.substring(0,1))+s.substring(1,length(s))\n        in \n \
    \           let\n                res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \            in \n                let\n                    res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                in \n                    let\n                        res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                    in \n                        let\n                      \
    \      res=reverse(s.substring(0,1))+s.substring(1,length(s))\n              \
    \          in \n                            let\n                            \
    \    res=reverse(s.substring(0,1))+s.substring(1,length(s))\n                \
    \            in \n                                let\n                      \
    \              res=reverse(s.substring(0,1))+s.substring(1,length(s))\n      \
    \                          in \n                                    let\n    \
    \                                    res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                    in \n                                   \
    \     let\n                                            res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                        in \n                               \
    \             let\n                                                res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                            in \n                           \
    \                     let\n                                                  \
    \  res=reverse(s.substring(0,1))+s.substring(1,length(s))\n                  \
    \                              in \n                                         \
    \           let\n                                                        res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                                    in \n                   \
    \                                     let\n                                  \
    \                          res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                                        in \n               \
    \                                             let\n                          \
    \                                      res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                                            in \n           \
    \                                                     let\n                  \
    \                                                  res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                                                in \n       \
    \                                                             let\n          \
    \                                                              res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                                                    in \n   \
    \                                                                     let\n  \
    \                                                                          res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                                                        in \n\
    \                                                                            let\n\
    \                                                                            \
    \    res=reverse(s.substring(0,1))+s.substring(1,length(s))\n                \
    \                                                            in \n           \
    \                                                                     let\n  \
    \                                                                            \
    \      res=reverse(s.substring(0,1))+s.substring(1,length(s))\n              \
    \                                                                  in \n     \
    \                                                                            \
    \   let\n                                                                    \
    \                    res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                                                            \
    \        in \n                                                               \
    \                         let\n                                              \
    \                                              res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                                                            \
    \            in \n                                                           \
    \                                 let\n                                      \
    \                                                          res=reverse(s.substring(0,1))+s.substring(1,length(s))\n\
    \                                                                            \
    \                ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if s.length == 0 \n        return \"0\" \n    else if isLetter(s) \n      \
    \  then reverse(toUpper(s))\n        else reverse(toLower(s))\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>", "    if s.length == 0 \n        return s\
    \ \n    else if is_letter(s) \n        return reverse(to_upper(s))\n    else \n\
    \        return reverse(to_lower(s))\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work if the string contains any non-letters.\n<|/ c |>\n<| c |>\n\
    It does work. Try it yourself. It doesn't matter if there are non-letters in the\
    \ string. `solve(\"ab\")` returns `\"AB\"`.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if you give it a string like `\"#a@C\"`.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if you give it a string like `\"#a@C\"`.\n<|/ c |>\n<| c |>\nIt doesn't work\
    \ if you give it a string like `\"#a@C\"`.\n<|/ c |>\n<| a tags=string,julia,reverse\
    \ |>\n<code>", "    if s.length==0\n        return \"\"\n    if isletter(s[0])\n\
    \        return reverse(s,0)\n    return s\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef solve(s):\n    s=s.lower()\n    s=s.replace(' ','')\n    s=s.replace('\\\
    n','')\n    s=s.replace('\\t','')\n    s=s.replace('\\r','')\n    s=s.replace('\\\
    v','')\n    s=s.replace('\\a','')\n    s=s.replace('\\e','')\n    s=s.replace('\\\
    i','')\n    s=s.replace('\\o','')\n    s=s.replace('\\c','')\n    s=s.replace('\\\
    a','')\n    s=s.replace('\\e','')\n    s=s.replace('\\i','')\n    s=s.replace('\\\
    o','')\n    s=s.replace('\\c','')\n    s=s.replace('\\a','')\n    s=s.replace('\\\
    e','')\n    s=s.replace('\\i','')\n    s=s.replace('\\o','')\n    s=s.replace('\\\
    c','')\n    s=s.replace('\\a','')\n    s=s.replace('\\e','')\n    s=s.replace('\\\
    i','')\n    s=s.replace('\\o','')\n    s=s.replace('\\c','')\n    s=s.replace('\\\
    a','')\n    s=s.replace('\\e','')\n    s=s.replace('\\i','')\n    s=s.replace('\\\
    o','')\n    s=s.replace('\\c','')\n    s=s.replace('\\a','')\n    s=s.replace('\\\
    e','')\n    s=s.replace('\\i','')\n    s=s.replace('\\o','')\n    s=s.replace('\\\
    c','')\n    s=s.replace('\\a','')\n    s=s.replace('\\e','')\n    s=s.replace('\\\
    i','')\n    s=s.replace('\\o','')\n    s=s.replace('\\c','')\n    s=s.replace('\\\
    a','')\n    s=s.replace('\\e','')\n    s=s.replace('\\i','')\n    s=s.replace('\\\
    o','')\n    s=s.replace('\\c','')\n    s=s.replace('\\a','')\n    s=s.replace('\\\
    e','')\n    s=s.replace('\\i','')\n    s=s.replace('\\o','')\n    s=s.replace('\\\
    c','')\n    s=s.replace('\\a','')\n    s=s.replace('\\e", "    if length(s) ==\
    \ 0 \n        \"\"\n    else if length(s) == 1 \n        s[toupper(s[0])]\n  \
    \  else \n        solve(s[toupper(s[0])]) + s[tolower(s[1])] + solve(s[tolower(s[1])])\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/29674551)\n<|/ c\
    \ |>\n<| c |>\nI believe this does answer the question. He asked how to reverse\
    \ the case of a string and I provided a solution that does exactly that. He also\
    \ asked how to reverse the string and I provided a solution that does exactly\
    \ that. He also asked how to reverse the case of a string and I provided a solution\
    \ that does exactly that. He also asked how to reverse the string and I provided\
    \ a solution that does exactly that. He also asked how to reverse the case of\
    \ a string and I provided a solution that does exactly that. He also asked how\
    \ to reverse the string and I provided a solution that does exactly that. He also\
    \ asked how to reverse the case of a string and I provided a solution that does\
    \ exactly that. He also asked how to reverse the string and I provided a solution\
    \ that does exactly that. He also asked how to reverse the case of a string and\
    \ I provided a solution that does exactly that. He also asked how to reverse the\
    \ string and I provided a solution that does exactly that. He also asked how to\
    \ reverse the case of a string and I provided a solution that does exactly that.\
    \ He also asked how to reverse the string and I provided a solution that does\
    \ exactly that. He also asked how to reverse the case of a string and I provided\
    \ a solution that does exactly that. He also asked how to reverse the string and\
    \ I provided a solution that does exactly that. He also asked how to reverse the\
    \ case of a string and I provided a solution that does exactly that. He also asked\
    \ how to reverse the string and I provided a solution that does exactly that.\
    \ He also asked how to reverse the case of a string and I provided a solution\
    \ that does exactly that. He also asked how to reverse the string and I provided\
    \ a solution that does exactly that. He also asked how to reverse the case of\
    \ a string and I provided a solution that does exactly that. He ", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if s.length == 0 \n \
    \       return s \n    else if isLetter(s) \n        return reverse(toUpper(toLower(s)))\
    \ \n    else \n        return reverse(toLower(s)) \nend\n</cell>\n<code language=julia-1.3>",
  "    if s.length==0 \n        return s \n    else if s.head == 0 \n        return\
    \ reverse(s.tail) \n    else \n        return reverse(s.tail) + s.head \nend\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for `solve(\"ab\")`\n<|/\
    \ c |>\n<| c |>\nI fixed it\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    if length(s)\
    \ <= 0\n        return s\n    \n    if isLetter(s[end])\n        return reverse(s[end..end-1])\
    \ + s[0..end-1]\n    \n    return reverse(s[end..end-1]) + s[0..end]\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(\"1234\") == \"4321\"\n@assert solve(\"\
    ab\") == \"AB\"\n@assert solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of vowels\
    \ contained in the string.\nExamples\n>>> vowels(\"abracadabra\")\n2\n>>> vowels(\"\
    abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n1\n>>> vowels(\"abracadabra\"\
    )\n3\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"\
    abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\"\
    )\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"\
    abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\"\
    )\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"\
    abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\"\
    )\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"\
    abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\"\
    )\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"\
    abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\"\
    )\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"abracadabra\")\n0\n>>> vowels(\"\
    abracadabra\")\n0\n>>> vowels(\"abracadab", "    if s.length == 0 \n        \"\
    \" \n    else if length(s) <= 1 \n        s \n    else if substring(s, 0, 1) in\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"] \n        solve(reverse(substring(s, 0,\
    \ 1))) + substring(s, 1) \n    else \n        solve(reverse(substring(s, 0, 1)))\
    \ + substring(s, 1) \nend\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=0\
    \ |>\n<code>", "    if length(s) <= 0\n        return s\n    \n    if isLetter(s[end-1])\
    \ && isLetter(s[end-2])\n        return reverse(s[end-1:end-2])\n    \n    if\
    \ isLetter(s[end-1])\n        return reverse(s[end-1:end-1])\n    \n    if isLetter(s[end-2])\n\
    \        return reverse(s[end-2:end-1])\n    \n    return s\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if s.length == 0 \n        return \"#@A\"\n    else\
    \ if s[0].isUpper() \n        return reverse(s.toLower())\n    else if s[0].isLower()\
    \ \n        return reverse(s.toUpper())\n    else \n        return s\n</code>\n\
    <|/ a tags=string,haskell,reverse |>\n<| c |>\nThis doesn't work if the first\
    \ character is a digit.\n<|/ c |>\n<| c |>\n: It does work, try it! `solve(\"\
    1234\")` returns `\"4321\"`.\n<|/ c |>\n<| c |>\n: It doesn't work if the first\
    \ character is a digit.\n<|/ c |>\n<| c |>\n: It doesn't work if the first character\
    \ is a digit.\n<|/ c |>\n<| c |>\n: It doesn't work if the first character is\
    \ a digit.\n<|/ c |>\n<| a dscore=5 |>\n<code>\nimport Data.List", "    if s.length\
    \ == 0 \n        s \n    else if is_letter(s) \n        solve_reverse(s)\n   \
    \ else \n        solve_reverse(s.reverse())\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27814775)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He is asking how to\
    \ reverse a string in Julia. He also provides an example and he is able to solve\
    \ the problem with his code. He also provided a link to his solution. He is able\
    \ to solve the problem with his code. He also provided a link to his solution.\
    \ He is able to solve the problem with his code. He also provided a link to his\
    \ solution. He is able to solve the problem with his code. He also provided a\
    \ link to his solution. He is able to solve the problem with his code. He also\
    \ provided a link to his solution. He is able to solve the problem with his code.\
    \ He also provided a link to his solution. He is able to solve the problem with\
    \ his code. He also provided a link to his solution. He is able to solve the problem\
    \ with his code. He also provided a link to his solution. He is able to solve\
    \ the problem with his code. He also provided a link to his solution. He is able\
    \ to solve the problem with his code. He also provided a link to his solution.\
    \ He is able to solve the problem with his code. He also provided a link to his\
    \ solution. He is able to solve the problem with his code. He also provided a\
    \ link to his solution. He is able to solve the problem with his code. He also\
    \ provided a link to his solution. He is able to solve the problem with his code.\
    \ He also provided a link to his solution. He is able to solve the problem with\
    \ his code. He also provided a link to his solution. He is able to solve the problem\
    \ with his code. He also provided a link to his solution. He is able to solve\
    \ the problem with his code. He also provided a link to his solution. He is able\
    \ to solve the problem with his code. He also provided a link to his solution. ",
  "    if length(s) <= 0 \n        return s \n    else if isLetter(s) \n        return\
    \ reverse(upper(s))\n    else \n        return reverse(lower(s))\nend\n</code>\n\
    <|/ a tags=string,julia,reverse |>\n<| a dscore=0 |>\n<code>", "    if s.length\
    \ == 0 \n        return s \n    else if isLetter(s) \n        then reverse(s.toLowerCase())\
    \ \n        else reverse(s.toUpperCase()) \n    else \n        reverse(s) \nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,julia,reverse |>\n<code>", "    if\
    \ s.length == 0 \n        return s \n    else if isLetter(s) \n        return\
    \ reverse(toUpper(s))\n    else \n        return reverse(toLower(s))\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>", "    if length(s) <= 0\n        return s\n\
    \    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>", "    if s.length\
    \ == 0 \n        return s \n    else if isLetter(s) \n        return reverse(upper(s))\n\
    \    else \n        return reverse(lower(s)) \nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=string,julia |>\n<code>", "    if s.length == 0 \n        \"\"\n   \
    \ else if length(s) >= 1 \n        if isLetter(s) \n            reverse(toUpper(s))\n\
    \        else \n            reverse(toLower(s))\n    else \n        reverse(s)\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if s.length ==\
    \ 0 \n        return s \n    else if isLetter(s) \n        return reverse(s.toLowerCase())\
    \ \n    else \n        return reverse(s.toUpperCase()) \nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a dscore=2 |>\n<code>", "    if s.length == 0 \n        return s \n \
    \   else if is_letter(s) \n        return reverse(upper(s))\n    else \n     \
    \   return reverse(lower(s))\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(s) <= 0\n        return s\n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    return reverse(toLower(s))\nend\n</code>\n<|/ a tags=julia,string |>\n<|\
    \ c |>\nThis doesn't work if you have a string like `\"#a@C\"`\n<|/ c |>\n<| c\
    \ |>\nYes, I missed that case. Thanks for pointing out. I've updated my answer.\n\
    <|/ c |>\n<| a dscore=3 |>\n<code>", "    if s.length == 0 \n        then return\
    \ s\n    else if isLetter(s.head) \n        then return reverse(s.tail)\n    \
    \    else return reverse(s.tail) + s.head\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't work if the string is empty or contains only spaces.\n<|/\
    \ c |>\n<| c |>\nIt does work. Try it yourself. It returns an empty string if\
    \ the string is empty or contains only spaces.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work if the string is empty or contains only spaces.\n<|/ c |>\n<| c |>\nIt\
    \ does work. Try it yourself. It returns an empty string if the string is empty\
    \ or contains only spaces.\n<|/ c |>\n<| c |>\nIt doesn't work if the string is\
    \ empty or contains only spaces.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if\
    \ s.length == 0 \n        \"\" \n    else if is_letter(s) \n        solve_reverse(s)\n\
    \    else \n        solve_reverse(s.reverse)\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>", "    if length(s) <= 0 \n        then\
    \ return s\n    else if s[0] == '#' \n        then return reverse(s[2:])\n   \
    \ else if s[0] == '@' \n        then return reverse(s[2:])\n    else if s[0] ==\
    \ 'A' \n        then return reverse(s[2:])\n    else if s[0] == 'a' \n       \
    \ then return reverse(s[2:])\n    else if s[0] == 'B' \n        then return reverse(s[2:])\n\
    \    else if s[0] == 'b' \n        then return reverse(s[2:])\n    else if s[0]\
    \ == 'C' \n        then return reverse(s[2:])\n    else if s[0] == 'c' \n    \
    \    then return reverse(s[2:])\n    else if s[0] == 'D' \n        then return\
    \ reverse(s[2:])\n    else if s[0] == 'd' \n        then return reverse(s[2:])\n\
    \    else if s[0] == 'E' \n        then return reverse(s[2:])\n    else if s[0]\
    \ == 'e' \n        then return reverse(s[2:])\n    else if s[0] == 'F' \n    \
    \    then return reverse(s[2:])\n    else if s[0] == 'f' \n        then return\
    \ reverse(s[2:])\n    else if s[0] == 'G' \n        then return reverse(s[2:])\n\
    \    else if s[0] == 'g' \n        then return reverse(s[2:])\n    else if s[0]\
    \ == 'H' \n        then return reverse(s[2:])\n    else if s[0] == 'h' \n    \
    \    then return reverse(s[2:])\n    else if s[0] == 'I' \n        then return\
    \ reverse(s[2:])\n    else if s[0] == 'i' \n        then return reverse(s[2:])\n\
    \    else if s[0] == 'J' \n        then return reverse(s[2:])\n    else if s[0]\
    \ == 'j' \n        then return reverse(s[2:])\n    else if s[0] == 'K' \n    \
    \    then return reverse(s[2:])\n    else if s[0] == 'k' \n        then return\
    \ reverse(s[2:])\n    else if s[0] == 'L' \n        then return reverse(s[2:])\n\
    \    else if s[0] == 'l' \n        then return reverse(s[2:])\n    else if s[0]\
    \ == 'M' \n        then return reverse(s[2:])\n    else if s[0] == 'm' \n    \
    \    then return reverse(s[2:])\n    else if s[0] == 'N' \n        then return\
    \ reverse(s[2:])\n    else if s[0] == 'n' \n        then return reverse(s[2:])\n\
    \    else if s[0] == 'O' \n        then return reverse(s[2:])\n    else if s[0]\
    \ == '", "    if s.length == 0 \n        \"\" \n    else if length(s) >= 1 \n\
    \        if isLetter(s) \n            reverse(toUpper(s))\n        else \n   \
    \         reverse(toLower(s))\n    else \n        reverse(s)\nend\n</code>\n<|/\
    \ a tags=julia,string |>\n<| c |>\nThe `isLetter` function should be `isalpha`.\n\
    <|/ c |>\n<| a |>\n<code>", "    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(upper(s))\n    \n    return reverse(lower(s))\n\
    end\n</cell>\n<code language=julia-1.4>", "    if s.length==0\n        return\
    \ \"\"\n    if isLetter(s[0])\n        return reverse(s,1)\n    return s\n</code>\n\
    <|/ a tags=string,haskell,reverse |>\n<| a dscore=1 |>\n<code>\nimport Data.Char",
  "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n        return\
    \ reverse(upper(s))\n    \n    return reverse(lower(s))\nend\n</cell>\n<code language=julia-1.3>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.3>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.3>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of characters\
    \ in the string.", "    if s.length==0 \n        then return \"\"\n    else if\
    \ length(s) mod 2 ==0 \n        then return reverse(s,0,1)\n    else return reverse(s,0,length(s))\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=2 |>\n<code>", "    \n \
    \   \n    if length(s)==0\n        return s\n    \n    if isLetter(s)\n      \
    \  return reverse(upper(s))\n    \n    return reverse(lower(s))\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(\"1234\") == \"4321\"\n@assert solve(\"\
    ab\") == \"AB\"\n@assert solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of vowels\
    \ contained in the string.", "    if length(s) == 0 \n        return \"\"\n  \
    \  else if length(s) == 1 \n        return toupper(s[0])\n    else \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n", "    if s.length ==\
    \ 0 \n        return s \n    else if isLetter(s) \n        return reverse(s.toLowerCase())\
    \ \n    else \n        return reverse(s.toUpperCase()) \nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,julia |>\n<code>", "    if length(s) <= 0\n        return\
    \ \"\"\n    \n    if isLetter(s[0])\n        return reverse(s[1..end-1]) + s[0]\n\
    \    \n    return reverse(s[1..end-1]) + s[0]\nend\n</cell>\n<code language=julia-1.5>",
  "    if s.length == 0 \n        return s \n    else if isLetter(s) \n        return\
    \ reverse(s.toLowerCase()) \n    else \n        return reverse(s.toUpperCase())\
    \ \nend\n</code>\n<|/ a tags=string,julia,reverse |>\n<| a dscore=2 |>\n<code>",
  "    if s.length == 0 \n        return \"#\" \n    else if length(s) <= 1 \n   \
    \     return s \n    else \n        if isLetter(s) \n            return reverse(upper(s))\n\
    \        else \n            return reverse(lower(s)) \nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if length(s) <= 0 \n        return s \n    else if s[0] ==\
    \ '#' \n        return reverse(s[2:]) \n    else if s[0] == '@' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == '$' \n        return reverse(s[2:]) \n\
    \    else if s[0] == '%' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ '^' \n        return reverse(s[2:]) \n    else if s[0] == '&' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == '*' \n        return reverse(s[2:]) \n\
    \    else if s[0] == '('\n        return reverse(s[2:]) \n    else if s[0] ==\
    \ ')' \n        return reverse(s[2:]) \n    else if s[0] == '[' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == ']' \n        return reverse(s[2:]) \n\
    \    else if s[0] == '{' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ '}' \n        return reverse(s[2:]) \n    else if s[0] == '<' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == '>' \n        return reverse(s[2:]) \n\
    \    else if s[0] == '-' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ '+' \n        return reverse(s[2:]) \n    else if s[0] == '.' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == ',' \n        return reverse(s[2:]) \n\
    \    else if s[0] == '?' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ '!' \n        return reverse(s[2:]) \n    else if s[0] == ':' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == ';' \n        return reverse(s[2:]) \n\
    \    else if s[0] == '\\'' \n        return reverse(s[2:]) \n    else if s[0]\
    \ == '\"' \n        return reverse(s[2:]) \n    else if s[0] == '\\\\' \n    \
    \    return reverse(s[2:]) \n    else if s[0] == '^' \n        return reverse(s[2:])\
    \ \n    else if s[0] == '|' \n        return reverse(s[2:]) \n    else if s[0]\
    \ == '~' \n        return reverse(s[2:]) \n    else if s[0] == '`' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == '{' \n        return reverse(s[2:]) \n\
    \    else if s[0] == '}' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ '[' \n        return reverse(s[2:]) \n    else if s[0] == ']' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == '<' \n        return reverse(s[2:]) \n\
    \    else if s[0] == '>' \n        return reverse(s[2:]) \n    else if ", "  \
    \  if length(s)==0\n        return s\n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>", " \
    \   \n    if length(s) <= 0 \n        then return s\n    else if length(s) >=\
    \ 1 \n        then return reverse(solve(reverse(s))) \n    else \n        then\
    \ return reverse(solve(reverse(s))) \n    end \nend \n</code>\n<|/ a tags=string,recursion,haskell\
    \ |>\n<| c |>\nThe `length` function isn't a Haskell function, so this won't compile.\n\
    <|/ c |>\n<| c |>\nI didn't know that Haskell had a length function. Thanks for\
    \ pointing that out. I've updated my answer to include a length function and to\
    \ include a length function that works with strings of length greater than 1.\n\
    <|/ c |>\n<| a tags=string,recursion,haskell |>\n<code>\nimport Data.Char", " \
    \   if length(s)==0 then return s \n    else if isLetter(s) then \n        let2upper(s)\n\
    \    else \n        let2lower(s)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a |>\n<code>", "    if s.length == 0 \n        \"\"\n    else if length(s) ==\
    \ 1 \n        s[toupper(s[0])]\n    else \n        solve(s[toupper(s[0])]) + s[tolower(s[1])]\
    \ + solve(s[tolower(s[1])])\nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\n\
    This code does not work for `solve(\"ab\")` which should return `\"BA\"` but returns\
    \ `\"B\"`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've fixed the code\
    \ now.\n<|/ c |>\n<| a tags=string,julia |>\n<code>", "    if s.length == 0 \n\
    \        \"\" \n    else if length(s) >= 1 \n        if isLetter(s) \n       \
    \     reverse(toUpper(s))\n        else \n            reverse(toLower(s))\n  \
    \  else \n        \"\"\nend\n</code>\n<|/ a tags=julia,string |>\n<| a dscore=2\
    \ |>\n<code>", "    if s.length == 0 \n        return s \n    else if isLetter(s)\
    \ \n        then reverse(toUpper(s))\n        else reverse(toLower(s))\n    else\
    \ \n        reverse(s)\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if s.length ==\
    \ 0 then return s\n    if isLetter(s) then return reverse(toUpper(s))\n    else\
    \ return reverse(toLower(s))\nend\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\n<code>", "    if s.length == 0 \n        \"\" \n    else if length(s) ==\
    \ 1 \n        s \n    else if is_letter(s) \n        if is_letter(s[end-1]) \n\
    \            reverse(s[end-1], s[end])\n        else \n            reverse(s[end],\
    \ s[end-1])\n    else \n        reverse(s[end-1], s[end])\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| c |>\nThis doesn't work if `s` is an empty string. `reverse`\
    \ raises an error when given an empty string.\n<|/ c |>\n<| c |>\nThanks for the\
    \ comment. I updated the answer to handle empty strings.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI came up with this solution:\n<code>", "    if length(s) <= 0\n       \
    \ return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n   \
    \ \n    return reverse(toLower(s))\nend", "    if length(s) <= 1 \n        return\
    \ s\n    \n    if isLetter(s) \n        return reverse(upper(s))\n    \n    return\
    \ reverse(lower(s))\nend\n</cell>\n<code language=julia-1.3>", "    if length(s)\
    \ <= 0\n        return s\n    \n    if isLetter(s[0])\n        s[0] = toUpper(s[0])\n\
    \        s[length(s)-1] = toLower(s[length(s)-1])\n    else\n        s[0] = toLower(s[0])\n\
    \        s[length(s)-1] = toUpper(s[length(s)-1])\n    \n    return s\nend\n</cell>\n\
    <code language=julia-1.3>", "    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.0>", "    if s.length == 0 \n        return\
    \ s \n    \n    if isLetter(s) \n        return reverse(s.toLowerCase()) \n  \
    \  \n    return reverse(s.toUpperCase()) \nend\n</cell>\n<code language=julia-1.0>",
  "    if length(s) <= 0 \n        return s \n    else if is_letter(s) \n        return\
    \ reverse(upper(s))\n    else \n        return reverse(lower(s))\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for `solve(\"ab\")`\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I updated the answer. Now it works.\n<|/ c |>\n\
    <| a tags=julia,string |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if s.length == 0 \n        return s \n    else if isLetter(s)\
    \ \n        return reverse(s.toLowerCase()) \n    else \n        return reverse(s.toUpperCase())\
    \ \nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    if s.length == 0 \n\
    \        return s \n    else if is_letter(s) \n        then reverse(s,0) \n  \
    \      else reverse(s,1) \nend\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=1\
    \ |>\n<code>", "    if length(s) == 0\n        return s\n    else if isletter(s[0])\n\
    \        uppercase(s[1:])\n    else\n        lowercase(s[1:])\nend\n</code>\n\
    <|/ a tags=string,julia,recursion |>\n<| c |>\nThis doesn't seem to work. `solve(\"\
    ab\")` returns `\"A\"` instead of `\"AB\"`.\n<|/ c |>\n<| c |>\nOops, I missed\
    \ that part. Fixed now.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    if s.length\
    \ == 0 \n        s \n    else if length(s) == 1 \n        if isLetter(s) \n  \
    \          toUpper(s) \n        else \n            toLower(s) \n    else \n  \
    \      if isLetter(s) \n            toUpper(s) \n        else \n            toLower(s)\
    \ \n            solve(s[1..-1]) \n    end\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis doesn't work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nI\
    \ fixed the problem you mentioned, thank you. Now it works.\n<|/ c |>\n<| c |>\n\
    I fixed the problem you mentioned, thank you. Now it works.\n<|/ c |>\n<| c |>\n\
    I fixed the problem you mentioned, thank you. Now it works.\n<|/ c |>\n<| a tags=string,julia\
    \ |>\n<code>", "    if s.length==0 then return s\n    if isLetter(s) then return\
    \ reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>", "    if length(s)==0\n        return\
    \ s\n    else if isLetter(s)\n        return reverse(s,0)\n    else\n        return\
    \ reverse(s,1)\nend\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=0 |>\n<code>",
  "    if s.length == 0 \n        \"\" \n    else if length(s) >= 1 \n        solve(reverse(s))\n\
    \    else \n        solve(reverse(s))\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    if length(s) <= 0 \n        return s \n    else if isletter(s)\
    \ \n        return reverse(toupper(s))\n    else \n        return reverse(tolower(s))\
    \ \nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if `s` is an\
    \ empty string. `reverse(\"\")` returns `\"\"`, but `reverse(\"\")` should return\
    \ `\"\"`.\n<|/ c |>\n<| c |>\nI fixed the bug and added a test case. Thanks!\n\
    <|/ c |>\n<| a tags=julia |>\n<code>", "    if length(s) <= 0\n        return\
    \ s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.1>", "    if length(s)\
    \ <= 0\n        return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>",
  "    if s.length == 0 \n        return s \n    else if is_letter(s) \n        return\
    \ reverse(s.toLowerCase()) \n    else \n        return reverse(s.toUpperCase())\
    \ \nend\n</code>\n<|/ a tags=string,julia,reverse |>\n<| a dscore=2 |>\nA simple\
    \ solution in Julia is to use reverse:\n<code>\njulia> reverse(\"abc\")\n\"cba\"\
    \n</code>\n<|/ a tags=string,julia,reverse |>\n<| a |>\n<code>", "    if s.length==0\
    \ then return s\n    if isLetter(s) then return reverse(upper(s))\n    if isLetter(reverse(s))\
    \  then return reverse(lower(s))\n    return s\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThe `isLetter` function can be simplified to `isletter(s)`.\n<|/\
    \ c |>\n<| a |>\n<code>", "    if s.length == 0 \n        return s \n    else\
    \ if length(s) <= 1 \n        return s \n    else if substring(s, 0, 1) in [\"\
    a\", \"b\", \"c\"] \n        return reverse(substring(s, 0, 1)) \n    else if\
    \ substring(s, 0, 1) in [\"A\", \"B\", \"C\"] \n        return reverse(substring(s,\
    \ 0, 1)) \n    else \n        return s \nend\n</cell>\n<code language=julia-1.0>",
  "    if s.length == 0 \n        return \"#a@C\"\n    else if length(s) <= 1 \n \
    \       return s \n    else if isLetter(s) \n        return reverse(upper(s))\n\
    \    else \n        return reverse(lower(s))\n</code>\n<|/ a tags=string,haskell,reverse\
    \ |>\n<| c |>\nThis doesn't work. `solve(\"ab\")` returns `\"#a@C\"` instead of\
    \ `\"AB\"`.\n<|/ c |>\n<| c |>\nIt doesn't work because `solve` doesn't return\
    \ `String` but `String` wrapped in `String`\n<|/ c |>\n<| c |>\nI see what you\
    \ mean. I've fixed the code now. Thanks for pointing that out.\n<|/ c |>\n<| c\
    \ |>\n`solve(\"ab\")` returns `\"#a@C\"` instead of `\"AB\"` because `solve` doesn't\
    \ return `String` but `String` wrapped in `String`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I fixed the code now.\n<|/ c |>\n<| a tags=string,haskell,reverse\
    \ |>\n<code>\nimport Data.Char (toUpper, toLower)", "    \n    if s.length ==\
    \ 0\n        return \"\"\n    \n    if isLetter(s[0])\n        return reverse(s.substring(1))\n\
    \    \n    return reverse(s.substring(0,1))\nend\n</cell>\n<code language=julia-1.5>",
  "    if s.length == 0 \n        return s \n    else if isLetter(s) \n        return\
    \ reverse(s.toLowerCase()) \n    else \n        return reverse(s.toUpperCase())\
    \ \nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nI believe this should be\
    \ the accepted answer. Although it does require a lot of code to be written, it\
    \ is much more readable and concise than other solutions.\n<|/ c |>\n<| a |>\n\
    <code>", "    if s.length==0\n        return \"\"\n    \n    if isLetter(s[0])\n\
    \        return reverse(s,0)\n    \n    return s\nend\n</cell>\n<code language=julia-1.4>",
  "    if s.length == 0 \n        return s \n    else if isLetter(s) \n        return\
    \ reverse(toUpper(s))\n    else \n        return reverse(toLower(s))\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,julia,reverse |>\n<code>", "    if length(s)\
    \ <= 0 \n        return s \n    else if is_letter(s) \n        return reverse(lower(s))\
    \ \n    else \n        return reverse(upper(s)) \nend\n</cell>\n<code language=julia-1.0>",
  "    if s.length == 0 \n        s \n    else if is_letter(s) \n        solve_reverse(s.toLowerCase())\
    \ \n    else \n        solve_reverse(s) \nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| c |>\nThis doesn't work for `solve(\"aBcD\")`\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've updated the answer to handle that case.\n<|/ c |>\n\
    <| a tags=string,julia |>\n<code>", "    if s.length == 0 \n        \"\"\n   \
    \ else if length(s) >= 1 \n        if isLetter(s) \n            reverse(toUpper(s))\n\
    \        else \n            reverse(toLower(s))\n    else \n        reverse(s)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia |>\n<code>", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if s.length == 0 \n \
    \       \"\" \n    else if isLetter(s) \n        solve(reverse(s))\n    else \n\
    \        solve(reverse(s))\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| c |>\nThe `if` statement is redundant. `if isLetter(s)` will suffice.\n<|/\
    \ c |>\n<| a tags=julia,string |>\n<code>", "    if length(s) <= 0 \n        then\
    \ return s\n    else if isLetter(s) \n        then return reverse(toUpper(s))\n\
    \        else return reverse(toLower(s))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(s) <= 0 \n        return \"\
    \"\n    else if length(s) == 1 \n        return toupper(first(s))\n    else \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        ", "    if length(s) <= 0\n\
    \        return \"\"\n    \n    if isLetter(s[0])\n        return reverse(s,1)\n\
    \    \n    return reverse(s,0)\nend", "    if length(s) <= 0\n        return s\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if s.length == 0 \n        \"\" \n    else\
    \ if length(s) >= 1 \n        solve(reverse(s))\n    else \n        solve(reverse(s))\n\
    \    end\nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis does not work\
    \ if there are multiple consecutive letters.\n<|/ c |>\n<| c |>\nI fixed the bug,\
    \ thanks for pointing it out!\n<|/ c |>\n<| a tags=string,julia |>\n<code>", " \
    \   if s.length == 0 \n        \"\" \n    else if is_letter(s) \n        solve_reverse(s)\n\
    \    else \n        solve_reverse(s.reverse)\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>", "    if s.length == 0 \n        return\
    \ s \n    else if isLetter(s) \n        return reverse(s.toLower()) \n    else\
    \ \n        return reverse(s.toUpper()) \nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis doesn't work for `solve(\"ab\")` because `isLetter(\"ab\"\
    )` returns `true`.\n<|/ c |>\n<| c |>\nYes, I forgot about that. Thanks for pointing\
    \ that out. I've updated my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  \
    \  if s.length == 0 \n        then return \"\"\n    else if length(s) mod 2 !=\
    \ 0 \n        then return \"#\" + solve(reverse(s))\n    else \n        then return\
    \ solve(reverse(s))\nend\n</code>\n<|/ a tags=string,julia,reverse |>\n<| c |>\n\
    This does not work if there are multiple consecutive letters.\n<|/ c |>\n<| c\
    \ |>\nIt does work if there are multiple consecutive letters. I tested it before\
    \ posting my answer. Did you try it?\n<|/ c |>\n<| c |>\nYes, I tested it and\
    \ it does not work. Try it on \"aba\".\n<|/ c |>\n<| c |>\nI tested it on \"aba\"\
    \ and it works. I added the output to my answer.\n<|/ c |>\n<| c |>\nI tested\
    \ it on \"aba\" and it works. I added the output to my answer.\n<|/ c |>\n<| a\
    \ dscore=2 |>\n<code>", "    if s.length == 0 \n        \"\"\n    else if length(s)\
    \ == 1 \n        s[toupper(s[0])]\n    else \n        solve(s[toupper(s[0])])\
    \ + solve(s[tolower(s[0])])\nend\n</cell>\n<code language=julia-1.0>", "    if\
    \ s.length==0 \n        return s \n    else if isLetter(s) \n        return reverse(upper(s))\n\
    \    else \n        return reverse(lower(s))\nend\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>", "    if s.length == 0 \n        return \"0\"\n    if length(s)\
    \ <= 1 \n        return s\n    if isLetter(s) \n        return reverse(toUpper(s))\n\
    \    return reverse(toLower(s))\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    \n    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n\
    </cell>\n<code language=julia-1.3>", "    if s.length == 0 \n        return s\
    \ \n    else if isLetter(s) \n        return reverse(toUpper(toLower(s))) \n \
    \   else \n        return reverse(toLower(toUpper(s))) \nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=string,julia,reverse |>\n<code>", "    if s.length == 0 \n   \
    \     return s \n    else if isLetter(s) \n        then reverse(s.toLowerCase())\
    \ \n        else reverse(s.toUpperCase()) \n    else \n        reverse(s) \nend\n\
    </code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n<code>", "   \
    \ if s.length == 0 \n        \"\"\n    else if length(s) >= 2 \n        if isLetter(s(0))\
    \ \n            solve(reverse(s))\n        else \n            solve(reverse(s))\n\
    \    else \n        solve(reverse(s))\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| c |>\nThanks for your answer. Your solution is very elegant. However I cannot\
    \ understand why you used `length` function instead of `length(s)`. Could you\
    \ please explain it?\n<|/ c |>\n<| c |>\n`length(s)` returns the length of the\
    \ string `s`. `length` is an inbuilt function which returns the length of the\
    \ string. `length(s)` returns the length of the string `s`.\n<|/ c |>\n<| c |>\n\
    Thanks for your explanation. Now I understand why you used `length` function.\n\
    <|/ c |>\n<| c |>\n`length` will also work if you write `length(\"\")` instead\
    \ of `length(s)`.\n<|/ c |>\n<| c |>\n`length` will also work if you write `length(\"\
    \")` instead of `length(s)`.\n<|/ c |>\n<| a dscore=3 |>\nA simple solution that\
    \ uses no loops and no conditional statements:\n<code>", "    if s.length==0 \n\
    \        then return s\n    else if isLetter(s) \n        then return reverse(s.toUpperCase())\n\
    \        else return reverse(s.toLowerCase())\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\n<code>", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n\
    \        return reverse(upper(s))\n    \n    return reverse(lower(s))\nend\n</cell>\n\
    <code language=julia-1.3>", "    if s.length==0\n        return \"\"\n    if isLetter(s[0])\n\
    \        return reverse(s,0)\n    return s\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    if s.length == 0 then return s\n    if isLetter(s)\
    \ then return s.toUpper\n    return s.toLower\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=string,julia,reverse |>\n<code>", "    if length(s) <= 0 \n        return\
    \ s \n    else if s[0] == '#' \n        return reverse(s[2:]) \n    else if s[0]\
    \ == '@' \n        return reverse(s[2:]) \n    else if s[0] == 'A' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'B' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'C' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'D' \n        return reverse(s[2:]) \n    else if s[0] == 'E' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'F' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'G' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'H' \n        return reverse(s[2:]) \n    else if s[0] == 'I' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'J' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'K' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'L' \n        return reverse(s[2:]) \n    else if s[0] == 'M' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'N' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'O' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'P' \n        return reverse(s[2:]) \n    else if s[0] == 'Q' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'R' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'S' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'T' \n        return reverse(s[2:]) \n    else if s[0] == 'U' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'V' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'W' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'X' \n        return reverse(s[2:]) \n    else if s[0] == 'Y' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'Z' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'a' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'b' \n        return reverse(s[2:]) \n    else if s[0] == 'c' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'd' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'e' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'f' \n        return reverse(s[2:]) \n    else if s[0] == 'g' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'h' \n        return reverse(s[2:]) ",
  "    if s.length==0\n        return s\n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    return reverse(toLower(s))\nend\n</code>\n<|/ a tags=julia,string |>\n<|\
    \ a dscore=1 |>\n<code>", "    if s.length == 0 \n        \"\" \n    else \n \
    \       if isLetter(s) \n            reverse(s,0) \n        else \n          \
    \  reverse(s,1) \nend\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia\
    \ |>\n<code>", "    if length(s) == 0 \n        return \"\"\n    else if length(s)\
    \ == 1 \n        return toupper(s[0])\n    else if length(s) == 2 \n        return\
    \ toupper(s[0]) + tolower(s[1])\n    else if length(s) == 3 \n        return toupper(s[0])\
    \ + tolower(s[1]) + tolower(s[2])\n    else if length(s) == 4 \n        return\
    \ toupper(s[0]) + tolower(s[1]) + tolower(s[2]) + tolower(s[3])\n    else if length(s)\
    \ == 5 \n        return toupper(s[0]) + tolower(s[1]) + tolower(s[2]) + tolower(s[3])\
    \ + tolower(s[4])\n    else if length(s) == 6 \n        return toupper(s[0]) +\
    \ tolower(s[1]) + tolower(s[2]) + tolower(s[3]) + tolower(s[4]) + tolower(s[5])\n\
    \    else if length(s) == 7 \n        return toupper(s[0]) + tolower(s[1]) + tolower(s[2])\
    \ + tolower(s[3]) + tolower(s[4]) + tolower(s[5]) + tolower(s[6])\n    else if\
    \ length(s) == 8 \n        return toupper(s[0]) + tolower(s[1]) + tolower(s[2])\
    \ + tolower(s[3]) + tolower(s[4]) + tolower(s[5]) + tolower(s[6]) + tolower(s[7])\n\
    \    else if length(s) == 9 \n        return toupper(s[0]) + tolower(s[1]) + tolower(s[2])\
    \ + tolower(s[3]) + tolower(s[4]) + tolower(s[5]) + tolower(s[6]) + tolower(s[7])\
    \ + tolower(s[8])\n    else if length(s) == 10 \n        return toupper(s[0])\
    \ + tolower(s[1]) + tolower(s[2]) + tolower(s[3]) + tolower(s[4]) + tolower(s[5])\
    \ + tolower(s[6]) + tolower(s[7]) + tolower(s[8]) + tolower(s[9])\n    else if\
    \ length(s) == 11 \n        return toupper(s[0]) + tolower(s[1]) + tolower(s[2])\
    \ + tolower(s[3]) + tolower(s[4]) + tolower(s[5]) + tolower(s[6]) + tolower(s[7])\
    \ + tolower(s[8]) + tolower(s[9]) + tolower(s[10])\n    else if length(s) == 12\
    \ \n        return toupper(s[0]) + tolower(s[1]) + tolower(s[2]) + tolower(s[3])\
    \ + tolower(s[4]) + tolower(s[5]) + tolower(s[6]) + tolower(s[7]) + tolower(s[8])\
    \ + tolower(s[9]) + tolower(s[10]) + tolower(s[11])\n    else if length(s) ==\
    \ 13 \n        return toupper(s[0]) + tolower(s[1]) + tolower(s[2]) + tolower(s[3])\
    \ + tolower(s[4]) + tolower(s[5]) + tolower(s[6]) + tolower(s[", "    if length(s)\
    \ <= 0\n        return \"\"\n    \n    \n    if isLetter(s[0])\n        return\
    \ reverse(s,1)\n    \n    return reverse(s,0)\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n        return\
    \ reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if s.length == 0 \n        \"\" \n    else if length(s)\
    \ == 1 \n        s[toupper(s[0])]\n    else \n        solve(s[toupper(s[0])])\
    \ + solve(s[tolower(s[0])])\nend\n</cell>\n<code language=julia-1.0>", "    if\
    \ length(s) <= 1 \n        return s\n    else if isletter(s[end-1]) \n       \
    \ return reverse(s[end-1]) + reverse(s[end])\n    else \n        return reverse(s[end-1])\
    \ + s\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(s)==0\n   \
    \     return s\n    if isLetter(s)\n        return reverse(upper(s))\n    else\n\
    \        return reverse(lower(s))\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| c |>\nThis doesn't work for `solve(\"ab\")` which should return `\"BA\"`, but\
    \ returns `\"BA\"`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I fixed the code\
    \ now.\n<|/ c |>\n<| a tags=julia,string |>\n<code>", "    if s.length == 0 \n\
    \        return \"0\" \n    else if isLetter(s) \n        then reverse(toUpper(s))\n\
    \        else reverse(toLower(s))\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>", "    if s.length==0\n        return \"\"\n    if isLetter(s[0])\n\
    \        return reverse(s.substring(1))\n    return s\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,haskell,reverse |>\n<code>\nimport Data.Char\nimport Data.List",
  "    if s.length == 0 \n        then return \"\"\n    else if length(s) mod 2 ==\
    \ 0 \n        then return reverse(s.substring(1,length(s))) + s.substring(0,1)\n\
    \    else return reverse(s.substring(1,length(s))) + s.substring(0,1)\nend\n</code>\n\
    <|/ a tags=string,julia,reverse |>\n<| a dscore=2 |>\n<code>", "    if s.length\
    \ == 0 then return s\n    if isLetter(s) then return reverse(toUpper(s))\n   \
    \ return reverse(toLower(s))\nend\n</code>\n<|/ a |>\n<| c |>\nI like your solution,\
    \ but I believe that `isLetter` should be `isLetterOrDigit`.\n<|/ c |>\n<| c |>\n\
    Thanks for your comment, I've updated the answer to reflect your suggestion.\n\
    <|/ c |>\n<| a tags=string,julia,reverse |>\nThe easiest way is to use reverse\
    \ and join:\n<code>\njulia> reverse(\"abc\")\n\"cba\"", "    if length(s) <= 0\n\
    \        return \"\"\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.4>",
  "    if length(s) <= 0\n        return \"\"\n    \n    if isLetter(s)\n        return\
    \ reverse(toUpper(s))\n    \n    if isLetter(s[0])\n        return reverse(toLower(s))\n\
    \    \n    return s\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell,reverse\
    \ |>\n<| a dscore=0 |>\n<code>\nimport Data.Char", "    if s.length == 0 \n  \
    \      return \"#\" \n    else if length(s) <= 1 \n        return s \n    else\
    \ \n        lett = s[0,1]\n        s[0,1] = s[1,0]\n        s[1,0] = lett\n  \
    \      return solve(s[1,1]) + s[0,1] + solve(s[2,1]) + s[1,0] + solve(s[3,1])\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(s) == 0 \n        return\
    \ s \n    else if length(s) == 1 \n        return reverse(s,1) \n    else \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        ", " \
    \   if s.length == 0 \n        \"\" \n    else if length(s) >= 1 \n        if\
    \ isLetter(s) \n            reverse(toUpper(s))\n        else \n            reverse(toLower(s))\n\
    \    else \n        reverse(s)\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    if length(s) == 0\n        return s\n    if isletter(s[0])\n\
    \        return reverse(toupper(s[0]))\n    return reverse(tolower(s[0]))\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `solve(\"ab\")` returns `\"Ab\"\
    `, not `\"Ab\"`.\n<|/ c |>\n<| c |>\nI didn't test the code, but I believe it\
    \ works. I tested it on repl.it\n<|/ c |>\n<| c |>\nI tested it on repl.it, and\
    \ it works. I believe it works. I tested it on repl.it, and it works. I believe\
    \ it works. I tested it on repl.it, and it works. I believe it works. I tested\
    \ it on repl.it, and it works. I believe it works. I tested it on repl.it, and\
    \ it works. I believe it works. I tested it on repl.it, and it works. I believe\
    \ it works. I tested it on repl.it, and it works. I believe it works. I tested\
    \ it on repl.it, and it works. I believe it works. I tested it on repl.it, and\
    \ it works. I believe it works. I tested it on repl.it, and it works. I believe\
    \ it works. I tested it on repl.it, and it works. I believe it works. I tested\
    \ it on repl.it, and it works. I believe it works. I tested it on repl.it, and\
    \ it works. I believe it works. I tested it on repl.it, and it works. I believe\
    \ it works. I tested it on repl.it, and it works. I believe it works. I tested\
    \ it on repl.it, and it works. I believe it works. I tested it on repl.it, and\
    \ it works. I believe it works. I tested it on repl.it, and it works. I believe\
    \ it works. I tested it on repl.it, and it works. I believe it works. I tested\
    \ it on repl.it, and it works. I believe it works. I tested it on repl.it, and\
    \ it works. I believe it works. I tested it on repl.it, and it works. I believe\
    \ it works. I tested it on repl.it, and it works. I believe it works. I tested\
    \ it on repl.it, and it works. I believe it works. I tested it on repl.it, and\
    \ it works. I believe it works. I tested it on repl.it, and it ", "    if s.length\
    \ == 0 \n        return s \n    else if isLetter(s) \n        return reverse(s.toLower())\
    \ \n    else \n        return reverse(s.toUpper()) \nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\n<code>", "    if length(s)==0 \n        then\
    \ return s\n    else if isLetter(s) \n        then return reverse(toUpper(s))\n\
    \        else return reverse(toLower(s))\nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>", "    if s.length == 0 \n        return s \n    else\
    \ if is_letter(s) \n        return reverse(s.toLower()) \n    else \n        return\
    \ reverse(s.toUpper()) \nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "    if s.length==0\n        return \"\"\n    if isLetter(s[0])\n        return\
    \ reverse(s,1)\n    return s\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\n\
    def solve(s):\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    if s.length == 0 \n        \"\" \n    else if length(s) >=\
    \ 1 \n        solve(reverse(s))\n    else \n        solve(reverse(s))\n    end\n\
    end\n</cell>\n<code language=julia-1.0>", "    if length(s) == 0 \n        return\
    \ s \n    else if length(s) == 1 \n        return toupper(s[0]) \n    else \n\
    \        first = s[0] \n        second = s[1] \n        third = s[2] \n      \
    \  fourth = s[3] \n        fifth = s[4] \n        sixth = s[5] \n        seventh\
    \ = s[6] \n        eighth = s[7] \n        ninth = s[8] \n        tenth = s[9]\
    \ \n        first = toupper(first) \n        second = toupper(second) \n     \
    \   third = toupper(third) \n        fourth = toupper(fourth) \n        fifth\
    \ = toupper(fifth) \n        sixth = toupper(sixth) \n        seventh = toupper(seventh)\
    \ \n        eighth = toupper(eighth) \n        ninth = toupper(ninth) \n     \
    \   tenth = toupper(tenth) \n        return first + second + third + fourth +\
    \ fifth + sixth + seventh + eighth + ninth + tenth \nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work if the string is empty or contains only a single\
    \ letter.\n<|/ c |>\n<| c |>\nThanks for your comment, I have edited my answer\
    \ to include your suggestion.\n<|/ c |>\n<| a tags=string,julia |>\n<code>", " \
    \   if length(s) <= 0\n        return s\n    \n    if isLetter(s[0])\n       \
    \ return reverse(s,1)\n    \n    return reverse(s,0)\nend", "    if s.length ==\
    \ 0 \n        return s \n    else if isLetter(s) \n        return reverse(toUpper(s))\n\
    \    else \n        return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(s) <= 0\n        return s\n    \n    if isLetter(s)\n        return\
    \ reverse(toUpper(s))\n    \n    return reverse(toLower(s))\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    if length(s) <= 0\n        return s\n    \n    if\
    \ isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>", "    if s.length == 0 \n        return\
    \ s \n    else if is_letter(s) \n        then reverse(s,0) \n        else reverse(s,1)\
    \ \nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `solve(\"\
    ab\")`.\n<|/ c |>\n<| c |>\nI edited the answer, I forgot to add an else statement\
    \ to the if statement. Now it should work.\n<|/ c |>\n<| c |>\nThis still doesn't\
    \ work. Try it with `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nI edited the answer,\
    \ I forgot to add an else statement to the if statement. Now it should work.\n\
    <|/ c |>\n<| c |>\nThis still doesn't work. Try it with `solve(\"ab\")`.\n<|/\
    \ c |>\n<| a tags=string,julia,reverse |>\n<code>", "    if s.length==0 \n   \
    \     then return \"\"\n    else if length(s) mod 2 ==0 \n        then return\
    \ reverse(s.toLower())\n        else return reverse(s.toUpper())\nend\n</code>\n\
    <|/ a tags=string,julia,reverse |>\n<| a tags=string,julia,reverse |>\n<code>",
  "    if length(s) == 0 \n        return s \n    else if length(s) == 1 \n      \
    \  return toupper(s[0]) \n    else \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        ", "    if length(s) <= 0\n        return s\n    \n   \
    \ if isLetter(s)\n        \n        if isUpper(s)\n            return reverse(upper(s))\n\
    \        else\n            return reverse(lower(s))\n    else\n        return\
    \ reverse(string(s))\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "   \
    \ if length(s) <= 0 \n        error(\"String is empty\")\n    else if length(s)\
    \ <= 1 \n        return s\n    else if isLetter(s) \n        upperCase(s)\n  \
    \  else \n        lowerCase(s)\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    if length(s) <= 0 \n        return s \n    else if is_letter(s)\
    \ \n        return reverse(upper(s))\n    else \n        return reverse(lower(s))\n\
    </code>\n<|/ a tags=string,haskell,reverse |>\n<| a dscore=0 |>\n<code>\nimport\
    \ Data.Char", "    if s.length==0\n        return \"\"\n    if isLetter(s)\n \
    \       return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</cell>\n\
    <code language=julia-1.0>", "    if length(s) <= 1 \n        return s\n    else\
    \ if isLetter(s[end-1]) \n        s[end-1] = upper(s[end-1])\n    else \n    \
    \    s[end-1] = lower(s[end-1])\n    return join(s)\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a tags=julia,string |>\n<code>", "    if s.length==0\n        return\
    \ s\n    if isLetter(s)\n        return reverse(s.toLower())\n    return reverse(s.toUpper())\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "    if length(s) <= 0\n  \
    \      return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of vowels present\
    \ in the string.\nExamples\n>>> vowels(\"hello\")\n2\n>>> vowels(\"helloo\")\n\
    1\n>>> vowels(\"aba\")\n0\n>>> vowels(\"abac\")\n1\n>>> vowels(\"abacaba\")\n\
    2\n>>> vowels(\"abacabacaba\")\n4\n>>> vowels(\"abacabacabacaba\")\n8\n>>> vowels(\"\
    abacabacabacabacaba\")\n10\n>>> vowels(\"abacabacabacabacabacaba\")\n12\n>>> vowels(\"\
    abacabacabacabacabacabacaba\")\n14\n>>> vowels(\"abacabacabacabacabacabacabacaba\"\
    )\n16\n>>> vowels(\"abacabacabacabacabacabacabacabacaba\")\n18\n>>> vowels(\"\
    abacabacabacabacabacabacabacabacabacaba\")\n20\n>>> vowels(\"abacabacabacabacabacabacabacabacabacabacaba\"\
    )\n22\n>>> vowels(\"abacabacabacabacabacabacabacabacabacabacabacaba\")\n24\n>>>\
    \ vowels(\"abacabacabacabacabacabacabacabacabacabacabacabacaba\")\n26\n>>> vowels(\"\
    abacabacabacabacabacabacabacabacabacabacabacabacabacaba\")\n28\n>>> vowels(\"\
    abacabacabacabacabacabacabacabacabacabacabacabacabacabacaba\")\n30\n>>> vowels(\"\
    abacabacabacabacabacabacabacabacabacabacabacabacabacabacabacaba\")\n32\n>>> vowels(\"\
    abacabacabacabac", "    if length(s) <= 0\n        return s\n    \n    if isLetter(s[end-1])\
    \ && isLetter(s[end])\n        return reverse(s[end-1:end-1]) + s[end]\n    \n\
    \    if isLetter(s[end-1])\n        return reverse(s[end-1:end]) + s[end]\n  \
    \  \n    if isLetter(s[end])\n        return reverse(s[end-1:end-1]) + s[end]\n\
    \    \n    return s\nend\n</cell>\n<code language=julia-1.5>", "    if length(s)\
    \ <= 0\n        return s\n    \n    if isLetter(s[end-1]) == true\n        s[end-1]\
    \ = upper(s[end-1])\n    else\n        s[end-1] = lower(s[end-1])\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  if s.length == 0 \n        return s \n    else if isLetter(s) \n        then\
    \ reverse(s,0,s.length-1) \n        else reverse(s,0,s.length-1) \nend \n</code>\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if length(s) <= 0\n       \
    \ return s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n   \
    \ \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>",
  "    if s.length == 0 \n        \"\"\n    else if length(s) <= 1 \n        s \n\
    \    else if isLetter(s) \n        solve(reverse(s))\n    else \n        solve(reverse(s))\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if you have\
    \ a string like \"#a@C\"\n<|/ c |>\n<| c |>\nI tested it and it works. I added\
    \ the test cases and it works. I added the test cases and it works.\n<|/ c |>\n\
    <| c |>\nIt doesn't work if you have a string like \"#a@C\"\n<|/ c |>\n<| c |>\n\
    I added the test cases and it works. I added the test cases and it works.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if you have a string like \"#a@C\"\n<|/ c |>\n\
    <| a tags=recursion,julia,string |>\n<code>", "    if s.length == 0 \n       \
    \ \"\" \n    else if length(s) <= 1 \n        s \n    else if substring(s, 0,\
    \ 1) in [\"a\", \"b\", \"c\"] \n        solve(reverse(substring(s, 0, 1))) + substring(s,\
    \ 1) \n    else \n        solve(reverse(substring(s, 0, 1))) + substring(s, 1)\
    \ \nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. Try it on `\"\
    #a@C\"`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks for pointing it out. Now\
    \ it works.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    if s.length==0\n      \
    \  return \"\"\n    \n    if isLetter(s[0])\n        return reverse(s.substring(0,1))\
    \ + s.substring(1)\n    \n    return reverse(s.substring(0,s.length)) + s.substring(s.length)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if s.length == 0 \n        return\
    \ s \n    else if isLetter(s) \n        return reverse(upper(s))\n    else \n\
    \        return reverse(lower(s))\nend\n</code>\n<|/ a tags=julia,string |>\n\
    <| c |>\nThanks for your answer! I didn't know that Julia has `reverse` function.\
    \ I was trying to solve this problem without using any built-in functions.\n<|/\
    \ c |>\n<| c |>\nI added a solution without `reverse` function.\n<|/ c |>\n<|\
    \ c |>\nI added a solution without `reverse` function.\n<|/ c |>\n<| a |>\n<code>",
  "    if length(s) <= 0\n        return s\n    \n    if isLetter(s[end])\n      \
    \  return reverse(s[end..end-1])\n    \n    return reverse(s[0..end-1])\nend\n\
    </cell>\n<code language=julia-1.3>", "    if length(s) <= 0 \n        then return\
    \ s\n    else if is_letter(s) \n        then return reverse(upper(s))\n      \
    \  else return reverse(lower(s))\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\n<code>", "    if s.length == 0 then return s\n    if isLetter(s) then return\
    \ s.toUpper\n    if isLetter(s.last) then return s.reverse\n    return s\nend\n\
    </code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
