name: HumanEval_120_maximum
language: jl
prompt: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n \
  \   >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
  \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the array\
  \ will be in the range of [1, 1000].\n        2. The elements in the array will\
  \ be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\
  function maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
  \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
  \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
  \ 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
  \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
  \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\n\
  end\n"
completions: ["    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), k)\n    end\n    return maximum\nend", "    if k > length(arr) \n    \
    \    error(\"k should be less than or equal to length(arr)\") \n    else \n  \
    \      maximum_rec(arr, k, 0) \n    end\nend", "    if k > length(arr)\n     \
    \   return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n       \
    \ if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n     \
    \   else\n            maximum = maximum[i-1:end]\n        end\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n    end\n\
    \    return maximum\nend\nmaximum()", "    if k > length(arr)\n        return\
    \ arr\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       maximum = maximum[i-1:end]\n        end\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 2)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 7)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 10)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 33)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 34)\n", "    if k\
    \ == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(maximum(arr, k-1), k)[end] \n    \
    \    return maximum \nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the numbers in the given array.", "    if k > length(arr)\n     \
    \   return arr\n    else\n        maximum = arr\n        for i in 1:k\n      \
    \      maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n        end\n  \
    \      return maximum\n    end\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the minimum number in a given array.",
  "    if k == 0 \n        return arr\n    else \n        maximum = maximum([maximum,\
    \ arr[k]], k-1)\n        return maximum\nend", "    if k > length(arr)\n     \
    \   return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n       \
    \ if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n     \
    \   else\n            break\n    end\n    return maximum\nend\nmaximum()", " \
    \   if k <= 0\n        throw(ArgumentError(\"k must be positive\"))\n    else\
    \ if length(arr) <= k\n        throw(ArgumentError(\"k must be less than or equal\
    \ to the length of the array\"))\n    else\n        maximum = arr[k-1]\n     \
    \   for i in k+1:length(arr)\n            if arr[i] > maximum\n              \
    \  maximum = arr[i]\n            end\n        end\n        return maximum\n  \
    \  end\nend", "    if k > length(arr)\n        throw(ArgumentError(\"k must be\
    \ less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i\
    \ = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4],\
    \ 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the minimum number in a given array.", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 42)\nmaximum([-", "    if k == 0 \n        return arr\n    else \n     \
    \   maximum = maximum(maximum(arr, k-1), k-1)\n        return maximum.(minimum(maximum,\
    \ k)) + arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum number in a given array of numbers.", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given array.", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr) \n        maximum[i] = maximum(maximum, arr[i])\n\
    \    end\n    return maximum\nend", "    if k > length(arr)\n        return arr\n\
    \    \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] >\
    \ maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n       \
    \     break\n    end\n    return maximum\nend", "    if k > length(arr) \n   \
    \     error(\"k should be less than or equal to the length of the array\")\n \
    \   end\n    maximum = arr\n    for i = k+1:length(arr) \n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n\
    maximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 42)\nmaximum([-3, 2, 1, 2, -1, -2, ", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nmaximum"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
