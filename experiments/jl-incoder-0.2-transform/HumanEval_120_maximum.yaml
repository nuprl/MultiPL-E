name: HumanEval_120_maximum
language: jl
prompt: "\"\"\"\n    Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n \
  \   >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
  \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the array\
  \ will be in the range of [1, 1000].\n        2. The elements in the array will\
  \ be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\
  function maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
  \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
  \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
  \ 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
  \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
  \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\n\
  end\n"
completions: ["    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), k)\n    end\n    return maximum\nend", "    if k > length(arr) \n    \
    \    error(\"k should be less than or equal to length(arr)\") \n    else \n  \
    \      maximum_rec(arr, k, 0) \n    end\nend", "    if k > length(arr)\n     \
    \   return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n       \
    \ if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n     \
    \   else\n            maximum = maximum[i-1:end]\n        end\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n    end\n\
    \    return maximum\nend\nmaximum()", "    if k > length(arr)\n        return\
    \ arr\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       maximum = maximum[i-1:end]\n        end\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 2)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 7)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 10)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 33)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 34)\n", "    if k\
    \ == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(maximum(arr, k-1), k)[end] \n    \
    \    return maximum \nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the numbers in the given array.", "    if k > length(arr)\n     \
    \   return arr\n    else\n        maximum = arr\n        for i in 1:k\n      \
    \      maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n        end\n  \
    \      return maximum\n    end\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the minimum number in a given array.",
  "    if k == 0 \n        return arr\n    else \n        maximum = maximum([maximum,\
    \ arr[k]], k-1)\n        return maximum\nend", "    if k > length(arr)\n     \
    \   return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n       \
    \ if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n     \
    \   else\n            break\n    end\n    return maximum\nend\nmaximum()", " \
    \   if k <= 0\n        throw(ArgumentError(\"k must be positive\"))\n    else\
    \ if length(arr) <= k\n        throw(ArgumentError(\"k must be less than or equal\
    \ to the length of the array\"))\n    else\n        maximum = arr[k-1]\n     \
    \   for i in k+1:length(arr)\n            if arr[i] > maximum\n              \
    \  maximum = arr[i]\n            end\n        end\n        return maximum\n  \
    \  end\nend", "    if k > length(arr)\n        throw(ArgumentError(\"k must be\
    \ less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i\
    \ = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4],\
    \ 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the minimum number in a given array.", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 42)\nmaximum([-", "    if k == 0 \n        return arr\n    else \n     \
    \   maximum = maximum(maximum(arr, k-1), k-1)\n        return maximum.(minimum(maximum,\
    \ k)) + arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum number in a given array of numbers.", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given array.", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr) \n        maximum[i] = maximum(maximum, arr[i])\n\
    \    end\n    return maximum\nend", "    if k > length(arr)\n        return arr\n\
    \    \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] >\
    \ maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n       \
    \     break\n    end\n    return maximum\nend", "    if k > length(arr) \n   \
    \     error(\"k should be less than or equal to the length of the array\")\n \
    \   end\n    maximum = arr\n    for i = k+1:length(arr) \n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n\
    maximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 42)\nmaximum([-3, 2, 1, 2, -1, -2, ", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k should be less than or equal to length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum =\
    \ maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\nend\n\
    maximum()", "    if k == 0 \n        return arr\n    else \n        maximum =\
    \ maximum(maximum(arr, k-1), k-1)\n        return maximum(maximum(arr, k-1), k-1)\
    \ + [maximum(arr, k-1)[k]]\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum number in a given array.", "    if k == 0 \n        return arr \n\
    \    else \n        maximum = maximum(maximum(arr, k-1), k) \n        maximum[end]\
    \ = maximum(arr[end], k) \n        return maximum \nend", "    if k > length(arr)\n\
    \        error(\"k should be less than or equal to length(arr)\")\n    end\n \
    \   maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a positive integer n and returns the number of \n\
    times it appears in the Fibonacci sequence.", "    if k <= 0 || k > length(arr)\n\
    \        throw(ArgumentError(\"k should be in range [0, length(arr)]\"))\n   \
    \ end\n    maximum = arr\n    for i = k - 1 downto 1\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i + 1])\n    end\n    return maximum\nend", "    if k == 0 \n \
    \       return arr\n    \n    maximum = arr[1]\n    \n    for i = 2:k\n      \
    \  if maximum < arr[i]\n            maximum = arr[i]\n        end\n    end\n \
    \   \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum number in a given array of numbers.", "    if k == 0 \n        return\
    \ arr\n    \n    maximum = maximum([arr[k-1], maximum(arr, k-1)], k-1)\n    maximum\
    \ = maximum.(maximum.>arr[k-1] ? maximum : arr[k-1])\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the minimum number in a given array.", "  \
    \  if k > length(arr) \n        throw(ArgumentError(\"k must be less than or equal\
    \ to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        if maximum[i] > maximum[i-1] \n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend", "    if k > length(arr)\n     \
    \   throw(ArgumentError(\"k should be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i] =\
    \ maximum(maximum(maximum, arr[i]), maximum[i])\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n\
    \    for i in (1:k-1)\n        if maximum < arr[i]\n            maximum = arr[i]\n\
    \        end\n    end\n    return maximum\nend", "    if k == 0 \n        return\
    \ arr\n    else \n        maximum = maximum([maximum, arr[k-1]], k-1)\n      \
    \  return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend", "    if k == 0 \n        return\
    \ arr \n    else \n        maximum = maximum([maximum, arr[k]], k - 1) \n    \
    \    return maximum \nend", "    if k == 0 \n        return arr\n    else \n \
    \       maximum = maximum(maximum(arr, k-1), k-1)\n        maximum = maximum(maximum,\
    \ k)\n        return maximum\nend", "    if k == 0 \n        return arr\n    else\
    \ \n        maximum = maximum(maximum(arr, k-1), k-1)\n        maximum[end] =\
    \ maximum(arr[end], k-1)\n        return maximum\nend\n\"\"\"\n    Given an array\
    \ arr of integers and a positive integer k, return a sorted list \n    of length\
    \ k with the minimum k numbers in arr.", "    if k > length(arr) \n        return\
    \ [] \n    else \n        maximum = maximum([maximum(arr, k-1), maximum(arr[k],\
    \ k-1)], k-1) \n        maximum = maximum[1:k] \n        return maximum \nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise\
    \ 2", "    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), i)\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <text>\nmaximum([4, -4, 4], 2)\n    [4, 4]", "    if k == 0 \n        return arr\n\
    \    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n        maximum[end]\
    \ = maximum(maximum[end], maximum(arr, k-1))\n        return maximum\nend\nmaximum([-3,\
    \ -4, 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of all numbers in a\
    \ given array.", "    if k > length(arr) \n        error(\"k should be less than\
    \ or equal to length(arr)\")\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        if maximum[i] > maximum[i-1] \n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend",
  "    if k == 0 \n        return arr\n    else \n        maximum = maximum(k-1, maximum(arr,\
    \ k-1))\n        maximum = maximum.(maximum.>arr[k])\n        return maximum\n\
    end", "    if k == 0 \n        return arr\n    else \n        maximum = maximum([maximum,\
    \ arr[k]], k-1)\n        return maximum\nend", "    if k > length(arr)\n     \
    \   return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n       \
    \ if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n     \
    \   else\n            maximum = maximum[i-1:end]\n        end\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"k must\
    \ be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend", "    maximum = arr\n    for i = 1:k\n    \
    \    maximum = maximum(maximum(maximum, arr), k)\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum =\
    \ maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\nend\n\
    maximum", "    if k <= length(arr)\n        maximum = arr\n    else\n        maximum\
    \ = maximum[end-1:end]\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        error(\"k should be less than or equal to length(arr)\")\n    end\n \
    \   maximum = arr\n    for i = k+1:length(arr)\n        if maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n  \
    \  return maximum\nend\nmaximum() = maximum([], 0)\nmaximum([x]) = [x]\nmaximum([x;\
    \ y]) = maximum(maximum(maximum(x, y), x), y)\nmaximum([x; y; z]) = maximum(maximum(maximum(maximum(x,\
    \ y), z), x), y)\nmaximum([x; y; z; w]) = maximum(maximum(maximum(maximum(maximum(x,\
    \ y), z), w), x), y)\nmaximum([x; y; z; w; x]) = maximum(maximum(maximum(maximum(maximum(maximum(x,\
    \ y), z), w), x), y)\nmaximum([x; y; z; w; x; y]) = maximum(maximum(maximum(maximum(maximum(maximum(x,\
    \ y), z), w), x), y)\nmaximum([x; y; z; w; x; y; z]) = maximum(maximum(maximum(maximum(maximum(maximum(x,\
    \ y), z), w), x), y)\nmaximum([x; y; z; w; x; y; z; w]) = maximum(maximum(maximum(maximum(maximum(maximum(x,\
    \ y), z), w), x), y)\nmaximum([x; y; z; w; x; y; z; w; x]) = maximum(maximum(maximum(maximum(maximum(maximum(x,\
    \ y), z), w), x), y)\nmaximum([x; y; z; w; x; y; z; w; x; y]) = maximum(maximum(maximum(maximum(maximum(maximum(x,\
    \ y), z), w), x), y)\nmaximum([x; y; z; w; x; y; z; w; x; y; z]) = maximum(maximum(maximum(maximum(maximum(maximum(x,\
    \ y), z), w), x), y)\nmaximum([x; y; z; w; x; y; z; w; x; y; z; w]) = maximum(maximum(maximum(maximum(maximum(maximum(x,\
    \ y), z), w), x), y)\nmaximum([x; y; z; w; x; y; z; w; x; y; z; w; x]) = maximum(maximum(maximum(maximum(maximum(maximum(maximum(x,\
    \ y), z), w), x), y), z)\nmaximum([x; y; z; w; x; y; z; w; x; y; z; w; x; y])\
    \ = maximum(maximum(maximum(maximum(maximum(maximum(maximum(x, y), z), w), x),\
    \ y), z)\nmaximum([x; y; z", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to the length of the array\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr) \n        if maximum[i] > maximum[i-1] \n\
    \            maximum = maximum[i-1:end]\n        else\n            break\n   \
    \     end\n    end\n    return maximum\nend", "    if k > length(arr) \n     \
    \   throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n  \
    \  else \n        maximum = arr[1:k]\n        maximum.push( maximum(arr, k+1)\
    \ )\n        return maximum\nend", "    if k <= 0 || k > length(arr)\n       \
    \ throw(ArgumentError(\"k must be in range (0, length(arr))\"))\n    end\n   \
    \ maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), k)\n    end\n\
    \    return maximum\nend\nmaximum()", "    if k > length(arr)\n        return\
    \ arr\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\nmaximum()\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a positive integer k and returns\
    \ a sorted list of length k with the minimum k numbers in arr. \nFor example,\
    \ minimum([-3, -4, 5], 3) should return [-3, -4, 5].", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k should be less than or equal to the length of\
    \ arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if\
    \ maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n\
    \            break\n        end\n    end\n    return maximum\nend", "    if k\
    \ > length(arr)\n        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum(arr[i]) > maximum(maximum(arr[i-k+1:i]))\n            maximum\
    \ = maximum(arr[i-k+1:i])\n        end\n    end\n    return maximum\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([4, -4, 4],\
    \ 2), 1)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array.", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend", "    if k == 0 \n        return\
    \ arr\n    \n    maximum = maximum([maximum(arr, k-1), maximum(arr[k:], k-1)],\
    \ k-1)\n    maximum = maximum.*(maximum>arr[k])\n    maximum = maximum.*(maximum<arr[k])\n\
    \    maximum = maximum.*(maximum==arr[k])\n    maximum = maximum.*(maximum!=arr[k])\n\
    \    maximum = maximum.*(maximum<arr[k])\n    maximum = maximum.*(maximum>arr[k])\n\
    \    maximum = maximum.*(maximum==arr[k])\n    maximum = maximum.*(maximum!=arr[k])\n\
    \    maximum = maximum.*(maximum<arr[k])\n    maximum = maximum.*(maximum>arr[k])\n\
    \    maximum = maximum.*(maximum==arr[k])\n    maximum = maximum.*(maximum!=arr[k])\n\
    \    maximum = maximum.*(maximum<arr[k])\n    maximum = maximum.*(maximum>arr[k])\n\
    \    maximum = maximum.*(maximum==arr[k])\n    maximum = maximum.*(maximum!=arr[k])\n\
    \    maximum = maximum.*(maximum<arr[k])\n    maximum = maximum.*(maximum>arr[k])\n\
    \    maximum = maximum.*(maximum==arr[k])\n    maximum = maximum.*(maximum!=arr[k])\n\
    \    maximum = maximum.*(maximum<arr[k])\n    maximum = maximum.*(maximum>arr[k])\n\
    \    maximum = maximum.*(maximum==arr[k])\n    maximum = maximum.*(maximum!=arr[k])\n\
    \    maximum = maximum.*(maximum<arr[k])\n    maximum = maximum.*(maximum>arr[k])\n\
    \    maximum = maximum.*(maximum==arr[k])\n    maximum = maximum.*(maximum!=arr[k])\n\
    \    maximum = maximum.*(maximum<arr[k])\n    maximum = maximum.*(maximum>arr[k])\n\
    \    maximum = maximum.*(maximum==arr[k])\n    maximum = maximum.*(maximum!=arr[k])\n\
    \    maximum = maximum.*(maximum<arr[k])\n    maximum = maximum.*(maximum>arr[k])\n\
    \    maximum = maximum.*(maximum==arr[k])\n    maximum = maximum.*(maximum!=arr[k])\n\
    \    maximum = maximum.*(maximum<arr[k])\n    maximum = maximum.*(maximum>arr[k])\n\
    \    maximum = maximum.*(maximum==arr[k])\n    maximum = maximum.*(maximum!=arr[k])\n\
    \    maximum = ", "    if k > length(arr)\n        error(\"k should be less than\
    \ or equal to length(arr)\")\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend", "    if k > length(arr) \n        return [] \n    else \n   \
    \     maximum = arr[1:k] \n        maximum.push( maximum(arr, k+1) ) \n      \
    \  return maximum \nend\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1,\
    \ 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4,\
    \ -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4,\
    \ -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4,\
    \ -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4,\
    \ -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4,\
    \ -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4,\
    \ -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)", "    if k == 0 \n        return arr\n    else \n \
    \       maximum = maximum([maximum, arr[k]], k-1)\n        return maximum\nend",
  "    maximum = arr\n    for x in maximum\n        if x > arr[k]\n            maximum[x]\
    \ = arr[k]\n        end\n    end\n    return maximum\nend\n\"\"\"\n    Given an\
    \ array arr of integers and a positive integer k, return a sorted list \n    of\
    \ length k with the minimum k numbers in arr.", "    maximum = arr\n    for i\
    \ = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]), arr[i])\n\
    \    end\n    return maximum\nend", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr) \n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend", "    if k <= 0 || length(arr) <=\
    \ k\n        return arr\n    \n    maximum = arr[k-1]\n    for i = k+1:length(arr)\n\
    \        if arr[i] > maximum\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k should be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            break\n        end\n\
    \    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n       \
    \ throw(ArgumentError(\"k must be less than or equal to the length of arr\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n\"\"\"\n    Given an array\
    \ arr of integers and a positive integer k, return a sorted list \n    of length\
    \ k with the minimum k numbers in arr.", "    maximum = arr\n    maximum = maximum.sort\n\
    \    maximum = maximum[minimum(maximum, k):end]\n    return maximum\nend", " \
    \   if k > length(arr) \n        return arr \n    \n    maximum = arr \n    for\
    \ i = k+1:length(arr) \n        if maximum[i] > maximum[i-1] \n            maximum\
    \ = arr \n            break \n        \n        maximum = maximum(maximum(maximum,\
    \ arr), i) \n    end \n    return maximum \nend ", "    if k > length(arr) \n\
    \        error(\"k should be less than or equal to length(arr)\") \n    else \n\
    \        maximum_rec(arr, k, 0) \n    end\nend", "    if k > length(arr) || k\
    \ < 1 \n        return [] \n    else \n        maximum = maximum(k-1) \n     \
    \   maximum = maximum.(arr) \n        return maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = arr[end] \n        return maximum \nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the minimum number in a given\
    \ array.", "    if k > length(arr)\n        error(\"k must be less than or equal\
    \ to length(arr)\")\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the minimum number in a given array.", "    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to length(arr)\") \n    else\
    \ \n        maximum = arr \n        for i = k+1:length(arr) \n            if maximum[i]\
    \ > maximum[i-1] \n                maximum = arr \n            end\n        end\n\
    \        return maximum \n    end\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nExercise 3\nWrite a function that finds the minimum number\
    \ in a given array of numbers. \nThe function should take an array of numbers\
    \ and an integer k as arguments. \nThe function should return an array of length\
    \ k with the minimum number in arr. \nThe function should return an error if the\
    \ length of arr is less than or equal to k.", "    if k > length(arr)\n      \
    \  return arr\n    \n    maximum = arr[k-1]\n    for i = k+2 to length(arr)\n\
    \        if maximum < arr[i]\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.0>\n\
    maximum(arr, 3)\n</cell>\n<code language=julia-1.0>\nmaximum(arr, 2)\n</cell>\n\
    <code language=julia-1.0>\nmaximum(arr, 1)\n</cell>\n<text>\nExercise 2", "  \
    \  if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(maximum(arr, k-1), k-1)[end]\n  \
    \      return maximum\nend\n\"\"\"\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the minimum k numbers\
    \ in arr.", "    if k > length(arr)\n        throw(ArgumentError(\"k must be less\
    \ than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend",
  "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for i\
    \ = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n \
    \       end\n    end\n    return maximum\nend\n</cell>\n<text>\nmaximum([-3, -4,\
    \ 5], 3)\n</cell>\n<text>\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the minimum number in a given array.", "    if k > length(arr)\n   \
    \     throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       maximum = maximum[i-1:end]\n        end\n    end\n    return maximum\n\
    end", "    if k == 0 \n        return arr \n    else \n        maximum = maximum([maximum(arr,\
    \ k-1), maximum(arr, k-1)], k-2) \n        maximum[end] = maximum(arr[end], k-1)\
    \ \n        return maximum \nend", "    if k > length(arr)\n        return arr\n\
    \    \n    maximum = arr[k-1]\n    for i = k+1:length(arr)\n        if maximum\
    \ < arr[i]\n            maximum = arr[i]\n        end\n    end\n    return maximum\n\
    end\nmaximum", "    if k > length(arr)\n        return arr\n    \n    maximum\
    \ = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum, arr), k)\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum of arr and arr2", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to the length of arr\"))\n    end\n    maximum =\
    \ arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n   \
    \         maximum = maximum[i-1:end]\n        else\n            break\n      \
    \  end\n    end\n    return maximum\nend\n\"\"\"\n    Given an array arr of integers\
    \ and a positive integer k, return a sorted list \n    of length k with the minimum\
    \ k numbers in arr.", "    if k == 0 \n        return arr\n    \n    maximum =\
    \ maximum(maximum(arr, k-1), k-1)\n    maximum = maximum(maximum, k)\n    \n \
    \   return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be <= length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"k should\
    \ be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        maximum[i] = maximum(maximum, arr[i])\n    end\n\
    \    return maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 10)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 34)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 36)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 38)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 40)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 42)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 43)", "    if k > length(arr)\n        return arr\n   \
    \ end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] >\
    \ maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n       \
    \     break\n        end\n    end\n    return maximum\nend\nmaximum([-3, -4, 5],\
    \ 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n\
    </cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given array.", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr) \n        if maximum[i] > maximum[i-1] \n       \
    \     maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\n\"\"\"\n    Given an array arr\
    \ of integers and a positive integer k, return a sorted list \n    of length k\
    \ with the minimum k numbers in arr.", "    maximum = arr\n    for i = 1:k\n \
    \       maximum = maximum(maximum(maximum, arr), k)\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        return arr\n    end\n    \n    maximum\
    \ = arr[k-1]\n    for i in k+1:length(arr)\n        if arr[i] > maximum\n    \
    \        maximum = arr[i]\n        end\n    end\n    return maximum\nend", " \
    \   if k > length(arr)\n        throw(ArgumentError(\"k should be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    maximum", "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements in the\
    \ given array. \nThe function should take an array arr of integers and an integer\
    \ k.", "    if k > length(arr)\n        throw(ArgumentError(\"k must be less than\
    \ or equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    \"\"\"\n    Given an array arr of integers and a positive integer k, return a\
    \ sorted list \n    of length k with the minimum k numbers in arr.", "    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k should be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to the length of the array\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nmaximum()", "    if k <=\
    \ length(arr)\n        return arr\n    else\n        maximum = maximum([maximum(arr[1:k],\
    \ k), maximum(arr[k+1:end], k)], k-1)\n        return maximum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<code language=julia-1.5>\n\
    maximum(arr, 2)\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 1)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that finds the minimum value in an array.",
  "    if k == 0 \n        return arr\n    \n    maximum = maximum(arr[1:k], k)\n\
    \    maximum[1] = maximum(maximum[1], arr[k])\n    \n    return maximum\nend",
  "    if k == 0 \n        return arr\n    \n    if k == 1 \n        return arr\n\
    \    \n    maximum = maximum(maximum(arr, k-1), k-1)\n    \n    maximum = maximum(maximum(maximum,\
    \ arr), k-1)\n    \n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the minimum number in a given array.", "    if k == 0 \n        return\
    \ arr\n    \n    if k > length(arr) \n        return arr\n    \n    maximum =\
    \ maximum([maximum(arr, k-1), maximum(arr[k-1:end], k)], k-1)\n    \n    return\
    \ maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the minimum number in a given array.", "    if k > length(arr)\
    \ \n        error(\"k should be less than or equal to length(arr)\") \n    else\
    \ \n        maximum = arr[k] \n        for i in k+1:length(arr) \n           \
    \ if maximum < arr[i] \n                maximum = arr[i] \n            end \n\
    \        end \n        return maximum\n    end\nend", "    maximum = arr\n   \
    \ for i = 2:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ minimum number in a given array.", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i in 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n\
    \    end\n    return maximum\nend", "    if k <= 0 || length(arr) <= k \n    \
    \    return arr \n    \n    maximum = arr[1]\n    for i in 2:length(arr) \n  \
    \      if arr[i] > maximum \n            maximum = arr[i] \n        end \n   \
    \ end \n    \n    return maximum::Vector{Int64}\nend ", "    if k <= 0 || length(arr)\
    \ <= k \n        return arr \n    else \n        maximum = maximum([maximum[maximum[k-1]],\
    \ maximum[maximum[k-1]], arr[k]], k-1) \n        return maximum\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<code language=julia-1.3>\nmaximum([4, -4, 4], 2)\n</cell>\n\
    <code language=julia-1.3>\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\n\
    Exercise 3", "    if k == 0 \n        return arr\n    else \n        maximum =\
    \ maximum([maximum, arr[k]], k-1)\n    end\nend", "    if k > length(arr)\n  \
    \      throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    maximum = arr\n \
    \   for i = 1:k\n        maximum = maximum(maximum(maximum, arr), k)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the minimum of an array arr of integers and a positive integer k.", "    if\
    \ k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    end\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ finds the minimum number in a given array of integers. \nThe function should\
    \ take an array arr of integers and a positive integer k as inputs and return\
    \ a sorted list of length k with the minimum k numbers in arr.", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nmaximum()", "    if k >\
    \ length(arr)\n        return arr\n    end\n    maximum = arr[k-1]\n    for i\
    \ in k+1:length(arr)\n        if maximum < arr[i]\n            maximum = arr[i]\n\
    \        end\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4,\
    \ -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 42)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 43)\nmaximum([-3, 2, ", "   \
    \ if k == 0 \n        return arr\n    else \n        maximum = maximum([maximum(arr,\
    \ k-1), maximum(arr, k-1)], k-1)\n        maximum = maximum.*(maximum.>arr[k])\n\
    \        return maximum\n    end\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to the length of the array\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    if k == 0 \n    \
    \    return arr\n    else \n        maximum = maximum(maximum(arr, k-1), k-1)\n\
    \        maximum[end] = maximum(maximum(arr, k-1), k)\n        return maximum\n\
    end", "    if k > length(arr) || k < 1 \n        throw(ArgumentError(\"k must\
    \ be in range [1, length(arr)]\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum = maximum(maximum(maximum, arr[i]), arr[i-1])\n    end\n \
    \   return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 9\n\
    Write a function that returns the minimum number in a given array.", "    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k must be less than or equal to\
    \ length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n \
    \       maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend", "    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum.-1\n        else\n           \
    \ maximum = maximum.+1\n        end\n    end\n    return maximum\nend", "    if\
    \ k == 0 \n        return arr\n    \n    if k > length(arr) \n        error(\"\
    k should be less than or equal to length(arr)\")\n    end\n    \n    maximum =\
    \ arr[1]\n    \n    for i in 2:length(arr) \n        if maximum < arr[i] \n  \
    \          maximum = arr[i]\n        end\n    end\n    \n    return maximum\n\
    end", "    if k > length(arr) \n        throw(ArgumentError(\"k must be less than\
    \ or equal to the length of the array\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr) \n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend", "    if k > length(arr)\n        return arr\n\
    \    \n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] >\
    \ maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n       \
    \     maximum = maximum[i-1:end]\n        end\n    end\n    return maximum\nend\n\
    </cell>\n<code language=julia-1.4>\nmaximum(arr, 3)\n</cell>\n<code language=julia-1.4>\n\
    maximum(arr, 2)\n</cell>\n<code language=julia-1.4>\nmaximum(arr, 1)\n</cell>\n\
    <text>\nExercise 2", "    if k == 0 \n        return arr\n    else \n        maximum\
    \ = maximum(maximum(arr, k-1), k-1)\n        maximum[end] = maximum(maximum(arr,\
    \ k-1), k)\n        return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k should be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend\nmaximum()", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end", "    if k == 0 \n        return arr\n    \n    if k == length(arr)\
    \ \n        return arr\n    \n    maximum = maximum(maximum(arr, k-1), k-1)\n\
    \    maximum = maximum(maximum, k)\n    \n    return maximum\nend", "    if k\
    \ > length(arr)\n        throw(ArgumentError(\"k must be less than or equal to\
    \ the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 2)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 10)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 34)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 36)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 38)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 40)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 41)\nmaximum([", "    if k > length(arr)\n        return\
    \ arr\n    \n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), k)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ number in a given array.", "    if k <= length(arr)\n        maximum = arr\n\
    \    else\n        maximum = maximum[end-1:end]\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        return arr\n    else\n        maximum =\
    \ arr\n        for i = k+1:length(arr)\n            if maximum[i] > maximum[i-1]\n\
    \                maximum = maximum[i-1:end]\n            else\n              \
    \  break\n        end\n        return maximum\n    end\nend\nmaximum([-3, -4,\
    \ 5], 3)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 42)\nmaximum([-3, 2, 1, 2, -1, -2, 1], ", "    if k > length(arr)\n\
    \        return arr\n    elseif k == length(arr)\n        return arr\n    else\n\
    \        maximum = maximum([maximum(arr[1:k], k-1), maximum(arr[k+1:end], k-1)],\
    \ k-1)\n    end\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the minimum number in a given array.", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    return maximum\nend", "    if k <= length(arr)\n\
    \        maximum = arr\n    else\n        maximum = maximum[end-1:end]\n    end\n\
    \    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            push!(maximum, maximum[i])\n\
    \        end\n    end\n    return maximum\nend", "    if k > length(arr)\n   \
    \     return arr\n    \n    maximum = arr\n    for i in 1:k-1\n        maximum\
    \ = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    maximum = maximum(maximum(maximum,\
    \ arr[k-1]), arr[k])\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the minimum number in a given\
    \ array of integers.", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend", "    if k > length(arr) \n  \
    \      throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\nmaximum()", "    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\n\"\"\"\n    Given an array arr\
    \ of integers and a positive integer k, return a sorted list \n    of length k\
    \ with the minimum k numbers in arr.", "    if k == 0 \n        return arr\n \
    \   else \n        maximum = maximum([maximum, arr[k]], k-1)\n        return maximum\n\
    end", "    if k > length(arr)\n        throw(ArgumentError(\"k must be less than\
    \ or equal to the length of the array\"))\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n       \
    \ throw(ArgumentError(\"k must be less than or equal to the length of arr\"))\n\
    \    end\n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        return arr\n    end\n    maximum = arr[k-1]\n    for i in k+1:length(arr)\n\
    \        if maximum < arr[i]\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr) \n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend", "    if k > length(arr)\n     \
    \   throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum =\
    \ maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\nend\n\
    maximum", "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n         \
    \   maximum = maximum[i-1:end]\n        else\n            break\n    end\n   \
    \ return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the minimum number in a given array.", "    if k\
    \ > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n    for i =\
    \ k+1:length(arr)\n        if maximum < arr[i]\n            maximum = arr[i]\n\
    \        end\n    end\n    \n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n\
    </cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n\
    <text>\nExercise 2", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr) \n        maximum[i] = maximum(maximum(maximum, arr[i]),\
    \ maximum[i])\n    end\n    return maximum\nend", "    if k > length(arr)\n  \
    \      throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nmaximum()", "    if k >\
    \ length(arr) \n        throw(ArgumentError(\"k must be less than or equal to\
    \ the length of the array\"))\n    else if k == 0 \n        return arr\n    else\
    \ \n        maximum = maximum(k-1, maximum(arr[1:k], k))\n        maximum = maximum.(maximum.>arr[k])\n\
    \        return maximum\nend\n\"\"\"\n    Given an array arr of integers and a\
    \ positive integer k, return a sorted list \n    of length k with the minimum\
    \ k numbers in arr.", "    if k == 0 \n        return arr\n    else \n       \
    \ maximum = maximum(maximum(arr, k-1), k-1)\n        maximum[end] = maximum(arr[end],\
    \ k-1)\n        return maximum\n    end\nend\n\"\"\"\n    Given an array arr of\
    \ integers and a positive integer k, return a sorted list \n    of length k with\
    \ the minimum k numbers in arr.", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k should be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i in 1:k\n        maximum = maximum(maximum(maximum, arr), arr[i])\n\
    \    end\n    return maximum\nend", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k should be less than or equal to the length of arr\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n \
    \           maximum = maximum[i-1:end]\n        else\n            push!(maximum,\
    \ maximum[i])\n        end\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\n\"\"\"\n    Given\
    \ an array arr of integers and a positive integer k, return a sorted list \n \
    \   of length k with the minimum k numbers in arr.", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i = k+1:length(arr)\n  \
    \      if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n    end\n    return maximum\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<code language=julia-1.4>\nmaximum(maximum([-3, -4, 5],\
    \ 3), 3)\n</cell>\n<code language=julia-1.4>\nmaximum(maximum([4, -4, 4], 2),\
    \ 2)\n</cell>\n<code language=julia-1.4>\nmaximum(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given array of integers.", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i in 1:k\n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend", "    if k > length(arr)\n        return arr\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       maximum = maximum[i-1:end]\n        end\n    end\n    return maximum\n\
    end", "    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum = maximum[maximum.!=arr]\n        return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3), 3)\n\
    </cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n\
    </cell>\n<text>\nExercise 3", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to the length of arr\"))\n    end\n    maximum =\
    \ arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n   \
    \         maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend", "    if k > length(arr)\n   \
    \     throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr[i])\n    end\n    return maximum\nend\n\"\"\"\n    Given an array\
    \ arr of integers and a positive integer k, return a sorted list \n    of length\
    \ k with the minimum k numbers in arr.", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend", "    maximum = arr\n    for i =\
    \ k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n\
    \    end\n    return maximum\nend", "    if k > length(arr)\n        error(\"\
    k must be less than or equal to length(arr)\")\n    end\n    maximum = arr\n \
    \   for i = k+1:length(arr)\n        maximum[i] = maximum(maximum[i], arr[i])\n\
    \    end\n    return maximum\nend", "    if k == 0 \n        return arr \n   \
    \ else \n        maximum = maximum(maximum(arr, k-1), k) \n        maximum[end]\
    \ = maximum(maximum(arr, k-1), k)[end] \n        return maximum \nend\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the minimum of an array of integers arr and a positive\
    \ integer k.", "    if k == 0 \n        return arr\n    \n    if k == 1 \n   \
    \     return arr\n    \n    maximum = maximum(maximum(arr, k-1), k-1)\n    maximum\
    \ = maximum(maximum, k)\n    \n    return maximum\nend", "    if k == 0 \n   \
    \     return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k)\
    \ \n        maximum[end] = maximum[end] + arr[end] \n        return maximum \n\
    end", "    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend", "    if k > length(arr)\n   \
    \     throw(ArgumentError(\"k must be less than or equal to the length of the\
    \ array\"))\n    end", "    if k == 0 \n        return arr \n    else \n     \
    \   maximum = maximum(maximum(arr, k-1), k) \n        maximum[end] = maximum(arr[end],\
    \ k) \n        return maximum \nend\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4,\
    \ 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 42)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 43)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 44)", "    if k > length(arr)\n        return arr\n    \n    maximum = arr\n\
    \    for i = 1:k\n        maximum = maximum(maximum(maximum, arr), k)\n    end\n\
    \    return maximum\nend\nmaximum()", "    if k > length(arr) \n        throw(ArgumentError(\"\
    k should be less than or equal to the length of arr\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr) \n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\n\"\"\"\n    Given an array\
    \ arr of integers and a positive integer k, return a sorted list \n    of length\
    \ k with the minimum k numbers in arr.", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k should be less than or equal to the length of the array\"))\n    end\n    maximum\
    \ = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n \
    \           maximum = maximum[i-1:end]\n        else\n            break\n    \
    \    end\n    end\n    return maximum\nend", "    if k > length(arr)\n       \
    \ error(\"k should be less than or equal to the length of arr\")\n    end\n  \
    \  maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of the\
    \ array\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n       \
    \ if maximum[i] > maximum[i-1]\n            maximum = maximum.(maximum.>arr[i])\n\
    \        else\n            maximum = maximum.(maximum.<arr[i])\n        end\n\
    \    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n       \
    \ throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n    end\n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n\
    maximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 41)\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 42)\nmaximum([-3, 2, 1, 2, -1, ", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of the\
    \ array\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n       \
    \ maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        throw(ArgumentError(\"k should be less\
    \ than or equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum", "    if k > length(arr)\n        return arr\n    end\n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4,\
    \ -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nQ7. Write\
    \ a Julia function that takes a positive integer k and returns the number of \n\
    \    unique elements in arr of length k.", "    if k == 0 \n        return arr\n\
    \    \n    maximum = maximum([maximum, arr[k]], k-1)\n    return maximum\nend",
  "    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n \
    \       for i = k+1:length(arr)\n            if maximum(maximum(maximum, arr[i]),\
    \ arr[i]) < maximum(maximum, arr[i])\n                maximum = maximum(maximum,\
    \ arr[i])\n            else\n                maximum = maximum(maximum, arr[i])\n\
    \            end\n        end\n        return maximum\n    end\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<text>\nExercise 7\nWrite a function that returns the minimum\
    \ number in a given array.", "    if k == 0 \n        return arr\n    else \n\
    \        maximum = maximum([maximum, arr[k]], k-1)\n        return maximum\nend\n\
    </cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that finds the minimum number in a given array of integers.\
    \ \nThe function should take an array of integers and a positive integer k as\
    \ inputs and \nreturn a sorted list of length k with the minimum k numbers in\
    \ arr. \nThe function should return an empty list if k is less than 0.", "   \
    \ if k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend",
  "    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or equal\
    \ to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum.(maximum)\n\
    \        else\n            maximum = maximum.(maximum)\n        end\n    end\n\
    \    return maximum\nend\n\"\"\"\n    Given an array arr of integers and a positive\
    \ integer k, return a sorted list \n    of length k with the minimum k numbers\
    \ in arr.", "    if k > length(arr)\n        return arr\n    else\n        maximum\
    \ = arr\n        for i = k+1:length(arr)\n            if maximum[i] > maximum[i-1]\n\
    \                maximum = maximum[i-1:end]\n            else\n              \
    \  break\n        end\n        return maximum\n    end\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), arr[i+1])\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    if k == 0 \n    \
    \    return arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n\
    \        maximum[end] = arr[end] \n        return maximum \nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([-3, -4, 5],\
    \ 3), 3)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([4, -4, 4], 2),\
    \ 2)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given array of integers. \nThe function should take in a vector\
    \ of integers and a positive integer k. \nThe function should return an array\
    \ with the minimum k numbers in arr. \nThe function should return an empty array\
    \ if k is less than or equal to 0.", "    if k <= 0 || k > length(arr)\n     \
    \   throw(ArgumentError(\"k must be in range [0, length(arr))\"))\n    end\n \
    \   maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend", "    if k > length(arr)\n\
    \        return arr\n    else\n        maximum = maximum([maximum(arr, k-1), maximum(arr[k],\
    \ k)], k-1)\n        return maximum\n    end\nend", "    if k == 0 \n        return\
    \ arr \n    else \n        maximum = maximum(maximum(arr, k-1), k) \n        maximum[end]\
    \ = maximum(arr[end], k) \n        return maximum \nend\n\"\"\"\n    Given an\
    \ array arr of integers and a positive integer k, return a sorted list \n    of\
    \ length k with the minimum k numbers in arr.", "    maximum = arr\n    for i\
    \ = 1:k\n        maximum = maximum(maximum(maximum, arr), k)\n    end\n    return\
    \ maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a positive integer k and returns the k largest elements\
    \ in the array.", "    if k == 0 \n        return arr\n    \n    if k == 1 \n\
    \        return arr\n    \n    maximum = maximum(maximum(arr, k-1), k-1)\n   \
    \ maximum = maximum(maximum, k)\n    maximum = maximum(maximum, maximum(arr, k-1))\n\
    \    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum,\
    \ maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum\
    \ = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr,\
    \ k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum,\
    \ maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum\
    \ = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr,\
    \ k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum,\
    \ maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum\
    \ = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr,\
    \ k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum,\
    \ maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum\
    \ = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr,\
    \ k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum,\
    \ maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum\
    \ = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr,\
    \ k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum,\
    \ maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum\
    \ = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr,\
    \ k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum,\
    \ maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum\
    \ = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr,\
    \ k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum,\
    \ maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum\
    \ = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum, maximum(arr,\
    \ k-1))\n    maximum = maximum(maximum, maximum(arr, k-1))\n    maximum = maximum(maximum,\
    \ maximum(arr, k-1))\n", "    if k > length(arr)\n        throw(ArgumentError(\"\
    k must be less than or equal to length(arr)\"))\n    end\n    maximum = arr\n\
    \    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum, arr[i]),\
    \ maximum)\n    end\n    return maximum\nend\nmaximum", "    if k > length(arr)\n\
    \        return arr\n    \n    maximum = arr\n    for i = 1:k-1\n        maximum\
    \ = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    maximum = maximum(maximum(maximum,\
    \ arr[k]), arr[k+1])\n    return maximum\nend\nmaximum()", "    if k > length(arr)\n\
    \        throw(ArgumentError(\"k must be less than or equal to the length of arr\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i]\
    \ = maximum(maximum, arr[i])\n    end\n    return maximum\nend", "    if k <=\
    \ 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in range [0, length(arr)]\"\
    ))\n    end\n    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    return maximum\nend\n\"\"\"\n    Given an array\
    \ arr of integers and a positive integer k, return a sorted list \n    of length\
    \ k with the minimum k numbers in arr.", "    if k <= 0 || k > length(arr)\n \
    \       throw(ArgumentError(\"k must be in range [0, length(arr)]\"))\n    end\n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n\
    \            maximum = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n\
    \        end\n    end\n    return maximum\nend", "    if k > length(arr)\n   \
    \     throw(ArgumentError(\"k must be less than or equal to length(arr)\"))\n\
    \    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum = maximum(maximum(maximum,\
    \ arr[i]), maximum)\n    end\n    return maximum\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
